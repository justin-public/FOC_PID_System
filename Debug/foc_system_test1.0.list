
foc_system_test1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b68  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c84  08009d50  08009d50  00019d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9d4  0800a9d4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800a9d4  0800a9d4  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a9d4  0800a9d4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9d4  0800a9d4  0001a9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9d8  0800a9d8  0001a9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800a9dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001ec  0800abc8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0800abc8  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3db  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002717  00000000  00000000  0002f633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  00031d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c1e  00000000  00000000  00032cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b962  00000000  00000000  000338ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125fc  00000000  00000000  0004f230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a122b  00000000  00000000  0006182c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005440  00000000  00000000  00102a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00107e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001ec 	.word	0x200001ec
 8000204:	00000000 	.word	0x00000000
 8000208:	08009d38 	.word	0x08009d38

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f0 	.word	0x200001f0
 8000224:	08009d38 	.word	0x08009d38

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__gesf2>:
 800101c:	f04f 3cff 	mov.w	ip, #4294967295
 8001020:	e006      	b.n	8001030 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__lesf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	e002      	b.n	8001030 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__cmpsf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001034:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001038:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800103c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001040:	bf18      	it	ne
 8001042:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001046:	d011      	beq.n	800106c <__cmpsf2+0x40>
 8001048:	b001      	add	sp, #4
 800104a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800104e:	bf18      	it	ne
 8001050:	ea90 0f01 	teqne	r0, r1
 8001054:	bf58      	it	pl
 8001056:	ebb2 0003 	subspl.w	r0, r2, r3
 800105a:	bf88      	it	hi
 800105c:	17c8      	asrhi	r0, r1, #31
 800105e:	bf38      	it	cc
 8001060:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001064:	bf18      	it	ne
 8001066:	f040 0001 	orrne.w	r0, r0, #1
 800106a:	4770      	bx	lr
 800106c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001070:	d102      	bne.n	8001078 <__cmpsf2+0x4c>
 8001072:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001076:	d105      	bne.n	8001084 <__cmpsf2+0x58>
 8001078:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800107c:	d1e4      	bne.n	8001048 <__cmpsf2+0x1c>
 800107e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001082:	d0e1      	beq.n	8001048 <__cmpsf2+0x1c>
 8001084:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <__aeabi_cfrcmple>:
 800108c:	4684      	mov	ip, r0
 800108e:	4608      	mov	r0, r1
 8001090:	4661      	mov	r1, ip
 8001092:	e7ff      	b.n	8001094 <__aeabi_cfcmpeq>

08001094 <__aeabi_cfcmpeq>:
 8001094:	b50f      	push	{r0, r1, r2, r3, lr}
 8001096:	f7ff ffc9 	bl	800102c <__cmpsf2>
 800109a:	2800      	cmp	r0, #0
 800109c:	bf48      	it	mi
 800109e:	f110 0f00 	cmnmi.w	r0, #0
 80010a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a4 <__aeabi_fcmpeq>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff fff4 	bl	8001094 <__aeabi_cfcmpeq>
 80010ac:	bf0c      	ite	eq
 80010ae:	2001      	moveq	r0, #1
 80010b0:	2000      	movne	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmplt>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffea 	bl	8001094 <__aeabi_cfcmpeq>
 80010c0:	bf34      	ite	cc
 80010c2:	2001      	movcc	r0, #1
 80010c4:	2000      	movcs	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmple>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffe0 	bl	8001094 <__aeabi_cfcmpeq>
 80010d4:	bf94      	ite	ls
 80010d6:	2001      	movls	r0, #1
 80010d8:	2000      	movhi	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmpge>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffd2 	bl	800108c <__aeabi_cfrcmple>
 80010e8:	bf94      	ite	ls
 80010ea:	2001      	movls	r0, #1
 80010ec:	2000      	movhi	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmpgt>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffc8 	bl	800108c <__aeabi_cfrcmple>
 80010fc:	bf34      	ite	cc
 80010fe:	2001      	movcc	r0, #1
 8001100:	2000      	movcs	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmpun>:
 8001108:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800110c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001110:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001114:	d102      	bne.n	800111c <__aeabi_fcmpun+0x14>
 8001116:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800111a:	d108      	bne.n	800112e <__aeabi_fcmpun+0x26>
 800111c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001120:	d102      	bne.n	8001128 <__aeabi_fcmpun+0x20>
 8001122:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001126:	d102      	bne.n	800112e <__aeabi_fcmpun+0x26>
 8001128:	f04f 0000 	mov.w	r0, #0
 800112c:	4770      	bx	lr
 800112e:	f04f 0001 	mov.w	r0, #1
 8001132:	4770      	bx	lr

08001134 <__aeabi_f2iz>:
 8001134:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001138:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800113c:	d30f      	bcc.n	800115e <__aeabi_f2iz+0x2a>
 800113e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001142:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001146:	d90d      	bls.n	8001164 <__aeabi_f2iz+0x30>
 8001148:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800114c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001150:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001154:	fa23 f002 	lsr.w	r0, r3, r2
 8001158:	bf18      	it	ne
 800115a:	4240      	negne	r0, r0
 800115c:	4770      	bx	lr
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	4770      	bx	lr
 8001164:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001168:	d101      	bne.n	800116e <__aeabi_f2iz+0x3a>
 800116a:	0242      	lsls	r2, r0, #9
 800116c:	d105      	bne.n	800117a <__aeabi_f2iz+0x46>
 800116e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001172:	bf08      	it	eq
 8001174:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001178:	4770      	bx	lr
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	4770      	bx	lr

08001180 <__aeabi_f2uiz>:
 8001180:	0042      	lsls	r2, r0, #1
 8001182:	d20e      	bcs.n	80011a2 <__aeabi_f2uiz+0x22>
 8001184:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001188:	d30b      	bcc.n	80011a2 <__aeabi_f2uiz+0x22>
 800118a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800118e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001192:	d409      	bmi.n	80011a8 <__aeabi_f2uiz+0x28>
 8001194:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800119c:	fa23 f002 	lsr.w	r0, r3, r2
 80011a0:	4770      	bx	lr
 80011a2:	f04f 0000 	mov.w	r0, #0
 80011a6:	4770      	bx	lr
 80011a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011ac:	d101      	bne.n	80011b2 <__aeabi_f2uiz+0x32>
 80011ae:	0242      	lsls	r2, r0, #9
 80011b0:	d102      	bne.n	80011b8 <__aeabi_f2uiz+0x38>
 80011b2:	f04f 30ff 	mov.w	r0, #4294967295
 80011b6:	4770      	bx	lr
 80011b8:	f04f 0000 	mov.w	r0, #0
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <i2c_Delay>:
#define AS5600_STATUS       0x0B
#define AS5600_MAGNITUDE_H  0x1B
#define AS5600_MAGNITUDE_L  0x1C

void i2c_Delay(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 30; i++);
 80011c6:	2300      	movs	r3, #0
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	e002      	b.n	80011d2 <i2c_Delay+0x12>
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	3301      	adds	r3, #1
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b1d      	cmp	r3, #29
 80011d6:	d9f9      	bls.n	80011cc <i2c_Delay+0xc>
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <i2c_Start>:

void i2c_Start(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	I2C_SDA_1();
 80011e8:	2201      	movs	r2, #1
 80011ea:	2108      	movs	r1, #8
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <i2c_Start+0x3c>)
 80011ee:	f003 fbc0 	bl	8004972 <HAL_GPIO_WritePin>
	I2C_SCL_1();
 80011f2:	2201      	movs	r2, #1
 80011f4:	2102      	movs	r1, #2
 80011f6:	480a      	ldr	r0, [pc, #40]	; (8001220 <i2c_Start+0x3c>)
 80011f8:	f003 fbbb 	bl	8004972 <HAL_GPIO_WritePin>
	i2c_Delay();
 80011fc:	f7ff ffe0 	bl	80011c0 <i2c_Delay>
	I2C_SDA_0();
 8001200:	2200      	movs	r2, #0
 8001202:	2108      	movs	r1, #8
 8001204:	4806      	ldr	r0, [pc, #24]	; (8001220 <i2c_Start+0x3c>)
 8001206:	f003 fbb4 	bl	8004972 <HAL_GPIO_WritePin>
	i2c_Delay();
 800120a:	f7ff ffd9 	bl	80011c0 <i2c_Delay>
	I2C_SCL_0();
 800120e:	2200      	movs	r2, #0
 8001210:	2102      	movs	r1, #2
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <i2c_Start+0x3c>)
 8001214:	f003 fbad 	bl	8004972 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001218:	f7ff ffd2 	bl	80011c0 <i2c_Delay>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40011c00 	.word	0x40011c00

08001224 <i2c_SendByte>:

void i2c_SendByte(uint8_t _ucByte)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 0; i < 8; i++)
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e02c      	b.n	800128e <i2c_SendByte+0x6a>
	{
		if (_ucByte & 0x80)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	da05      	bge.n	8001248 <i2c_SendByte+0x24>
		{
			I2C_SDA_1();
 800123c:	2201      	movs	r2, #1
 800123e:	2108      	movs	r1, #8
 8001240:	4817      	ldr	r0, [pc, #92]	; (80012a0 <i2c_SendByte+0x7c>)
 8001242:	f003 fb96 	bl	8004972 <HAL_GPIO_WritePin>
 8001246:	e004      	b.n	8001252 <i2c_SendByte+0x2e>
		}
		else
		{
			I2C_SDA_0();
 8001248:	2200      	movs	r2, #0
 800124a:	2108      	movs	r1, #8
 800124c:	4814      	ldr	r0, [pc, #80]	; (80012a0 <i2c_SendByte+0x7c>)
 800124e:	f003 fb90 	bl	8004972 <HAL_GPIO_WritePin>
		}
		i2c_Delay();
 8001252:	f7ff ffb5 	bl	80011c0 <i2c_Delay>
		I2C_SCL_1();
 8001256:	2201      	movs	r2, #1
 8001258:	2102      	movs	r1, #2
 800125a:	4811      	ldr	r0, [pc, #68]	; (80012a0 <i2c_SendByte+0x7c>)
 800125c:	f003 fb89 	bl	8004972 <HAL_GPIO_WritePin>
		i2c_Delay();
 8001260:	f7ff ffae 	bl	80011c0 <i2c_Delay>
		I2C_SCL_0();
 8001264:	2200      	movs	r2, #0
 8001266:	2102      	movs	r1, #2
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <i2c_SendByte+0x7c>)
 800126a:	f003 fb82 	bl	8004972 <HAL_GPIO_WritePin>
		if (i == 7)
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	2b07      	cmp	r3, #7
 8001272:	d104      	bne.n	800127e <i2c_SendByte+0x5a>
		{
			 I2C_SDA_1();
 8001274:	2201      	movs	r2, #1
 8001276:	2108      	movs	r1, #8
 8001278:	4809      	ldr	r0, [pc, #36]	; (80012a0 <i2c_SendByte+0x7c>)
 800127a:	f003 fb7a 	bl	8004972 <HAL_GPIO_WritePin>
		}
		_ucByte <<= 1;
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	71fb      	strb	r3, [r7, #7]
		i2c_Delay();
 8001284:	f7ff ff9c 	bl	80011c0 <i2c_Delay>
	for (i = 0; i < 8; i++)
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	3301      	adds	r3, #1
 800128c:	73fb      	strb	r3, [r7, #15]
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	2b07      	cmp	r3, #7
 8001292:	d9cf      	bls.n	8001234 <i2c_SendByte+0x10>
	}
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40011c00 	.word	0x40011c00

080012a4 <i2c_ReadByte>:

uint8_t i2c_ReadByte(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t value;

	value = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	71bb      	strb	r3, [r7, #6]

	for (i = 0; i < 8; i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	e01d      	b.n	80012f0 <i2c_ReadByte+0x4c>
	{
		value <<= 1;
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	71bb      	strb	r3, [r7, #6]
		I2C_SCL_1();
 80012ba:	2201      	movs	r2, #1
 80012bc:	2102      	movs	r1, #2
 80012be:	4810      	ldr	r0, [pc, #64]	; (8001300 <i2c_ReadByte+0x5c>)
 80012c0:	f003 fb57 	bl	8004972 <HAL_GPIO_WritePin>
		i2c_Delay();
 80012c4:	f7ff ff7c 	bl	80011c0 <i2c_Delay>
		if (I2C_SDA_READ())
 80012c8:	2108      	movs	r1, #8
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <i2c_ReadByte+0x5c>)
 80012cc:	f003 fb3a 	bl	8004944 <HAL_GPIO_ReadPin>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d102      	bne.n	80012dc <i2c_ReadByte+0x38>
		{
			value++;
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	3301      	adds	r3, #1
 80012da:	71bb      	strb	r3, [r7, #6]
		}
		I2C_SCL_0();
 80012dc:	2200      	movs	r2, #0
 80012de:	2102      	movs	r1, #2
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <i2c_ReadByte+0x5c>)
 80012e2:	f003 fb46 	bl	8004972 <HAL_GPIO_WritePin>
		i2c_Delay();
 80012e6:	f7ff ff6b 	bl	80011c0 <i2c_Delay>
	for (i = 0; i < 8; i++)
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	3301      	adds	r3, #1
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b07      	cmp	r3, #7
 80012f4:	d9de      	bls.n	80012b4 <i2c_ReadByte+0x10>
	}
	return value;
 80012f6:	79bb      	ldrb	r3, [r7, #6]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40011c00 	.word	0x40011c00

08001304 <i2c_WaitAck>:

uint8_t i2c_WaitAck(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
	uint8_t re;

	I2C_SDA_1();
 800130a:	2201      	movs	r2, #1
 800130c:	2108      	movs	r1, #8
 800130e:	4812      	ldr	r0, [pc, #72]	; (8001358 <i2c_WaitAck+0x54>)
 8001310:	f003 fb2f 	bl	8004972 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001314:	f7ff ff54 	bl	80011c0 <i2c_Delay>
	I2C_SCL_1();
 8001318:	2201      	movs	r2, #1
 800131a:	2102      	movs	r1, #2
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <i2c_WaitAck+0x54>)
 800131e:	f003 fb28 	bl	8004972 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001322:	f7ff ff4d 	bl	80011c0 <i2c_Delay>
	if (I2C_SDA_READ())
 8001326:	2108      	movs	r1, #8
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <i2c_WaitAck+0x54>)
 800132a:	f003 fb0b 	bl	8004944 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	2b01      	cmp	r3, #1
 8001332:	d102      	bne.n	800133a <i2c_WaitAck+0x36>
	{
		re = 1;
 8001334:	2301      	movs	r3, #1
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	e001      	b.n	800133e <i2c_WaitAck+0x3a>
	}
	else
	{
		re = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	71fb      	strb	r3, [r7, #7]
	}
	I2C_SCL_0();
 800133e:	2200      	movs	r2, #0
 8001340:	2102      	movs	r1, #2
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <i2c_WaitAck+0x54>)
 8001344:	f003 fb15 	bl	8004972 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001348:	f7ff ff3a 	bl	80011c0 <i2c_Delay>
	return re;
 800134c:	79fb      	ldrb	r3, [r7, #7]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40011c00 	.word	0x40011c00

0800135c <i2c_NAck>:
	i2c_Delay();
	I2C_SDA_1();
}

void i2c_NAck(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	I2C_SDA_1();
 8001360:	2201      	movs	r2, #1
 8001362:	2108      	movs	r1, #8
 8001364:	480a      	ldr	r0, [pc, #40]	; (8001390 <i2c_NAck+0x34>)
 8001366:	f003 fb04 	bl	8004972 <HAL_GPIO_WritePin>
	i2c_Delay();
 800136a:	f7ff ff29 	bl	80011c0 <i2c_Delay>
	I2C_SCL_1();
 800136e:	2201      	movs	r2, #1
 8001370:	2102      	movs	r1, #2
 8001372:	4807      	ldr	r0, [pc, #28]	; (8001390 <i2c_NAck+0x34>)
 8001374:	f003 fafd 	bl	8004972 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001378:	f7ff ff22 	bl	80011c0 <i2c_Delay>
	I2C_SCL_0();
 800137c:	2200      	movs	r2, #0
 800137e:	2102      	movs	r1, #2
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <i2c_NAck+0x34>)
 8001382:	f003 faf6 	bl	8004972 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001386:	f7ff ff1b 	bl	80011c0 <i2c_Delay>
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40011c00 	.word	0x40011c00

08001394 <i2c_Stop>:

void i2c_Stop(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	I2C_SDA_0();
 8001398:	2200      	movs	r2, #0
 800139a:	2108      	movs	r1, #8
 800139c:	4808      	ldr	r0, [pc, #32]	; (80013c0 <i2c_Stop+0x2c>)
 800139e:	f003 fae8 	bl	8004972 <HAL_GPIO_WritePin>
	I2C_SCL_1();
 80013a2:	2201      	movs	r2, #1
 80013a4:	2102      	movs	r1, #2
 80013a6:	4806      	ldr	r0, [pc, #24]	; (80013c0 <i2c_Stop+0x2c>)
 80013a8:	f003 fae3 	bl	8004972 <HAL_GPIO_WritePin>
	i2c_Delay();
 80013ac:	f7ff ff08 	bl	80011c0 <i2c_Delay>
	I2C_SDA_1();
 80013b0:	2201      	movs	r2, #1
 80013b2:	2108      	movs	r1, #8
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <i2c_Stop+0x2c>)
 80013b6:	f003 fadc 	bl	8004972 <HAL_GPIO_WritePin>
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40011c00 	.word	0x40011c00

080013c4 <bsp_InitI2C>:

void bsp_InitI2C(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_GPIOF_CLK_ENABLE();
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <bsp_InitI2C+0x48>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	4a0f      	ldr	r2, [pc, #60]	; (800140c <bsp_InitI2C+0x48>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d4:	6193      	str	r3, [r2, #24]
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <bsp_InitI2C+0x48>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80013e2:	2311      	movs	r3, #17
 80013e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pin = I2C_SCL_PIN | I2C_SDA_PIN;
 80013ee:	230a      	movs	r3, #10
 80013f0:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_Init(GPIO_PORT_I2C, &GPIO_InitStructure);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <bsp_InitI2C+0x4c>)
 80013fa:	f003 f90f 	bl	800461c <HAL_GPIO_Init>

	i2c_Stop();
 80013fe:	f7ff ffc9 	bl	8001394 <i2c_Stop>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	40011c00 	.word	0x40011c00

08001414 <i2c_CheckDevice>:

uint8_t i2c_CheckDevice(uint8_t _Address)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
    uint8_t ucAck;

    //printf("AS5600 디바이스 체크 중...\n");
    //printf("7비트 주소: 0x%02X\n", _Address);

    if (I2C_SDA_READ() && I2C_SCL_READ())
 800141e:	2108      	movs	r1, #8
 8001420:	4816      	ldr	r0, [pc, #88]	; (800147c <i2c_CheckDevice+0x68>)
 8001422:	f003 fa8f 	bl	8004944 <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d121      	bne.n	8001470 <i2c_CheckDevice+0x5c>
 800142c:	2102      	movs	r1, #2
 800142e:	4813      	ldr	r0, [pc, #76]	; (800147c <i2c_CheckDevice+0x68>)
 8001430:	f003 fa88 	bl	8004944 <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	2b01      	cmp	r3, #1
 8001438:	d11a      	bne.n	8001470 <i2c_CheckDevice+0x5c>
    {
        //printf("I2C 버스 상태 정상\n");

        i2c_Start();
 800143a:	f7ff fed3 	bl	80011e4 <i2c_Start>
        //printf("START 신호 전송\n");

        uint8_t write_addr = (_Address << 1) | I2C_WR;  // I2C 주소 체계는 7비트 , 8비트 주소 생성 필요
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
        i2c_SendByte(write_addr);
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff feec 	bl	8001224 <i2c_SendByte>
        //printf("8비트 주소 0x%02X 전송\n", write_addr);

        ucAck = i2c_WaitAck();
 800144c:	f7ff ff5a 	bl	8001304 <i2c_WaitAck>
 8001450:	4603      	mov	r3, r0
 8001452:	73bb      	strb	r3, [r7, #14]
        //printf("ACK 응답: %d\n", ucAck);

        if(ucAck == 0){
 8001454:	7bbb      	ldrb	r3, [r7, #14]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d103      	bne.n	8001462 <i2c_CheckDevice+0x4e>
            printf("AS5600 확인!\n");
 800145a:	4809      	ldr	r0, [pc, #36]	; (8001480 <i2c_CheckDevice+0x6c>)
 800145c:	f005 fe38 	bl	80070d0 <puts>
 8001460:	e002      	b.n	8001468 <i2c_CheckDevice+0x54>
        }
        else
        {
            printf("AS5600 확인 실패!\n");
 8001462:	4808      	ldr	r0, [pc, #32]	; (8001484 <i2c_CheckDevice+0x70>)
 8001464:	f005 fe34 	bl	80070d0 <puts>
        }

        i2c_Stop();
 8001468:	f7ff ff94 	bl	8001394 <i2c_Stop>

        return ucAck;
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	e000      	b.n	8001472 <i2c_CheckDevice+0x5e>
    }
    return 1;
 8001470:	2301      	movs	r3, #1
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40011c00 	.word	0x40011c00
 8001480:	08009d50 	.word	0x08009d50
 8001484:	08009d60 	.word	0x08009d60

08001488 <AS5600_ReadRegister>:

uint8_t AS5600_ReadRegister(uint8_t reg_addr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0xFF;
 8001492:	23ff      	movs	r3, #255	; 0xff
 8001494:	73fb      	strb	r3, [r7, #15]
	uint8_t ack;

	i2c_Start();
 8001496:	f7ff fea5 	bl	80011e4 <i2c_Start>

	i2c_SendByte(AS5600_WRITE);
 800149a:	206c      	movs	r0, #108	; 0x6c
 800149c:	f7ff fec2 	bl	8001224 <i2c_SendByte>
	ack = i2c_WaitAck();
 80014a0:	f7ff ff30 	bl	8001304 <i2c_WaitAck>
 80014a4:	4603      	mov	r3, r0
 80014a6:	73bb      	strb	r3, [r7, #14]
	if(ack != 0){
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <AS5600_ReadRegister+0x2e>
		i2c_Stop();
 80014ae:	f7ff ff71 	bl	8001394 <i2c_Stop>
		return 0xFF;  // 오류
 80014b2:	23ff      	movs	r3, #255	; 0xff
 80014b4:	e027      	b.n	8001506 <AS5600_ReadRegister+0x7e>
	}

	i2c_SendByte(reg_addr);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff feb3 	bl	8001224 <i2c_SendByte>
	ack = i2c_WaitAck();
 80014be:	f7ff ff21 	bl	8001304 <i2c_WaitAck>
 80014c2:	4603      	mov	r3, r0
 80014c4:	73bb      	strb	r3, [r7, #14]
	if (ack != 0) {
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <AS5600_ReadRegister+0x4c>
		i2c_Stop();
 80014cc:	f7ff ff62 	bl	8001394 <i2c_Stop>
	    return 0xFF;  // 오류
 80014d0:	23ff      	movs	r3, #255	; 0xff
 80014d2:	e018      	b.n	8001506 <AS5600_ReadRegister+0x7e>
	}

	i2c_Start();
 80014d4:	f7ff fe86 	bl	80011e4 <i2c_Start>
	i2c_SendByte(AS5600_READ);
 80014d8:	206d      	movs	r0, #109	; 0x6d
 80014da:	f7ff fea3 	bl	8001224 <i2c_SendByte>
	ack = i2c_WaitAck();
 80014de:	f7ff ff11 	bl	8001304 <i2c_WaitAck>
 80014e2:	4603      	mov	r3, r0
 80014e4:	73bb      	strb	r3, [r7, #14]
	if (ack != 0) {
 80014e6:	7bbb      	ldrb	r3, [r7, #14]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <AS5600_ReadRegister+0x6c>
		i2c_Stop();
 80014ec:	f7ff ff52 	bl	8001394 <i2c_Stop>
	    return 0xFF;  // 오류
 80014f0:	23ff      	movs	r3, #255	; 0xff
 80014f2:	e008      	b.n	8001506 <AS5600_ReadRegister+0x7e>
	}

	data = i2c_ReadByte();
 80014f4:	f7ff fed6 	bl	80012a4 <i2c_ReadByte>
 80014f8:	4603      	mov	r3, r0
 80014fa:	73fb      	strb	r3, [r7, #15]
	i2c_NAck();  // 마지막 바이트이므로 NACK
 80014fc:	f7ff ff2e 	bl	800135c <i2c_NAck>
	i2c_Stop();
 8001500:	f7ff ff48 	bl	8001394 <i2c_Stop>

	return data;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <AS5600_ReadRawAngle>:

uint16_t AS5600_ReadRawAngle(void)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
    uint8_t high_byte, low_byte;
    uint16_t raw_angle;

    // 상위 바이트 읽기
    high_byte = AS5600_ReadRegister(AS5600_RAW_ANGLE_H);
 8001514:	200c      	movs	r0, #12
 8001516:	f7ff ffb7 	bl	8001488 <AS5600_ReadRegister>
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
    if (high_byte == 0xFF) {
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2bff      	cmp	r3, #255	; 0xff
 8001522:	d102      	bne.n	800152a <AS5600_ReadRawAngle+0x1c>
        return 0xFFFF;  // 오류
 8001524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001528:	e016      	b.n	8001558 <AS5600_ReadRawAngle+0x4a>
    }

    // 하위 바이트 읽기
    low_byte = AS5600_ReadRegister(AS5600_RAW_ANGLE_L);
 800152a:	200d      	movs	r0, #13
 800152c:	f7ff ffac 	bl	8001488 <AS5600_ReadRegister>
 8001530:	4603      	mov	r3, r0
 8001532:	71bb      	strb	r3, [r7, #6]
    if (low_byte == 0xFF) {
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	2bff      	cmp	r3, #255	; 0xff
 8001538:	d102      	bne.n	8001540 <AS5600_ReadRawAngle+0x32>
        return 0xFFFF;  // 오류
 800153a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800153e:	e00b      	b.n	8001558 <AS5600_ReadRawAngle+0x4a>
    }

    // 12비트 각도 조합 (상위 4비트 + 하위 8비트)
    raw_angle = ((uint16_t)(high_byte & 0x0F) << 8) | low_byte;
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b21b      	sxth	r3, r3
 8001546:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800154a:	b21a      	sxth	r2, r3
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	b21b      	sxth	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b21b      	sxth	r3, r3
 8001554:	80bb      	strh	r3, [r7, #4]

    return raw_angle;
 8001556:	88bb      	ldrh	r3, [r7, #4]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <AS5600_CheckStatus>:

/**
 * AS5600 상태 확인
 */
void AS5600_CheckStatus(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
    uint8_t status = AS5600_ReadRegister(AS5600_STATUS);
 8001566:	200b      	movs	r0, #11
 8001568:	f7ff ff8e 	bl	8001488 <AS5600_ReadRegister>
 800156c:	4603      	mov	r3, r0
 800156e:	71fb      	strb	r3, [r7, #7]

    printf("AS5600 상태 레지스터: 0x%02X\n", status);
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	4619      	mov	r1, r3
 8001574:	4818      	ldr	r0, [pc, #96]	; (80015d8 <AS5600_CheckStatus+0x78>)
 8001576:	f005 fd45 	bl	8007004 <iprintf>

    if (status != 0xFF) {
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2bff      	cmp	r3, #255	; 0xff
 800157e:	d024      	beq.n	80015ca <AS5600_CheckStatus+0x6a>
        if (status & 0x20) {
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 0320 	and.w	r3, r3, #32
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <AS5600_CheckStatus+0x32>
            printf("✅ 자석 감지됨\n");
 800158a:	4814      	ldr	r0, [pc, #80]	; (80015dc <AS5600_CheckStatus+0x7c>)
 800158c:	f005 fda0 	bl	80070d0 <puts>
 8001590:	e002      	b.n	8001598 <AS5600_CheckStatus+0x38>
        } else {
            printf("⚠️  자석 감지 안됨\n");
 8001592:	4813      	ldr	r0, [pc, #76]	; (80015e0 <AS5600_CheckStatus+0x80>)
 8001594:	f005 fd9c 	bl	80070d0 <puts>
        }

        if (status & 0x10) {
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <AS5600_CheckStatus+0x48>
            printf("⚠️  자석이 너무 강함\n");
 80015a2:	4810      	ldr	r0, [pc, #64]	; (80015e4 <AS5600_CheckStatus+0x84>)
 80015a4:	f005 fd94 	bl	80070d0 <puts>
        }

        if (status & 0x08) {
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <AS5600_CheckStatus+0x58>
            printf("⚠️  자석이 너무 약함\n");
 80015b2:	480d      	ldr	r0, [pc, #52]	; (80015e8 <AS5600_CheckStatus+0x88>)
 80015b4:	f005 fd8c 	bl	80070d0 <puts>
        }

        if ((status & 0x18) == 0) {
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 0318 	and.w	r3, r3, #24
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <AS5600_CheckStatus+0x70>
            printf("✅ 자석 강도 적절함\n");
 80015c2:	480a      	ldr	r0, [pc, #40]	; (80015ec <AS5600_CheckStatus+0x8c>)
 80015c4:	f005 fd84 	bl	80070d0 <puts>
        }
    } else {
        printf("❌ 상태 레지스터 읽기 실패\n");
    }
}
 80015c8:	e002      	b.n	80015d0 <AS5600_CheckStatus+0x70>
        printf("❌ 상태 레지스터 읽기 실패\n");
 80015ca:	4809      	ldr	r0, [pc, #36]	; (80015f0 <AS5600_CheckStatus+0x90>)
 80015cc:	f005 fd80 	bl	80070d0 <puts>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	08009d78 	.word	0x08009d78
 80015dc:	08009d9c 	.word	0x08009d9c
 80015e0:	08009db4 	.word	0x08009db4
 80015e4:	08009dd4 	.word	0x08009dd4
 80015e8:	08009df4 	.word	0x08009df4
 80015ec:	08009e14 	.word	0x08009e14
 80015f0:	08009e30 	.word	0x08009e30

080015f4 <AS5600_CheckMagnitude>:

/**
 * AS5600 자기장 강도 확인
 */
void AS5600_CheckMagnitude(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
    uint8_t mag_h = AS5600_ReadRegister(AS5600_MAGNITUDE_H);
 80015fa:	201b      	movs	r0, #27
 80015fc:	f7ff ff44 	bl	8001488 <AS5600_ReadRegister>
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
    uint8_t mag_l = AS5600_ReadRegister(AS5600_MAGNITUDE_L);
 8001604:	201c      	movs	r0, #28
 8001606:	f7ff ff3f 	bl	8001488 <AS5600_ReadRegister>
 800160a:	4603      	mov	r3, r0
 800160c:	71bb      	strb	r3, [r7, #6]

    if (mag_h != 0xFF && mag_l != 0xFF) {
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	2bff      	cmp	r3, #255	; 0xff
 8001612:	d01e      	beq.n	8001652 <AS5600_CheckMagnitude+0x5e>
 8001614:	79bb      	ldrb	r3, [r7, #6]
 8001616:	2bff      	cmp	r3, #255	; 0xff
 8001618:	d01b      	beq.n	8001652 <AS5600_CheckMagnitude+0x5e>
        uint16_t magnitude = ((uint16_t)(mag_h & 0x0F) << 8) | mag_l;
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b21b      	sxth	r3, r3
 8001620:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001624:	b21a      	sxth	r2, r3
 8001626:	79bb      	ldrb	r3, [r7, #6]
 8001628:	b21b      	sxth	r3, r3
 800162a:	4313      	orrs	r3, r2
 800162c:	b21b      	sxth	r3, r3
 800162e:	80bb      	strh	r3, [r7, #4]
        printf("자기장 강도: %d\n", magnitude);
 8001630:	88bb      	ldrh	r3, [r7, #4]
 8001632:	4619      	mov	r1, r3
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <AS5600_CheckMagnitude+0x70>)
 8001636:	f005 fce5 	bl	8007004 <iprintf>

        if (magnitude > 2000) {
 800163a:	88bb      	ldrh	r3, [r7, #4]
 800163c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001640:	d903      	bls.n	800164a <AS5600_CheckMagnitude+0x56>
            printf("✅ 자기장 강도 양호\n");
 8001642:	4809      	ldr	r0, [pc, #36]	; (8001668 <AS5600_CheckMagnitude+0x74>)
 8001644:	f005 fd44 	bl	80070d0 <puts>
    if (mag_h != 0xFF && mag_l != 0xFF) {
 8001648:	e007      	b.n	800165a <AS5600_CheckMagnitude+0x66>
        } else {
            printf("⚠️  자기장 강도 약함 - 자석을 가까이 가져다 대세요\n");
 800164a:	4808      	ldr	r0, [pc, #32]	; (800166c <AS5600_CheckMagnitude+0x78>)
 800164c:	f005 fd40 	bl	80070d0 <puts>
    if (mag_h != 0xFF && mag_l != 0xFF) {
 8001650:	e003      	b.n	800165a <AS5600_CheckMagnitude+0x66>
        }
    } else {
        printf("❌ 자기장 강도 읽기 실패\n");
 8001652:	4807      	ldr	r0, [pc, #28]	; (8001670 <AS5600_CheckMagnitude+0x7c>)
 8001654:	f005 fd3c 	bl	80070d0 <puts>
    }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	08009e58 	.word	0x08009e58
 8001668:	08009e70 	.word	0x08009e70
 800166c:	08009e8c 	.word	0x08009e8c
 8001670:	08009ed8 	.word	0x08009ed8

08001674 <AS5600_FullTest>:

/**
 * AS5600 전체 테스트
 */
void AS5600_FullTest(void)
{
 8001674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001678:	b088      	sub	sp, #32
 800167a:	af04      	add	r7, sp, #16
    printf("\n=== AS5600 전체 테스트 ===\n");
 800167c:	4836      	ldr	r0, [pc, #216]	; (8001758 <AS5600_FullTest+0xe4>)
 800167e:	f005 fd27 	bl	80070d0 <puts>
        //printf("AS5600 연결 실패 - 테스트 중단\n");
        //return;
    //}

    // 2. 상태 확인
    AS5600_CheckStatus();
 8001682:	f7ff ff6d 	bl	8001560 <AS5600_CheckStatus>

    // 3. 자기장 강도 확인
    AS5600_CheckMagnitude();
 8001686:	f7ff ffb5 	bl	80015f4 <AS5600_CheckMagnitude>

    // 4. 각도 읽기 테스트 (10회)
    printf("\n--- 각도 읽기 테스트 ---\n");
 800168a:	4834      	ldr	r0, [pc, #208]	; (800175c <AS5600_FullTest+0xe8>)
 800168c:	f005 fd20 	bl	80070d0 <puts>
    for (int i = 0; i < 10; i++) {
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	e054      	b.n	8001740 <AS5600_FullTest+0xcc>
        uint16_t raw_angle = AS5600_ReadRawAngle();
 8001696:	f7ff ff3a 	bl	800150e <AS5600_ReadRawAngle>
 800169a:	4603      	mov	r3, r0
 800169c:	817b      	strh	r3, [r7, #10]

        if (raw_angle != 0xFFFF) {
 800169e:	897b      	ldrh	r3, [r7, #10]
 80016a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d03e      	beq.n	8001726 <AS5600_FullTest+0xb2>
            float angle_deg = (raw_angle * 360.0f) / 4096.0f;
 80016a8:	897b      	ldrh	r3, [r7, #10]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fb12 	bl	8000cd4 <__aeabi_i2f>
 80016b0:	4603      	mov	r3, r0
 80016b2:	492b      	ldr	r1, [pc, #172]	; (8001760 <AS5600_FullTest+0xec>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fb61 	bl	8000d7c <__aeabi_fmul>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fc0f 	bl	8000ee4 <__aeabi_fdiv>
 80016c6:	4603      	mov	r3, r0
 80016c8:	607b      	str	r3, [r7, #4]
            float angle_rad = (raw_angle * 2.0f * 3.14159f) / 4096.0f;
 80016ca:	897b      	ldrh	r3, [r7, #10]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fb01 	bl	8000cd4 <__aeabi_i2f>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4619      	mov	r1, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fa48 	bl	8000b6c <__addsf3>
 80016dc:	4603      	mov	r3, r0
 80016de:	4921      	ldr	r1, [pc, #132]	; (8001764 <AS5600_FullTest+0xf0>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fb4b 	bl	8000d7c <__aeabi_fmul>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fbf9 	bl	8000ee4 <__aeabi_fdiv>
 80016f2:	4603      	mov	r3, r0
 80016f4:	603b      	str	r3, [r7, #0]

            printf("읽기 %d: Raw=%d, 각도=%.1f°, %.3f rad\n", i+1, raw_angle, angle_deg, angle_rad);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1c5e      	adds	r6, r3, #1
 80016fa:	f8b7 800a 	ldrh.w	r8, [r7, #10]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7fe fefe 	bl	8000500 <__aeabi_f2d>
 8001704:	4604      	mov	r4, r0
 8001706:	460d      	mov	r5, r1
 8001708:	6838      	ldr	r0, [r7, #0]
 800170a:	f7fe fef9 	bl	8000500 <__aeabi_f2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001716:	e9cd 4500 	strd	r4, r5, [sp]
 800171a:	4642      	mov	r2, r8
 800171c:	4631      	mov	r1, r6
 800171e:	4812      	ldr	r0, [pc, #72]	; (8001768 <AS5600_FullTest+0xf4>)
 8001720:	f005 fc70 	bl	8007004 <iprintf>
 8001724:	e005      	b.n	8001732 <AS5600_FullTest+0xbe>
        } else {
            printf("읽기 %d: 실패\n", i+1);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3301      	adds	r3, #1
 800172a:	4619      	mov	r1, r3
 800172c:	480f      	ldr	r0, [pc, #60]	; (800176c <AS5600_FullTest+0xf8>)
 800172e:	f005 fc69 	bl	8007004 <iprintf>
        }

        HAL_Delay(500);  // 0.5초 간격
 8001732:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001736:	f001 fdab 	bl	8003290 <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3301      	adds	r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b09      	cmp	r3, #9
 8001744:	dda7      	ble.n	8001696 <AS5600_FullTest+0x22>
    }

    printf("\n자석을 천천히 돌려보세요...\n");
 8001746:	480a      	ldr	r0, [pc, #40]	; (8001770 <AS5600_FullTest+0xfc>)
 8001748:	f005 fcc2 	bl	80070d0 <puts>
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001756:	bf00      	nop
 8001758:	08009efc 	.word	0x08009efc
 800175c:	08009f20 	.word	0x08009f20
 8001760:	43b40000 	.word	0x43b40000
 8001764:	40490fd0 	.word	0x40490fd0
 8001768:	08009f44 	.word	0x08009f44
 800176c:	08009f70 	.word	0x08009f70
 8001770:	08009f84 	.word	0x08009f84

08001774 <_write>:
float electrical_angle = 0.0f;			// 전기적 각도 변수
float mechanical_angle = 0.0f;			// 기계적 각도 변수
float current_velocity = 0.0f;
float target_velocity = 0.0f;			// 초기값을 0으로 설정

int _write(int fd, char *ptr, int len) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d002      	beq.n	800178c <_write+0x18>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d111      	bne.n	80017b0 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	b29a      	uxth	r2, r3
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	4809      	ldr	r0, [pc, #36]	; (80017bc <_write+0x48>)
 8001798:	f004 fd3f 	bl	800621a <HAL_UART_Transmit>
 800179c:	4603      	mov	r3, r0
 800179e:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <_write+0x36>
            return len;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	e004      	b.n	80017b4 <_write+0x40>
        else
            return -1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e001      	b.n	80017b4 <_write+0x40>
    }
    return -1;
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200002c4 	.word	0x200002c4

080017c0 <main>:


int main(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
	HAL_Init();
 80017c6:	f001 fd01 	bl	80031cc <HAL_Init>

	SystemClock_Config();
 80017ca:	f001 f857 	bl	800287c <SystemClock_Config>
	MX_GPIO_Init();
 80017ce:	f001 f8b3 	bl	8002938 <MX_GPIO_Init>
	MX_DMA_Init();
 80017d2:	f001 f963 	bl	8002a9c <MX_DMA_Init>
	MX_ADC3_Init();
 80017d6:	f001 f8fb 	bl	80029d0 <MX_ADC3_Init>
	MX_TIM1_Init();
 80017da:	f001 f9ab 	bl	8002b34 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 80017de:	f001 fa65 	bl	8002cac <MX_USART2_UART_Init>
	bsp_InitI2C();
 80017e2:	f7ff fdef 	bl	80013c4 <bsp_InitI2C>

	motor_disable();
 80017e6:	f000 f929 	bl	8001a3c <motor_disable>
	Current_Sensor_Init();
 80017ea:	f000 fa01 	bl	8001bf0 <Current_Sensor_Init>

	uint8_t result = i2c_CheckDevice(0x36);  // AS5600 주소
 80017ee:	2036      	movs	r0, #54	; 0x36
 80017f0:	f7ff fe10 	bl	8001414 <i2c_CheckDevice>
 80017f4:	4603      	mov	r3, r0
 80017f6:	74fb      	strb	r3, [r7, #19]
	if(result == 0){
 80017f8:	7cfb      	ldrb	r3, [r7, #19]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d103      	bne.n	8001806 <main+0x46>
		printf("AS5600 detect! \r\n");
 80017fe:	483a      	ldr	r0, [pc, #232]	; (80018e8 <main+0x128>)
 8001800:	f005 fc66 	bl	80070d0 <puts>
 8001804:	e002      	b.n	800180c <main+0x4c>
	}
	else{
		printf("AS5600 not detect! \r\n");
 8001806:	4839      	ldr	r0, [pc, #228]	; (80018ec <main+0x12c>)
 8001808:	f005 fc62 	bl	80070d0 <puts>
	}

	AS5600_FullTest();
 800180c:	f7ff ff32 	bl	8001674 <AS5600_FullTest>

	pwm_period = htim1.Init.Period;
 8001810:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <main+0x130>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	4a37      	ldr	r2, [pc, #220]	; (80018f4 <main+0x134>)
 8001816:	6013      	str	r3, [r2, #0]

	//PWM 시작
	set_pwm_duty(0.5f, 0.5f, 0.5f);
 8001818:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800181c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001820:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001824:	f000 f86e 	bl	8001904 <set_pwm_duty>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001828:	2100      	movs	r1, #0
 800182a:	4831      	ldr	r0, [pc, #196]	; (80018f0 <main+0x130>)
 800182c:	f003 ffba 	bl	80057a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001830:	2104      	movs	r1, #4
 8001832:	482f      	ldr	r0, [pc, #188]	; (80018f0 <main+0x130>)
 8001834:	f003 ffb6 	bl	80057a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001838:	2108      	movs	r1, #8
 800183a:	482d      	ldr	r0, [pc, #180]	; (80018f0 <main+0x130>)
 800183c:	f003 ffb2 	bl	80057a4 <HAL_TIM_PWM_Start>

	motor_enable();
 8001840:	f000 f8ea 	bl	8001a18 <motor_enable>


	float desired_velocity = 5.0f;  // 최종 원하는 속도
 8001844:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <main+0x138>)
 8001846:	60fb      	str	r3, [r7, #12]
	target_velocity = 0.0f;
 8001848:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <main+0x13c>)
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

	uint32_t foccontrol_time = HAL_GetTick();
 8001850:	f001 fd14 	bl	800327c <HAL_GetTick>
 8001854:	6178      	str	r0, [r7, #20]
	//uint32_t velocity_change_time = HAL_GetTick();

	while(1)
	{
		// 5ms = 200Hz
		if(HAL_GetTick() - foccontrol_time >= 5) {
 8001856:	f001 fd11 	bl	800327c <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b04      	cmp	r3, #4
 8001862:	d904      	bls.n	800186e <main+0xae>
			FOC_control();
 8001864:	f000 fa0e 	bl	8001c84 <FOC_control>
			foccontrol_time = HAL_GetTick();
 8001868:	f001 fd08 	bl	800327c <HAL_GetTick>
 800186c:	6178      	str	r0, [r7, #20]
		}

		float max_acceleration = 8.0f;  // 10 rad/s² 최대 가속도
 800186e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001872:	60bb      	str	r3, [r7, #8]
		float velocity_error = desired_velocity - target_velocity;
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <main+0x13c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f7ff f974 	bl	8000b68 <__aeabi_fsub>
 8001880:	4603      	mov	r3, r0
 8001882:	607b      	str	r3, [r7, #4]
		float max_change = max_acceleration * 0.005f;  // 5ms 간격
 8001884:	491e      	ldr	r1, [pc, #120]	; (8001900 <main+0x140>)
 8001886:	68b8      	ldr	r0, [r7, #8]
 8001888:	f7ff fa78 	bl	8000d7c <__aeabi_fmul>
 800188c:	4603      	mov	r3, r0
 800188e:	603b      	str	r3, [r7, #0]

		if(fabsf(velocity_error) > max_change){
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001896:	4619      	mov	r1, r3
 8001898:	6838      	ldr	r0, [r7, #0]
 800189a:	f7ff fc0d 	bl	80010b8 <__aeabi_fcmplt>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01d      	beq.n	80018e0 <main+0x120>
			if(velocity_error > 0){
 80018a4:	f04f 0100 	mov.w	r1, #0
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff fc23 	bl	80010f4 <__aeabi_fcmpgt>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00a      	beq.n	80018ca <main+0x10a>
				target_velocity += max_change;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <main+0x13c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6839      	ldr	r1, [r7, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff f956 	bl	8000b6c <__addsf3>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <main+0x13c>)
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	e7c5      	b.n	8001856 <main+0x96>
			}
			else{
				target_velocity -= max_change;
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <main+0x13c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6839      	ldr	r1, [r7, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff f949 	bl	8000b68 <__aeabi_fsub>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <main+0x13c>)
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e7ba      	b.n	8001856 <main+0x96>
			}
		}
		else{
			target_velocity = desired_velocity;
 80018e0:	4a06      	ldr	r2, [pc, #24]	; (80018fc <main+0x13c>)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6013      	str	r3, [r2, #0]
	{
 80018e6:	e7b6      	b.n	8001856 <main+0x96>
 80018e8:	08009fe0 	.word	0x08009fe0
 80018ec:	08009ff4 	.word	0x08009ff4
 80018f0:	2000027c 	.word	0x2000027c
 80018f4:	20000320 	.word	0x20000320
 80018f8:	40a00000 	.word	0x40a00000
 80018fc:	20000330 	.word	0x20000330
 8001900:	3ba3d70a 	.word	0x3ba3d70a

08001904 <set_pwm_duty>:
		}
	}

}

void set_pwm_duty(float a, float b, float c) {
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
    if (a < 0.0f) a = 0.0f; if (a > 1.0f) a = 1.0f;
 8001910:	f04f 0100 	mov.w	r1, #0
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f7ff fbcf 	bl	80010b8 <__aeabi_fcmplt>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <set_pwm_duty+0x22>
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff fbe2 	bl	80010f4 <__aeabi_fcmpgt>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <set_pwm_duty+0x38>
 8001936:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800193a:	60fb      	str	r3, [r7, #12]
    if (b < 0.0f) b = 0.0f; if (b > 1.0f) b = 1.0f;
 800193c:	f04f 0100 	mov.w	r1, #0
 8001940:	68b8      	ldr	r0, [r7, #8]
 8001942:	f7ff fbb9 	bl	80010b8 <__aeabi_fcmplt>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <set_pwm_duty+0x4e>
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001956:	68b8      	ldr	r0, [r7, #8]
 8001958:	f7ff fbcc 	bl	80010f4 <__aeabi_fcmpgt>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <set_pwm_duty+0x64>
 8001962:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001966:	60bb      	str	r3, [r7, #8]
    if (c < 0.0f) c = 0.0f; if (c > 1.0f) c = 1.0f;
 8001968:	f04f 0100 	mov.w	r1, #0
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff fba3 	bl	80010b8 <__aeabi_fcmplt>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <set_pwm_duty+0x7a>
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fbb6 	bl	80010f4 <__aeabi_fcmpgt>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <set_pwm_duty+0x90>
 800198e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001992:	607b      	str	r3, [r7, #4]

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint32_t)(a * pwm_period));
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <set_pwm_duty+0x10c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff f997 	bl	8000ccc <__aeabi_ui2f>
 800199e:	4603      	mov	r3, r0
 80019a0:	68f9      	ldr	r1, [r7, #12]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff f9ea 	bl	8000d7c <__aeabi_fmul>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <set_pwm_duty+0x110>)
 80019ae:	681c      	ldr	r4, [r3, #0]
 80019b0:	4610      	mov	r0, r2
 80019b2:	f7ff fbe5 	bl	8001180 <__aeabi_f2uiz>
 80019b6:	4603      	mov	r3, r0
 80019b8:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint32_t)(b * pwm_period));
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <set_pwm_duty+0x10c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f984 	bl	8000ccc <__aeabi_ui2f>
 80019c4:	4603      	mov	r3, r0
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f9d7 	bl	8000d7c <__aeabi_fmul>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <set_pwm_duty+0x110>)
 80019d4:	681c      	ldr	r4, [r3, #0]
 80019d6:	4610      	mov	r0, r2
 80019d8:	f7ff fbd2 	bl	8001180 <__aeabi_f2uiz>
 80019dc:	4603      	mov	r3, r0
 80019de:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, (uint32_t)(c * pwm_period));
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <set_pwm_duty+0x10c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff f971 	bl	8000ccc <__aeabi_ui2f>
 80019ea:	4603      	mov	r3, r0
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f9c4 	bl	8000d7c <__aeabi_fmul>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <set_pwm_duty+0x110>)
 80019fa:	681c      	ldr	r4, [r3, #0]
 80019fc:	4610      	mov	r0, r2
 80019fe:	f7ff fbbf 	bl	8001180 <__aeabi_f2uiz>
 8001a02:	4603      	mov	r3, r0
 8001a04:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd90      	pop	{r4, r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000320 	.word	0x20000320
 8001a14:	2000027c 	.word	0x2000027c

08001a18 <motor_enable>:

void motor_enable(void){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a22:	4804      	ldr	r0, [pc, #16]	; (8001a34 <motor_enable+0x1c>)
 8001a24:	f002 ffa5 	bl	8004972 <HAL_GPIO_WritePin>
	motor_enabled = 1;
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <motor_enable+0x20>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40011800 	.word	0x40011800
 8001a38:	20000324 	.word	0x20000324

08001a3c <motor_disable>:

void motor_disable(void){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a40:	2200      	movs	r2, #0
 8001a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a46:	4804      	ldr	r0, [pc, #16]	; (8001a58 <motor_disable+0x1c>)
 8001a48:	f002 ff93 	bl	8004972 <HAL_GPIO_WritePin>
	motor_enabled = 0;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <motor_disable+0x20>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40011800 	.word	0x40011800
 8001a5c:	20000324 	.word	0x20000324

08001a60 <Read_Current_Sensors>:
    float duty_c = 0.5f + vc * 0.5f;

    set_pwm_duty(duty_a, duty_b, duty_c);
}

void Read_Current_Sensors(void){
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc_values, 2);
 8001a66:	2202      	movs	r2, #2
 8001a68:	4955      	ldr	r1, [pc, #340]	; (8001bc0 <Read_Current_Sensors+0x160>)
 8001a6a:	4856      	ldr	r0, [pc, #344]	; (8001bc4 <Read_Current_Sensors+0x164>)
 8001a6c:	f001 fd1e 	bl	80034ac <HAL_ADC_Start_DMA>
	uint32_t timeout = HAL_GetTick() + 100;
 8001a70:	f001 fc04 	bl	800327c <HAL_GetTick>
 8001a74:	4603      	mov	r3, r0
 8001a76:	3364      	adds	r3, #100	; 0x64
 8001a78:	60fb      	str	r3, [r7, #12]
	while(!adc_conversion_complete && HAL_GetTick() < timeout) {
 8001a7a:	bf00      	nop
 8001a7c:	4b52      	ldr	r3, [pc, #328]	; (8001bc8 <Read_Current_Sensors+0x168>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d105      	bne.n	8001a92 <Read_Current_Sensors+0x32>
 8001a86:	f001 fbf9 	bl	800327c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d8f4      	bhi.n	8001a7c <Read_Current_Sensors+0x1c>
		// ADC 변환 완료 대기
	}
	if(adc_conversion_complete){
 8001a92:	4b4d      	ldr	r3, [pc, #308]	; (8001bc8 <Read_Current_Sensors+0x168>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 808c 	beq.w	8001bb6 <Read_Current_Sensors+0x156>
		adc_conversion_complete = 0;
 8001a9e:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <Read_Current_Sensors+0x168>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]

		float adc_voltage_a = (float)adc_values[0] * VREF / ADC_RESOLUTION;
 8001aa4:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <Read_Current_Sensors+0x160>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f90e 	bl	8000ccc <__aeabi_ui2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4946      	ldr	r1, [pc, #280]	; (8001bcc <Read_Current_Sensors+0x16c>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff f961 	bl	8000d7c <__aeabi_fmul>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fa0f 	bl	8000ee4 <__aeabi_fdiv>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	60bb      	str	r3, [r7, #8]
		float adc_voltage_b = (float)adc_values[1] * VREF / ADC_RESOLUTION;
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <Read_Current_Sensors+0x160>)
 8001acc:	885b      	ldrh	r3, [r3, #2]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff f8fb 	bl	8000ccc <__aeabi_ui2f>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	493c      	ldr	r1, [pc, #240]	; (8001bcc <Read_Current_Sensors+0x16c>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f94e 	bl	8000d7c <__aeabi_fmul>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f9fc 	bl	8000ee4 <__aeabi_fdiv>
 8001aec:	4603      	mov	r3, r0
 8001aee:	607b      	str	r3, [r7, #4]
		float R_sense = 0.01f;
 8001af0:	4b37      	ldr	r3, [pc, #220]	; (8001bd0 <Read_Current_Sensors+0x170>)
 8001af2:	603b      	str	r3, [r7, #0]

		current_a = (adc_voltage_a - ACTUAL_ZERO_A) / (INA240_GAIN * R_sense);
 8001af4:	4937      	ldr	r1, [pc, #220]	; (8001bd4 <Read_Current_Sensors+0x174>)
 8001af6:	68b8      	ldr	r0, [r7, #8]
 8001af8:	f7ff f836 	bl	8000b68 <__aeabi_fsub>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461c      	mov	r4, r3
 8001b00:	4935      	ldr	r1, [pc, #212]	; (8001bd8 <Read_Current_Sensors+0x178>)
 8001b02:	6838      	ldr	r0, [r7, #0]
 8001b04:	f7ff f93a 	bl	8000d7c <__aeabi_fmul>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f7ff f9e9 	bl	8000ee4 <__aeabi_fdiv>
 8001b12:	4603      	mov	r3, r0
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b31      	ldr	r3, [pc, #196]	; (8001bdc <Read_Current_Sensors+0x17c>)
 8001b18:	601a      	str	r2, [r3, #0]
		current_b = (adc_voltage_b - ACTUAL_ZERO_B) / (INA240_GAIN * R_sense);
 8001b1a:	4931      	ldr	r1, [pc, #196]	; (8001be0 <Read_Current_Sensors+0x180>)
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff f823 	bl	8000b68 <__aeabi_fsub>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461c      	mov	r4, r3
 8001b26:	492c      	ldr	r1, [pc, #176]	; (8001bd8 <Read_Current_Sensors+0x178>)
 8001b28:	6838      	ldr	r0, [r7, #0]
 8001b2a:	f7ff f927 	bl	8000d7c <__aeabi_fmul>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4619      	mov	r1, r3
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7ff f9d6 	bl	8000ee4 <__aeabi_fdiv>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <Read_Current_Sensors+0x184>)
 8001b3e:	601a      	str	r2, [r3, #0]
		current_c = -(current_a + current_b);
 8001b40:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <Read_Current_Sensors+0x17c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a27      	ldr	r2, [pc, #156]	; (8001be4 <Read_Current_Sensors+0x184>)
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f80e 	bl	8000b6c <__addsf3>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b56:	4a24      	ldr	r2, [pc, #144]	; (8001be8 <Read_Current_Sensors+0x188>)
 8001b58:	6013      	str	r3, [r2, #0]

		if(fabs(current_a) < 0.02f) current_a = 0.0f;
 8001b5a:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <Read_Current_Sensors+0x17c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b62:	4922      	ldr	r1, [pc, #136]	; (8001bec <Read_Current_Sensors+0x18c>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff faa7 	bl	80010b8 <__aeabi_fcmplt>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <Read_Current_Sensors+0x118>
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <Read_Current_Sensors+0x17c>)
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
		if(fabs(current_b) < 0.02f) current_b = 0.0f;
 8001b78:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <Read_Current_Sensors+0x184>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b80:	491a      	ldr	r1, [pc, #104]	; (8001bec <Read_Current_Sensors+0x18c>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fa98 	bl	80010b8 <__aeabi_fcmplt>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <Read_Current_Sensors+0x136>
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <Read_Current_Sensors+0x184>)
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
		if(fabs(current_c) < 0.02f) current_c = 0.0f;
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <Read_Current_Sensors+0x188>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b9e:	4913      	ldr	r1, [pc, #76]	; (8001bec <Read_Current_Sensors+0x18c>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fa89 	bl	80010b8 <__aeabi_fcmplt>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d100      	bne.n	8001bae <Read_Current_Sensors+0x14e>

		 //printf("Raw ADC: [%d, %d] | V: [%.3f, %.3f] | I_abc: [%.3f, %.3f, %.3f]A\r\n",
		               //adc_values[0], adc_values[1], adc_voltage_a, adc_voltage_b,
		               //current_a, current_b, current_c);
	}
}
 8001bac:	e003      	b.n	8001bb6 <Read_Current_Sensors+0x156>
		if(fabs(current_c) < 0.02f) current_c = 0.0f;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <Read_Current_Sensors+0x188>)
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd90      	pop	{r4, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000030c 	.word	0x2000030c
 8001bc4:	20000208 	.word	0x20000208
 8001bc8:	20000310 	.word	0x20000310
 8001bcc:	40533333 	.word	0x40533333
 8001bd0:	3c23d70a 	.word	0x3c23d70a
 8001bd4:	3fd39581 	.word	0x3fd39581
 8001bd8:	42480000 	.word	0x42480000
 8001bdc:	20000314 	.word	0x20000314
 8001be0:	3fd3b646 	.word	0x3fd3b646
 8001be4:	20000318 	.word	0x20000318
 8001be8:	2000031c 	.word	0x2000031c
 8001bec:	3ca3d70a 	.word	0x3ca3d70a

08001bf0 <Current_Sensor_Init>:

// 전류 센서 초기화
void Current_Sensor_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	if(HAL_ADCEx_Calibration_Start(&hadc3) != HAL_OK) {
 8001bf4:	481b      	ldr	r0, [pc, #108]	; (8001c64 <Current_Sensor_Init+0x74>)
 8001bf6:	f002 f80b 	bl	8003c10 <HAL_ADCEx_Calibration_Start>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d004      	beq.n	8001c0a <Current_Sensor_Init+0x1a>
		printf("ERROR: ADC Calibration Failed!\r\n");
 8001c00:	4819      	ldr	r0, [pc, #100]	; (8001c68 <Current_Sensor_Init+0x78>)
 8001c02:	f005 fa65 	bl	80070d0 <puts>
		Error_Handler();
 8001c06:	f001 f87b 	bl	8002d00 <Error_Handler>
	}
	if (HAL_TIM_Base_Start(&htim1) != HAL_OK) {
 8001c0a:	4818      	ldr	r0, [pc, #96]	; (8001c6c <Current_Sensor_Init+0x7c>)
 8001c0c:	f003 fc68 	bl	80054e0 <HAL_TIM_Base_Start>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <Current_Sensor_Init+0x30>
		printf("ERROR: Timer1 Start Failed!\r\n");
 8001c16:	4816      	ldr	r0, [pc, #88]	; (8001c70 <Current_Sensor_Init+0x80>)
 8001c18:	f005 fa5a 	bl	80070d0 <puts>
		Error_Handler();
 8001c1c:	f001 f870 	bl	8002d00 <Error_Handler>
	}
	// TIM1 CH3 Compare 이벤트 활성화
	if (HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) {
 8001c20:	2108      	movs	r1, #8
 8001c22:	4812      	ldr	r0, [pc, #72]	; (8001c6c <Current_Sensor_Init+0x7c>)
 8001c24:	f003 fcb4 	bl	8005590 <HAL_TIM_OC_Start>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d004      	beq.n	8001c38 <Current_Sensor_Init+0x48>
		printf("ERROR: Timer1 CH3 OC Start Failed!\r\n");
 8001c2e:	4811      	ldr	r0, [pc, #68]	; (8001c74 <Current_Sensor_Init+0x84>)
 8001c30:	f005 fa4e 	bl	80070d0 <puts>
		Error_Handler();
 8001c34:	f001 f864 	bl	8002d00 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc_values, 2) != HAL_OK) {
 8001c38:	2202      	movs	r2, #2
 8001c3a:	490f      	ldr	r1, [pc, #60]	; (8001c78 <Current_Sensor_Init+0x88>)
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <Current_Sensor_Init+0x74>)
 8001c3e:	f001 fc35 	bl	80034ac <HAL_ADC_Start_DMA>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d004      	beq.n	8001c52 <Current_Sensor_Init+0x62>
		printf("ERROR: ADC DMA Start Failed!\r\n");
 8001c48:	480c      	ldr	r0, [pc, #48]	; (8001c7c <Current_Sensor_Init+0x8c>)
 8001c4a:	f005 fa41 	bl	80070d0 <puts>
		Error_Handler();
 8001c4e:	f001 f857 	bl	8002d00 <Error_Handler>
	}
	printf("Current sensor hardware initialization complete\r\n");
 8001c52:	480b      	ldr	r0, [pc, #44]	; (8001c80 <Current_Sensor_Init+0x90>)
 8001c54:	f005 fa3c 	bl	80070d0 <puts>
	HAL_Delay(1000);
 8001c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c5c:	f001 fb18 	bl	8003290 <HAL_Delay>
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000208 	.word	0x20000208
 8001c68:	0800a00c 	.word	0x0800a00c
 8001c6c:	2000027c 	.word	0x2000027c
 8001c70:	0800a02c 	.word	0x0800a02c
 8001c74:	0800a04c 	.word	0x0800a04c
 8001c78:	2000030c 	.word	0x2000030c
 8001c7c:	0800a070 	.word	0x0800a070
 8001c80:	0800a090 	.word	0x0800a090

08001c84 <FOC_control>:
}
#endif

// 전류 속도 제어
// 육안으로 확인되는 속도 제어
void FOC_control(void){
 8001c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c88:	b0b0      	sub	sp, #192	; 0xc0
 8001c8a:	af0a      	add	r7, sp, #40	; 0x28
    if(!motor_enabled){
 8001c8c:	4b8d      	ldr	r3, [pc, #564]	; (8001ec4 <FOC_control+0x240>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d109      	bne.n	8001ca8 <FOC_control+0x24>
        set_pwm_duty(0.5f, 0.5f, 0.5f);
 8001c94:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001c98:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001c9c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001ca0:	f7ff fe30 	bl	8001904 <set_pwm_duty>
        return;
 8001ca4:	f000 bdcc 	b.w	8002840 <FOC_control+0xbbc>
    }

    static uint32_t start_time = 0;
    if(start_time == 0) start_time = HAL_GetTick();
 8001ca8:	4b87      	ldr	r3, [pc, #540]	; (8001ec8 <FOC_control+0x244>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d104      	bne.n	8001cba <FOC_control+0x36>
 8001cb0:	f001 fae4 	bl	800327c <HAL_GetTick>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4a84      	ldr	r2, [pc, #528]	; (8001ec8 <FOC_control+0x244>)
 8001cb8:	6013      	str	r3, [r2, #0]

    // 1. 엔코더 처리 (부드러우면서 반응성 있게)
    uint16_t raw_angle = AS5600_ReadRawAngle();
 8001cba:	f7ff fc28 	bl	800150e <AS5600_ReadRawAngle>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    float raw_mechanical = (4096.0f - (float)raw_angle) * TWO_PI / 4096.0f;
 8001cc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe ffff 	bl	8000ccc <__aeabi_ui2f>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 408b 	mov.w	r0, #1166016512	; 0x45800000
 8001cd6:	f7fe ff47 	bl	8000b68 <__aeabi_fsub>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	497b      	ldr	r1, [pc, #492]	; (8001ecc <FOC_control+0x248>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff f84c 	bl	8000d7c <__aeabi_fmul>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff f8fa 	bl	8000ee4 <__aeabi_fdiv>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    raw_mechanical -= 0.32f;
 8001cf6:	4976      	ldr	r1, [pc, #472]	; (8001ed0 <FOC_control+0x24c>)
 8001cf8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001cfc:	f7fe ff34 	bl	8000b68 <__aeabi_fsub>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    static float smooth_mechanical = 0;
    static uint8_t first_run = 1;

    if(first_run) {
 8001d06:	4b73      	ldr	r3, [pc, #460]	; (8001ed4 <FOC_control+0x250>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <FOC_control+0x9a>
        smooth_mechanical = raw_mechanical;
 8001d0e:	4a72      	ldr	r2, [pc, #456]	; (8001ed8 <FOC_control+0x254>)
 8001d10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d14:	6013      	str	r3, [r2, #0]
        first_run = 0;
 8001d16:	4b6f      	ldr	r3, [pc, #444]	; (8001ed4 <FOC_control+0x250>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
 8001d1c:	e054      	b.n	8001dc8 <FOC_control+0x144>
    } else {
        float angle_diff = raw_mechanical - smooth_mechanical;
 8001d1e:	4b6e      	ldr	r3, [pc, #440]	; (8001ed8 <FOC_control+0x254>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4619      	mov	r1, r3
 8001d24:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001d28:	f7fe ff1e 	bl	8000b68 <__aeabi_fsub>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        while(angle_diff > PI) angle_diff -= TWO_PI;
 8001d32:	e007      	b.n	8001d44 <FOC_control+0xc0>
 8001d34:	4965      	ldr	r1, [pc, #404]	; (8001ecc <FOC_control+0x248>)
 8001d36:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001d3a:	f7fe ff15 	bl	8000b68 <__aeabi_fsub>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d44:	4965      	ldr	r1, [pc, #404]	; (8001edc <FOC_control+0x258>)
 8001d46:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001d4a:	f7ff f9d3 	bl	80010f4 <__aeabi_fcmpgt>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ef      	bne.n	8001d34 <FOC_control+0xb0>
        while(angle_diff < -PI) angle_diff += TWO_PI;
 8001d54:	e007      	b.n	8001d66 <FOC_control+0xe2>
 8001d56:	495d      	ldr	r1, [pc, #372]	; (8001ecc <FOC_control+0x248>)
 8001d58:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001d5c:	f7fe ff06 	bl	8000b6c <__addsf3>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d66:	495e      	ldr	r1, [pc, #376]	; (8001ee0 <FOC_control+0x25c>)
 8001d68:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001d6c:	f7ff f9a4 	bl	80010b8 <__aeabi_fcmplt>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ef      	bne.n	8001d56 <FOC_control+0xd2>

        if(angle_diff > 0.1f) angle_diff = 0.1f;      // 제한 완화
 8001d76:	495b      	ldr	r1, [pc, #364]	; (8001ee4 <FOC_control+0x260>)
 8001d78:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001d7c:	f7ff f9ba 	bl	80010f4 <__aeabi_fcmpgt>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <FOC_control+0x10a>
 8001d86:	4b57      	ldr	r3, [pc, #348]	; (8001ee4 <FOC_control+0x260>)
 8001d88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d8c:	e00a      	b.n	8001da4 <FOC_control+0x120>
        else if(angle_diff < -0.1f) angle_diff = -0.1f;
 8001d8e:	4956      	ldr	r1, [pc, #344]	; (8001ee8 <FOC_control+0x264>)
 8001d90:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001d94:	f7ff f990 	bl	80010b8 <__aeabi_fcmplt>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <FOC_control+0x120>
 8001d9e:	4b52      	ldr	r3, [pc, #328]	; (8001ee8 <FOC_control+0x264>)
 8001da0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

        smooth_mechanical += angle_diff * 0.5f;       // 더 빠른 응답
 8001da4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001da8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001dac:	f7fe ffe6 	bl	8000d7c <__aeabi_fmul>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b48      	ldr	r3, [pc, #288]	; (8001ed8 <FOC_control+0x254>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4619      	mov	r1, r3
 8001dba:	4610      	mov	r0, r2
 8001dbc:	f7fe fed6 	bl	8000b6c <__addsf3>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b44      	ldr	r3, [pc, #272]	; (8001ed8 <FOC_control+0x254>)
 8001dc6:	601a      	str	r2, [r3, #0]
    }

    mechanical_angle = smooth_mechanical;
 8001dc8:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <FOC_control+0x254>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a47      	ldr	r2, [pc, #284]	; (8001eec <FOC_control+0x268>)
 8001dce:	6013      	str	r3, [r2, #0]
    while(mechanical_angle > TWO_PI) mechanical_angle -= TWO_PI;
 8001dd0:	e009      	b.n	8001de6 <FOC_control+0x162>
 8001dd2:	4b46      	ldr	r3, [pc, #280]	; (8001eec <FOC_control+0x268>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	493d      	ldr	r1, [pc, #244]	; (8001ecc <FOC_control+0x248>)
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fec5 	bl	8000b68 <__aeabi_fsub>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b42      	ldr	r3, [pc, #264]	; (8001eec <FOC_control+0x268>)
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	4b41      	ldr	r3, [pc, #260]	; (8001eec <FOC_control+0x268>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4938      	ldr	r1, [pc, #224]	; (8001ecc <FOC_control+0x248>)
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff f981 	bl	80010f4 <__aeabi_fcmpgt>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1ec      	bne.n	8001dd2 <FOC_control+0x14e>
    while(mechanical_angle < 0) mechanical_angle += TWO_PI;
 8001df8:	e009      	b.n	8001e0e <FOC_control+0x18a>
 8001dfa:	4b3c      	ldr	r3, [pc, #240]	; (8001eec <FOC_control+0x268>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4933      	ldr	r1, [pc, #204]	; (8001ecc <FOC_control+0x248>)
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe feb3 	bl	8000b6c <__addsf3>
 8001e06:	4603      	mov	r3, r0
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b38      	ldr	r3, [pc, #224]	; (8001eec <FOC_control+0x268>)
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	4b37      	ldr	r3, [pc, #220]	; (8001eec <FOC_control+0x268>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f04f 0100 	mov.w	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff f94e 	bl	80010b8 <__aeabi_fcmplt>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1eb      	bne.n	8001dfa <FOC_control+0x176>
    electrical_angle = fmodf(mechanical_angle * POLE_PAIRS, TWO_PI);
 8001e22:	4b32      	ldr	r3, [pc, #200]	; (8001eec <FOC_control+0x268>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4932      	ldr	r1, [pc, #200]	; (8001ef0 <FOC_control+0x26c>)
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe ffa7 	bl	8000d7c <__aeabi_fmul>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	4926      	ldr	r1, [pc, #152]	; (8001ecc <FOC_control+0x248>)
 8001e32:	4618      	mov	r0, r3
 8001e34:	f007 f8da 	bl	8008fec <fmodf>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	4a2e      	ldr	r2, [pc, #184]	; (8001ef4 <FOC_control+0x270>)
 8001e3c:	6013      	str	r3, [r2, #0]
    static uint8_t current_calibrated = 0;
    static uint32_t calib_start_time = 0;
    static int calib_count = 0;
    static float ia_sum = 0, ib_sum = 0;

    if(!current_calibrated) {
 8001e3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <FOC_control+0x274>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 808e 	bne.w	8001f64 <FOC_control+0x2e0>
        if(calib_start_time == 0) {
 8001e48:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <FOC_control+0x278>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d107      	bne.n	8001e60 <FOC_control+0x1dc>
            calib_start_time = HAL_GetTick();
 8001e50:	f001 fa14 	bl	800327c <HAL_GetTick>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4a29      	ldr	r2, [pc, #164]	; (8001efc <FOC_control+0x278>)
 8001e58:	6013      	str	r3, [r2, #0]
            printf("Quick calibration...\r\n");
 8001e5a:	4829      	ldr	r0, [pc, #164]	; (8001f00 <FOC_control+0x27c>)
 8001e5c:	f005 f938 	bl	80070d0 <puts>
        }

        if(HAL_GetTick() - calib_start_time < 1000) {  // 1초로 단축
 8001e60:	f001 fa0c 	bl	800327c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b25      	ldr	r3, [pc, #148]	; (8001efc <FOC_control+0x278>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e70:	d252      	bcs.n	8001f18 <FOC_control+0x294>
            set_pwm_duty(0.5f, 0.5f, 0.5f);
 8001e72:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001e76:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001e7a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001e7e:	f7ff fd41 	bl	8001904 <set_pwm_duty>

            Read_Current_Sensors();
 8001e82:	f7ff fded 	bl	8001a60 <Read_Current_Sensors>
            ia_sum += current_a;
 8001e86:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <FOC_control+0x280>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <FOC_control+0x284>)
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fe6b 	bl	8000b6c <__addsf3>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <FOC_control+0x280>)
 8001e9c:	601a      	str	r2, [r3, #0]
            ib_sum += current_b;
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <FOC_control+0x288>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <FOC_control+0x28c>)
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fe5f 	bl	8000b6c <__addsf3>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <FOC_control+0x288>)
 8001eb4:	601a      	str	r2, [r3, #0]
            calib_count++;
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <FOC_control+0x290>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	4a15      	ldr	r2, [pc, #84]	; (8001f14 <FOC_control+0x290>)
 8001ebe:	6013      	str	r3, [r2, #0]
            return;
 8001ec0:	f000 bcbe 	b.w	8002840 <FOC_control+0xbbc>
 8001ec4:	20000324 	.word	0x20000324
 8001ec8:	20000334 	.word	0x20000334
 8001ecc:	40c90fdb 	.word	0x40c90fdb
 8001ed0:	3ea3d70a 	.word	0x3ea3d70a
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000338 	.word	0x20000338
 8001edc:	40490fdb 	.word	0x40490fdb
 8001ee0:	c0490fdb 	.word	0xc0490fdb
 8001ee4:	3dcccccd 	.word	0x3dcccccd
 8001ee8:	bdcccccd 	.word	0xbdcccccd
 8001eec:	2000032c 	.word	0x2000032c
 8001ef0:	40e00000 	.word	0x40e00000
 8001ef4:	20000328 	.word	0x20000328
 8001ef8:	2000033c 	.word	0x2000033c
 8001efc:	20000340 	.word	0x20000340
 8001f00:	0800a0c4 	.word	0x0800a0c4
 8001f04:	20000344 	.word	0x20000344
 8001f08:	20000314 	.word	0x20000314
 8001f0c:	20000348 	.word	0x20000348
 8001f10:	20000318 	.word	0x20000318
 8001f14:	2000034c 	.word	0x2000034c
        } else {
            ia_offset = ia_sum / calib_count;
 8001f18:	4b52      	ldr	r3, [pc, #328]	; (8002064 <FOC_control+0x3e0>)
 8001f1a:	681c      	ldr	r4, [r3, #0]
 8001f1c:	4b52      	ldr	r3, [pc, #328]	; (8002068 <FOC_control+0x3e4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fed7 	bl	8000cd4 <__aeabi_i2f>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	f7fe ffda 	bl	8000ee4 <__aeabi_fdiv>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	4b4d      	ldr	r3, [pc, #308]	; (800206c <FOC_control+0x3e8>)
 8001f36:	601a      	str	r2, [r3, #0]
            ib_offset = ib_sum / calib_count;
 8001f38:	4b4d      	ldr	r3, [pc, #308]	; (8002070 <FOC_control+0x3ec>)
 8001f3a:	681c      	ldr	r4, [r3, #0]
 8001f3c:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <FOC_control+0x3e4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fec7 	bl	8000cd4 <__aeabi_i2f>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f7fe ffca 	bl	8000ee4 <__aeabi_fdiv>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b47      	ldr	r3, [pc, #284]	; (8002074 <FOC_control+0x3f0>)
 8001f56:	601a      	str	r2, [r3, #0]
            current_calibrated = 1;
 8001f58:	4b47      	ldr	r3, [pc, #284]	; (8002078 <FOC_control+0x3f4>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
            printf("Quick calibration done!\r\n");
 8001f5e:	4847      	ldr	r0, [pc, #284]	; (800207c <FOC_control+0x3f8>)
 8001f60:	f005 f8b6 	bl	80070d0 <puts>
    static float target_iq = 0.1f;
    static uint32_t speed_change_time = 0;
    static uint8_t control_started = 0;
    static int speed_step = 0;

    if(!control_started && current_calibrated && (HAL_GetTick() - start_time > 2000)) {
 8001f64:	4b46      	ldr	r3, [pc, #280]	; (8002080 <FOC_control+0x3fc>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d117      	bne.n	8001f9c <FOC_control+0x318>
 8001f6c:	4b42      	ldr	r3, [pc, #264]	; (8002078 <FOC_control+0x3f4>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <FOC_control+0x318>
 8001f74:	f001 f982 	bl	800327c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b42      	ldr	r3, [pc, #264]	; (8002084 <FOC_control+0x400>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f84:	d90a      	bls.n	8001f9c <FOC_control+0x318>
        control_started = 1;
 8001f86:	4b3e      	ldr	r3, [pc, #248]	; (8002080 <FOC_control+0x3fc>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
        speed_change_time = HAL_GetTick();
 8001f8c:	f001 f976 	bl	800327c <HAL_GetTick>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4a3d      	ldr	r2, [pc, #244]	; (8002088 <FOC_control+0x404>)
 8001f94:	6013      	str	r3, [r2, #0]
        printf("=== VISIBLE SPEED CONTROL STARTED ===\r\n");
 8001f96:	483d      	ldr	r0, [pc, #244]	; (800208c <FOC_control+0x408>)
 8001f98:	f005 f89a 	bl	80070d0 <puts>
    }

    if(control_started) {
 8001f9c:	4b38      	ldr	r3, [pc, #224]	; (8002080 <FOC_control+0x3fc>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d052      	beq.n	800204a <FOC_control+0x3c6>
        uint32_t elapsed = HAL_GetTick() - speed_change_time;
 8001fa4:	f001 f96a 	bl	800327c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b37      	ldr	r3, [pc, #220]	; (8002088 <FOC_control+0x404>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	67fb      	str	r3, [r7, #124]	; 0x7c
        if(elapsed > 8000) {  // 8초마다
 8001fb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fb4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001fb8:	d947      	bls.n	800204a <FOC_control+0x3c6>
            switch(speed_step) {
 8001fba:	4b35      	ldr	r3, [pc, #212]	; (8002090 <FOC_control+0x40c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d82f      	bhi.n	8002022 <FOC_control+0x39e>
 8001fc2:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <FOC_control+0x344>)
 8001fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc8:	08001fdd 	.word	0x08001fdd
 8001fcc:	08001feb 	.word	0x08001feb
 8001fd0:	08001ff9 	.word	0x08001ff9
 8001fd4:	08002007 	.word	0x08002007
 8001fd8:	08002015 	.word	0x08002015
                case 0:
                    target_iq = 0.2f;
 8001fdc:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <FOC_control+0x410>)
 8001fde:	4a2e      	ldr	r2, [pc, #184]	; (8002098 <FOC_control+0x414>)
 8001fe0:	601a      	str	r2, [r3, #0]
                    printf("\r\n*** SLOW (Iq=0.2A) -***\r\n");
 8001fe2:	482e      	ldr	r0, [pc, #184]	; (800209c <FOC_control+0x418>)
 8001fe4:	f005 f874 	bl	80070d0 <puts>
                    break;
 8001fe8:	e01b      	b.n	8002022 <FOC_control+0x39e>
                case 1:
                    target_iq = 0.05f;
 8001fea:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <FOC_control+0x410>)
 8001fec:	4a2c      	ldr	r2, [pc, #176]	; (80020a0 <FOC_control+0x41c>)
 8001fee:	601a      	str	r2, [r3, #0]
                    printf("\r\n*** VERY SLOW (Iq=0.05A) - ALMOST STOP! ***\r\n");
 8001ff0:	482c      	ldr	r0, [pc, #176]	; (80020a4 <FOC_control+0x420>)
 8001ff2:	f005 f86d 	bl	80070d0 <puts>
                    break;
 8001ff6:	e014      	b.n	8002022 <FOC_control+0x39e>
                case 2:
                    target_iq = 2.5f;               // 1.2A   --> 3.0A 수정
 8001ff8:	4b26      	ldr	r3, [pc, #152]	; (8002094 <FOC_control+0x410>)
 8001ffa:	4a2b      	ldr	r2, [pc, #172]	; (80020a8 <FOC_control+0x424>)
 8001ffc:	601a      	str	r2, [r3, #0]
                    printf("\r\n*** MAXIMUM (Iq=2.5A) - FASTEST POSSIBLE! ***\r\n");
 8001ffe:	482b      	ldr	r0, [pc, #172]	; (80020ac <FOC_control+0x428>)
 8002000:	f005 f866 	bl	80070d0 <puts>
                    break;
 8002004:	e00d      	b.n	8002022 <FOC_control+0x39e>
                case 3:
                    target_iq = 0.8f;
 8002006:	4b23      	ldr	r3, [pc, #140]	; (8002094 <FOC_control+0x410>)
 8002008:	4a29      	ldr	r2, [pc, #164]	; (80020b0 <FOC_control+0x42c>)
 800200a:	601a      	str	r2, [r3, #0]
                    printf("\r\n*** MEDIUM (Iq=0.8A) - NORMAL SPEED ***\r\n");
 800200c:	4829      	ldr	r0, [pc, #164]	; (80020b4 <FOC_control+0x430>)
 800200e:	f005 f85f 	bl	80070d0 <puts>
                    break;
 8002012:	e006      	b.n	8002022 <FOC_control+0x39e>
                case 4:
                    target_iq = 0.01f;
 8002014:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <FOC_control+0x410>)
 8002016:	4a28      	ldr	r2, [pc, #160]	; (80020b8 <FOC_control+0x434>)
 8002018:	601a      	str	r2, [r3, #0]
                    printf("\r\n*** CRAWLING (Iq=0.01A) - BARELY MOVING! ***\r\n");
 800201a:	4828      	ldr	r0, [pc, #160]	; (80020bc <FOC_control+0x438>)
 800201c:	f005 f858 	bl	80070d0 <puts>
                    break;
 8002020:	bf00      	nop
            }
            speed_step = (speed_step + 1) % 5;
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <FOC_control+0x40c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	1c59      	adds	r1, r3, #1
 8002028:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <FOC_control+0x43c>)
 800202a:	fb83 2301 	smull	r2, r3, r3, r1
 800202e:	105a      	asrs	r2, r3, #1
 8002030:	17cb      	asrs	r3, r1, #31
 8002032:	1ad2      	subs	r2, r2, r3
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	1aca      	subs	r2, r1, r3
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <FOC_control+0x40c>)
 800203e:	601a      	str	r2, [r3, #0]
            speed_change_time = HAL_GetTick();
 8002040:	f001 f91c 	bl	800327c <HAL_GetTick>
 8002044:	4603      	mov	r3, r0
 8002046:	4a10      	ldr	r2, [pc, #64]	; (8002088 <FOC_control+0x404>)
 8002048:	6013      	str	r3, [r2, #0]
        }
    }

    if(!control_started) {
 800204a:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <FOC_control+0x3fc>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d138      	bne.n	80020c4 <FOC_control+0x440>
        set_pwm_duty(0.5f, 0.5f, 0.5f);
 8002052:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002056:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800205a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800205e:	f7ff fc51 	bl	8001904 <set_pwm_duty>
        return;
 8002062:	e3ed      	b.n	8002840 <FOC_control+0xbbc>
 8002064:	20000344 	.word	0x20000344
 8002068:	2000034c 	.word	0x2000034c
 800206c:	20000350 	.word	0x20000350
 8002070:	20000348 	.word	0x20000348
 8002074:	20000354 	.word	0x20000354
 8002078:	2000033c 	.word	0x2000033c
 800207c:	0800a0dc 	.word	0x0800a0dc
 8002080:	20000358 	.word	0x20000358
 8002084:	20000334 	.word	0x20000334
 8002088:	2000035c 	.word	0x2000035c
 800208c:	0800a0f8 	.word	0x0800a0f8
 8002090:	20000360 	.word	0x20000360
 8002094:	20000004 	.word	0x20000004
 8002098:	3e4ccccd 	.word	0x3e4ccccd
 800209c:	0800a120 	.word	0x0800a120
 80020a0:	3d4ccccd 	.word	0x3d4ccccd
 80020a4:	0800a13c 	.word	0x0800a13c
 80020a8:	40200000 	.word	0x40200000
 80020ac:	0800a16c 	.word	0x0800a16c
 80020b0:	3f4ccccd 	.word	0x3f4ccccd
 80020b4:	0800a1a0 	.word	0x0800a1a0
 80020b8:	3c23d70a 	.word	0x3c23d70a
 80020bc:	0800a1cc 	.word	0x0800a1cc
 80020c0:	66666667 	.word	0x66666667
    }

    // 4. 반응성 있는 전류 필터링
    Read_Current_Sensors();
 80020c4:	f7ff fccc 	bl	8001a60 <Read_Current_Sensors>

    float ia_corrected = current_a - ia_offset;
 80020c8:	4b61      	ldr	r3, [pc, #388]	; (8002250 <FOC_control+0x5cc>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a61      	ldr	r2, [pc, #388]	; (8002254 <FOC_control+0x5d0>)
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fd48 	bl	8000b68 <__aeabi_fsub>
 80020d8:	4603      	mov	r3, r0
 80020da:	67bb      	str	r3, [r7, #120]	; 0x78
    float ib_corrected = current_b - ib_offset;
 80020dc:	4b5e      	ldr	r3, [pc, #376]	; (8002258 <FOC_control+0x5d4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a5e      	ldr	r2, [pc, #376]	; (800225c <FOC_control+0x5d8>)
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fd3e 	bl	8000b68 <__aeabi_fsub>
 80020ec:	4603      	mov	r3, r0
 80020ee:	677b      	str	r3, [r7, #116]	; 0x74

    // 가벼운 필터링 (반응성 우선)
    static float ia_filtered = 0, ib_filtered = 0;
    ia_filtered = 0.6f * ia_filtered + 0.4f * ia_corrected;  // 빠른 응답
 80020f0:	4b5b      	ldr	r3, [pc, #364]	; (8002260 <FOC_control+0x5dc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	495b      	ldr	r1, [pc, #364]	; (8002264 <FOC_control+0x5e0>)
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fe40 	bl	8000d7c <__aeabi_fmul>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461c      	mov	r4, r3
 8002100:	4959      	ldr	r1, [pc, #356]	; (8002268 <FOC_control+0x5e4>)
 8002102:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002104:	f7fe fe3a 	bl	8000d7c <__aeabi_fmul>
 8002108:	4603      	mov	r3, r0
 800210a:	4619      	mov	r1, r3
 800210c:	4620      	mov	r0, r4
 800210e:	f7fe fd2d 	bl	8000b6c <__addsf3>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	4b52      	ldr	r3, [pc, #328]	; (8002260 <FOC_control+0x5dc>)
 8002118:	601a      	str	r2, [r3, #0]
    ib_filtered = 0.6f * ib_filtered + 0.4f * ib_corrected;
 800211a:	4b54      	ldr	r3, [pc, #336]	; (800226c <FOC_control+0x5e8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4951      	ldr	r1, [pc, #324]	; (8002264 <FOC_control+0x5e0>)
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fe2b 	bl	8000d7c <__aeabi_fmul>
 8002126:	4603      	mov	r3, r0
 8002128:	461c      	mov	r4, r3
 800212a:	494f      	ldr	r1, [pc, #316]	; (8002268 <FOC_control+0x5e4>)
 800212c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800212e:	f7fe fe25 	bl	8000d7c <__aeabi_fmul>
 8002132:	4603      	mov	r3, r0
 8002134:	4619      	mov	r1, r3
 8002136:	4620      	mov	r0, r4
 8002138:	f7fe fd18 	bl	8000b6c <__addsf3>
 800213c:	4603      	mov	r3, r0
 800213e:	461a      	mov	r2, r3
 8002140:	4b4a      	ldr	r3, [pc, #296]	; (800226c <FOC_control+0x5e8>)
 8002142:	601a      	str	r2, [r3, #0]

    // 5. Clarke 변환
    float i_alpha = ia_filtered;
 8002144:	4b46      	ldr	r3, [pc, #280]	; (8002260 <FOC_control+0x5dc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	673b      	str	r3, [r7, #112]	; 0x70
    float i_beta = (ia_filtered + 2.0f * ib_filtered) / 1.732f;
 800214a:	4b48      	ldr	r3, [pc, #288]	; (800226c <FOC_control+0x5e8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4619      	mov	r1, r3
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fd0b 	bl	8000b6c <__addsf3>
 8002156:	4603      	mov	r3, r0
 8002158:	461a      	mov	r2, r3
 800215a:	4b41      	ldr	r3, [pc, #260]	; (8002260 <FOC_control+0x5dc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4619      	mov	r1, r3
 8002160:	4610      	mov	r0, r2
 8002162:	f7fe fd03 	bl	8000b6c <__addsf3>
 8002166:	4603      	mov	r3, r0
 8002168:	4941      	ldr	r1, [pc, #260]	; (8002270 <FOC_control+0x5ec>)
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe feba 	bl	8000ee4 <__aeabi_fdiv>
 8002170:	4603      	mov	r3, r0
 8002172:	66fb      	str	r3, [r7, #108]	; 0x6c

    // 6. Park 변환
    float cos_theta = cosf(electrical_angle);
 8002174:	4b3f      	ldr	r3, [pc, #252]	; (8002274 <FOC_control+0x5f0>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f006 ff53 	bl	8009024 <cosf>
 800217e:	66b8      	str	r0, [r7, #104]	; 0x68
    float sin_theta = sinf(electrical_angle);
 8002180:	4b3c      	ldr	r3, [pc, #240]	; (8002274 <FOC_control+0x5f0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f006 ff85 	bl	8009094 <sinf>
 800218a:	6678      	str	r0, [r7, #100]	; 0x64

    float id_measured = i_alpha * cos_theta + i_beta * sin_theta;
 800218c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800218e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002190:	f7fe fdf4 	bl	8000d7c <__aeabi_fmul>
 8002194:	4603      	mov	r3, r0
 8002196:	461c      	mov	r4, r3
 8002198:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800219a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800219c:	f7fe fdee 	bl	8000d7c <__aeabi_fmul>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4619      	mov	r1, r3
 80021a4:	4620      	mov	r0, r4
 80021a6:	f7fe fce1 	bl	8000b6c <__addsf3>
 80021aa:	4603      	mov	r3, r0
 80021ac:	663b      	str	r3, [r7, #96]	; 0x60
    float iq_measured = -i_alpha * sin_theta + i_beta * cos_theta;
 80021ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80021b4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fde0 	bl	8000d7c <__aeabi_fmul>
 80021bc:	4603      	mov	r3, r0
 80021be:	461c      	mov	r4, r3
 80021c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80021c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80021c4:	f7fe fdda 	bl	8000d7c <__aeabi_fmul>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4619      	mov	r1, r3
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7fe fccd 	bl	8000b6c <__addsf3>
 80021d2:	4603      	mov	r3, r0
 80021d4:	65fb      	str	r3, [r7, #92]	; 0x5c

    iq_measured = fabsf(iq_measured);
 80021d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021dc:	65fb      	str	r3, [r7, #92]	; 0x5c

    // 7. 빠른 전류 지령값 변화
    static float smooth_iq_ref = 0.1f;

    //float iq_change_rate = 2.0f;  // 2.0 A/s (빠르게!)
    float iq_change_rate = 5.0f;
 80021de:	4b26      	ldr	r3, [pc, #152]	; (8002278 <FOC_control+0x5f4>)
 80021e0:	65bb      	str	r3, [r7, #88]	; 0x58
    float max_change = iq_change_rate * 0.005f;
 80021e2:	4926      	ldr	r1, [pc, #152]	; (800227c <FOC_control+0x5f8>)
 80021e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80021e6:	f7fe fdc9 	bl	8000d7c <__aeabi_fmul>
 80021ea:	4603      	mov	r3, r0
 80021ec:	657b      	str	r3, [r7, #84]	; 0x54
    float iq_error_ref = target_iq - smooth_iq_ref;
 80021ee:	4b24      	ldr	r3, [pc, #144]	; (8002280 <FOC_control+0x5fc>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a24      	ldr	r2, [pc, #144]	; (8002284 <FOC_control+0x600>)
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fcb5 	bl	8000b68 <__aeabi_fsub>
 80021fe:	4603      	mov	r3, r0
 8002200:	653b      	str	r3, [r7, #80]	; 0x50

    if(iq_error_ref > max_change) {
 8002202:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002204:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002206:	f7fe ff75 	bl	80010f4 <__aeabi_fcmpgt>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <FOC_control+0x5a2>
        smooth_iq_ref += max_change;
 8002210:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <FOC_control+0x600>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe fca8 	bl	8000b6c <__addsf3>
 800221c:	4603      	mov	r3, r0
 800221e:	461a      	mov	r2, r3
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <FOC_control+0x600>)
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e034      	b.n	8002290 <FOC_control+0x60c>
    } else if(iq_error_ref < -max_change) {
 8002226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800222c:	4619      	mov	r1, r3
 800222e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002230:	f7fe ff42 	bl	80010b8 <__aeabi_fcmplt>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d026      	beq.n	8002288 <FOC_control+0x604>
        smooth_iq_ref -= max_change;
 800223a:	4b12      	ldr	r3, [pc, #72]	; (8002284 <FOC_control+0x600>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe fc91 	bl	8000b68 <__aeabi_fsub>
 8002246:	4603      	mov	r3, r0
 8002248:	461a      	mov	r2, r3
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <FOC_control+0x600>)
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	e01f      	b.n	8002290 <FOC_control+0x60c>
 8002250:	20000314 	.word	0x20000314
 8002254:	20000350 	.word	0x20000350
 8002258:	20000318 	.word	0x20000318
 800225c:	20000354 	.word	0x20000354
 8002260:	20000364 	.word	0x20000364
 8002264:	3f19999a 	.word	0x3f19999a
 8002268:	3ecccccd 	.word	0x3ecccccd
 800226c:	20000368 	.word	0x20000368
 8002270:	3fddb22d 	.word	0x3fddb22d
 8002274:	20000328 	.word	0x20000328
 8002278:	40a00000 	.word	0x40a00000
 800227c:	3ba3d70a 	.word	0x3ba3d70a
 8002280:	20000004 	.word	0x20000004
 8002284:	20000008 	.word	0x20000008
    } else {
        smooth_iq_ref = target_iq;
 8002288:	4b9d      	ldr	r3, [pc, #628]	; (8002500 <FOC_control+0x87c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a9d      	ldr	r2, [pc, #628]	; (8002504 <FOC_control+0x880>)
 800228e:	6013      	str	r3, [r2, #0]

    // 8. 강력한 PID 제어 (빠른 응답)
    static float id_integral = 0.0f;
    static float iq_integral = 0.0f;

    float id_ref = 0.0f;
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	64fb      	str	r3, [r7, #76]	; 0x4c
    float id_error = id_ref - id_measured;
 8002296:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002298:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800229a:	f7fe fc65 	bl	8000b68 <__aeabi_fsub>
 800229e:	4603      	mov	r3, r0
 80022a0:	64bb      	str	r3, [r7, #72]	; 0x48
    float iq_error = smooth_iq_ref - iq_measured;
 80022a2:	4b98      	ldr	r3, [pc, #608]	; (8002504 <FOC_control+0x880>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fc5d 	bl	8000b68 <__aeabi_fsub>
 80022ae:	4603      	mov	r3, r0
 80022b0:	647b      	str	r3, [r7, #68]	; 0x44

    // 가벼운 오차 필터링
    static float id_error_filt = 0, iq_error_filt = 0;
    id_error_filt = 0.5f * id_error_filt + 0.5f * id_error;  // 빠른 응답
 80022b2:	4b95      	ldr	r3, [pc, #596]	; (8002508 <FOC_control+0x884>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fd5e 	bl	8000d7c <__aeabi_fmul>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461c      	mov	r4, r3
 80022c4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80022c8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80022ca:	f7fe fd57 	bl	8000d7c <__aeabi_fmul>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4619      	mov	r1, r3
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7fe fc4a 	bl	8000b6c <__addsf3>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	4b8a      	ldr	r3, [pc, #552]	; (8002508 <FOC_control+0x884>)
 80022de:	601a      	str	r2, [r3, #0]
    iq_error_filt = 0.5f * iq_error_filt + 0.5f * iq_error;
 80022e0:	4b8a      	ldr	r3, [pc, #552]	; (800250c <FOC_control+0x888>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fd47 	bl	8000d7c <__aeabi_fmul>
 80022ee:	4603      	mov	r3, r0
 80022f0:	461c      	mov	r4, r3
 80022f2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80022f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80022f8:	f7fe fd40 	bl	8000d7c <__aeabi_fmul>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4619      	mov	r1, r3
 8002300:	4620      	mov	r0, r4
 8002302:	f7fe fc33 	bl	8000b6c <__addsf3>
 8002306:	4603      	mov	r3, r0
 8002308:	461a      	mov	r2, r3
 800230a:	4b80      	ldr	r3, [pc, #512]	; (800250c <FOC_control+0x888>)
 800230c:	601a      	str	r2, [r3, #0]

    float dt = 0.005f;
 800230e:	4b80      	ldr	r3, [pc, #512]	; (8002510 <FOC_control+0x88c>)
 8002310:	643b      	str	r3, [r7, #64]	; 0x40

    // 적분
    if(fabsf(id_error_filt) < 1.0f) {
 8002312:	4b7d      	ldr	r3, [pc, #500]	; (8002508 <FOC_control+0x884>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800231a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe feca 	bl	80010b8 <__aeabi_fcmplt>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d011      	beq.n	800234e <FOC_control+0x6ca>
        id_integral += id_error_filt * dt;
 800232a:	4b77      	ldr	r3, [pc, #476]	; (8002508 <FOC_control+0x884>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe fd23 	bl	8000d7c <__aeabi_fmul>
 8002336:	4603      	mov	r3, r0
 8002338:	461a      	mov	r2, r3
 800233a:	4b76      	ldr	r3, [pc, #472]	; (8002514 <FOC_control+0x890>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	4610      	mov	r0, r2
 8002342:	f7fe fc13 	bl	8000b6c <__addsf3>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	4b72      	ldr	r3, [pc, #456]	; (8002514 <FOC_control+0x890>)
 800234c:	601a      	str	r2, [r3, #0]
    }
    if(fabsf(iq_error_filt) < 1.0f) {
 800234e:	4b6f      	ldr	r3, [pc, #444]	; (800250c <FOC_control+0x888>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002356:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe feac 	bl	80010b8 <__aeabi_fcmplt>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d011      	beq.n	800238a <FOC_control+0x706>
        iq_integral += iq_error_filt * dt;
 8002366:	4b69      	ldr	r3, [pc, #420]	; (800250c <FOC_control+0x888>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe fd05 	bl	8000d7c <__aeabi_fmul>
 8002372:	4603      	mov	r3, r0
 8002374:	461a      	mov	r2, r3
 8002376:	4b68      	ldr	r3, [pc, #416]	; (8002518 <FOC_control+0x894>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4619      	mov	r1, r3
 800237c:	4610      	mov	r0, r2
 800237e:	f7fe fbf5 	bl	8000b6c <__addsf3>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	4b64      	ldr	r3, [pc, #400]	; (8002518 <FOC_control+0x894>)
 8002388:	601a      	str	r2, [r3, #0]
    //if(id_integral < -0.5f) id_integral = -0.5f;
    //if(iq_integral > 0.5f) iq_integral = 0.5f;
    //if(iq_integral < -0.5f) iq_integral = -0.5f;

    // 적분 제한
    if(id_integral > 0.2f) id_integral = 0.2f;
 800238a:	4b62      	ldr	r3, [pc, #392]	; (8002514 <FOC_control+0x890>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4963      	ldr	r1, [pc, #396]	; (800251c <FOC_control+0x898>)
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe feaf 	bl	80010f4 <__aeabi_fcmpgt>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <FOC_control+0x71e>
 800239c:	4b5d      	ldr	r3, [pc, #372]	; (8002514 <FOC_control+0x890>)
 800239e:	4a5f      	ldr	r2, [pc, #380]	; (800251c <FOC_control+0x898>)
 80023a0:	601a      	str	r2, [r3, #0]
    if(id_integral < -0.2f) id_integral = -0.2f;
 80023a2:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <FOC_control+0x890>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	495e      	ldr	r1, [pc, #376]	; (8002520 <FOC_control+0x89c>)
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fe85 	bl	80010b8 <__aeabi_fcmplt>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <FOC_control+0x736>
 80023b4:	4b57      	ldr	r3, [pc, #348]	; (8002514 <FOC_control+0x890>)
 80023b6:	4a5a      	ldr	r2, [pc, #360]	; (8002520 <FOC_control+0x89c>)
 80023b8:	601a      	str	r2, [r3, #0]
    if(iq_integral > 0.2f) iq_integral = 0.2f;
 80023ba:	4b57      	ldr	r3, [pc, #348]	; (8002518 <FOC_control+0x894>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4957      	ldr	r1, [pc, #348]	; (800251c <FOC_control+0x898>)
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fe97 	bl	80010f4 <__aeabi_fcmpgt>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <FOC_control+0x74e>
 80023cc:	4b52      	ldr	r3, [pc, #328]	; (8002518 <FOC_control+0x894>)
 80023ce:	4a53      	ldr	r2, [pc, #332]	; (800251c <FOC_control+0x898>)
 80023d0:	601a      	str	r2, [r3, #0]
    if(iq_integral < -0.2f) iq_integral = -0.2f;
 80023d2:	4b51      	ldr	r3, [pc, #324]	; (8002518 <FOC_control+0x894>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4952      	ldr	r1, [pc, #328]	; (8002520 <FOC_control+0x89c>)
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe fe6d 	bl	80010b8 <__aeabi_fcmplt>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <FOC_control+0x766>
 80023e4:	4b4c      	ldr	r3, [pc, #304]	; (8002518 <FOC_control+0x894>)
 80023e6:	4a4e      	ldr	r2, [pc, #312]	; (8002520 <FOC_control+0x89c>)
 80023e8:	601a      	str	r2, [r3, #0]

    // PID 게인 조정 (안정성을 위해) (정상)
    //float kp = 1.5f;   // 강력한 비례 게인
    //float ki = 8.0f;   // 강력한 적분 게인

    float kp = 2.0f;   // 강력한 비례 게인
 80023ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    float ki = 10.0f;   // 강력한 적분 게인
 80023f0:	4b4c      	ldr	r3, [pc, #304]	; (8002524 <FOC_control+0x8a0>)
 80023f2:	63bb      	str	r3, [r7, #56]	; 0x38


    float vd_command = kp * id_error_filt + ki * id_integral;
 80023f4:	4b44      	ldr	r3, [pc, #272]	; (8002508 <FOC_control+0x884>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fcbe 	bl	8000d7c <__aeabi_fmul>
 8002400:	4603      	mov	r3, r0
 8002402:	461c      	mov	r4, r3
 8002404:	4b43      	ldr	r3, [pc, #268]	; (8002514 <FOC_control+0x890>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fcb6 	bl	8000d7c <__aeabi_fmul>
 8002410:	4603      	mov	r3, r0
 8002412:	4619      	mov	r1, r3
 8002414:	4620      	mov	r0, r4
 8002416:	f7fe fba9 	bl	8000b6c <__addsf3>
 800241a:	4603      	mov	r3, r0
 800241c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float vq_command = kp * iq_error_filt + ki * iq_integral;
 8002420:	4b3a      	ldr	r3, [pc, #232]	; (800250c <FOC_control+0x888>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fca8 	bl	8000d7c <__aeabi_fmul>
 800242c:	4603      	mov	r3, r0
 800242e:	461c      	mov	r4, r3
 8002430:	4b39      	ldr	r3, [pc, #228]	; (8002518 <FOC_control+0x894>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe fca0 	bl	8000d7c <__aeabi_fmul>
 800243c:	4603      	mov	r3, r0
 800243e:	4619      	mov	r1, r3
 8002440:	4620      	mov	r0, r4
 8002442:	f7fe fb93 	bl	8000b6c <__addsf3>
 8002446:	4603      	mov	r3, r0
 8002448:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    //if(vd_command > 8.0f) vd_command = 8.0f;
    //if(vd_command < -8.0f) vd_command = -8.0f;
    //if(vq_command > 8.0f) vq_command = 8.0f;
    //if(vq_command < -8.0f) vq_command = -8.0f;

    if(vd_command > 11.0f) vd_command =11.0f;
 800244c:	4936      	ldr	r1, [pc, #216]	; (8002528 <FOC_control+0x8a4>)
 800244e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002452:	f7fe fe4f 	bl	80010f4 <__aeabi_fcmpgt>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <FOC_control+0x7de>
 800245c:	4b32      	ldr	r3, [pc, #200]	; (8002528 <FOC_control+0x8a4>)
 800245e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if(vd_command < -11.0f) vd_command = -11.0f;
 8002462:	4932      	ldr	r1, [pc, #200]	; (800252c <FOC_control+0x8a8>)
 8002464:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002468:	f7fe fe26 	bl	80010b8 <__aeabi_fcmplt>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <FOC_control+0x7f4>
 8002472:	4b2e      	ldr	r3, [pc, #184]	; (800252c <FOC_control+0x8a8>)
 8002474:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if(vq_command > 11.0f) vq_command = 11.0f;
 8002478:	492b      	ldr	r1, [pc, #172]	; (8002528 <FOC_control+0x8a4>)
 800247a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800247e:	f7fe fe39 	bl	80010f4 <__aeabi_fcmpgt>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <FOC_control+0x80a>
 8002488:	4b27      	ldr	r3, [pc, #156]	; (8002528 <FOC_control+0x8a4>)
 800248a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if(vq_command < -11.0f) vq_command = -11.0f;
 800248e:	4927      	ldr	r1, [pc, #156]	; (800252c <FOC_control+0x8a8>)
 8002490:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002494:	f7fe fe10 	bl	80010b8 <__aeabi_fcmplt>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <FOC_control+0x820>
 800249e:	4b23      	ldr	r3, [pc, #140]	; (800252c <FOC_control+0x8a8>)
 80024a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c


    // 가벼운 전압 필터링
    vd_smooth = 0.7f * vd_smooth + 0.3f * vd_command;
 80024a4:	4b22      	ldr	r3, [pc, #136]	; (8002530 <FOC_control+0x8ac>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4922      	ldr	r1, [pc, #136]	; (8002534 <FOC_control+0x8b0>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fc66 	bl	8000d7c <__aeabi_fmul>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461c      	mov	r4, r3
 80024b4:	4920      	ldr	r1, [pc, #128]	; (8002538 <FOC_control+0x8b4>)
 80024b6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80024ba:	f7fe fc5f 	bl	8000d7c <__aeabi_fmul>
 80024be:	4603      	mov	r3, r0
 80024c0:	4619      	mov	r1, r3
 80024c2:	4620      	mov	r0, r4
 80024c4:	f7fe fb52 	bl	8000b6c <__addsf3>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <FOC_control+0x8ac>)
 80024ce:	601a      	str	r2, [r3, #0]
    vq_smooth = 0.7f * vq_smooth + 0.3f * vq_command;
 80024d0:	4b1a      	ldr	r3, [pc, #104]	; (800253c <FOC_control+0x8b8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4917      	ldr	r1, [pc, #92]	; (8002534 <FOC_control+0x8b0>)
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fc50 	bl	8000d7c <__aeabi_fmul>
 80024dc:	4603      	mov	r3, r0
 80024de:	461c      	mov	r4, r3
 80024e0:	4915      	ldr	r1, [pc, #84]	; (8002538 <FOC_control+0x8b4>)
 80024e2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80024e6:	f7fe fc49 	bl	8000d7c <__aeabi_fmul>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4619      	mov	r1, r3
 80024ee:	4620      	mov	r0, r4
 80024f0:	f7fe fb3c 	bl	8000b6c <__addsf3>
 80024f4:	4603      	mov	r3, r0
 80024f6:	461a      	mov	r2, r3
 80024f8:	4b10      	ldr	r3, [pc, #64]	; (800253c <FOC_control+0x8b8>)
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	e020      	b.n	8002540 <FOC_control+0x8bc>
 80024fe:	bf00      	nop
 8002500:	20000004 	.word	0x20000004
 8002504:	20000008 	.word	0x20000008
 8002508:	2000036c 	.word	0x2000036c
 800250c:	20000370 	.word	0x20000370
 8002510:	3ba3d70a 	.word	0x3ba3d70a
 8002514:	20000374 	.word	0x20000374
 8002518:	20000378 	.word	0x20000378
 800251c:	3e4ccccd 	.word	0x3e4ccccd
 8002520:	be4ccccd 	.word	0xbe4ccccd
 8002524:	41200000 	.word	0x41200000
 8002528:	41300000 	.word	0x41300000
 800252c:	c1300000 	.word	0xc1300000
 8002530:	2000037c 	.word	0x2000037c
 8002534:	3f333333 	.word	0x3f333333
 8002538:	3e99999a 	.word	0x3e99999a
 800253c:	20000380 	.word	0x20000380

    // 10. 역 Park 변환 및 반응성 있는 PWM
    float v_alpha = vd_smooth * cos_theta - vq_smooth * sin_theta;
 8002540:	4b6f      	ldr	r3, [pc, #444]	; (8002700 <FOC_control+0xa7c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe fc18 	bl	8000d7c <__aeabi_fmul>
 800254c:	4603      	mov	r3, r0
 800254e:	461c      	mov	r4, r3
 8002550:	4b6c      	ldr	r3, [pc, #432]	; (8002704 <FOC_control+0xa80>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fc10 	bl	8000d7c <__aeabi_fmul>
 800255c:	4603      	mov	r3, r0
 800255e:	4619      	mov	r1, r3
 8002560:	4620      	mov	r0, r4
 8002562:	f7fe fb01 	bl	8000b68 <__aeabi_fsub>
 8002566:	4603      	mov	r3, r0
 8002568:	637b      	str	r3, [r7, #52]	; 0x34
    float v_beta = vd_smooth * sin_theta + vq_smooth * cos_theta;
 800256a:	4b65      	ldr	r3, [pc, #404]	; (8002700 <FOC_control+0xa7c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fc03 	bl	8000d7c <__aeabi_fmul>
 8002576:	4603      	mov	r3, r0
 8002578:	461c      	mov	r4, r3
 800257a:	4b62      	ldr	r3, [pc, #392]	; (8002704 <FOC_control+0xa80>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fbfb 	bl	8000d7c <__aeabi_fmul>
 8002586:	4603      	mov	r3, r0
 8002588:	4619      	mov	r1, r3
 800258a:	4620      	mov	r0, r4
 800258c:	f7fe faee 	bl	8000b6c <__addsf3>
 8002590:	4603      	mov	r3, r0
 8002592:	633b      	str	r3, [r7, #48]	; 0x30

    float va = v_alpha;
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
    float vb = -0.5f * v_alpha + 0.866f * v_beta;
 8002598:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800259c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800259e:	f7fe fbed 	bl	8000d7c <__aeabi_fmul>
 80025a2:	4603      	mov	r3, r0
 80025a4:	461c      	mov	r4, r3
 80025a6:	4958      	ldr	r1, [pc, #352]	; (8002708 <FOC_control+0xa84>)
 80025a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025aa:	f7fe fbe7 	bl	8000d7c <__aeabi_fmul>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4619      	mov	r1, r3
 80025b2:	4620      	mov	r0, r4
 80025b4:	f7fe fada 	bl	8000b6c <__addsf3>
 80025b8:	4603      	mov	r3, r0
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
    float vc = -0.5f * v_alpha - 0.866f * v_beta;
 80025bc:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 80025c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80025c2:	f7fe fbdb 	bl	8000d7c <__aeabi_fmul>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461c      	mov	r4, r3
 80025ca:	494f      	ldr	r1, [pc, #316]	; (8002708 <FOC_control+0xa84>)
 80025cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ce:	f7fe fbd5 	bl	8000d7c <__aeabi_fmul>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4619      	mov	r1, r3
 80025d6:	4620      	mov	r0, r4
 80025d8:	f7fe fac6 	bl	8000b68 <__aeabi_fsub>
 80025dc:	4603      	mov	r3, r0
 80025de:	627b      	str	r3, [r7, #36]	; 0x24

    float duty_a = 0.5f + va / 12.0f;
 80025e0:	494a      	ldr	r1, [pc, #296]	; (800270c <FOC_control+0xa88>)
 80025e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025e4:	f7fe fc7e 	bl	8000ee4 <__aeabi_fdiv>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fabc 	bl	8000b6c <__addsf3>
 80025f4:	4603      	mov	r3, r0
 80025f6:	623b      	str	r3, [r7, #32]
    float duty_b = 0.5f + vb / 12.0f;
 80025f8:	4944      	ldr	r1, [pc, #272]	; (800270c <FOC_control+0xa88>)
 80025fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025fc:	f7fe fc72 	bl	8000ee4 <__aeabi_fdiv>
 8002600:	4603      	mov	r3, r0
 8002602:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fab0 	bl	8000b6c <__addsf3>
 800260c:	4603      	mov	r3, r0
 800260e:	61fb      	str	r3, [r7, #28]
    float duty_c = 0.5f + vc / 12.0f;
 8002610:	493e      	ldr	r1, [pc, #248]	; (800270c <FOC_control+0xa88>)
 8002612:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002614:	f7fe fc66 	bl	8000ee4 <__aeabi_fdiv>
 8002618:	4603      	mov	r3, r0
 800261a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe faa4 	bl	8000b6c <__addsf3>
 8002624:	4603      	mov	r3, r0
 8002626:	61bb      	str	r3, [r7, #24]

    // 최소한의 듀티 필터링
    static float smooth_duty_a = 0.5f, smooth_duty_b = 0.5f, smooth_duty_c = 0.5f;

    smooth_duty_a = 0.8f * smooth_duty_a + 0.2f * duty_a;  // 빠른 응답
 8002628:	4b39      	ldr	r3, [pc, #228]	; (8002710 <FOC_control+0xa8c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4939      	ldr	r1, [pc, #228]	; (8002714 <FOC_control+0xa90>)
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fba4 	bl	8000d7c <__aeabi_fmul>
 8002634:	4603      	mov	r3, r0
 8002636:	461c      	mov	r4, r3
 8002638:	4937      	ldr	r1, [pc, #220]	; (8002718 <FOC_control+0xa94>)
 800263a:	6a38      	ldr	r0, [r7, #32]
 800263c:	f7fe fb9e 	bl	8000d7c <__aeabi_fmul>
 8002640:	4603      	mov	r3, r0
 8002642:	4619      	mov	r1, r3
 8002644:	4620      	mov	r0, r4
 8002646:	f7fe fa91 	bl	8000b6c <__addsf3>
 800264a:	4603      	mov	r3, r0
 800264c:	461a      	mov	r2, r3
 800264e:	4b30      	ldr	r3, [pc, #192]	; (8002710 <FOC_control+0xa8c>)
 8002650:	601a      	str	r2, [r3, #0]
    smooth_duty_b = 0.8f * smooth_duty_b + 0.2f * duty_b;
 8002652:	4b32      	ldr	r3, [pc, #200]	; (800271c <FOC_control+0xa98>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	492f      	ldr	r1, [pc, #188]	; (8002714 <FOC_control+0xa90>)
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fb8f 	bl	8000d7c <__aeabi_fmul>
 800265e:	4603      	mov	r3, r0
 8002660:	461c      	mov	r4, r3
 8002662:	492d      	ldr	r1, [pc, #180]	; (8002718 <FOC_control+0xa94>)
 8002664:	69f8      	ldr	r0, [r7, #28]
 8002666:	f7fe fb89 	bl	8000d7c <__aeabi_fmul>
 800266a:	4603      	mov	r3, r0
 800266c:	4619      	mov	r1, r3
 800266e:	4620      	mov	r0, r4
 8002670:	f7fe fa7c 	bl	8000b6c <__addsf3>
 8002674:	4603      	mov	r3, r0
 8002676:	461a      	mov	r2, r3
 8002678:	4b28      	ldr	r3, [pc, #160]	; (800271c <FOC_control+0xa98>)
 800267a:	601a      	str	r2, [r3, #0]
    smooth_duty_c = 0.8f * smooth_duty_c + 0.2f * duty_c;
 800267c:	4b28      	ldr	r3, [pc, #160]	; (8002720 <FOC_control+0xa9c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4924      	ldr	r1, [pc, #144]	; (8002714 <FOC_control+0xa90>)
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fb7a 	bl	8000d7c <__aeabi_fmul>
 8002688:	4603      	mov	r3, r0
 800268a:	461c      	mov	r4, r3
 800268c:	4922      	ldr	r1, [pc, #136]	; (8002718 <FOC_control+0xa94>)
 800268e:	69b8      	ldr	r0, [r7, #24]
 8002690:	f7fe fb74 	bl	8000d7c <__aeabi_fmul>
 8002694:	4603      	mov	r3, r0
 8002696:	4619      	mov	r1, r3
 8002698:	4620      	mov	r0, r4
 800269a:	f7fe fa67 	bl	8000b6c <__addsf3>
 800269e:	4603      	mov	r3, r0
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <FOC_control+0xa9c>)
 80026a4:	601a      	str	r2, [r3, #0]

    set_pwm_duty(smooth_duty_a, smooth_duty_b, smooth_duty_c);
 80026a6:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <FOC_control+0xa8c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1c      	ldr	r2, [pc, #112]	; (800271c <FOC_control+0xa98>)
 80026ac:	6811      	ldr	r1, [r2, #0]
 80026ae:	4a1c      	ldr	r2, [pc, #112]	; (8002720 <FOC_control+0xa9c>)
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff f926 	bl	8001904 <set_pwm_duty>
    // 11. 추가: 간단한 속도 추정 (참고용)
    static uint32_t last_angle_time = 0;
    static float last_angle = 0;
    static float estimated_speed = 0;

    if(HAL_GetTick() - last_angle_time > 200) {  // 200ms마다
 80026b8:	f000 fde0 	bl	800327c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <FOC_control+0xaa0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2bc8      	cmp	r3, #200	; 0xc8
 80026c6:	d974      	bls.n	80027b2 <FOC_control+0xb2e>
        float angle_change = mechanical_angle - last_angle;
 80026c8:	4b17      	ldr	r3, [pc, #92]	; (8002728 <FOC_control+0xaa4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a17      	ldr	r2, [pc, #92]	; (800272c <FOC_control+0xaa8>)
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fa48 	bl	8000b68 <__aeabi_fsub>
 80026d8:	4603      	mov	r3, r0
 80026da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        if(angle_change > PI) angle_change -= TWO_PI;
 80026de:	4914      	ldr	r1, [pc, #80]	; (8002730 <FOC_control+0xaac>)
 80026e0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80026e4:	f7fe fd06 	bl	80010f4 <__aeabi_fcmpgt>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d024      	beq.n	8002738 <FOC_control+0xab4>
 80026ee:	4911      	ldr	r1, [pc, #68]	; (8002734 <FOC_control+0xab0>)
 80026f0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80026f4:	f7fe fa38 	bl	8000b68 <__aeabi_fsub>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026fe:	e02b      	b.n	8002758 <FOC_control+0xad4>
 8002700:	2000037c 	.word	0x2000037c
 8002704:	20000380 	.word	0x20000380
 8002708:	3f5db22d 	.word	0x3f5db22d
 800270c:	41400000 	.word	0x41400000
 8002710:	2000000c 	.word	0x2000000c
 8002714:	3f4ccccd 	.word	0x3f4ccccd
 8002718:	3e4ccccd 	.word	0x3e4ccccd
 800271c:	20000010 	.word	0x20000010
 8002720:	20000014 	.word	0x20000014
 8002724:	20000384 	.word	0x20000384
 8002728:	2000032c 	.word	0x2000032c
 800272c:	20000388 	.word	0x20000388
 8002730:	40490fdb 	.word	0x40490fdb
 8002734:	40c90fdb 	.word	0x40c90fdb
        else if(angle_change < -PI) angle_change += TWO_PI;
 8002738:	4943      	ldr	r1, [pc, #268]	; (8002848 <FOC_control+0xbc4>)
 800273a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800273e:	f7fe fcbb 	bl	80010b8 <__aeabi_fcmplt>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <FOC_control+0xad4>
 8002748:	4940      	ldr	r1, [pc, #256]	; (800284c <FOC_control+0xbc8>)
 800274a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800274e:	f7fe fa0d 	bl	8000b6c <__addsf3>
 8002752:	4603      	mov	r3, r0
 8002754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        float time_diff = (HAL_GetTick() - last_angle_time) / 1000.0f;
 8002758:	f000 fd90 	bl	800327c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	4b3c      	ldr	r3, [pc, #240]	; (8002850 <FOC_control+0xbcc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe fab1 	bl	8000ccc <__aeabi_ui2f>
 800276a:	4603      	mov	r3, r0
 800276c:	4939      	ldr	r1, [pc, #228]	; (8002854 <FOC_control+0xbd0>)
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fbb8 	bl	8000ee4 <__aeabi_fdiv>
 8002774:	4603      	mov	r3, r0
 8002776:	617b      	str	r3, [r7, #20]
        if(time_diff > 0) {
 8002778:	f04f 0100 	mov.w	r1, #0
 800277c:	6978      	ldr	r0, [r7, #20]
 800277e:	f7fe fcb9 	bl	80010f4 <__aeabi_fcmpgt>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00b      	beq.n	80027a0 <FOC_control+0xb1c>
            estimated_speed = fabsf(angle_change) / time_diff;  // rad/s
 8002788:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800278c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002790:	6979      	ldr	r1, [r7, #20]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fba6 	bl	8000ee4 <__aeabi_fdiv>
 8002798:	4603      	mov	r3, r0
 800279a:	461a      	mov	r2, r3
 800279c:	4b2e      	ldr	r3, [pc, #184]	; (8002858 <FOC_control+0xbd4>)
 800279e:	601a      	str	r2, [r3, #0]
        }

        last_angle = mechanical_angle;
 80027a0:	4b2e      	ldr	r3, [pc, #184]	; (800285c <FOC_control+0xbd8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a2e      	ldr	r2, [pc, #184]	; (8002860 <FOC_control+0xbdc>)
 80027a6:	6013      	str	r3, [r2, #0]
        last_angle_time = HAL_GetTick();
 80027a8:	f000 fd68 	bl	800327c <HAL_GetTick>
 80027ac:	4603      	mov	r3, r0
 80027ae:	4a28      	ldr	r2, [pc, #160]	; (8002850 <FOC_control+0xbcc>)
 80027b0:	6013      	str	r3, [r2, #0]
    }

    // 상태 출력 (더 자세히)
    static uint32_t last_print = 0;
    if(HAL_GetTick() - last_print > 1000) {
 80027b2:	f000 fd63 	bl	800327c <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	4b2a      	ldr	r3, [pc, #168]	; (8002864 <FOC_control+0xbe0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c2:	d93d      	bls.n	8002840 <FOC_control+0xbbc>
        printf("VISIBLE: Target=%.2f, Smooth=%.2f, Meas=%.3f, Err=%.3f, Vq=%.2f, Speed~%.1f rad/s\r\n",
 80027c4:	4b28      	ldr	r3, [pc, #160]	; (8002868 <FOC_control+0xbe4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fd fe99 	bl	8000500 <__aeabi_f2d>
 80027ce:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80027d2:	4b26      	ldr	r3, [pc, #152]	; (800286c <FOC_control+0xbe8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fe92 	bl	8000500 <__aeabi_f2d>
 80027dc:	4604      	mov	r4, r0
 80027de:	460d      	mov	r5, r1
 80027e0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80027e2:	f7fd fe8d 	bl	8000500 <__aeabi_f2d>
 80027e6:	4680      	mov	r8, r0
 80027e8:	4689      	mov	r9, r1
 80027ea:	4b21      	ldr	r3, [pc, #132]	; (8002870 <FOC_control+0xbec>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fd fe86 	bl	8000500 <__aeabi_f2d>
 80027f4:	4682      	mov	sl, r0
 80027f6:	468b      	mov	fp, r1
 80027f8:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <FOC_control+0xbf0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fd fe7f 	bl	8000500 <__aeabi_f2d>
 8002802:	e9c7 0100 	strd	r0, r1, [r7]
 8002806:	4b14      	ldr	r3, [pc, #80]	; (8002858 <FOC_control+0xbd4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7fd fe78 	bl	8000500 <__aeabi_f2d>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002818:	e9d7 1200 	ldrd	r1, r2, [r7]
 800281c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8002820:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002824:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002828:	e9cd 4500 	strd	r4, r5, [sp]
 800282c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002830:	4811      	ldr	r0, [pc, #68]	; (8002878 <FOC_control+0xbf4>)
 8002832:	f004 fbe7 	bl	8007004 <iprintf>
               target_iq, smooth_iq_ref, iq_measured, iq_error_filt, vq_smooth, estimated_speed);
        last_print = HAL_GetTick();
 8002836:	f000 fd21 	bl	800327c <HAL_GetTick>
 800283a:	4603      	mov	r3, r0
 800283c:	4a09      	ldr	r2, [pc, #36]	; (8002864 <FOC_control+0xbe0>)
 800283e:	6013      	str	r3, [r2, #0]
    }
}
 8002840:	3798      	adds	r7, #152	; 0x98
 8002842:	46bd      	mov	sp, r7
 8002844:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002848:	c0490fdb 	.word	0xc0490fdb
 800284c:	40c90fdb 	.word	0x40c90fdb
 8002850:	20000384 	.word	0x20000384
 8002854:	447a0000 	.word	0x447a0000
 8002858:	2000038c 	.word	0x2000038c
 800285c:	2000032c 	.word	0x2000032c
 8002860:	20000388 	.word	0x20000388
 8002864:	20000390 	.word	0x20000390
 8002868:	20000004 	.word	0x20000004
 800286c:	20000008 	.word	0x20000008
 8002870:	20000370 	.word	0x20000370
 8002874:	20000380 	.word	0x20000380
 8002878:	0800a1fc 	.word	0x0800a1fc

0800287c <SystemClock_Config>:
    result.q = -ab.alpha * sin_theta + ab.beta * cos_theta;
    return result;
}

void SystemClock_Config(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b096      	sub	sp, #88	; 0x58
 8002880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002886:	2228      	movs	r2, #40	; 0x28
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f004 fd00 	bl	8007290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028a0:	1d3b      	adds	r3, r7, #4
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
 80028ac:	611a      	str	r2, [r3, #16]
 80028ae:	615a      	str	r2, [r3, #20]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028b0:	2301      	movs	r3, #1
 80028b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80028ba:	2300      	movs	r3, #0
 80028bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028be:	2301      	movs	r3, #1
 80028c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028c2:	2302      	movs	r3, #2
 80028c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80028d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 f864 	bl	80049a4 <HAL_RCC_OscConfig>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80028e2:	f000 fa0d 	bl	8002d00 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028e6:	230f      	movs	r3, #15
 80028e8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ea:	2302      	movs	r3, #2
 80028ec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	2102      	movs	r1, #2
 8002902:	4618      	mov	r0, r3
 8002904:	f002 fad0 	bl	8004ea8 <HAL_RCC_ClockConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800290e:	f000 f9f7 	bl	8002d00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002912:	2302      	movs	r3, #2
 8002914:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800291a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	4618      	mov	r0, r3
 8002920:	f002 fc50 	bl	80051c4 <HAL_RCCEx_PeriphCLKConfig>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800292a:	f000 f9e9 	bl	8002d00 <Error_Handler>
  }
}
 800292e:	bf00      	nop
 8002930:	3758      	adds	r7, #88	; 0x58
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	60da      	str	r2, [r3, #12]

  __HAL_RCC_GPIOF_CLK_ENABLE();
 800294c:	4b1e      	ldr	r3, [pc, #120]	; (80029c8 <MX_GPIO_Init+0x90>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <MX_GPIO_Init+0x90>)
 8002952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002956:	6193      	str	r3, [r2, #24]
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <MX_GPIO_Init+0x90>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002964:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <MX_GPIO_Init+0x90>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	4a17      	ldr	r2, [pc, #92]	; (80029c8 <MX_GPIO_Init+0x90>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6193      	str	r3, [r2, #24]
 8002970:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <MX_GPIO_Init+0x90>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800297c:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <MX_GPIO_Init+0x90>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	4a11      	ldr	r2, [pc, #68]	; (80029c8 <MX_GPIO_Init+0x90>)
 8002982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002986:	6193      	str	r3, [r2, #24]
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <MX_GPIO_Init+0x90>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, GPIO_PIN_RESET);
 8002994:	2200      	movs	r2, #0
 8002996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800299a:	480c      	ldr	r0, [pc, #48]	; (80029cc <MX_GPIO_Init+0x94>)
 800299c:	f001 ffe9 	bl	8004972 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = Enable_Pin;
 80029a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a6:	2301      	movs	r3, #1
 80029a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ae:	2302      	movs	r3, #2
 80029b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Enable_GPIO_Port, &GPIO_InitStruct);
 80029b2:	f107 0310 	add.w	r3, r7, #16
 80029b6:	4619      	mov	r1, r3
 80029b8:	4804      	ldr	r0, [pc, #16]	; (80029cc <MX_GPIO_Init+0x94>)
 80029ba:	f001 fe2f 	bl	800461c <HAL_GPIO_Init>
}
 80029be:	bf00      	nop
 80029c0:	3720      	adds	r7, #32
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40011800 	.word	0x40011800

080029d0 <MX_ADC3_Init>:

static void MX_ADC3_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]

	hadc3.Instance = ADC3;
 80029e0:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <MX_ADC3_Init+0x98>)
 80029e2:	4a22      	ldr	r2, [pc, #136]	; (8002a6c <MX_ADC3_Init+0x9c>)
 80029e4:	601a      	str	r2, [r3, #0]
	hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80029e6:	4b20      	ldr	r3, [pc, #128]	; (8002a68 <MX_ADC3_Init+0x98>)
 80029e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ec:	609a      	str	r2, [r3, #8]
	hadc3.Init.ContinuousConvMode = ENABLE;
 80029ee:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <MX_ADC3_Init+0x98>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	731a      	strb	r2, [r3, #12]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80029f4:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <MX_ADC3_Init+0x98>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	751a      	strb	r2, [r3, #20]
	//hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029fa:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <MX_ADC3_Init+0x98>)
 80029fc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002a00:	61da      	str	r2, [r3, #28]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a02:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <MX_ADC3_Init+0x98>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	605a      	str	r2, [r3, #4]
	hadc3.Init.NbrOfConversion = 2;
 8002a08:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <MX_ADC3_Init+0x98>)
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002a0e:	4816      	ldr	r0, [pc, #88]	; (8002a68 <MX_ADC3_Init+0x98>)
 8002a10:	f000 fc62 	bl	80032d8 <HAL_ADC_Init>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_ADC3_Init+0x4e>
	{
		Error_Handler();
 8002a1a:	f000 f971 	bl	8002d00 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_4;
 8002a1e:	2304      	movs	r3, #4
 8002a20:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002a26:	2307      	movs	r3, #7
 8002a28:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a2a:	1d3b      	adds	r3, r7, #4
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	480e      	ldr	r0, [pc, #56]	; (8002a68 <MX_ADC3_Init+0x98>)
 8002a30:	f000 fef4 	bl	800381c <HAL_ADC_ConfigChannel>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_ADC3_Init+0x6e>
	{
		Error_Handler();
 8002a3a:	f000 f961 	bl	8002d00 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_5;
 8002a3e:	2305      	movs	r3, #5
 8002a40:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8002a42:	2302      	movs	r3, #2
 8002a44:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002a46:	2307      	movs	r3, #7
 8002a48:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4806      	ldr	r0, [pc, #24]	; (8002a68 <MX_ADC3_Init+0x98>)
 8002a50:	f000 fee4 	bl	800381c <HAL_ADC_ConfigChannel>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_ADC3_Init+0x8e>
	{
		Error_Handler();
 8002a5a:	f000 f951 	bl	8002d00 <Error_Handler>
	}
}
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000208 	.word	0x20000208
 8002a6c:	40013c00 	.word	0x40013c00

08002a70 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC3){
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <HAL_ADC_ConvCpltCallback+0x24>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d102      	bne.n	8002a88 <HAL_ADC_ConvCpltCallback+0x18>
		adc_conversion_complete = 1;
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_ADC_ConvCpltCallback+0x28>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
	}
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40013c00 	.word	0x40013c00
 8002a98:	20000310 	.word	0x20000310

08002a9c <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
	//__HAL_RCC_DMA2_CLK_ENABLE();
	//HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002aa2:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <MX_DMA_Init+0x88>)
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <MX_DMA_Init+0x88>)
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	6153      	str	r3, [r2, #20]
 8002aae:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <MX_DMA_Init+0x88>)
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
	// DMA 핸들 구성
	hdma_adc3.Instance = DMA2_Channel5;  // ADC3는 보통 DMA2_Channel5 사용
 8002aba:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <MX_DMA_Init+0x8c>)
 8002abc:	4a1b      	ldr	r2, [pc, #108]	; (8002b2c <MX_DMA_Init+0x90>)
 8002abe:	601a      	str	r2, [r3, #0]
	hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ac0:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <MX_DMA_Init+0x8c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	605a      	str	r2, [r3, #4]
	hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac6:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <MX_DMA_Init+0x8c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
	hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002acc:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <MX_DMA_Init+0x8c>)
 8002ace:	2280      	movs	r2, #128	; 0x80
 8002ad0:	60da      	str	r2, [r3, #12]
	hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <MX_DMA_Init+0x8c>)
 8002ad4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ad8:	611a      	str	r2, [r3, #16]
	hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ada:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <MX_DMA_Init+0x8c>)
 8002adc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ae0:	615a      	str	r2, [r3, #20]
	hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <MX_DMA_Init+0x8c>)
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	619a      	str	r2, [r3, #24]
	hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <MX_DMA_Init+0x8c>)
 8002aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aee:	61da      	str	r2, [r3, #28]

	if (HAL_DMA_Init(&hdma_adc3) != HAL_OK) {
 8002af0:	480d      	ldr	r0, [pc, #52]	; (8002b28 <MX_DMA_Init+0x8c>)
 8002af2:	f001 fa53 	bl	8003f9c <HAL_DMA_Init>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_DMA_Init+0x64>
		Error_Handler();
 8002afc:	f000 f900 	bl	8002d00 <Error_Handler>
	}
	// ADC와 DMA 연결
	__HAL_LINKDMA(&hadc3, DMA_Handle, hdma_adc3);
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <MX_DMA_Init+0x94>)
 8002b02:	4a09      	ldr	r2, [pc, #36]	; (8002b28 <MX_DMA_Init+0x8c>)
 8002b04:	621a      	str	r2, [r3, #32]
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <MX_DMA_Init+0x8c>)
 8002b08:	4a09      	ldr	r2, [pc, #36]	; (8002b30 <MX_DMA_Init+0x94>)
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24
	// DMA 인터럽트 설정
	HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2100      	movs	r1, #0
 8002b10:	203b      	movs	r0, #59	; 0x3b
 8002b12:	f001 fa0c 	bl	8003f2e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8002b16:	203b      	movs	r0, #59	; 0x3b
 8002b18:	f001 fa25 	bl	8003f66 <HAL_NVIC_EnableIRQ>
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40021000 	.word	0x40021000
 8002b28:	20000238 	.word	0x20000238
 8002b2c:	40020458 	.word	0x40020458
 8002b30:	20000208 	.word	0x20000208

08002b34 <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b098      	sub	sp, #96	; 0x60
 8002b38:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002b44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
 8002b54:	615a      	str	r2, [r3, #20]
 8002b56:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b58:	f107 031c 	add.w	r3, r7, #28
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f004 fb95 	bl	8007290 <memset>

	htim1.Instance = TIM1;
 8002b66:	4b4f      	ldr	r3, [pc, #316]	; (8002ca4 <MX_TIM1_Init+0x170>)
 8002b68:	4a4f      	ldr	r2, [pc, #316]	; (8002ca8 <MX_TIM1_Init+0x174>)
 8002b6a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8002b6c:	4b4d      	ldr	r3, [pc, #308]	; (8002ca4 <MX_TIM1_Init+0x170>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b72:	4b4c      	ldr	r3, [pc, #304]	; (8002ca4 <MX_TIM1_Init+0x170>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 2000;
 8002b78:	4b4a      	ldr	r3, [pc, #296]	; (8002ca4 <MX_TIM1_Init+0x170>)
 8002b7a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002b7e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b80:	4b48      	ldr	r3, [pc, #288]	; (8002ca4 <MX_TIM1_Init+0x170>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <MX_TIM1_Init+0x170>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b8c:	4b45      	ldr	r3, [pc, #276]	; (8002ca4 <MX_TIM1_Init+0x170>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b92:	4844      	ldr	r0, [pc, #272]	; (8002ca4 <MX_TIM1_Init+0x170>)
 8002b94:	f002 fdb6 	bl	8005704 <HAL_TIM_PWM_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 8002b9e:	f000 f8af 	bl	8002d00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002baa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bae:	4619      	mov	r1, r3
 8002bb0:	483c      	ldr	r0, [pc, #240]	; (8002ca4 <MX_TIM1_Init+0x170>)
 8002bb2:	f003 fa25 	bl	8006000 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM1_Init+0x8c>
	{
		Error_Handler();
 8002bbc:	f000 f8a0 	bl	8002d00 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc0:	2360      	movs	r3, #96	; 0x60
 8002bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.Pulse = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bdc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002be0:	2200      	movs	r2, #0
 8002be2:	4619      	mov	r1, r3
 8002be4:	482f      	ldr	r0, [pc, #188]	; (8002ca4 <MX_TIM1_Init+0x170>)
 8002be6:	f002 fef3 	bl	80059d0 <HAL_TIM_PWM_ConfigChannel>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_TIM1_Init+0xc0>
	{
		Error_Handler();
 8002bf0:	f000 f886 	bl	8002d00 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bf4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4829      	ldr	r0, [pc, #164]	; (8002ca4 <MX_TIM1_Init+0x170>)
 8002bfe:	f002 fee7 	bl	80059d0 <HAL_TIM_PWM_ConfigChannel>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_TIM1_Init+0xd8>
	{
		Error_Handler();
 8002c08:	f000 f87a 	bl	8002d00 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c10:	2208      	movs	r2, #8
 8002c12:	4619      	mov	r1, r3
 8002c14:	4823      	ldr	r0, [pc, #140]	; (8002ca4 <MX_TIM1_Init+0x170>)
 8002c16:	f002 fedb 	bl	80059d0 <HAL_TIM_PWM_ConfigChannel>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM1_Init+0xf0>
	{
		Error_Handler();
 8002c20:	f000 f86e 	bl	8002d00 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.DeadTime = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c3c:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c42:	f107 031c 	add.w	r3, r7, #28
 8002c46:	4619      	mov	r1, r3
 8002c48:	4816      	ldr	r0, [pc, #88]	; (8002ca4 <MX_TIM1_Init+0x170>)
 8002c4a:	f003 fa45 	bl	80060d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_TIM1_Init+0x124>
	{
		Error_Handler();
 8002c54:	f000 f854 	bl	8002d00 <Error_Handler>
	}
	TIM_OC_InitTypeDef sConfigOC_CH3 = {0};
 8002c58:	463b      	mov	r3, r7
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	60da      	str	r2, [r3, #12]
 8002c64:	611a      	str	r2, [r3, #16]
 8002c66:	615a      	str	r2, [r3, #20]
 8002c68:	619a      	str	r2, [r3, #24]
	sConfigOC_CH3.OCMode = TIM_OCMODE_PWM1;
 8002c6a:	2360      	movs	r3, #96	; 0x60
 8002c6c:	603b      	str	r3, [r7, #0]
	sConfigOC_CH3.Pulse = 1000;  // Period(2000)의 50% 지점
 8002c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c72:	607b      	str	r3, [r7, #4]
	sConfigOC_CH3.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60bb      	str	r3, [r7, #8]
	sConfigOC_CH3.OCFastMode = TIM_OCFAST_DISABLE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	613b      	str	r3, [r7, #16]
	sConfigOC_CH3.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]

	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC_CH3, TIM_CHANNEL_3) != HAL_OK)
 8002c80:	463b      	mov	r3, r7
 8002c82:	2208      	movs	r2, #8
 8002c84:	4619      	mov	r1, r3
 8002c86:	4807      	ldr	r0, [pc, #28]	; (8002ca4 <MX_TIM1_Init+0x170>)
 8002c88:	f002 fe46 	bl	8005918 <HAL_TIM_OC_ConfigChannel>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_TIM1_Init+0x162>
	{
		Error_Handler();
 8002c92:	f000 f835 	bl	8002d00 <Error_Handler>
	}
	HAL_TIM_MspPostInit(&htim1);
 8002c96:	4803      	ldr	r0, [pc, #12]	; (8002ca4 <MX_TIM1_Init+0x170>)
 8002c98:	f000 f8fa 	bl	8002e90 <HAL_TIM_MspPostInit>
}
 8002c9c:	bf00      	nop
 8002c9e:	3760      	adds	r7, #96	; 0x60
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	2000027c 	.word	0x2000027c
 8002ca8:	40012c00 	.word	0x40012c00

08002cac <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002cb2:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <MX_USART2_UART_Init+0x50>)
 8002cb4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cbc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002cca:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002cd0:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002cd2:	220c      	movs	r2, #12
 8002cd4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd6:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ce2:	4805      	ldr	r0, [pc, #20]	; (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002ce4:	f003 fa49 	bl	800617a <HAL_UART_Init>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8002cee:	f000 f807 	bl	8002d00 <Error_Handler>
	}
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200002c4 	.word	0x200002c4
 8002cfc:	40004400 	.word	0x40004400

08002d00 <Error_Handler>:

void Error_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d04:	b672      	cpsid	i
}
 8002d06:	bf00      	nop
  __disable_irq();
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <Error_Handler+0x8>
	...

08002d0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d12:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <HAL_MspInit+0x5c>)
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <HAL_MspInit+0x5c>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6193      	str	r3, [r2, #24]
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_MspInit+0x5c>)
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <HAL_MspInit+0x5c>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <HAL_MspInit+0x5c>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d34:	61d3      	str	r3, [r2, #28]
 8002d36:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <HAL_MspInit+0x5c>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <HAL_MspInit+0x60>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <HAL_MspInit+0x60>)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40010000 	.word	0x40010000

08002d70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 0310 	add.w	r3, r7, #16
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC3)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a2d      	ldr	r2, [pc, #180]	; (8002e40 <HAL_ADC_MspInit+0xd0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d152      	bne.n	8002e36 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d90:	4b2c      	ldr	r3, [pc, #176]	; (8002e44 <HAL_ADC_MspInit+0xd4>)
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	4a2b      	ldr	r2, [pc, #172]	; (8002e44 <HAL_ADC_MspInit+0xd4>)
 8002d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d9a:	6193      	str	r3, [r2, #24]
 8002d9c:	4b29      	ldr	r3, [pc, #164]	; (8002e44 <HAL_ADC_MspInit+0xd4>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002da8:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <HAL_ADC_MspInit+0xd4>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	4a25      	ldr	r2, [pc, #148]	; (8002e44 <HAL_ADC_MspInit+0xd4>)
 8002dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db2:	6193      	str	r3, [r2, #24]
 8002db4:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <HAL_ADC_MspInit+0xd4>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF6     ------> ADC3_IN4
    PF7     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = phase_a_Pin|phase_b_Pin;
 8002dc0:	23c0      	movs	r3, #192	; 0xc0
 8002dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dc8:	f107 0310 	add.w	r3, r7, #16
 8002dcc:	4619      	mov	r1, r3
 8002dce:	481e      	ldr	r0, [pc, #120]	; (8002e48 <HAL_ADC_MspInit+0xd8>)
 8002dd0:	f001 fc24 	bl	800461c <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Channel5;
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <HAL_ADC_MspInit+0xdc>)
 8002dd6:	4a1e      	ldr	r2, [pc, #120]	; (8002e50 <HAL_ADC_MspInit+0xe0>)
 8002dd8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dda:	4b1c      	ldr	r3, [pc, #112]	; (8002e4c <HAL_ADC_MspInit+0xdc>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002de0:	4b1a      	ldr	r3, [pc, #104]	; (8002e4c <HAL_ADC_MspInit+0xdc>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002de6:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_ADC_MspInit+0xdc>)
 8002de8:	2280      	movs	r2, #128	; 0x80
 8002dea:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dec:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <HAL_ADC_MspInit+0xdc>)
 8002dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002df4:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <HAL_ADC_MspInit+0xdc>)
 8002df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dfa:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002dfc:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <HAL_ADC_MspInit+0xdc>)
 8002dfe:	2220      	movs	r2, #32
 8002e00:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e02:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_ADC_MspInit+0xdc>)
 8002e04:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002e08:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002e0a:	4810      	ldr	r0, [pc, #64]	; (8002e4c <HAL_ADC_MspInit+0xdc>)
 8002e0c:	f001 f8c6 	bl	8003f9c <HAL_DMA_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8002e16:	f7ff ff73 	bl	8002d00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a0b      	ldr	r2, [pc, #44]	; (8002e4c <HAL_ADC_MspInit+0xdc>)
 8002e1e:	621a      	str	r2, [r3, #32]
 8002e20:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <HAL_ADC_MspInit+0xdc>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2100      	movs	r1, #0
 8002e2a:	202f      	movs	r0, #47	; 0x2f
 8002e2c:	f001 f87f 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002e30:	202f      	movs	r0, #47	; 0x2f
 8002e32:	f001 f898 	bl	8003f66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8002e36:	bf00      	nop
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40013c00 	.word	0x40013c00
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40011c00 	.word	0x40011c00
 8002e4c:	20000238 	.word	0x20000238
 8002e50:	40020458 	.word	0x40020458

08002e54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a09      	ldr	r2, [pc, #36]	; (8002e88 <HAL_TIM_PWM_MspInit+0x34>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d10b      	bne.n	8002e7e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_TIM_PWM_MspInit+0x38>)
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	4a08      	ldr	r2, [pc, #32]	; (8002e8c <HAL_TIM_PWM_MspInit+0x38>)
 8002e6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e70:	6193      	str	r3, [r2, #24]
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_TIM_PWM_MspInit+0x38>)
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002e7e:	bf00      	nop
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	40012c00 	.word	0x40012c00
 8002e8c:	40021000 	.word	0x40021000

08002e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 030c 	add.w	r3, r7, #12
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_TIM_MspPostInit+0x80>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d12a      	bne.n	8002f06 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eb0:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <HAL_TIM_MspPostInit+0x84>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <HAL_TIM_MspPostInit+0x84>)
 8002eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eba:	6193      	str	r3, [r2, #24]
 8002ebc:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_TIM_MspPostInit+0x84>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_A_Pin|PWM_B_Pin|PWM_C_Pin;
 8002ec8:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8002ecc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ed6:	f107 030c 	add.w	r3, r7, #12
 8002eda:	4619      	mov	r1, r3
 8002edc:	480e      	ldr	r0, [pc, #56]	; (8002f18 <HAL_TIM_MspPostInit+0x88>)
 8002ede:	f001 fb9d 	bl	800461c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <HAL_TIM_MspPostInit+0x8c>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002eee:	61fb      	str	r3, [r7, #28]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ef6:	61fb      	str	r3, [r7, #28]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	4a06      	ldr	r2, [pc, #24]	; (8002f1c <HAL_TIM_MspPostInit+0x8c>)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f06:	bf00      	nop
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40012c00 	.word	0x40012c00
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40011800 	.word	0x40011800
 8002f1c:	40010000 	.word	0x40010000

08002f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	f107 0310 	add.w	r3, r7, #16
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1b      	ldr	r2, [pc, #108]	; (8002fa8 <HAL_UART_MspInit+0x88>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d12f      	bne.n	8002fa0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_UART_MspInit+0x8c>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	4a19      	ldr	r2, [pc, #100]	; (8002fac <HAL_UART_MspInit+0x8c>)
 8002f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4a:	61d3      	str	r3, [r2, #28]
 8002f4c:	4b17      	ldr	r3, [pc, #92]	; (8002fac <HAL_UART_MspInit+0x8c>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f58:	4b14      	ldr	r3, [pc, #80]	; (8002fac <HAL_UART_MspInit+0x8c>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	4a13      	ldr	r2, [pc, #76]	; (8002fac <HAL_UART_MspInit+0x8c>)
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	6193      	str	r3, [r2, #24]
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <HAL_UART_MspInit+0x8c>)
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f70:	2304      	movs	r3, #4
 8002f72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f74:	2302      	movs	r3, #2
 8002f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7c:	f107 0310 	add.w	r3, r7, #16
 8002f80:	4619      	mov	r1, r3
 8002f82:	480b      	ldr	r0, [pc, #44]	; (8002fb0 <HAL_UART_MspInit+0x90>)
 8002f84:	f001 fb4a 	bl	800461c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f88:	2308      	movs	r3, #8
 8002f8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f94:	f107 0310 	add.w	r3, r7, #16
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4805      	ldr	r0, [pc, #20]	; (8002fb0 <HAL_UART_MspInit+0x90>)
 8002f9c:	f001 fb3e 	bl	800461c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002fa0:	bf00      	nop
 8002fa2:	3720      	adds	r7, #32
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40004400 	.word	0x40004400
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40010800 	.word	0x40010800

08002fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fb8:	e7fe      	b.n	8002fb8 <NMI_Handler+0x4>

08002fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fbe:	e7fe      	b.n	8002fbe <HardFault_Handler+0x4>

08002fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fc4:	e7fe      	b.n	8002fc4 <MemManage_Handler+0x4>

08002fc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fca:	e7fe      	b.n	8002fca <BusFault_Handler+0x4>

08002fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fd0:	e7fe      	b.n	8002fd0 <UsageFault_Handler+0x4>

08002fd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr

08002fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ffa:	f000 f92d 	bl	8003258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <ADC3_IRQHandler>:
/**
  * @brief This function handles ADC3 global interrupt.
  */

void ADC3_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc3);
 8003008:	4802      	ldr	r0, [pc, #8]	; (8003014 <ADC3_IRQHandler+0x10>)
 800300a:	f000 fb2d 	bl	8003668 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000208 	.word	0x20000208

08003018 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800301c:	4802      	ldr	r0, [pc, #8]	; (8003028 <DMA2_Channel4_5_IRQHandler+0x10>)
 800301e:	f001 f893 	bl	8004148 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000238 	.word	0x20000238

0800302c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return 1;
 8003030:	2301      	movs	r3, #1
}
 8003032:	4618      	mov	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <_kill>:

int _kill(int pid, int sig)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003044:	f004 f976 	bl	8007334 <__errno>
 8003048:	4603      	mov	r3, r0
 800304a:	2216      	movs	r2, #22
 800304c:	601a      	str	r2, [r3, #0]
  return -1;
 800304e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <_exit>:

void _exit (int status)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003062:	f04f 31ff 	mov.w	r1, #4294967295
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ffe7 	bl	800303a <_kill>
  while (1) {}    /* Make sure we hang here */
 800306c:	e7fe      	b.n	800306c <_exit+0x12>

0800306e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b086      	sub	sp, #24
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	e00a      	b.n	8003096 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003080:	f3af 8000 	nop.w
 8003084:	4601      	mov	r1, r0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	60ba      	str	r2, [r7, #8]
 800308c:	b2ca      	uxtb	r2, r1
 800308e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	3301      	adds	r3, #1
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	429a      	cmp	r2, r3
 800309c:	dbf0      	blt.n	8003080 <_read+0x12>
  }

  return len;
 800309e:	687b      	ldr	r3, [r7, #4]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030ce:	605a      	str	r2, [r3, #4]
  return 0;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <_isatty>:

int _isatty(int file)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030e4:	2301      	movs	r3, #1
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003110:	4a14      	ldr	r2, [pc, #80]	; (8003164 <_sbrk+0x5c>)
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <_sbrk+0x60>)
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <_sbrk+0x64>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <_sbrk+0x64>)
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <_sbrk+0x68>)
 8003128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <_sbrk+0x64>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	429a      	cmp	r2, r3
 8003136:	d207      	bcs.n	8003148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003138:	f004 f8fc 	bl	8007334 <__errno>
 800313c:	4603      	mov	r3, r0
 800313e:	220c      	movs	r2, #12
 8003140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	e009      	b.n	800315c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <_sbrk+0x64>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <_sbrk+0x64>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	4a05      	ldr	r2, [pc, #20]	; (800316c <_sbrk+0x64>)
 8003158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800315a:	68fb      	ldr	r3, [r7, #12]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20010000 	.word	0x20010000
 8003168:	00000400 	.word	0x00000400
 800316c:	20000394 	.word	0x20000394
 8003170:	200004e8 	.word	0x200004e8

08003174 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003180:	f7ff fff8 	bl	8003174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003184:	480b      	ldr	r0, [pc, #44]	; (80031b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003186:	490c      	ldr	r1, [pc, #48]	; (80031b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003188:	4a0c      	ldr	r2, [pc, #48]	; (80031bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800318a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800318c:	e002      	b.n	8003194 <LoopCopyDataInit>

0800318e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800318e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003192:	3304      	adds	r3, #4

08003194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003198:	d3f9      	bcc.n	800318e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800319a:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800319c:	4c09      	ldr	r4, [pc, #36]	; (80031c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800319e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a0:	e001      	b.n	80031a6 <LoopFillZerobss>

080031a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031a4:	3204      	adds	r2, #4

080031a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031a8:	d3fb      	bcc.n	80031a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031aa:	f004 f8c9 	bl	8007340 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031ae:	f7fe fb07 	bl	80017c0 <main>
  bx lr
 80031b2:	4770      	bx	lr
  ldr r0, =_sdata
 80031b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031b8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80031bc:	0800a9dc 	.word	0x0800a9dc
  ldr r2, =_sbss
 80031c0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80031c4:	200004e8 	.word	0x200004e8

080031c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031c8:	e7fe      	b.n	80031c8 <ADC1_2_IRQHandler>
	...

080031cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <HAL_Init+0x28>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a07      	ldr	r2, [pc, #28]	; (80031f4 <HAL_Init+0x28>)
 80031d6:	f043 0310 	orr.w	r3, r3, #16
 80031da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031dc:	2003      	movs	r0, #3
 80031de:	f000 fe9b 	bl	8003f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031e2:	200f      	movs	r0, #15
 80031e4:	f000 f808 	bl	80031f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031e8:	f7ff fd90 	bl	8002d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40022000 	.word	0x40022000

080031f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003200:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_InitTick+0x54>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_InitTick+0x58>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	4619      	mov	r1, r3
 800320a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800320e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003212:	fbb2 f3f3 	udiv	r3, r2, r3
 8003216:	4618      	mov	r0, r3
 8003218:	f000 feb3 	bl	8003f82 <HAL_SYSTICK_Config>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e00e      	b.n	8003244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b0f      	cmp	r3, #15
 800322a:	d80a      	bhi.n	8003242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800322c:	2200      	movs	r2, #0
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	f04f 30ff 	mov.w	r0, #4294967295
 8003234:	f000 fe7b 	bl	8003f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003238:	4a06      	ldr	r2, [pc, #24]	; (8003254 <HAL_InitTick+0x5c>)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	e000      	b.n	8003244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000018 	.word	0x20000018
 8003250:	20000020 	.word	0x20000020
 8003254:	2000001c 	.word	0x2000001c

08003258 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_IncTick+0x1c>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_IncTick+0x20>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4413      	add	r3, r2
 8003268:	4a03      	ldr	r2, [pc, #12]	; (8003278 <HAL_IncTick+0x20>)
 800326a:	6013      	str	r3, [r2, #0]
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	20000020 	.word	0x20000020
 8003278:	20000398 	.word	0x20000398

0800327c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return uwTick;
 8003280:	4b02      	ldr	r3, [pc, #8]	; (800328c <HAL_GetTick+0x10>)
 8003282:	681b      	ldr	r3, [r3, #0]
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr
 800328c:	20000398 	.word	0x20000398

08003290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003298:	f7ff fff0 	bl	800327c <HAL_GetTick>
 800329c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a8:	d005      	beq.n	80032b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032aa:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <HAL_Delay+0x44>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032b6:	bf00      	nop
 80032b8:	f7ff ffe0 	bl	800327c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d8f7      	bhi.n	80032b8 <HAL_Delay+0x28>
  {
  }
}
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000020 	.word	0x20000020

080032d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0ce      	b.n	8003498 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff fd2a 	bl	8002d70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 fbcf 	bl	8003ac0 <ADC_ConversionStop_Disable>
 8003322:	4603      	mov	r3, r0
 8003324:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b00      	cmp	r3, #0
 8003330:	f040 80a9 	bne.w	8003486 <HAL_ADC_Init+0x1ae>
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 80a5 	bne.w	8003486 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003344:	f023 0302 	bic.w	r3, r3, #2
 8003348:	f043 0202 	orr.w	r2, r3, #2
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4951      	ldr	r1, [pc, #324]	; (80034a0 <HAL_ADC_Init+0x1c8>)
 800335a:	428b      	cmp	r3, r1
 800335c:	d10a      	bne.n	8003374 <HAL_ADC_Init+0x9c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003366:	d002      	beq.n	800336e <HAL_ADC_Init+0x96>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	e004      	b.n	8003378 <HAL_ADC_Init+0xa0>
 800336e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003372:	e001      	b.n	8003378 <HAL_ADC_Init+0xa0>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003378:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	7b1b      	ldrb	r3, [r3, #12]
 800337e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003380:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	4313      	orrs	r3, r2
 8003386:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003390:	d003      	beq.n	800339a <HAL_ADC_Init+0xc2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d102      	bne.n	80033a0 <HAL_ADC_Init+0xc8>
 800339a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800339e:	e000      	b.n	80033a2 <HAL_ADC_Init+0xca>
 80033a0:	2300      	movs	r3, #0
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	7d1b      	ldrb	r3, [r3, #20]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d119      	bne.n	80033e4 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	7b1b      	ldrb	r3, [r3, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d109      	bne.n	80033cc <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	3b01      	subs	r3, #1
 80033be:	035a      	lsls	r2, r3, #13
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	e00b      	b.n	80033e4 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	f043 0201 	orr.w	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	4b29      	ldr	r3, [pc, #164]	; (80034a4 <HAL_ADC_Init+0x1cc>)
 8003400:	4013      	ands	r3, r2
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	430b      	orrs	r3, r1
 800340a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003414:	d003      	beq.n	800341e <HAL_ADC_Init+0x146>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d104      	bne.n	8003428 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	3b01      	subs	r3, #1
 8003424:	051b      	lsls	r3, r3, #20
 8003426:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	430a      	orrs	r2, r1
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	4b19      	ldr	r3, [pc, #100]	; (80034a8 <HAL_ADC_Init+0x1d0>)
 8003444:	4013      	ands	r3, r2
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	429a      	cmp	r2, r3
 800344a:	d10b      	bne.n	8003464 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	f023 0303 	bic.w	r3, r3, #3
 800345a:	f043 0201 	orr.w	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003462:	e018      	b.n	8003496 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	f023 0312 	bic.w	r3, r3, #18
 800346c:	f043 0210 	orr.w	r2, r3, #16
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	f043 0201 	orr.w	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003484:	e007      	b.n	8003496 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	f043 0210 	orr.w	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003496:	7dfb      	ldrb	r3, [r7, #23]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40013c00 	.word	0x40013c00
 80034a4:	ffe1f7fd 	.word	0xffe1f7fd
 80034a8:	ff1f0efe 	.word	0xff1f0efe

080034ac <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a64      	ldr	r2, [pc, #400]	; (8003654 <HAL_ADC_Start_DMA+0x1a8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_ADC_Start_DMA+0x24>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a63      	ldr	r2, [pc, #396]	; (8003658 <HAL_ADC_Start_DMA+0x1ac>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d106      	bne.n	80034de <HAL_ADC_Start_DMA+0x32>
 80034d0:	4b60      	ldr	r3, [pc, #384]	; (8003654 <HAL_ADC_Start_DMA+0x1a8>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f040 80b3 	bne.w	8003644 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_ADC_Start_DMA+0x40>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e0ae      	b.n	800364a <HAL_ADC_Start_DMA+0x19e>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 fa89 	bl	8003a0c <ADC_Enable>
 80034fa:	4603      	mov	r3, r0
 80034fc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
 8003500:	2b00      	cmp	r3, #0
 8003502:	f040 809a 	bne.w	800363a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a4e      	ldr	r2, [pc, #312]	; (8003658 <HAL_ADC_Start_DMA+0x1ac>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d105      	bne.n	8003530 <HAL_ADC_Start_DMA+0x84>
 8003524:	4b4b      	ldr	r3, [pc, #300]	; (8003654 <HAL_ADC_Start_DMA+0x1a8>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d115      	bne.n	800355c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003546:	2b00      	cmp	r3, #0
 8003548:	d026      	beq.n	8003598 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003552:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800355a:	e01d      	b.n	8003598 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a39      	ldr	r2, [pc, #228]	; (8003654 <HAL_ADC_Start_DMA+0x1a8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d004      	beq.n	800357c <HAL_ADC_Start_DMA+0xd0>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a38      	ldr	r2, [pc, #224]	; (8003658 <HAL_ADC_Start_DMA+0x1ac>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d10d      	bne.n	8003598 <HAL_ADC_Start_DMA+0xec>
 800357c:	4b35      	ldr	r3, [pc, #212]	; (8003654 <HAL_ADC_Start_DMA+0x1a8>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003584:	2b00      	cmp	r3, #0
 8003586:	d007      	beq.n	8003598 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003590:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d006      	beq.n	80035b2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	f023 0206 	bic.w	r2, r3, #6
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80035b0:	e002      	b.n	80035b8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	4a25      	ldr	r2, [pc, #148]	; (800365c <HAL_ADC_Start_DMA+0x1b0>)
 80035c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	4a24      	ldr	r2, [pc, #144]	; (8003660 <HAL_ADC_Start_DMA+0x1b4>)
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	4a23      	ldr	r2, [pc, #140]	; (8003664 <HAL_ADC_Start_DMA+0x1b8>)
 80035d6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0202 	mvn.w	r2, #2
 80035e0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a18      	ldr	r0, [r3, #32]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	334c      	adds	r3, #76	; 0x4c
 80035fc:	4619      	mov	r1, r3
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f000 fd41 	bl	8004088 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003610:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003614:	d108      	bne.n	8003628 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003624:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003626:	e00f      	b.n	8003648 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003636:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003638:	e006      	b.n	8003648 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003642:	e001      	b.n	8003648 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003648:	7dfb      	ldrb	r3, [r7, #23]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40012400 	.word	0x40012400
 8003658:	40012800 	.word	0x40012800
 800365c:	08003b43 	.word	0x08003b43
 8003660:	08003bbf 	.word	0x08003bbf
 8003664:	08003bdb 	.word	0x08003bdb

08003668 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d03e      	beq.n	8003708 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d039      	beq.n	8003708 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b00      	cmp	r3, #0
 800369e:	d105      	bne.n	80036ac <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80036b6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80036ba:	d11d      	bne.n	80036f8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d119      	bne.n	80036f8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0220 	bic.w	r2, r2, #32
 80036d2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	f043 0201 	orr.w	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff f9b9 	bl	8002a70 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f06f 0212 	mvn.w	r2, #18
 8003706:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b00      	cmp	r3, #0
 8003710:	d04d      	beq.n	80037ae <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d048      	beq.n	80037ae <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800373e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003742:	d012      	beq.n	800376a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800374e:	2b00      	cmp	r3, #0
 8003750:	d125      	bne.n	800379e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800375c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003760:	d11d      	bne.n	800379e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003766:	2b00      	cmp	r3, #0
 8003768:	d119      	bne.n	800379e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003778:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d105      	bne.n	800379e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	f043 0201 	orr.w	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fae4 	bl	8003d6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 020c 	mvn.w	r2, #12
 80037ac:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d012      	beq.n	80037de <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00d      	beq.n	80037de <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f812 	bl	80037f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0201 	mvn.w	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_ADC_ConfigChannel+0x20>
 8003838:	2302      	movs	r3, #2
 800383a:	e0dc      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x1da>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b06      	cmp	r3, #6
 800384a:	d81c      	bhi.n	8003886 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	3b05      	subs	r3, #5
 800385e:	221f      	movs	r2, #31
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	4019      	ands	r1, r3
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	3b05      	subs	r3, #5
 8003878:	fa00 f203 	lsl.w	r2, r0, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	635a      	str	r2, [r3, #52]	; 0x34
 8003884:	e03c      	b.n	8003900 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b0c      	cmp	r3, #12
 800388c:	d81c      	bhi.n	80038c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	3b23      	subs	r3, #35	; 0x23
 80038a0:	221f      	movs	r2, #31
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	4019      	ands	r1, r3
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	3b23      	subs	r3, #35	; 0x23
 80038ba:	fa00 f203 	lsl.w	r2, r0, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
 80038c6:	e01b      	b.n	8003900 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	3b41      	subs	r3, #65	; 0x41
 80038da:	221f      	movs	r2, #31
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43db      	mvns	r3, r3
 80038e2:	4019      	ands	r1, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	3b41      	subs	r3, #65	; 0x41
 80038f4:	fa00 f203 	lsl.w	r2, r0, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b09      	cmp	r3, #9
 8003906:	d91c      	bls.n	8003942 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68d9      	ldr	r1, [r3, #12]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4613      	mov	r3, r2
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4413      	add	r3, r2
 8003918:	3b1e      	subs	r3, #30
 800391a:	2207      	movs	r2, #7
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	4019      	ands	r1, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6898      	ldr	r0, [r3, #8]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	3b1e      	subs	r3, #30
 8003934:	fa00 f203 	lsl.w	r2, r0, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	60da      	str	r2, [r3, #12]
 8003940:	e019      	b.n	8003976 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6919      	ldr	r1, [r3, #16]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	4413      	add	r3, r2
 8003952:	2207      	movs	r2, #7
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	4019      	ands	r1, r3
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	6898      	ldr	r0, [r3, #8]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4613      	mov	r3, r2
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	4413      	add	r3, r2
 800396a:	fa00 f203 	lsl.w	r2, r0, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b10      	cmp	r3, #16
 800397c:	d003      	beq.n	8003986 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003982:	2b11      	cmp	r3, #17
 8003984:	d132      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a1d      	ldr	r2, [pc, #116]	; (8003a00 <HAL_ADC_ConfigChannel+0x1e4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d125      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d126      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80039ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d11a      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039b6:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <HAL_ADC_ConfigChannel+0x1e8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <HAL_ADC_ConfigChannel+0x1ec>)
 80039bc:	fba2 2303 	umull	r2, r3, r2, r3
 80039c0:	0c9a      	lsrs	r2, r3, #18
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039cc:	e002      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f9      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x1b2>
 80039da:	e007      	b.n	80039ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr
 8003a00:	40012400 	.word	0x40012400
 8003a04:	20000018 	.word	0x20000018
 8003a08:	431bde83 	.word	0x431bde83

08003a0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d040      	beq.n	8003aac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f042 0201 	orr.w	r2, r2, #1
 8003a38:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a3a:	4b1f      	ldr	r3, [pc, #124]	; (8003ab8 <ADC_Enable+0xac>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <ADC_Enable+0xb0>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	0c9b      	lsrs	r3, r3, #18
 8003a46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a48:	e002      	b.n	8003a50 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f9      	bne.n	8003a4a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a56:	f7ff fc11 	bl	800327c <HAL_GetTick>
 8003a5a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a5c:	e01f      	b.n	8003a9e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a5e:	f7ff fc0d 	bl	800327c <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d918      	bls.n	8003a9e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d011      	beq.n	8003a9e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	f043 0210 	orr.w	r2, r3, #16
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	f043 0201 	orr.w	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e007      	b.n	8003aae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d1d8      	bne.n	8003a5e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000018 	.word	0x20000018
 8003abc:	431bde83 	.word	0x431bde83

08003ac0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d12e      	bne.n	8003b38 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003aea:	f7ff fbc7 	bl	800327c <HAL_GetTick>
 8003aee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003af0:	e01b      	b.n	8003b2a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003af2:	f7ff fbc3 	bl	800327c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d914      	bls.n	8003b2a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d10d      	bne.n	8003b2a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	f043 0210 	orr.w	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	f043 0201 	orr.w	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e007      	b.n	8003b3a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d0dc      	beq.n	8003af2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d127      	bne.n	8003bac <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003b72:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003b76:	d115      	bne.n	8003ba4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d111      	bne.n	8003ba4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d105      	bne.n	8003ba4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	f043 0201 	orr.w	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7fe ff63 	bl	8002a70 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003baa:	e004      	b.n	8003bb6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
}
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7ff fe0a 	bl	80037e6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	f043 0204 	orr.w	r2, r3, #4
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f7ff fe02 	bl	800380a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c06:	bf00      	nop
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003c10:	b590      	push	{r4, r7, lr}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_ADCEx_Calibration_Start+0x1e>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e097      	b.n	8003d5e <HAL_ADCEx_Calibration_Start+0x14e>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff ff42 	bl	8003ac0 <ADC_ConversionStop_Disable>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff fee3 	bl	8003a0c <ADC_Enable>
 8003c46:	4603      	mov	r3, r0
 8003c48:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f040 8081 	bne.w	8003d54 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c5a:	f023 0302 	bic.w	r3, r3, #2
 8003c5e:	f043 0202 	orr.w	r2, r3, #2
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003c66:	4b40      	ldr	r3, [pc, #256]	; (8003d68 <HAL_ADCEx_Calibration_Start+0x158>)
 8003c68:	681c      	ldr	r4, [r3, #0]
 8003c6a:	2002      	movs	r0, #2
 8003c6c:	f001 fb60 	bl	8005330 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c70:	4603      	mov	r3, r0
 8003c72:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003c76:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003c78:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003c7a:	e002      	b.n	8003c82 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f9      	bne.n	8003c7c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0208 	orr.w	r2, r2, #8
 8003c96:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003c98:	f7ff faf0 	bl	800327c <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c9e:	e01b      	b.n	8003cd8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003ca0:	f7ff faec 	bl	800327c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b0a      	cmp	r3, #10
 8003cac:	d914      	bls.n	8003cd8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00d      	beq.n	8003cd8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	f023 0312 	bic.w	r3, r3, #18
 8003cc4:	f043 0210 	orr.w	r2, r3, #16
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e042      	b.n	8003d5e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1dc      	bne.n	8003ca0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0204 	orr.w	r2, r2, #4
 8003cf4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003cf6:	f7ff fac1 	bl	800327c <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003cfc:	e01b      	b.n	8003d36 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003cfe:	f7ff fabd 	bl	800327c <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b0a      	cmp	r3, #10
 8003d0a:	d914      	bls.n	8003d36 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00d      	beq.n	8003d36 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	f023 0312 	bic.w	r3, r3, #18
 8003d22:	f043 0210 	orr.w	r2, r3, #16
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e013      	b.n	8003d5e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1dc      	bne.n	8003cfe <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	f023 0303 	bic.w	r3, r3, #3
 8003d4c:	f043 0201 	orr.w	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd90      	pop	{r4, r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000018 	.word	0x20000018

08003d6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
	...

08003d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d90:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003db2:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	60d3      	str	r3, [r2, #12]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dcc:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	0a1b      	lsrs	r3, r3, #8
 8003dd2:	f003 0307 	and.w	r3, r3, #7
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	e000ed00 	.word	0xe000ed00

08003de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	db0b      	blt.n	8003e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003df6:	79fb      	ldrb	r3, [r7, #7]
 8003df8:	f003 021f 	and.w	r2, r3, #31
 8003dfc:	4906      	ldr	r1, [pc, #24]	; (8003e18 <__NVIC_EnableIRQ+0x34>)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	2001      	movs	r0, #1
 8003e06:	fa00 f202 	lsl.w	r2, r0, r2
 8003e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr
 8003e18:	e000e100 	.word	0xe000e100

08003e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	6039      	str	r1, [r7, #0]
 8003e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	db0a      	blt.n	8003e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	490c      	ldr	r1, [pc, #48]	; (8003e68 <__NVIC_SetPriority+0x4c>)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	0112      	lsls	r2, r2, #4
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	440b      	add	r3, r1
 8003e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e44:	e00a      	b.n	8003e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	4908      	ldr	r1, [pc, #32]	; (8003e6c <__NVIC_SetPriority+0x50>)
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	3b04      	subs	r3, #4
 8003e54:	0112      	lsls	r2, r2, #4
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	440b      	add	r3, r1
 8003e5a:	761a      	strb	r2, [r3, #24]
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	e000e100 	.word	0xe000e100
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b089      	sub	sp, #36	; 0x24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f1c3 0307 	rsb	r3, r3, #7
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	bf28      	it	cs
 8003e8e:	2304      	movcs	r3, #4
 8003e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3304      	adds	r3, #4
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d902      	bls.n	8003ea0 <NVIC_EncodePriority+0x30>
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3b03      	subs	r3, #3
 8003e9e:	e000      	b.n	8003ea2 <NVIC_EncodePriority+0x32>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec2:	43d9      	mvns	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	4313      	orrs	r3, r2
         );
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3724      	adds	r7, #36	; 0x24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ee4:	d301      	bcc.n	8003eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e00f      	b.n	8003f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eea:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <SysTick_Config+0x40>)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ef2:	210f      	movs	r1, #15
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	f7ff ff90 	bl	8003e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <SysTick_Config+0x40>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f02:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <SysTick_Config+0x40>)
 8003f04:	2207      	movs	r2, #7
 8003f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	e000e010 	.word	0xe000e010

08003f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff2d 	bl	8003d80 <__NVIC_SetPriorityGrouping>
}
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b086      	sub	sp, #24
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	4603      	mov	r3, r0
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f40:	f7ff ff42 	bl	8003dc8 <__NVIC_GetPriorityGrouping>
 8003f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	6978      	ldr	r0, [r7, #20]
 8003f4c:	f7ff ff90 	bl	8003e70 <NVIC_EncodePriority>
 8003f50:	4602      	mov	r2, r0
 8003f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff5f 	bl	8003e1c <__NVIC_SetPriority>
}
 8003f5e:	bf00      	nop
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff35 	bl	8003de4 <__NVIC_EnableIRQ>
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff ffa2 	bl	8003ed4 <SysTick_Config>
 8003f90:	4603      	mov	r3, r0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e059      	b.n	8004066 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4b2d      	ldr	r3, [pc, #180]	; (8004070 <HAL_DMA_Init+0xd4>)
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d80f      	bhi.n	8003fde <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <HAL_DMA_Init+0xd8>)
 8003fc6:	4413      	add	r3, r2
 8003fc8:	4a2b      	ldr	r2, [pc, #172]	; (8004078 <HAL_DMA_Init+0xdc>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	009a      	lsls	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a28      	ldr	r2, [pc, #160]	; (800407c <HAL_DMA_Init+0xe0>)
 8003fda:	63da      	str	r2, [r3, #60]	; 0x3c
 8003fdc:	e00e      	b.n	8003ffc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4b26      	ldr	r3, [pc, #152]	; (8004080 <HAL_DMA_Init+0xe4>)
 8003fe6:	4413      	add	r3, r2
 8003fe8:	4a23      	ldr	r2, [pc, #140]	; (8004078 <HAL_DMA_Init+0xdc>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	091b      	lsrs	r3, r3, #4
 8003ff0:	009a      	lsls	r2, r3, #2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a22      	ldr	r2, [pc, #136]	; (8004084 <HAL_DMA_Init+0xe8>)
 8003ffa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004012:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004016:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004020:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800402c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004038:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr
 8004070:	40020407 	.word	0x40020407
 8004074:	bffdfff8 	.word	0xbffdfff8
 8004078:	cccccccd 	.word	0xcccccccd
 800407c:	40020000 	.word	0x40020000
 8004080:	bffdfbf8 	.word	0xbffdfbf8
 8004084:	40020400 	.word	0x40020400

08004088 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_DMA_Start_IT+0x20>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e04b      	b.n	8004140 <HAL_DMA_Start_IT+0xb8>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d13a      	bne.n	8004132 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fa6d 	bl	80045c0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 020e 	orr.w	r2, r2, #14
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e00f      	b.n	8004120 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0204 	bic.w	r2, r2, #4
 800410e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 020a 	orr.w	r2, r2, #10
 800411e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	e005      	b.n	800413e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800413a:	2302      	movs	r3, #2
 800413c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800413e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	2204      	movs	r2, #4
 8004166:	409a      	lsls	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4013      	ands	r3, r2
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 80f1 	beq.w	8004354 <HAL_DMA_IRQHandler+0x20c>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80eb 	beq.w	8004354 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b00      	cmp	r3, #0
 800418a:	d107      	bne.n	800419c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0204 	bic.w	r2, r2, #4
 800419a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	4b5f      	ldr	r3, [pc, #380]	; (8004320 <HAL_DMA_IRQHandler+0x1d8>)
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d958      	bls.n	800425a <HAL_DMA_IRQHandler+0x112>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a5d      	ldr	r2, [pc, #372]	; (8004324 <HAL_DMA_IRQHandler+0x1dc>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d04f      	beq.n	8004252 <HAL_DMA_IRQHandler+0x10a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a5c      	ldr	r2, [pc, #368]	; (8004328 <HAL_DMA_IRQHandler+0x1e0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d048      	beq.n	800424e <HAL_DMA_IRQHandler+0x106>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a5a      	ldr	r2, [pc, #360]	; (800432c <HAL_DMA_IRQHandler+0x1e4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d040      	beq.n	8004248 <HAL_DMA_IRQHandler+0x100>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a59      	ldr	r2, [pc, #356]	; (8004330 <HAL_DMA_IRQHandler+0x1e8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d038      	beq.n	8004242 <HAL_DMA_IRQHandler+0xfa>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a57      	ldr	r2, [pc, #348]	; (8004334 <HAL_DMA_IRQHandler+0x1ec>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d030      	beq.n	800423c <HAL_DMA_IRQHandler+0xf4>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a56      	ldr	r2, [pc, #344]	; (8004338 <HAL_DMA_IRQHandler+0x1f0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d028      	beq.n	8004236 <HAL_DMA_IRQHandler+0xee>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a4d      	ldr	r2, [pc, #308]	; (8004320 <HAL_DMA_IRQHandler+0x1d8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d020      	beq.n	8004230 <HAL_DMA_IRQHandler+0xe8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a52      	ldr	r2, [pc, #328]	; (800433c <HAL_DMA_IRQHandler+0x1f4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d019      	beq.n	800422c <HAL_DMA_IRQHandler+0xe4>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a50      	ldr	r2, [pc, #320]	; (8004340 <HAL_DMA_IRQHandler+0x1f8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d012      	beq.n	8004228 <HAL_DMA_IRQHandler+0xe0>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a4f      	ldr	r2, [pc, #316]	; (8004344 <HAL_DMA_IRQHandler+0x1fc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00a      	beq.n	8004222 <HAL_DMA_IRQHandler+0xda>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a4d      	ldr	r2, [pc, #308]	; (8004348 <HAL_DMA_IRQHandler+0x200>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d102      	bne.n	800421c <HAL_DMA_IRQHandler+0xd4>
 8004216:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800421a:	e01b      	b.n	8004254 <HAL_DMA_IRQHandler+0x10c>
 800421c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004220:	e018      	b.n	8004254 <HAL_DMA_IRQHandler+0x10c>
 8004222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004226:	e015      	b.n	8004254 <HAL_DMA_IRQHandler+0x10c>
 8004228:	2340      	movs	r3, #64	; 0x40
 800422a:	e013      	b.n	8004254 <HAL_DMA_IRQHandler+0x10c>
 800422c:	2304      	movs	r3, #4
 800422e:	e011      	b.n	8004254 <HAL_DMA_IRQHandler+0x10c>
 8004230:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004234:	e00e      	b.n	8004254 <HAL_DMA_IRQHandler+0x10c>
 8004236:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800423a:	e00b      	b.n	8004254 <HAL_DMA_IRQHandler+0x10c>
 800423c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004240:	e008      	b.n	8004254 <HAL_DMA_IRQHandler+0x10c>
 8004242:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004246:	e005      	b.n	8004254 <HAL_DMA_IRQHandler+0x10c>
 8004248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800424c:	e002      	b.n	8004254 <HAL_DMA_IRQHandler+0x10c>
 800424e:	2340      	movs	r3, #64	; 0x40
 8004250:	e000      	b.n	8004254 <HAL_DMA_IRQHandler+0x10c>
 8004252:	2304      	movs	r3, #4
 8004254:	4a3d      	ldr	r2, [pc, #244]	; (800434c <HAL_DMA_IRQHandler+0x204>)
 8004256:	6053      	str	r3, [r2, #4]
 8004258:	e057      	b.n	800430a <HAL_DMA_IRQHandler+0x1c2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a31      	ldr	r2, [pc, #196]	; (8004324 <HAL_DMA_IRQHandler+0x1dc>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d04f      	beq.n	8004304 <HAL_DMA_IRQHandler+0x1bc>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a2f      	ldr	r2, [pc, #188]	; (8004328 <HAL_DMA_IRQHandler+0x1e0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d048      	beq.n	8004300 <HAL_DMA_IRQHandler+0x1b8>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a2e      	ldr	r2, [pc, #184]	; (800432c <HAL_DMA_IRQHandler+0x1e4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d040      	beq.n	80042fa <HAL_DMA_IRQHandler+0x1b2>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a2c      	ldr	r2, [pc, #176]	; (8004330 <HAL_DMA_IRQHandler+0x1e8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d038      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x1ac>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a2b      	ldr	r2, [pc, #172]	; (8004334 <HAL_DMA_IRQHandler+0x1ec>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d030      	beq.n	80042ee <HAL_DMA_IRQHandler+0x1a6>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a29      	ldr	r2, [pc, #164]	; (8004338 <HAL_DMA_IRQHandler+0x1f0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d028      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x1a0>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a21      	ldr	r2, [pc, #132]	; (8004320 <HAL_DMA_IRQHandler+0x1d8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d020      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x19a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a25      	ldr	r2, [pc, #148]	; (800433c <HAL_DMA_IRQHandler+0x1f4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d019      	beq.n	80042de <HAL_DMA_IRQHandler+0x196>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a24      	ldr	r2, [pc, #144]	; (8004340 <HAL_DMA_IRQHandler+0x1f8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d012      	beq.n	80042da <HAL_DMA_IRQHandler+0x192>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a22      	ldr	r2, [pc, #136]	; (8004344 <HAL_DMA_IRQHandler+0x1fc>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00a      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x18c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a21      	ldr	r2, [pc, #132]	; (8004348 <HAL_DMA_IRQHandler+0x200>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d102      	bne.n	80042ce <HAL_DMA_IRQHandler+0x186>
 80042c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042cc:	e01b      	b.n	8004306 <HAL_DMA_IRQHandler+0x1be>
 80042ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80042d2:	e018      	b.n	8004306 <HAL_DMA_IRQHandler+0x1be>
 80042d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042d8:	e015      	b.n	8004306 <HAL_DMA_IRQHandler+0x1be>
 80042da:	2340      	movs	r3, #64	; 0x40
 80042dc:	e013      	b.n	8004306 <HAL_DMA_IRQHandler+0x1be>
 80042de:	2304      	movs	r3, #4
 80042e0:	e011      	b.n	8004306 <HAL_DMA_IRQHandler+0x1be>
 80042e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042e6:	e00e      	b.n	8004306 <HAL_DMA_IRQHandler+0x1be>
 80042e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042ec:	e00b      	b.n	8004306 <HAL_DMA_IRQHandler+0x1be>
 80042ee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80042f2:	e008      	b.n	8004306 <HAL_DMA_IRQHandler+0x1be>
 80042f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042f8:	e005      	b.n	8004306 <HAL_DMA_IRQHandler+0x1be>
 80042fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042fe:	e002      	b.n	8004306 <HAL_DMA_IRQHandler+0x1be>
 8004300:	2340      	movs	r3, #64	; 0x40
 8004302:	e000      	b.n	8004306 <HAL_DMA_IRQHandler+0x1be>
 8004304:	2304      	movs	r3, #4
 8004306:	4a12      	ldr	r2, [pc, #72]	; (8004350 <HAL_DMA_IRQHandler+0x208>)
 8004308:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 8136 	beq.w	8004580 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800431c:	e130      	b.n	8004580 <HAL_DMA_IRQHandler+0x438>
 800431e:	bf00      	nop
 8004320:	40020080 	.word	0x40020080
 8004324:	40020008 	.word	0x40020008
 8004328:	4002001c 	.word	0x4002001c
 800432c:	40020030 	.word	0x40020030
 8004330:	40020044 	.word	0x40020044
 8004334:	40020058 	.word	0x40020058
 8004338:	4002006c 	.word	0x4002006c
 800433c:	40020408 	.word	0x40020408
 8004340:	4002041c 	.word	0x4002041c
 8004344:	40020430 	.word	0x40020430
 8004348:	40020444 	.word	0x40020444
 800434c:	40020400 	.word	0x40020400
 8004350:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	2202      	movs	r2, #2
 800435a:	409a      	lsls	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80dd 	beq.w	8004520 <HAL_DMA_IRQHandler+0x3d8>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80d7 	beq.w	8004520 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10b      	bne.n	8004398 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 020a 	bic.w	r2, r2, #10
 800438e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	4b7b      	ldr	r3, [pc, #492]	; (800458c <HAL_DMA_IRQHandler+0x444>)
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d958      	bls.n	8004456 <HAL_DMA_IRQHandler+0x30e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a79      	ldr	r2, [pc, #484]	; (8004590 <HAL_DMA_IRQHandler+0x448>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d04f      	beq.n	800444e <HAL_DMA_IRQHandler+0x306>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a78      	ldr	r2, [pc, #480]	; (8004594 <HAL_DMA_IRQHandler+0x44c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d048      	beq.n	800444a <HAL_DMA_IRQHandler+0x302>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a76      	ldr	r2, [pc, #472]	; (8004598 <HAL_DMA_IRQHandler+0x450>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d040      	beq.n	8004444 <HAL_DMA_IRQHandler+0x2fc>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a75      	ldr	r2, [pc, #468]	; (800459c <HAL_DMA_IRQHandler+0x454>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d038      	beq.n	800443e <HAL_DMA_IRQHandler+0x2f6>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a73      	ldr	r2, [pc, #460]	; (80045a0 <HAL_DMA_IRQHandler+0x458>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d030      	beq.n	8004438 <HAL_DMA_IRQHandler+0x2f0>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a72      	ldr	r2, [pc, #456]	; (80045a4 <HAL_DMA_IRQHandler+0x45c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d028      	beq.n	8004432 <HAL_DMA_IRQHandler+0x2ea>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a69      	ldr	r2, [pc, #420]	; (800458c <HAL_DMA_IRQHandler+0x444>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d020      	beq.n	800442c <HAL_DMA_IRQHandler+0x2e4>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a6e      	ldr	r2, [pc, #440]	; (80045a8 <HAL_DMA_IRQHandler+0x460>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d019      	beq.n	8004428 <HAL_DMA_IRQHandler+0x2e0>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a6c      	ldr	r2, [pc, #432]	; (80045ac <HAL_DMA_IRQHandler+0x464>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d012      	beq.n	8004424 <HAL_DMA_IRQHandler+0x2dc>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a6b      	ldr	r2, [pc, #428]	; (80045b0 <HAL_DMA_IRQHandler+0x468>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00a      	beq.n	800441e <HAL_DMA_IRQHandler+0x2d6>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a69      	ldr	r2, [pc, #420]	; (80045b4 <HAL_DMA_IRQHandler+0x46c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d102      	bne.n	8004418 <HAL_DMA_IRQHandler+0x2d0>
 8004412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004416:	e01b      	b.n	8004450 <HAL_DMA_IRQHandler+0x308>
 8004418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800441c:	e018      	b.n	8004450 <HAL_DMA_IRQHandler+0x308>
 800441e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004422:	e015      	b.n	8004450 <HAL_DMA_IRQHandler+0x308>
 8004424:	2320      	movs	r3, #32
 8004426:	e013      	b.n	8004450 <HAL_DMA_IRQHandler+0x308>
 8004428:	2302      	movs	r3, #2
 800442a:	e011      	b.n	8004450 <HAL_DMA_IRQHandler+0x308>
 800442c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004430:	e00e      	b.n	8004450 <HAL_DMA_IRQHandler+0x308>
 8004432:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004436:	e00b      	b.n	8004450 <HAL_DMA_IRQHandler+0x308>
 8004438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800443c:	e008      	b.n	8004450 <HAL_DMA_IRQHandler+0x308>
 800443e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004442:	e005      	b.n	8004450 <HAL_DMA_IRQHandler+0x308>
 8004444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004448:	e002      	b.n	8004450 <HAL_DMA_IRQHandler+0x308>
 800444a:	2320      	movs	r3, #32
 800444c:	e000      	b.n	8004450 <HAL_DMA_IRQHandler+0x308>
 800444e:	2302      	movs	r3, #2
 8004450:	4a59      	ldr	r2, [pc, #356]	; (80045b8 <HAL_DMA_IRQHandler+0x470>)
 8004452:	6053      	str	r3, [r2, #4]
 8004454:	e057      	b.n	8004506 <HAL_DMA_IRQHandler+0x3be>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a4d      	ldr	r2, [pc, #308]	; (8004590 <HAL_DMA_IRQHandler+0x448>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d04f      	beq.n	8004500 <HAL_DMA_IRQHandler+0x3b8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a4b      	ldr	r2, [pc, #300]	; (8004594 <HAL_DMA_IRQHandler+0x44c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d048      	beq.n	80044fc <HAL_DMA_IRQHandler+0x3b4>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a4a      	ldr	r2, [pc, #296]	; (8004598 <HAL_DMA_IRQHandler+0x450>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d040      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x3ae>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a48      	ldr	r2, [pc, #288]	; (800459c <HAL_DMA_IRQHandler+0x454>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d038      	beq.n	80044f0 <HAL_DMA_IRQHandler+0x3a8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a47      	ldr	r2, [pc, #284]	; (80045a0 <HAL_DMA_IRQHandler+0x458>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d030      	beq.n	80044ea <HAL_DMA_IRQHandler+0x3a2>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a45      	ldr	r2, [pc, #276]	; (80045a4 <HAL_DMA_IRQHandler+0x45c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d028      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x39c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a3d      	ldr	r2, [pc, #244]	; (800458c <HAL_DMA_IRQHandler+0x444>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d020      	beq.n	80044de <HAL_DMA_IRQHandler+0x396>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a41      	ldr	r2, [pc, #260]	; (80045a8 <HAL_DMA_IRQHandler+0x460>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d019      	beq.n	80044da <HAL_DMA_IRQHandler+0x392>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a40      	ldr	r2, [pc, #256]	; (80045ac <HAL_DMA_IRQHandler+0x464>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d012      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x38e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a3e      	ldr	r2, [pc, #248]	; (80045b0 <HAL_DMA_IRQHandler+0x468>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00a      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x388>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a3d      	ldr	r2, [pc, #244]	; (80045b4 <HAL_DMA_IRQHandler+0x46c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d102      	bne.n	80044ca <HAL_DMA_IRQHandler+0x382>
 80044c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044c8:	e01b      	b.n	8004502 <HAL_DMA_IRQHandler+0x3ba>
 80044ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044ce:	e018      	b.n	8004502 <HAL_DMA_IRQHandler+0x3ba>
 80044d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044d4:	e015      	b.n	8004502 <HAL_DMA_IRQHandler+0x3ba>
 80044d6:	2320      	movs	r3, #32
 80044d8:	e013      	b.n	8004502 <HAL_DMA_IRQHandler+0x3ba>
 80044da:	2302      	movs	r3, #2
 80044dc:	e011      	b.n	8004502 <HAL_DMA_IRQHandler+0x3ba>
 80044de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044e2:	e00e      	b.n	8004502 <HAL_DMA_IRQHandler+0x3ba>
 80044e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044e8:	e00b      	b.n	8004502 <HAL_DMA_IRQHandler+0x3ba>
 80044ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044ee:	e008      	b.n	8004502 <HAL_DMA_IRQHandler+0x3ba>
 80044f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044f4:	e005      	b.n	8004502 <HAL_DMA_IRQHandler+0x3ba>
 80044f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044fa:	e002      	b.n	8004502 <HAL_DMA_IRQHandler+0x3ba>
 80044fc:	2320      	movs	r3, #32
 80044fe:	e000      	b.n	8004502 <HAL_DMA_IRQHandler+0x3ba>
 8004500:	2302      	movs	r3, #2
 8004502:	4a2e      	ldr	r2, [pc, #184]	; (80045bc <HAL_DMA_IRQHandler+0x474>)
 8004504:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	2b00      	cmp	r3, #0
 8004514:	d034      	beq.n	8004580 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800451e:	e02f      	b.n	8004580 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	2208      	movs	r2, #8
 8004526:	409a      	lsls	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d028      	beq.n	8004582 <HAL_DMA_IRQHandler+0x43a>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d023      	beq.n	8004582 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 020e 	bic.w	r2, r2, #14
 8004548:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	2101      	movs	r1, #1
 8004554:	fa01 f202 	lsl.w	r2, r1, r2
 8004558:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	4798      	blx	r3
    }
  }
  return;
 8004580:	bf00      	nop
 8004582:	bf00      	nop
}
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40020080 	.word	0x40020080
 8004590:	40020008 	.word	0x40020008
 8004594:	4002001c 	.word	0x4002001c
 8004598:	40020030 	.word	0x40020030
 800459c:	40020044 	.word	0x40020044
 80045a0:	40020058 	.word	0x40020058
 80045a4:	4002006c 	.word	0x4002006c
 80045a8:	40020408 	.word	0x40020408
 80045ac:	4002041c 	.word	0x4002041c
 80045b0:	40020430 	.word	0x40020430
 80045b4:	40020444 	.word	0x40020444
 80045b8:	40020400 	.word	0x40020400
 80045bc:	40020000 	.word	0x40020000

080045c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d6:	2101      	movs	r1, #1
 80045d8:	fa01 f202 	lsl.w	r2, r1, r2
 80045dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b10      	cmp	r3, #16
 80045ec:	d108      	bne.n	8004600 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045fe:	e007      	b.n	8004610 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	60da      	str	r2, [r3, #12]
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr
	...

0800461c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800461c:	b480      	push	{r7}
 800461e:	b08b      	sub	sp, #44	; 0x2c
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004626:	2300      	movs	r3, #0
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800462a:	2300      	movs	r3, #0
 800462c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800462e:	e179      	b.n	8004924 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004630:	2201      	movs	r2, #1
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	4013      	ands	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	429a      	cmp	r2, r3
 800464a:	f040 8168 	bne.w	800491e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4a96      	ldr	r2, [pc, #600]	; (80048ac <HAL_GPIO_Init+0x290>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d05e      	beq.n	8004716 <HAL_GPIO_Init+0xfa>
 8004658:	4a94      	ldr	r2, [pc, #592]	; (80048ac <HAL_GPIO_Init+0x290>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d875      	bhi.n	800474a <HAL_GPIO_Init+0x12e>
 800465e:	4a94      	ldr	r2, [pc, #592]	; (80048b0 <HAL_GPIO_Init+0x294>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d058      	beq.n	8004716 <HAL_GPIO_Init+0xfa>
 8004664:	4a92      	ldr	r2, [pc, #584]	; (80048b0 <HAL_GPIO_Init+0x294>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d86f      	bhi.n	800474a <HAL_GPIO_Init+0x12e>
 800466a:	4a92      	ldr	r2, [pc, #584]	; (80048b4 <HAL_GPIO_Init+0x298>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d052      	beq.n	8004716 <HAL_GPIO_Init+0xfa>
 8004670:	4a90      	ldr	r2, [pc, #576]	; (80048b4 <HAL_GPIO_Init+0x298>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d869      	bhi.n	800474a <HAL_GPIO_Init+0x12e>
 8004676:	4a90      	ldr	r2, [pc, #576]	; (80048b8 <HAL_GPIO_Init+0x29c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d04c      	beq.n	8004716 <HAL_GPIO_Init+0xfa>
 800467c:	4a8e      	ldr	r2, [pc, #568]	; (80048b8 <HAL_GPIO_Init+0x29c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d863      	bhi.n	800474a <HAL_GPIO_Init+0x12e>
 8004682:	4a8e      	ldr	r2, [pc, #568]	; (80048bc <HAL_GPIO_Init+0x2a0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d046      	beq.n	8004716 <HAL_GPIO_Init+0xfa>
 8004688:	4a8c      	ldr	r2, [pc, #560]	; (80048bc <HAL_GPIO_Init+0x2a0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d85d      	bhi.n	800474a <HAL_GPIO_Init+0x12e>
 800468e:	2b12      	cmp	r3, #18
 8004690:	d82a      	bhi.n	80046e8 <HAL_GPIO_Init+0xcc>
 8004692:	2b12      	cmp	r3, #18
 8004694:	d859      	bhi.n	800474a <HAL_GPIO_Init+0x12e>
 8004696:	a201      	add	r2, pc, #4	; (adr r2, 800469c <HAL_GPIO_Init+0x80>)
 8004698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469c:	08004717 	.word	0x08004717
 80046a0:	080046f1 	.word	0x080046f1
 80046a4:	08004703 	.word	0x08004703
 80046a8:	08004745 	.word	0x08004745
 80046ac:	0800474b 	.word	0x0800474b
 80046b0:	0800474b 	.word	0x0800474b
 80046b4:	0800474b 	.word	0x0800474b
 80046b8:	0800474b 	.word	0x0800474b
 80046bc:	0800474b 	.word	0x0800474b
 80046c0:	0800474b 	.word	0x0800474b
 80046c4:	0800474b 	.word	0x0800474b
 80046c8:	0800474b 	.word	0x0800474b
 80046cc:	0800474b 	.word	0x0800474b
 80046d0:	0800474b 	.word	0x0800474b
 80046d4:	0800474b 	.word	0x0800474b
 80046d8:	0800474b 	.word	0x0800474b
 80046dc:	0800474b 	.word	0x0800474b
 80046e0:	080046f9 	.word	0x080046f9
 80046e4:	0800470d 	.word	0x0800470d
 80046e8:	4a75      	ldr	r2, [pc, #468]	; (80048c0 <HAL_GPIO_Init+0x2a4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80046ee:	e02c      	b.n	800474a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	623b      	str	r3, [r7, #32]
          break;
 80046f6:	e029      	b.n	800474c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	3304      	adds	r3, #4
 80046fe:	623b      	str	r3, [r7, #32]
          break;
 8004700:	e024      	b.n	800474c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	3308      	adds	r3, #8
 8004708:	623b      	str	r3, [r7, #32]
          break;
 800470a:	e01f      	b.n	800474c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	330c      	adds	r3, #12
 8004712:	623b      	str	r3, [r7, #32]
          break;
 8004714:	e01a      	b.n	800474c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d102      	bne.n	8004724 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800471e:	2304      	movs	r3, #4
 8004720:	623b      	str	r3, [r7, #32]
          break;
 8004722:	e013      	b.n	800474c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d105      	bne.n	8004738 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800472c:	2308      	movs	r3, #8
 800472e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	611a      	str	r2, [r3, #16]
          break;
 8004736:	e009      	b.n	800474c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004738:	2308      	movs	r3, #8
 800473a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	615a      	str	r2, [r3, #20]
          break;
 8004742:	e003      	b.n	800474c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004744:	2300      	movs	r3, #0
 8004746:	623b      	str	r3, [r7, #32]
          break;
 8004748:	e000      	b.n	800474c <HAL_GPIO_Init+0x130>
          break;
 800474a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	2bff      	cmp	r3, #255	; 0xff
 8004750:	d801      	bhi.n	8004756 <HAL_GPIO_Init+0x13a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	e001      	b.n	800475a <HAL_GPIO_Init+0x13e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3304      	adds	r3, #4
 800475a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	2bff      	cmp	r3, #255	; 0xff
 8004760:	d802      	bhi.n	8004768 <HAL_GPIO_Init+0x14c>
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	e002      	b.n	800476e <HAL_GPIO_Init+0x152>
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	3b08      	subs	r3, #8
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	210f      	movs	r1, #15
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	fa01 f303 	lsl.w	r3, r1, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	401a      	ands	r2, r3
 8004780:	6a39      	ldr	r1, [r7, #32]
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	fa01 f303 	lsl.w	r3, r1, r3
 8004788:	431a      	orrs	r2, r3
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 80c1 	beq.w	800491e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800479c:	4b49      	ldr	r3, [pc, #292]	; (80048c4 <HAL_GPIO_Init+0x2a8>)
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	4a48      	ldr	r2, [pc, #288]	; (80048c4 <HAL_GPIO_Init+0x2a8>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6193      	str	r3, [r2, #24]
 80047a8:	4b46      	ldr	r3, [pc, #280]	; (80048c4 <HAL_GPIO_Init+0x2a8>)
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80047b4:	4a44      	ldr	r2, [pc, #272]	; (80048c8 <HAL_GPIO_Init+0x2ac>)
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	089b      	lsrs	r3, r3, #2
 80047ba:	3302      	adds	r3, #2
 80047bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	220f      	movs	r2, #15
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4013      	ands	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a3c      	ldr	r2, [pc, #240]	; (80048cc <HAL_GPIO_Init+0x2b0>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d01f      	beq.n	8004820 <HAL_GPIO_Init+0x204>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a3b      	ldr	r2, [pc, #236]	; (80048d0 <HAL_GPIO_Init+0x2b4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d019      	beq.n	800481c <HAL_GPIO_Init+0x200>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a3a      	ldr	r2, [pc, #232]	; (80048d4 <HAL_GPIO_Init+0x2b8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d013      	beq.n	8004818 <HAL_GPIO_Init+0x1fc>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a39      	ldr	r2, [pc, #228]	; (80048d8 <HAL_GPIO_Init+0x2bc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00d      	beq.n	8004814 <HAL_GPIO_Init+0x1f8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a38      	ldr	r2, [pc, #224]	; (80048dc <HAL_GPIO_Init+0x2c0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d007      	beq.n	8004810 <HAL_GPIO_Init+0x1f4>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a37      	ldr	r2, [pc, #220]	; (80048e0 <HAL_GPIO_Init+0x2c4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d101      	bne.n	800480c <HAL_GPIO_Init+0x1f0>
 8004808:	2305      	movs	r3, #5
 800480a:	e00a      	b.n	8004822 <HAL_GPIO_Init+0x206>
 800480c:	2306      	movs	r3, #6
 800480e:	e008      	b.n	8004822 <HAL_GPIO_Init+0x206>
 8004810:	2304      	movs	r3, #4
 8004812:	e006      	b.n	8004822 <HAL_GPIO_Init+0x206>
 8004814:	2303      	movs	r3, #3
 8004816:	e004      	b.n	8004822 <HAL_GPIO_Init+0x206>
 8004818:	2302      	movs	r3, #2
 800481a:	e002      	b.n	8004822 <HAL_GPIO_Init+0x206>
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <HAL_GPIO_Init+0x206>
 8004820:	2300      	movs	r3, #0
 8004822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004824:	f002 0203 	and.w	r2, r2, #3
 8004828:	0092      	lsls	r2, r2, #2
 800482a:	4093      	lsls	r3, r2
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004832:	4925      	ldr	r1, [pc, #148]	; (80048c8 <HAL_GPIO_Init+0x2ac>)
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	089b      	lsrs	r3, r3, #2
 8004838:	3302      	adds	r3, #2
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d006      	beq.n	800485a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800484c:	4b25      	ldr	r3, [pc, #148]	; (80048e4 <HAL_GPIO_Init+0x2c8>)
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	4924      	ldr	r1, [pc, #144]	; (80048e4 <HAL_GPIO_Init+0x2c8>)
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	4313      	orrs	r3, r2
 8004856:	608b      	str	r3, [r1, #8]
 8004858:	e006      	b.n	8004868 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800485a:	4b22      	ldr	r3, [pc, #136]	; (80048e4 <HAL_GPIO_Init+0x2c8>)
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	43db      	mvns	r3, r3
 8004862:	4920      	ldr	r1, [pc, #128]	; (80048e4 <HAL_GPIO_Init+0x2c8>)
 8004864:	4013      	ands	r3, r2
 8004866:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d006      	beq.n	8004882 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004874:	4b1b      	ldr	r3, [pc, #108]	; (80048e4 <HAL_GPIO_Init+0x2c8>)
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	491a      	ldr	r1, [pc, #104]	; (80048e4 <HAL_GPIO_Init+0x2c8>)
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	4313      	orrs	r3, r2
 800487e:	60cb      	str	r3, [r1, #12]
 8004880:	e006      	b.n	8004890 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004882:	4b18      	ldr	r3, [pc, #96]	; (80048e4 <HAL_GPIO_Init+0x2c8>)
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	43db      	mvns	r3, r3
 800488a:	4916      	ldr	r1, [pc, #88]	; (80048e4 <HAL_GPIO_Init+0x2c8>)
 800488c:	4013      	ands	r3, r2
 800488e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d025      	beq.n	80048e8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800489c:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <HAL_GPIO_Init+0x2c8>)
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	4910      	ldr	r1, [pc, #64]	; (80048e4 <HAL_GPIO_Init+0x2c8>)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
 80048a8:	e025      	b.n	80048f6 <HAL_GPIO_Init+0x2da>
 80048aa:	bf00      	nop
 80048ac:	10320000 	.word	0x10320000
 80048b0:	10310000 	.word	0x10310000
 80048b4:	10220000 	.word	0x10220000
 80048b8:	10210000 	.word	0x10210000
 80048bc:	10120000 	.word	0x10120000
 80048c0:	10110000 	.word	0x10110000
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40010000 	.word	0x40010000
 80048cc:	40010800 	.word	0x40010800
 80048d0:	40010c00 	.word	0x40010c00
 80048d4:	40011000 	.word	0x40011000
 80048d8:	40011400 	.word	0x40011400
 80048dc:	40011800 	.word	0x40011800
 80048e0:	40011c00 	.word	0x40011c00
 80048e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80048e8:	4b15      	ldr	r3, [pc, #84]	; (8004940 <HAL_GPIO_Init+0x324>)
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	43db      	mvns	r3, r3
 80048f0:	4913      	ldr	r1, [pc, #76]	; (8004940 <HAL_GPIO_Init+0x324>)
 80048f2:	4013      	ands	r3, r2
 80048f4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d006      	beq.n	8004910 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004902:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <HAL_GPIO_Init+0x324>)
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	490e      	ldr	r1, [pc, #56]	; (8004940 <HAL_GPIO_Init+0x324>)
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]
 800490e:	e006      	b.n	800491e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <HAL_GPIO_Init+0x324>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	43db      	mvns	r3, r3
 8004918:	4909      	ldr	r1, [pc, #36]	; (8004940 <HAL_GPIO_Init+0x324>)
 800491a:	4013      	ands	r3, r2
 800491c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	3301      	adds	r3, #1
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	fa22 f303 	lsr.w	r3, r2, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	f47f ae7e 	bne.w	8004630 <HAL_GPIO_Init+0x14>
  }
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop
 8004938:	372c      	adds	r7, #44	; 0x2c
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr
 8004940:	40010400 	.word	0x40010400

08004944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	887b      	ldrh	r3, [r7, #2]
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800495c:	2301      	movs	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
 8004960:	e001      	b.n	8004966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004962:	2300      	movs	r3, #0
 8004964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004966:	7bfb      	ldrb	r3, [r7, #15]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr

08004972 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	460b      	mov	r3, r1
 800497c:	807b      	strh	r3, [r7, #2]
 800497e:	4613      	mov	r3, r2
 8004980:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004982:	787b      	ldrb	r3, [r7, #1]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004988:	887a      	ldrh	r2, [r7, #2]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800498e:	e003      	b.n	8004998 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004990:	887b      	ldrh	r3, [r7, #2]
 8004992:	041a      	lsls	r2, r3, #16
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	611a      	str	r2, [r3, #16]
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr
	...

080049a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e272      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 8087 	beq.w	8004ad2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049c4:	4b92      	ldr	r3, [pc, #584]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f003 030c 	and.w	r3, r3, #12
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d00c      	beq.n	80049ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049d0:	4b8f      	ldr	r3, [pc, #572]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 030c 	and.w	r3, r3, #12
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d112      	bne.n	8004a02 <HAL_RCC_OscConfig+0x5e>
 80049dc:	4b8c      	ldr	r3, [pc, #560]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e8:	d10b      	bne.n	8004a02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ea:	4b89      	ldr	r3, [pc, #548]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d06c      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x12c>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d168      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e24c      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0a:	d106      	bne.n	8004a1a <HAL_RCC_OscConfig+0x76>
 8004a0c:	4b80      	ldr	r3, [pc, #512]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a7f      	ldr	r2, [pc, #508]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	e02e      	b.n	8004a78 <HAL_RCC_OscConfig+0xd4>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10c      	bne.n	8004a3c <HAL_RCC_OscConfig+0x98>
 8004a22:	4b7b      	ldr	r3, [pc, #492]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a7a      	ldr	r2, [pc, #488]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	4b78      	ldr	r3, [pc, #480]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a77      	ldr	r2, [pc, #476]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	e01d      	b.n	8004a78 <HAL_RCC_OscConfig+0xd4>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCC_OscConfig+0xbc>
 8004a46:	4b72      	ldr	r3, [pc, #456]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a71      	ldr	r2, [pc, #452]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	4b6f      	ldr	r3, [pc, #444]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a6e      	ldr	r2, [pc, #440]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e00b      	b.n	8004a78 <HAL_RCC_OscConfig+0xd4>
 8004a60:	4b6b      	ldr	r3, [pc, #428]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a6a      	ldr	r2, [pc, #424]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	4b68      	ldr	r3, [pc, #416]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a67      	ldr	r2, [pc, #412]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d013      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fe fbfc 	bl	800327c <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a88:	f7fe fbf8 	bl	800327c <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b64      	cmp	r3, #100	; 0x64
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e200      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9a:	4b5d      	ldr	r3, [pc, #372]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f0      	beq.n	8004a88 <HAL_RCC_OscConfig+0xe4>
 8004aa6:	e014      	b.n	8004ad2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa8:	f7fe fbe8 	bl	800327c <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab0:	f7fe fbe4 	bl	800327c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b64      	cmp	r3, #100	; 0x64
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e1ec      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac2:	4b53      	ldr	r3, [pc, #332]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x10c>
 8004ace:	e000      	b.n	8004ad2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d063      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ade:	4b4c      	ldr	r3, [pc, #304]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004aea:	4b49      	ldr	r3, [pc, #292]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d11c      	bne.n	8004b30 <HAL_RCC_OscConfig+0x18c>
 8004af6:	4b46      	ldr	r3, [pc, #280]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d116      	bne.n	8004b30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b02:	4b43      	ldr	r3, [pc, #268]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_RCC_OscConfig+0x176>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d001      	beq.n	8004b1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e1c0      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1a:	4b3d      	ldr	r3, [pc, #244]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4939      	ldr	r1, [pc, #228]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2e:	e03a      	b.n	8004ba6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d020      	beq.n	8004b7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b38:	4b36      	ldr	r3, [pc, #216]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3e:	f7fe fb9d 	bl	800327c <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b46:	f7fe fb99 	bl	800327c <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e1a1      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b58:	4b2d      	ldr	r3, [pc, #180]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0f0      	beq.n	8004b46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b64:	4b2a      	ldr	r3, [pc, #168]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	4927      	ldr	r1, [pc, #156]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]
 8004b78:	e015      	b.n	8004ba6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b7a:	4b26      	ldr	r3, [pc, #152]	; (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7fe fb7c 	bl	800327c <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b88:	f7fe fb78 	bl	800327c <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e180      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b9a:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d03a      	beq.n	8004c28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d019      	beq.n	8004bee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bba:	4b17      	ldr	r3, [pc, #92]	; (8004c18 <HAL_RCC_OscConfig+0x274>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc0:	f7fe fb5c 	bl	800327c <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bc8:	f7fe fb58 	bl	800327c <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e160      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bda:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <HAL_RCC_OscConfig+0x26c>)
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0f0      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004be6:	2001      	movs	r0, #1
 8004be8:	f000 face 	bl	8005188 <RCC_Delay>
 8004bec:	e01c      	b.n	8004c28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bee:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <HAL_RCC_OscConfig+0x274>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf4:	f7fe fb42 	bl	800327c <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bfa:	e00f      	b.n	8004c1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bfc:	f7fe fb3e 	bl	800327c <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d908      	bls.n	8004c1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e146      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>
 8004c0e:	bf00      	nop
 8004c10:	40021000 	.word	0x40021000
 8004c14:	42420000 	.word	0x42420000
 8004c18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c1c:	4b92      	ldr	r3, [pc, #584]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1e9      	bne.n	8004bfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 80a6 	beq.w	8004d82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c36:	2300      	movs	r3, #0
 8004c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c3a:	4b8b      	ldr	r3, [pc, #556]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10d      	bne.n	8004c62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c46:	4b88      	ldr	r3, [pc, #544]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	4a87      	ldr	r2, [pc, #540]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c50:	61d3      	str	r3, [r2, #28]
 8004c52:	4b85      	ldr	r3, [pc, #532]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c62:	4b82      	ldr	r3, [pc, #520]	; (8004e6c <HAL_RCC_OscConfig+0x4c8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d118      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c6e:	4b7f      	ldr	r3, [pc, #508]	; (8004e6c <HAL_RCC_OscConfig+0x4c8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a7e      	ldr	r2, [pc, #504]	; (8004e6c <HAL_RCC_OscConfig+0x4c8>)
 8004c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c7a:	f7fe faff 	bl	800327c <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c82:	f7fe fafb 	bl	800327c <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b64      	cmp	r3, #100	; 0x64
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e103      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c94:	4b75      	ldr	r3, [pc, #468]	; (8004e6c <HAL_RCC_OscConfig+0x4c8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0f0      	beq.n	8004c82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d106      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x312>
 8004ca8:	4b6f      	ldr	r3, [pc, #444]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	4a6e      	ldr	r2, [pc, #440]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	6213      	str	r3, [r2, #32]
 8004cb4:	e02d      	b.n	8004d12 <HAL_RCC_OscConfig+0x36e>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x334>
 8004cbe:	4b6a      	ldr	r3, [pc, #424]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	4a69      	ldr	r2, [pc, #420]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004cc4:	f023 0301 	bic.w	r3, r3, #1
 8004cc8:	6213      	str	r3, [r2, #32]
 8004cca:	4b67      	ldr	r3, [pc, #412]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	4a66      	ldr	r2, [pc, #408]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004cd0:	f023 0304 	bic.w	r3, r3, #4
 8004cd4:	6213      	str	r3, [r2, #32]
 8004cd6:	e01c      	b.n	8004d12 <HAL_RCC_OscConfig+0x36e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	2b05      	cmp	r3, #5
 8004cde:	d10c      	bne.n	8004cfa <HAL_RCC_OscConfig+0x356>
 8004ce0:	4b61      	ldr	r3, [pc, #388]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	4a60      	ldr	r2, [pc, #384]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004ce6:	f043 0304 	orr.w	r3, r3, #4
 8004cea:	6213      	str	r3, [r2, #32]
 8004cec:	4b5e      	ldr	r3, [pc, #376]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	4a5d      	ldr	r2, [pc, #372]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6213      	str	r3, [r2, #32]
 8004cf8:	e00b      	b.n	8004d12 <HAL_RCC_OscConfig+0x36e>
 8004cfa:	4b5b      	ldr	r3, [pc, #364]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	4a5a      	ldr	r2, [pc, #360]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004d00:	f023 0301 	bic.w	r3, r3, #1
 8004d04:	6213      	str	r3, [r2, #32]
 8004d06:	4b58      	ldr	r3, [pc, #352]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	4a57      	ldr	r2, [pc, #348]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004d0c:	f023 0304 	bic.w	r3, r3, #4
 8004d10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d015      	beq.n	8004d46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d1a:	f7fe faaf 	bl	800327c <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d20:	e00a      	b.n	8004d38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d22:	f7fe faab 	bl	800327c <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e0b1      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d38:	4b4b      	ldr	r3, [pc, #300]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0ee      	beq.n	8004d22 <HAL_RCC_OscConfig+0x37e>
 8004d44:	e014      	b.n	8004d70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d46:	f7fe fa99 	bl	800327c <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4e:	f7fe fa95 	bl	800327c <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e09b      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d64:	4b40      	ldr	r3, [pc, #256]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ee      	bne.n	8004d4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d70:	7dfb      	ldrb	r3, [r7, #23]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d105      	bne.n	8004d82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d76:	4b3c      	ldr	r3, [pc, #240]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	4a3b      	ldr	r2, [pc, #236]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8087 	beq.w	8004e9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d8c:	4b36      	ldr	r3, [pc, #216]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 030c 	and.w	r3, r3, #12
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d061      	beq.n	8004e5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d146      	bne.n	8004e2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da0:	4b33      	ldr	r3, [pc, #204]	; (8004e70 <HAL_RCC_OscConfig+0x4cc>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da6:	f7fe fa69 	bl	800327c <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dae:	f7fe fa65 	bl	800327c <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e06d      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dc0:	4b29      	ldr	r3, [pc, #164]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f0      	bne.n	8004dae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd4:	d108      	bne.n	8004de8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004dd6:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	4921      	ldr	r1, [pc, #132]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004de8:	4b1f      	ldr	r3, [pc, #124]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a19      	ldr	r1, [r3, #32]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	491b      	ldr	r1, [pc, #108]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e00:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <HAL_RCC_OscConfig+0x4cc>)
 8004e02:	2201      	movs	r2, #1
 8004e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e06:	f7fe fa39 	bl	800327c <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e0c:	e008      	b.n	8004e20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e0e:	f7fe fa35 	bl	800327c <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e03d      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e20:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f0      	beq.n	8004e0e <HAL_RCC_OscConfig+0x46a>
 8004e2c:	e035      	b.n	8004e9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e2e:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <HAL_RCC_OscConfig+0x4cc>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e34:	f7fe fa22 	bl	800327c <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e3c:	f7fe fa1e 	bl	800327c <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e026      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e4e:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <HAL_RCC_OscConfig+0x4c4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1f0      	bne.n	8004e3c <HAL_RCC_OscConfig+0x498>
 8004e5a:	e01e      	b.n	8004e9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d107      	bne.n	8004e74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e019      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	40007000 	.word	0x40007000
 8004e70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e74:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <HAL_RCC_OscConfig+0x500>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d106      	bne.n	8004e96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d001      	beq.n	8004e9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000

08004ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0d0      	b.n	800505e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ebc:	4b6a      	ldr	r3, [pc, #424]	; (8005068 <HAL_RCC_ClockConfig+0x1c0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d910      	bls.n	8004eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eca:	4b67      	ldr	r3, [pc, #412]	; (8005068 <HAL_RCC_ClockConfig+0x1c0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f023 0207 	bic.w	r2, r3, #7
 8004ed2:	4965      	ldr	r1, [pc, #404]	; (8005068 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eda:	4b63      	ldr	r3, [pc, #396]	; (8005068 <HAL_RCC_ClockConfig+0x1c0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0b8      	b.n	800505e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d020      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f04:	4b59      	ldr	r3, [pc, #356]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	4a58      	ldr	r2, [pc, #352]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8004f0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0308 	and.w	r3, r3, #8
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f1c:	4b53      	ldr	r3, [pc, #332]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	4a52      	ldr	r2, [pc, #328]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8004f22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f28:	4b50      	ldr	r3, [pc, #320]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	494d      	ldr	r1, [pc, #308]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d040      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d107      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	4b47      	ldr	r3, [pc, #284]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d115      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e07f      	b.n	800505e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d107      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f66:	4b41      	ldr	r3, [pc, #260]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d109      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e073      	b.n	800505e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f76:	4b3d      	ldr	r3, [pc, #244]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e06b      	b.n	800505e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f86:	4b39      	ldr	r3, [pc, #228]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f023 0203 	bic.w	r2, r3, #3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	4936      	ldr	r1, [pc, #216]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f98:	f7fe f970 	bl	800327c <HAL_GetTick>
 8004f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9e:	e00a      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa0:	f7fe f96c 	bl	800327c <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e053      	b.n	800505e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb6:	4b2d      	ldr	r3, [pc, #180]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f003 020c 	and.w	r2, r3, #12
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d1eb      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc8:	4b27      	ldr	r3, [pc, #156]	; (8005068 <HAL_RCC_ClockConfig+0x1c0>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d210      	bcs.n	8004ff8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd6:	4b24      	ldr	r3, [pc, #144]	; (8005068 <HAL_RCC_ClockConfig+0x1c0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f023 0207 	bic.w	r2, r3, #7
 8004fde:	4922      	ldr	r1, [pc, #136]	; (8005068 <HAL_RCC_ClockConfig+0x1c0>)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	4b20      	ldr	r3, [pc, #128]	; (8005068 <HAL_RCC_ClockConfig+0x1c0>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e032      	b.n	800505e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005004:	4b19      	ldr	r3, [pc, #100]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	4916      	ldr	r1, [pc, #88]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8005012:	4313      	orrs	r3, r2
 8005014:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d009      	beq.n	8005036 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005022:	4b12      	ldr	r3, [pc, #72]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	490e      	ldr	r1, [pc, #56]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8005032:	4313      	orrs	r3, r2
 8005034:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005036:	f000 f821 	bl	800507c <HAL_RCC_GetSysClockFreq>
 800503a:	4602      	mov	r2, r0
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <HAL_RCC_ClockConfig+0x1c4>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	490a      	ldr	r1, [pc, #40]	; (8005070 <HAL_RCC_ClockConfig+0x1c8>)
 8005048:	5ccb      	ldrb	r3, [r1, r3]
 800504a:	fa22 f303 	lsr.w	r3, r2, r3
 800504e:	4a09      	ldr	r2, [pc, #36]	; (8005074 <HAL_RCC_ClockConfig+0x1cc>)
 8005050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <HAL_RCC_ClockConfig+0x1d0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f7fe f8ce 	bl	80031f8 <HAL_InitTick>

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40022000 	.word	0x40022000
 800506c:	40021000 	.word	0x40021000
 8005070:	0800a250 	.word	0x0800a250
 8005074:	20000018 	.word	0x20000018
 8005078:	2000001c 	.word	0x2000001c

0800507c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	2300      	movs	r3, #0
 8005088:	60bb      	str	r3, [r7, #8]
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	2300      	movs	r3, #0
 8005090:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005096:	4b1e      	ldr	r3, [pc, #120]	; (8005110 <HAL_RCC_GetSysClockFreq+0x94>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f003 030c 	and.w	r3, r3, #12
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d002      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0x30>
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d003      	beq.n	80050b2 <HAL_RCC_GetSysClockFreq+0x36>
 80050aa:	e027      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050ac:	4b19      	ldr	r3, [pc, #100]	; (8005114 <HAL_RCC_GetSysClockFreq+0x98>)
 80050ae:	613b      	str	r3, [r7, #16]
      break;
 80050b0:	e027      	b.n	8005102 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	0c9b      	lsrs	r3, r3, #18
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	4a17      	ldr	r2, [pc, #92]	; (8005118 <HAL_RCC_GetSysClockFreq+0x9c>)
 80050bc:	5cd3      	ldrb	r3, [r2, r3]
 80050be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d010      	beq.n	80050ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050ca:	4b11      	ldr	r3, [pc, #68]	; (8005110 <HAL_RCC_GetSysClockFreq+0x94>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	0c5b      	lsrs	r3, r3, #17
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	4a11      	ldr	r2, [pc, #68]	; (800511c <HAL_RCC_GetSysClockFreq+0xa0>)
 80050d6:	5cd3      	ldrb	r3, [r2, r3]
 80050d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a0d      	ldr	r2, [pc, #52]	; (8005114 <HAL_RCC_GetSysClockFreq+0x98>)
 80050de:	fb03 f202 	mul.w	r2, r3, r2
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	e004      	b.n	80050f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a0c      	ldr	r2, [pc, #48]	; (8005120 <HAL_RCC_GetSysClockFreq+0xa4>)
 80050f0:	fb02 f303 	mul.w	r3, r2, r3
 80050f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	613b      	str	r3, [r7, #16]
      break;
 80050fa:	e002      	b.n	8005102 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050fc:	4b05      	ldr	r3, [pc, #20]	; (8005114 <HAL_RCC_GetSysClockFreq+0x98>)
 80050fe:	613b      	str	r3, [r7, #16]
      break;
 8005100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005102:	693b      	ldr	r3, [r7, #16]
}
 8005104:	4618      	mov	r0, r3
 8005106:	371c      	adds	r7, #28
 8005108:	46bd      	mov	sp, r7
 800510a:	bc80      	pop	{r7}
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40021000 	.word	0x40021000
 8005114:	007a1200 	.word	0x007a1200
 8005118:	0800a268 	.word	0x0800a268
 800511c:	0800a278 	.word	0x0800a278
 8005120:	003d0900 	.word	0x003d0900

08005124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005128:	4b02      	ldr	r3, [pc, #8]	; (8005134 <HAL_RCC_GetHCLKFreq+0x10>)
 800512a:	681b      	ldr	r3, [r3, #0]
}
 800512c:	4618      	mov	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr
 8005134:	20000018 	.word	0x20000018

08005138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800513c:	f7ff fff2 	bl	8005124 <HAL_RCC_GetHCLKFreq>
 8005140:	4602      	mov	r2, r0
 8005142:	4b05      	ldr	r3, [pc, #20]	; (8005158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	0a1b      	lsrs	r3, r3, #8
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	4903      	ldr	r1, [pc, #12]	; (800515c <HAL_RCC_GetPCLK1Freq+0x24>)
 800514e:	5ccb      	ldrb	r3, [r1, r3]
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005154:	4618      	mov	r0, r3
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40021000 	.word	0x40021000
 800515c:	0800a260 	.word	0x0800a260

08005160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005164:	f7ff ffde 	bl	8005124 <HAL_RCC_GetHCLKFreq>
 8005168:	4602      	mov	r2, r0
 800516a:	4b05      	ldr	r3, [pc, #20]	; (8005180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	0adb      	lsrs	r3, r3, #11
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	4903      	ldr	r1, [pc, #12]	; (8005184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005176:	5ccb      	ldrb	r3, [r1, r3]
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800517c:	4618      	mov	r0, r3
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40021000 	.word	0x40021000
 8005184:	0800a260 	.word	0x0800a260

08005188 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <RCC_Delay+0x34>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <RCC_Delay+0x38>)
 8005196:	fba2 2303 	umull	r2, r3, r2, r3
 800519a:	0a5b      	lsrs	r3, r3, #9
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	fb02 f303 	mul.w	r3, r2, r3
 80051a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051a4:	bf00      	nop
  }
  while (Delay --);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1e5a      	subs	r2, r3, #1
 80051aa:	60fa      	str	r2, [r7, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f9      	bne.n	80051a4 <RCC_Delay+0x1c>
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr
 80051bc:	20000018 	.word	0x20000018
 80051c0:	10624dd3 	.word	0x10624dd3

080051c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	613b      	str	r3, [r7, #16]
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d07d      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80051e0:	2300      	movs	r3, #0
 80051e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051e4:	4b4f      	ldr	r3, [pc, #316]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10d      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051f0:	4b4c      	ldr	r3, [pc, #304]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	4a4b      	ldr	r2, [pc, #300]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051fa:	61d3      	str	r3, [r2, #28]
 80051fc:	4b49      	ldr	r3, [pc, #292]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005204:	60bb      	str	r3, [r7, #8]
 8005206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005208:	2301      	movs	r3, #1
 800520a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800520c:	4b46      	ldr	r3, [pc, #280]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d118      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005218:	4b43      	ldr	r3, [pc, #268]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a42      	ldr	r2, [pc, #264]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800521e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005222:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005224:	f7fe f82a 	bl	800327c <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522a:	e008      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800522c:	f7fe f826 	bl	800327c <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b64      	cmp	r3, #100	; 0x64
 8005238:	d901      	bls.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e06d      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523e:	4b3a      	ldr	r3, [pc, #232]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800524a:	4b36      	ldr	r3, [pc, #216]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d02e      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	429a      	cmp	r2, r3
 8005266:	d027      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005268:	4b2e      	ldr	r3, [pc, #184]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005270:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005272:	4b2e      	ldr	r3, [pc, #184]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005274:	2201      	movs	r2, #1
 8005276:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005278:	4b2c      	ldr	r3, [pc, #176]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800527e:	4a29      	ldr	r2, [pc, #164]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d014      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528e:	f7fd fff5 	bl	800327c <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005294:	e00a      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005296:	f7fd fff1 	bl	800327c <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d901      	bls.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e036      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ac:	4b1d      	ldr	r3, [pc, #116]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0ee      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052b8:	4b1a      	ldr	r3, [pc, #104]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4917      	ldr	r1, [pc, #92]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052ca:	7dfb      	ldrb	r3, [r7, #23]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d105      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d0:	4b14      	ldr	r3, [pc, #80]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	4a13      	ldr	r2, [pc, #76]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052e8:	4b0e      	ldr	r3, [pc, #56]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	490b      	ldr	r1, [pc, #44]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b00      	cmp	r3, #0
 8005304:	d008      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005306:	4b07      	ldr	r3, [pc, #28]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	4904      	ldr	r1, [pc, #16]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005314:	4313      	orrs	r3, r2
 8005316:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40021000 	.word	0x40021000
 8005328:	40007000 	.word	0x40007000
 800532c:	42420440 	.word	0x42420440

08005330 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	2300      	movs	r3, #0
 800533e:	61fb      	str	r3, [r7, #28]
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	2300      	movs	r3, #0
 800534a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3b01      	subs	r3, #1
 8005350:	2b0f      	cmp	r3, #15
 8005352:	f200 80af 	bhi.w	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8005356:	a201      	add	r2, pc, #4	; (adr r2, 800535c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8005358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535c:	08005433 	.word	0x08005433
 8005360:	08005499 	.word	0x08005499
 8005364:	080054b5 	.word	0x080054b5
 8005368:	08005423 	.word	0x08005423
 800536c:	080054b5 	.word	0x080054b5
 8005370:	080054b5 	.word	0x080054b5
 8005374:	080054b5 	.word	0x080054b5
 8005378:	0800542b 	.word	0x0800542b
 800537c:	080054b5 	.word	0x080054b5
 8005380:	080054b5 	.word	0x080054b5
 8005384:	080054b5 	.word	0x080054b5
 8005388:	080054b5 	.word	0x080054b5
 800538c:	080054b5 	.word	0x080054b5
 8005390:	080054b5 	.word	0x080054b5
 8005394:	080054b5 	.word	0x080054b5
 8005398:	0800539d 	.word	0x0800539d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800539c:	4b4a      	ldr	r3, [pc, #296]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80053a2:	4b49      	ldr	r3, [pc, #292]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 8084 	beq.w	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	0c9b      	lsrs	r3, r3, #18
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	4a44      	ldr	r2, [pc, #272]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80053ba:	5cd3      	ldrb	r3, [r2, r3]
 80053bc:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d015      	beq.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053c8:	4b3f      	ldr	r3, [pc, #252]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	0c5b      	lsrs	r3, r3, #17
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	4a3f      	ldr	r2, [pc, #252]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80053d4:	5cd3      	ldrb	r3, [r2, r3]
 80053d6:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00d      	beq.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80053e2:	4a3c      	ldr	r2, [pc, #240]	; (80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	fb02 f303 	mul.w	r3, r2, r3
 80053f0:	61fb      	str	r3, [r7, #28]
 80053f2:	e004      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	4a38      	ldr	r2, [pc, #224]	; (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80053f8:	fb02 f303 	mul.w	r3, r2, r3
 80053fc:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80053fe:	4b32      	ldr	r3, [pc, #200]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800540a:	d102      	bne.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005410:	e052      	b.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	4a31      	ldr	r2, [pc, #196]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8005418:	fba2 2303 	umull	r2, r3, r2, r3
 800541c:	085b      	lsrs	r3, r3, #1
 800541e:	61bb      	str	r3, [r7, #24]
      break;
 8005420:	e04a      	b.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005422:	f7ff fe2b 	bl	800507c <HAL_RCC_GetSysClockFreq>
 8005426:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005428:	e049      	b.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800542a:	f7ff fe27 	bl	800507c <HAL_RCC_GetSysClockFreq>
 800542e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005430:	e045      	b.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005432:	4b25      	ldr	r3, [pc, #148]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800543e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005442:	d108      	bne.n	8005456 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 800544e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005452:	61bb      	str	r3, [r7, #24]
 8005454:	e01f      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005460:	d109      	bne.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005462:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 800546e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	e00f      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005480:	d11c      	bne.n	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8005482:	4b11      	ldr	r3, [pc, #68]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d016      	beq.n	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 800548e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005492:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8005494:	e012      	b.n	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8005496:	e011      	b.n	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005498:	f7ff fe62 	bl	8005160 <HAL_RCC_GetPCLK2Freq>
 800549c:	4602      	mov	r2, r0
 800549e:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	0b9b      	lsrs	r3, r3, #14
 80054a4:	f003 0303 	and.w	r3, r3, #3
 80054a8:	3301      	adds	r3, #1
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	61bb      	str	r3, [r7, #24]
      break;
 80054b2:	e004      	b.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 80054b4:	bf00      	nop
 80054b6:	e002      	b.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80054b8:	bf00      	nop
 80054ba:	e000      	b.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80054bc:	bf00      	nop
    }
  }
  return (frequency);
 80054be:	69bb      	ldr	r3, [r7, #24]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3720      	adds	r7, #32
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40021000 	.word	0x40021000
 80054cc:	0800a27c 	.word	0x0800a27c
 80054d0:	0800a28c 	.word	0x0800a28c
 80054d4:	007a1200 	.word	0x007a1200
 80054d8:	003d0900 	.word	0x003d0900
 80054dc:	aaaaaaab 	.word	0xaaaaaaab

080054e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d001      	beq.n	80054f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e03c      	b.n	8005572 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1d      	ldr	r2, [pc, #116]	; (800557c <HAL_TIM_Base_Start+0x9c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d018      	beq.n	800553c <HAL_TIM_Base_Start+0x5c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1c      	ldr	r2, [pc, #112]	; (8005580 <HAL_TIM_Base_Start+0xa0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d013      	beq.n	800553c <HAL_TIM_Base_Start+0x5c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551c:	d00e      	beq.n	800553c <HAL_TIM_Base_Start+0x5c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a18      	ldr	r2, [pc, #96]	; (8005584 <HAL_TIM_Base_Start+0xa4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d009      	beq.n	800553c <HAL_TIM_Base_Start+0x5c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a16      	ldr	r2, [pc, #88]	; (8005588 <HAL_TIM_Base_Start+0xa8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <HAL_TIM_Base_Start+0x5c>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a15      	ldr	r2, [pc, #84]	; (800558c <HAL_TIM_Base_Start+0xac>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d111      	bne.n	8005560 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b06      	cmp	r3, #6
 800554c:	d010      	beq.n	8005570 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0201 	orr.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555e:	e007      	b.n	8005570 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr
 800557c:	40012c00 	.word	0x40012c00
 8005580:	40013400 	.word	0x40013400
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40000c00 	.word	0x40000c00

08005590 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <HAL_TIM_OC_Start+0x24>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	bf14      	ite	ne
 80055ac:	2301      	movne	r3, #1
 80055ae:	2300      	moveq	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	e022      	b.n	80055fa <HAL_TIM_OC_Start+0x6a>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d109      	bne.n	80055ce <HAL_TIM_OC_Start+0x3e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	bf14      	ite	ne
 80055c6:	2301      	movne	r3, #1
 80055c8:	2300      	moveq	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	e015      	b.n	80055fa <HAL_TIM_OC_Start+0x6a>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d109      	bne.n	80055e8 <HAL_TIM_OC_Start+0x58>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	bf14      	ite	ne
 80055e0:	2301      	movne	r3, #1
 80055e2:	2300      	moveq	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	e008      	b.n	80055fa <HAL_TIM_OC_Start+0x6a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	bf14      	ite	ne
 80055f4:	2301      	movne	r3, #1
 80055f6:	2300      	moveq	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e072      	b.n	80056e8 <HAL_TIM_OC_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d104      	bne.n	8005612 <HAL_TIM_OC_Start+0x82>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005610:	e013      	b.n	800563a <HAL_TIM_OC_Start+0xaa>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b04      	cmp	r3, #4
 8005616:	d104      	bne.n	8005622 <HAL_TIM_OC_Start+0x92>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005620:	e00b      	b.n	800563a <HAL_TIM_OC_Start+0xaa>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b08      	cmp	r3, #8
 8005626:	d104      	bne.n	8005632 <HAL_TIM_OC_Start+0xa2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005630:	e003      	b.n	800563a <HAL_TIM_OC_Start+0xaa>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2202      	movs	r2, #2
 8005636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2201      	movs	r2, #1
 8005640:	6839      	ldr	r1, [r7, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fcb8 	bl	8005fb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a28      	ldr	r2, [pc, #160]	; (80056f0 <HAL_TIM_OC_Start+0x160>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d004      	beq.n	800565c <HAL_TIM_OC_Start+0xcc>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a27      	ldr	r2, [pc, #156]	; (80056f4 <HAL_TIM_OC_Start+0x164>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d101      	bne.n	8005660 <HAL_TIM_OC_Start+0xd0>
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <HAL_TIM_OC_Start+0xd2>
 8005660:	2300      	movs	r3, #0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d007      	beq.n	8005676 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005674:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1d      	ldr	r2, [pc, #116]	; (80056f0 <HAL_TIM_OC_Start+0x160>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d018      	beq.n	80056b2 <HAL_TIM_OC_Start+0x122>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a1b      	ldr	r2, [pc, #108]	; (80056f4 <HAL_TIM_OC_Start+0x164>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d013      	beq.n	80056b2 <HAL_TIM_OC_Start+0x122>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005692:	d00e      	beq.n	80056b2 <HAL_TIM_OC_Start+0x122>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a17      	ldr	r2, [pc, #92]	; (80056f8 <HAL_TIM_OC_Start+0x168>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d009      	beq.n	80056b2 <HAL_TIM_OC_Start+0x122>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a16      	ldr	r2, [pc, #88]	; (80056fc <HAL_TIM_OC_Start+0x16c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d004      	beq.n	80056b2 <HAL_TIM_OC_Start+0x122>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a14      	ldr	r2, [pc, #80]	; (8005700 <HAL_TIM_OC_Start+0x170>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d111      	bne.n	80056d6 <HAL_TIM_OC_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b06      	cmp	r3, #6
 80056c2:	d010      	beq.n	80056e6 <HAL_TIM_OC_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d4:	e007      	b.n	80056e6 <HAL_TIM_OC_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0201 	orr.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40013400 	.word	0x40013400
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40000800 	.word	0x40000800
 8005700:	40000c00 	.word	0x40000c00

08005704 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e041      	b.n	800579a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fd fb92 	bl	8002e54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3304      	adds	r3, #4
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f000 fa06 	bl	8005b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d109      	bne.n	80057c8 <HAL_TIM_PWM_Start+0x24>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	bf14      	ite	ne
 80057c0:	2301      	movne	r3, #1
 80057c2:	2300      	moveq	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	e022      	b.n	800580e <HAL_TIM_PWM_Start+0x6a>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d109      	bne.n	80057e2 <HAL_TIM_PWM_Start+0x3e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	bf14      	ite	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	2300      	moveq	r3, #0
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	e015      	b.n	800580e <HAL_TIM_PWM_Start+0x6a>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d109      	bne.n	80057fc <HAL_TIM_PWM_Start+0x58>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	bf14      	ite	ne
 80057f4:	2301      	movne	r3, #1
 80057f6:	2300      	moveq	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	e008      	b.n	800580e <HAL_TIM_PWM_Start+0x6a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	bf14      	ite	ne
 8005808:	2301      	movne	r3, #1
 800580a:	2300      	moveq	r3, #0
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e072      	b.n	80058fc <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d104      	bne.n	8005826 <HAL_TIM_PWM_Start+0x82>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005824:	e013      	b.n	800584e <HAL_TIM_PWM_Start+0xaa>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b04      	cmp	r3, #4
 800582a:	d104      	bne.n	8005836 <HAL_TIM_PWM_Start+0x92>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005834:	e00b      	b.n	800584e <HAL_TIM_PWM_Start+0xaa>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b08      	cmp	r3, #8
 800583a:	d104      	bne.n	8005846 <HAL_TIM_PWM_Start+0xa2>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005844:	e003      	b.n	800584e <HAL_TIM_PWM_Start+0xaa>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2202      	movs	r2, #2
 800584a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2201      	movs	r2, #1
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fbae 	bl	8005fb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a28      	ldr	r2, [pc, #160]	; (8005904 <HAL_TIM_PWM_Start+0x160>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d004      	beq.n	8005870 <HAL_TIM_PWM_Start+0xcc>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a27      	ldr	r2, [pc, #156]	; (8005908 <HAL_TIM_PWM_Start+0x164>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d101      	bne.n	8005874 <HAL_TIM_PWM_Start+0xd0>
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <HAL_TIM_PWM_Start+0xd2>
 8005874:	2300      	movs	r3, #0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d007      	beq.n	800588a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005888:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a1d      	ldr	r2, [pc, #116]	; (8005904 <HAL_TIM_PWM_Start+0x160>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d018      	beq.n	80058c6 <HAL_TIM_PWM_Start+0x122>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1b      	ldr	r2, [pc, #108]	; (8005908 <HAL_TIM_PWM_Start+0x164>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d013      	beq.n	80058c6 <HAL_TIM_PWM_Start+0x122>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a6:	d00e      	beq.n	80058c6 <HAL_TIM_PWM_Start+0x122>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a17      	ldr	r2, [pc, #92]	; (800590c <HAL_TIM_PWM_Start+0x168>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d009      	beq.n	80058c6 <HAL_TIM_PWM_Start+0x122>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a16      	ldr	r2, [pc, #88]	; (8005910 <HAL_TIM_PWM_Start+0x16c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d004      	beq.n	80058c6 <HAL_TIM_PWM_Start+0x122>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a14      	ldr	r2, [pc, #80]	; (8005914 <HAL_TIM_PWM_Start+0x170>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d111      	bne.n	80058ea <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b06      	cmp	r3, #6
 80058d6:	d010      	beq.n	80058fa <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e8:	e007      	b.n	80058fa <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0201 	orr.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40012c00 	.word	0x40012c00
 8005908:	40013400 	.word	0x40013400
 800590c:	40000400 	.word	0x40000400
 8005910:	40000800 	.word	0x40000800
 8005914:	40000c00 	.word	0x40000c00

08005918 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005932:	2302      	movs	r3, #2
 8005934:	e048      	b.n	80059c8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b0c      	cmp	r3, #12
 8005942:	d839      	bhi.n	80059b8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005944:	a201      	add	r2, pc, #4	; (adr r2, 800594c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594a:	bf00      	nop
 800594c:	08005981 	.word	0x08005981
 8005950:	080059b9 	.word	0x080059b9
 8005954:	080059b9 	.word	0x080059b9
 8005958:	080059b9 	.word	0x080059b9
 800595c:	0800598f 	.word	0x0800598f
 8005960:	080059b9 	.word	0x080059b9
 8005964:	080059b9 	.word	0x080059b9
 8005968:	080059b9 	.word	0x080059b9
 800596c:	0800599d 	.word	0x0800599d
 8005970:	080059b9 	.word	0x080059b9
 8005974:	080059b9 	.word	0x080059b9
 8005978:	080059b9 	.word	0x080059b9
 800597c:	080059ab 	.word	0x080059ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	4618      	mov	r0, r3
 8005988:	f000 f96a 	bl	8005c60 <TIM_OC1_SetConfig>
      break;
 800598c:	e017      	b.n	80059be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	4618      	mov	r0, r3
 8005996:	f000 f9d3 	bl	8005d40 <TIM_OC2_SetConfig>
      break;
 800599a:	e010      	b.n	80059be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fa40 	bl	8005e28 <TIM_OC3_SetConfig>
      break;
 80059a8:	e009      	b.n	80059be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 faad 	bl	8005f10 <TIM_OC4_SetConfig>
      break;
 80059b6:	e002      	b.n	80059be <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	75fb      	strb	r3, [r7, #23]
      break;
 80059bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059dc:	2300      	movs	r3, #0
 80059de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059ea:	2302      	movs	r3, #2
 80059ec:	e0ae      	b.n	8005b4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b0c      	cmp	r3, #12
 80059fa:	f200 809f 	bhi.w	8005b3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059fe:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a39 	.word	0x08005a39
 8005a08:	08005b3d 	.word	0x08005b3d
 8005a0c:	08005b3d 	.word	0x08005b3d
 8005a10:	08005b3d 	.word	0x08005b3d
 8005a14:	08005a79 	.word	0x08005a79
 8005a18:	08005b3d 	.word	0x08005b3d
 8005a1c:	08005b3d 	.word	0x08005b3d
 8005a20:	08005b3d 	.word	0x08005b3d
 8005a24:	08005abb 	.word	0x08005abb
 8005a28:	08005b3d 	.word	0x08005b3d
 8005a2c:	08005b3d 	.word	0x08005b3d
 8005a30:	08005b3d 	.word	0x08005b3d
 8005a34:	08005afb 	.word	0x08005afb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 f90e 	bl	8005c60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0208 	orr.w	r2, r2, #8
 8005a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0204 	bic.w	r2, r2, #4
 8005a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6999      	ldr	r1, [r3, #24]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	619a      	str	r2, [r3, #24]
      break;
 8005a76:	e064      	b.n	8005b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68b9      	ldr	r1, [r7, #8]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 f95e 	bl	8005d40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699a      	ldr	r2, [r3, #24]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6999      	ldr	r1, [r3, #24]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	021a      	lsls	r2, r3, #8
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	619a      	str	r2, [r3, #24]
      break;
 8005ab8:	e043      	b.n	8005b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 f9b1 	bl	8005e28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69da      	ldr	r2, [r3, #28]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0208 	orr.w	r2, r2, #8
 8005ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0204 	bic.w	r2, r2, #4
 8005ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69d9      	ldr	r1, [r3, #28]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	61da      	str	r2, [r3, #28]
      break;
 8005af8:	e023      	b.n	8005b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fa05 	bl	8005f10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69d9      	ldr	r1, [r3, #28]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	021a      	lsls	r2, r3, #8
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	61da      	str	r2, [r3, #28]
      break;
 8005b3a:	e002      	b.n	8005b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a39      	ldr	r2, [pc, #228]	; (8005c4c <TIM_Base_SetConfig+0xf8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d013      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a38      	ldr	r2, [pc, #224]	; (8005c50 <TIM_Base_SetConfig+0xfc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00f      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7a:	d00b      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a35      	ldr	r2, [pc, #212]	; (8005c54 <TIM_Base_SetConfig+0x100>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d007      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a34      	ldr	r2, [pc, #208]	; (8005c58 <TIM_Base_SetConfig+0x104>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a33      	ldr	r2, [pc, #204]	; (8005c5c <TIM_Base_SetConfig+0x108>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d108      	bne.n	8005ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a28      	ldr	r2, [pc, #160]	; (8005c4c <TIM_Base_SetConfig+0xf8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d013      	beq.n	8005bd6 <TIM_Base_SetConfig+0x82>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a27      	ldr	r2, [pc, #156]	; (8005c50 <TIM_Base_SetConfig+0xfc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00f      	beq.n	8005bd6 <TIM_Base_SetConfig+0x82>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bbc:	d00b      	beq.n	8005bd6 <TIM_Base_SetConfig+0x82>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a24      	ldr	r2, [pc, #144]	; (8005c54 <TIM_Base_SetConfig+0x100>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d007      	beq.n	8005bd6 <TIM_Base_SetConfig+0x82>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a23      	ldr	r2, [pc, #140]	; (8005c58 <TIM_Base_SetConfig+0x104>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d003      	beq.n	8005bd6 <TIM_Base_SetConfig+0x82>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a22      	ldr	r2, [pc, #136]	; (8005c5c <TIM_Base_SetConfig+0x108>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d108      	bne.n	8005be8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a0f      	ldr	r2, [pc, #60]	; (8005c4c <TIM_Base_SetConfig+0xf8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d003      	beq.n	8005c1c <TIM_Base_SetConfig+0xc8>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a0e      	ldr	r2, [pc, #56]	; (8005c50 <TIM_Base_SetConfig+0xfc>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d103      	bne.n	8005c24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d005      	beq.n	8005c42 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f023 0201 	bic.w	r2, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	611a      	str	r2, [r3, #16]
  }
}
 8005c42:	bf00      	nop
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bc80      	pop	{r7}
 8005c4a:	4770      	bx	lr
 8005c4c:	40012c00 	.word	0x40012c00
 8005c50:	40013400 	.word	0x40013400
 8005c54:	40000400 	.word	0x40000400
 8005c58:	40000800 	.word	0x40000800
 8005c5c:	40000c00 	.word	0x40000c00

08005c60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	f023 0201 	bic.w	r2, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f023 0302 	bic.w	r3, r3, #2
 8005ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a20      	ldr	r2, [pc, #128]	; (8005d38 <TIM_OC1_SetConfig+0xd8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d003      	beq.n	8005cc4 <TIM_OC1_SetConfig+0x64>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a1f      	ldr	r2, [pc, #124]	; (8005d3c <TIM_OC1_SetConfig+0xdc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d10c      	bne.n	8005cde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f023 0308 	bic.w	r3, r3, #8
 8005cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f023 0304 	bic.w	r3, r3, #4
 8005cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a15      	ldr	r2, [pc, #84]	; (8005d38 <TIM_OC1_SetConfig+0xd8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d003      	beq.n	8005cee <TIM_OC1_SetConfig+0x8e>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a14      	ldr	r2, [pc, #80]	; (8005d3c <TIM_OC1_SetConfig+0xdc>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d111      	bne.n	8005d12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	621a      	str	r2, [r3, #32]
}
 8005d2c:	bf00      	nop
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40012c00 	.word	0x40012c00
 8005d3c:	40013400 	.word	0x40013400

08005d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f023 0210 	bic.w	r2, r3, #16
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	021b      	lsls	r3, r3, #8
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f023 0320 	bic.w	r3, r3, #32
 8005d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a21      	ldr	r2, [pc, #132]	; (8005e20 <TIM_OC2_SetConfig+0xe0>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d003      	beq.n	8005da8 <TIM_OC2_SetConfig+0x68>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a20      	ldr	r2, [pc, #128]	; (8005e24 <TIM_OC2_SetConfig+0xe4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d10d      	bne.n	8005dc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a16      	ldr	r2, [pc, #88]	; (8005e20 <TIM_OC2_SetConfig+0xe0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_OC2_SetConfig+0x94>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a15      	ldr	r2, [pc, #84]	; (8005e24 <TIM_OC2_SetConfig+0xe4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d113      	bne.n	8005dfc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005de2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	621a      	str	r2, [r3, #32]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr
 8005e20:	40012c00 	.word	0x40012c00
 8005e24:	40013400 	.word	0x40013400

08005e28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0303 	bic.w	r3, r3, #3
 8005e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a21      	ldr	r2, [pc, #132]	; (8005f08 <TIM_OC3_SetConfig+0xe0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d003      	beq.n	8005e8e <TIM_OC3_SetConfig+0x66>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a20      	ldr	r2, [pc, #128]	; (8005f0c <TIM_OC3_SetConfig+0xe4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d10d      	bne.n	8005eaa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	021b      	lsls	r3, r3, #8
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a16      	ldr	r2, [pc, #88]	; (8005f08 <TIM_OC3_SetConfig+0xe0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d003      	beq.n	8005eba <TIM_OC3_SetConfig+0x92>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a15      	ldr	r2, [pc, #84]	; (8005f0c <TIM_OC3_SetConfig+0xe4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d113      	bne.n	8005ee2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	621a      	str	r2, [r3, #32]
}
 8005efc:	bf00      	nop
 8005efe:	371c      	adds	r7, #28
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bc80      	pop	{r7}
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40012c00 	.word	0x40012c00
 8005f0c:	40013400 	.word	0x40013400

08005f10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	021b      	lsls	r3, r3, #8
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	031b      	lsls	r3, r3, #12
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a11      	ldr	r2, [pc, #68]	; (8005fb0 <TIM_OC4_SetConfig+0xa0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_OC4_SetConfig+0x68>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a10      	ldr	r2, [pc, #64]	; (8005fb4 <TIM_OC4_SetConfig+0xa4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d109      	bne.n	8005f8c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	019b      	lsls	r3, r3, #6
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	621a      	str	r2, [r3, #32]
}
 8005fa6:	bf00      	nop
 8005fa8:	371c      	adds	r7, #28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40013400 	.word	0x40013400

08005fb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 031f 	and.w	r3, r3, #31
 8005fca:	2201      	movs	r2, #1
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a1a      	ldr	r2, [r3, #32]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	43db      	mvns	r3, r3
 8005fda:	401a      	ands	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a1a      	ldr	r2, [r3, #32]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f003 031f 	and.w	r3, r3, #31
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bc80      	pop	{r7}
 8005ffe:	4770      	bx	lr

08006000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006014:	2302      	movs	r3, #2
 8006016:	e050      	b.n	80060ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1b      	ldr	r2, [pc, #108]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d018      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a19      	ldr	r2, [pc, #100]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d013      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606e:	d00e      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a15      	ldr	r2, [pc, #84]	; (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d009      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a14      	ldr	r2, [pc, #80]	; (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d004      	beq.n	800608e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a12      	ldr	r2, [pc, #72]	; (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d10c      	bne.n	80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	4313      	orrs	r3, r2
 800609e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr
 80060c4:	40012c00 	.word	0x40012c00
 80060c8:	40013400 	.word	0x40013400
 80060cc:	40000400 	.word	0x40000400
 80060d0:	40000800 	.word	0x40000800
 80060d4:	40000c00 	.word	0x40000c00

080060d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e03d      	b.n	8006170 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	4313      	orrs	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4313      	orrs	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	bc80      	pop	{r7}
 8006178:	4770      	bx	lr

0800617a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b082      	sub	sp, #8
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e042      	b.n	8006212 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d106      	bne.n	80061a6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7fc febd 	bl	8002f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2224      	movs	r2, #36	; 0x24
 80061aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f972 	bl	80064a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695a      	ldr	r2, [r3, #20]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b08a      	sub	sp, #40	; 0x28
 800621e:	af02      	add	r7, sp, #8
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	603b      	str	r3, [r7, #0]
 8006226:	4613      	mov	r3, r2
 8006228:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b20      	cmp	r3, #32
 8006238:	d175      	bne.n	8006326 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <HAL_UART_Transmit+0x2c>
 8006240:	88fb      	ldrh	r3, [r7, #6]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e06e      	b.n	8006328 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2221      	movs	r2, #33	; 0x21
 8006254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006258:	f7fd f810 	bl	800327c <HAL_GetTick>
 800625c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	88fa      	ldrh	r2, [r7, #6]
 8006262:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	88fa      	ldrh	r2, [r7, #6]
 8006268:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006272:	d108      	bne.n	8006286 <HAL_UART_Transmit+0x6c>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d104      	bne.n	8006286 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800627c:	2300      	movs	r3, #0
 800627e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	61bb      	str	r3, [r7, #24]
 8006284:	e003      	b.n	800628e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800628a:	2300      	movs	r3, #0
 800628c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800628e:	e02e      	b.n	80062ee <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2200      	movs	r2, #0
 8006298:	2180      	movs	r1, #128	; 0x80
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 f848 	bl	8006330 <UART_WaitOnFlagUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d005      	beq.n	80062b2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e03a      	b.n	8006328 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10b      	bne.n	80062d0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	3302      	adds	r3, #2
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	e007      	b.n	80062e0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	781a      	ldrb	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	3301      	adds	r3, #1
 80062de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1cb      	bne.n	8006290 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2200      	movs	r2, #0
 8006300:	2140      	movs	r1, #64	; 0x40
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f814 	bl	8006330 <UART_WaitOnFlagUntilTimeout>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d005      	beq.n	800631a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e006      	b.n	8006328 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	e000      	b.n	8006328 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006326:	2302      	movs	r3, #2
  }
}
 8006328:	4618      	mov	r0, r3
 800632a:	3720      	adds	r7, #32
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	4613      	mov	r3, r2
 800633e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006340:	e03b      	b.n	80063ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d037      	beq.n	80063ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634a:	f7fc ff97 	bl	800327c <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	6a3a      	ldr	r2, [r7, #32]
 8006356:	429a      	cmp	r2, r3
 8006358:	d302      	bcc.n	8006360 <UART_WaitOnFlagUntilTimeout+0x30>
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e03a      	b.n	80063da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	2b00      	cmp	r3, #0
 8006370:	d023      	beq.n	80063ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b80      	cmp	r3, #128	; 0x80
 8006376:	d020      	beq.n	80063ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b40      	cmp	r3, #64	; 0x40
 800637c:	d01d      	beq.n	80063ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0308 	and.w	r3, r3, #8
 8006388:	2b08      	cmp	r3, #8
 800638a:	d116      	bne.n	80063ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800638c:	2300      	movs	r3, #0
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 f81d 	bl	80063e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2208      	movs	r2, #8
 80063ac:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e00f      	b.n	80063da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	4013      	ands	r3, r2
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	bf0c      	ite	eq
 80063ca:	2301      	moveq	r3, #1
 80063cc:	2300      	movne	r3, #0
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	461a      	mov	r2, r3
 80063d2:	79fb      	ldrb	r3, [r7, #7]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d0b4      	beq.n	8006342 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b095      	sub	sp, #84	; 0x54
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330c      	adds	r3, #12
 80063f0:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006400:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800640a:	643a      	str	r2, [r7, #64]	; 0x40
 800640c:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006412:	e841 2300 	strex	r3, r2, [r1]
 8006416:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1e5      	bne.n	80063ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3314      	adds	r3, #20
 8006424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	61fb      	str	r3, [r7, #28]
   return(result);
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	f023 0301 	bic.w	r3, r3, #1
 8006434:	64bb      	str	r3, [r7, #72]	; 0x48
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3314      	adds	r3, #20
 800643c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800643e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006440:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006446:	e841 2300 	strex	r3, r2, [r1]
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1e5      	bne.n	800641e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	2b01      	cmp	r3, #1
 8006458:	d119      	bne.n	800648e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	330c      	adds	r3, #12
 8006460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	60bb      	str	r3, [r7, #8]
   return(result);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f023 0310 	bic.w	r3, r3, #16
 8006470:	647b      	str	r3, [r7, #68]	; 0x44
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	330c      	adds	r3, #12
 8006478:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800647a:	61ba      	str	r2, [r7, #24]
 800647c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	6979      	ldr	r1, [r7, #20]
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	613b      	str	r3, [r7, #16]
   return(result);
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e5      	bne.n	800645a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800649c:	bf00      	nop
 800649e:	3754      	adds	r7, #84	; 0x54
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bc80      	pop	{r7}
 80064a4:	4770      	bx	lr
	...

080064a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80064e2:	f023 030c 	bic.w	r3, r3, #12
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6812      	ldr	r2, [r2, #0]
 80064ea:	68b9      	ldr	r1, [r7, #8]
 80064ec:	430b      	orrs	r3, r1
 80064ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	699a      	ldr	r2, [r3, #24]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a2c      	ldr	r2, [pc, #176]	; (80065bc <UART_SetConfig+0x114>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d103      	bne.n	8006518 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006510:	f7fe fe26 	bl	8005160 <HAL_RCC_GetPCLK2Freq>
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	e002      	b.n	800651e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006518:	f7fe fe0e 	bl	8005138 <HAL_RCC_GetPCLK1Freq>
 800651c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	009a      	lsls	r2, r3, #2
 8006528:	441a      	add	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	fbb2 f3f3 	udiv	r3, r2, r3
 8006534:	4a22      	ldr	r2, [pc, #136]	; (80065c0 <UART_SetConfig+0x118>)
 8006536:	fba2 2303 	umull	r2, r3, r2, r3
 800653a:	095b      	lsrs	r3, r3, #5
 800653c:	0119      	lsls	r1, r3, #4
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	009a      	lsls	r2, r3, #2
 8006548:	441a      	add	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	fbb2 f2f3 	udiv	r2, r2, r3
 8006554:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <UART_SetConfig+0x118>)
 8006556:	fba3 0302 	umull	r0, r3, r3, r2
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	2064      	movs	r0, #100	; 0x64
 800655e:	fb00 f303 	mul.w	r3, r0, r3
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	011b      	lsls	r3, r3, #4
 8006566:	3332      	adds	r3, #50	; 0x32
 8006568:	4a15      	ldr	r2, [pc, #84]	; (80065c0 <UART_SetConfig+0x118>)
 800656a:	fba2 2303 	umull	r2, r3, r2, r3
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006574:	4419      	add	r1, r3
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	009a      	lsls	r2, r3, #2
 8006580:	441a      	add	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	fbb2 f2f3 	udiv	r2, r2, r3
 800658c:	4b0c      	ldr	r3, [pc, #48]	; (80065c0 <UART_SetConfig+0x118>)
 800658e:	fba3 0302 	umull	r0, r3, r3, r2
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	2064      	movs	r0, #100	; 0x64
 8006596:	fb00 f303 	mul.w	r3, r0, r3
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	3332      	adds	r3, #50	; 0x32
 80065a0:	4a07      	ldr	r2, [pc, #28]	; (80065c0 <UART_SetConfig+0x118>)
 80065a2:	fba2 2303 	umull	r2, r3, r2, r3
 80065a6:	095b      	lsrs	r3, r3, #5
 80065a8:	f003 020f 	and.w	r2, r3, #15
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	440a      	add	r2, r1
 80065b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80065b4:	bf00      	nop
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40013800 	.word	0x40013800
 80065c0:	51eb851f 	.word	0x51eb851f

080065c4 <__cvt>:
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065ca:	461f      	mov	r7, r3
 80065cc:	bfbb      	ittet	lt
 80065ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80065d2:	461f      	movlt	r7, r3
 80065d4:	2300      	movge	r3, #0
 80065d6:	232d      	movlt	r3, #45	; 0x2d
 80065d8:	b088      	sub	sp, #32
 80065da:	4614      	mov	r4, r2
 80065dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80065e0:	7013      	strb	r3, [r2, #0]
 80065e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80065e8:	f023 0820 	bic.w	r8, r3, #32
 80065ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065f0:	d005      	beq.n	80065fe <__cvt+0x3a>
 80065f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80065f6:	d100      	bne.n	80065fa <__cvt+0x36>
 80065f8:	3501      	adds	r5, #1
 80065fa:	2302      	movs	r3, #2
 80065fc:	e000      	b.n	8006600 <__cvt+0x3c>
 80065fe:	2303      	movs	r3, #3
 8006600:	aa07      	add	r2, sp, #28
 8006602:	9204      	str	r2, [sp, #16]
 8006604:	aa06      	add	r2, sp, #24
 8006606:	e9cd a202 	strd	sl, r2, [sp, #8]
 800660a:	e9cd 3500 	strd	r3, r5, [sp]
 800660e:	4622      	mov	r2, r4
 8006610:	463b      	mov	r3, r7
 8006612:	f000 ff55 	bl	80074c0 <_dtoa_r>
 8006616:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800661a:	4606      	mov	r6, r0
 800661c:	d102      	bne.n	8006624 <__cvt+0x60>
 800661e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006620:	07db      	lsls	r3, r3, #31
 8006622:	d522      	bpl.n	800666a <__cvt+0xa6>
 8006624:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006628:	eb06 0905 	add.w	r9, r6, r5
 800662c:	d110      	bne.n	8006650 <__cvt+0x8c>
 800662e:	7833      	ldrb	r3, [r6, #0]
 8006630:	2b30      	cmp	r3, #48	; 0x30
 8006632:	d10a      	bne.n	800664a <__cvt+0x86>
 8006634:	2200      	movs	r2, #0
 8006636:	2300      	movs	r3, #0
 8006638:	4620      	mov	r0, r4
 800663a:	4639      	mov	r1, r7
 800663c:	f7fa fa20 	bl	8000a80 <__aeabi_dcmpeq>
 8006640:	b918      	cbnz	r0, 800664a <__cvt+0x86>
 8006642:	f1c5 0501 	rsb	r5, r5, #1
 8006646:	f8ca 5000 	str.w	r5, [sl]
 800664a:	f8da 3000 	ldr.w	r3, [sl]
 800664e:	4499      	add	r9, r3
 8006650:	2200      	movs	r2, #0
 8006652:	2300      	movs	r3, #0
 8006654:	4620      	mov	r0, r4
 8006656:	4639      	mov	r1, r7
 8006658:	f7fa fa12 	bl	8000a80 <__aeabi_dcmpeq>
 800665c:	b108      	cbz	r0, 8006662 <__cvt+0x9e>
 800665e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006662:	2230      	movs	r2, #48	; 0x30
 8006664:	9b07      	ldr	r3, [sp, #28]
 8006666:	454b      	cmp	r3, r9
 8006668:	d307      	bcc.n	800667a <__cvt+0xb6>
 800666a:	4630      	mov	r0, r6
 800666c:	9b07      	ldr	r3, [sp, #28]
 800666e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006670:	1b9b      	subs	r3, r3, r6
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	b008      	add	sp, #32
 8006676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667a:	1c59      	adds	r1, r3, #1
 800667c:	9107      	str	r1, [sp, #28]
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	e7f0      	b.n	8006664 <__cvt+0xa0>

08006682 <__exponent>:
 8006682:	4603      	mov	r3, r0
 8006684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006686:	2900      	cmp	r1, #0
 8006688:	f803 2b02 	strb.w	r2, [r3], #2
 800668c:	bfb6      	itet	lt
 800668e:	222d      	movlt	r2, #45	; 0x2d
 8006690:	222b      	movge	r2, #43	; 0x2b
 8006692:	4249      	neglt	r1, r1
 8006694:	2909      	cmp	r1, #9
 8006696:	7042      	strb	r2, [r0, #1]
 8006698:	dd2a      	ble.n	80066f0 <__exponent+0x6e>
 800669a:	f10d 0207 	add.w	r2, sp, #7
 800669e:	4617      	mov	r7, r2
 80066a0:	260a      	movs	r6, #10
 80066a2:	fb91 f5f6 	sdiv	r5, r1, r6
 80066a6:	4694      	mov	ip, r2
 80066a8:	fb06 1415 	mls	r4, r6, r5, r1
 80066ac:	3430      	adds	r4, #48	; 0x30
 80066ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80066b2:	460c      	mov	r4, r1
 80066b4:	2c63      	cmp	r4, #99	; 0x63
 80066b6:	4629      	mov	r1, r5
 80066b8:	f102 32ff 	add.w	r2, r2, #4294967295
 80066bc:	dcf1      	bgt.n	80066a2 <__exponent+0x20>
 80066be:	3130      	adds	r1, #48	; 0x30
 80066c0:	f1ac 0402 	sub.w	r4, ip, #2
 80066c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80066c8:	4622      	mov	r2, r4
 80066ca:	1c41      	adds	r1, r0, #1
 80066cc:	42ba      	cmp	r2, r7
 80066ce:	d30a      	bcc.n	80066e6 <__exponent+0x64>
 80066d0:	f10d 0209 	add.w	r2, sp, #9
 80066d4:	eba2 020c 	sub.w	r2, r2, ip
 80066d8:	42bc      	cmp	r4, r7
 80066da:	bf88      	it	hi
 80066dc:	2200      	movhi	r2, #0
 80066de:	4413      	add	r3, r2
 80066e0:	1a18      	subs	r0, r3, r0
 80066e2:	b003      	add	sp, #12
 80066e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80066ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 80066ee:	e7ed      	b.n	80066cc <__exponent+0x4a>
 80066f0:	2330      	movs	r3, #48	; 0x30
 80066f2:	3130      	adds	r1, #48	; 0x30
 80066f4:	7083      	strb	r3, [r0, #2]
 80066f6:	70c1      	strb	r1, [r0, #3]
 80066f8:	1d03      	adds	r3, r0, #4
 80066fa:	e7f1      	b.n	80066e0 <__exponent+0x5e>

080066fc <_printf_float>:
 80066fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006700:	b091      	sub	sp, #68	; 0x44
 8006702:	460c      	mov	r4, r1
 8006704:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006708:	4616      	mov	r6, r2
 800670a:	461f      	mov	r7, r3
 800670c:	4605      	mov	r5, r0
 800670e:	f000 fdc7 	bl	80072a0 <_localeconv_r>
 8006712:	6803      	ldr	r3, [r0, #0]
 8006714:	4618      	mov	r0, r3
 8006716:	9309      	str	r3, [sp, #36]	; 0x24
 8006718:	f7f9 fd86 	bl	8000228 <strlen>
 800671c:	2300      	movs	r3, #0
 800671e:	930e      	str	r3, [sp, #56]	; 0x38
 8006720:	f8d8 3000 	ldr.w	r3, [r8]
 8006724:	900a      	str	r0, [sp, #40]	; 0x28
 8006726:	3307      	adds	r3, #7
 8006728:	f023 0307 	bic.w	r3, r3, #7
 800672c:	f103 0208 	add.w	r2, r3, #8
 8006730:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006734:	f8d4 b000 	ldr.w	fp, [r4]
 8006738:	f8c8 2000 	str.w	r2, [r8]
 800673c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006740:	4652      	mov	r2, sl
 8006742:	4643      	mov	r3, r8
 8006744:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006748:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800674c:	930b      	str	r3, [sp, #44]	; 0x2c
 800674e:	f04f 32ff 	mov.w	r2, #4294967295
 8006752:	4650      	mov	r0, sl
 8006754:	4b9c      	ldr	r3, [pc, #624]	; (80069c8 <_printf_float+0x2cc>)
 8006756:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006758:	f7fa f9c4 	bl	8000ae4 <__aeabi_dcmpun>
 800675c:	bb70      	cbnz	r0, 80067bc <_printf_float+0xc0>
 800675e:	f04f 32ff 	mov.w	r2, #4294967295
 8006762:	4650      	mov	r0, sl
 8006764:	4b98      	ldr	r3, [pc, #608]	; (80069c8 <_printf_float+0x2cc>)
 8006766:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006768:	f7fa f99e 	bl	8000aa8 <__aeabi_dcmple>
 800676c:	bb30      	cbnz	r0, 80067bc <_printf_float+0xc0>
 800676e:	2200      	movs	r2, #0
 8006770:	2300      	movs	r3, #0
 8006772:	4650      	mov	r0, sl
 8006774:	4641      	mov	r1, r8
 8006776:	f7fa f98d 	bl	8000a94 <__aeabi_dcmplt>
 800677a:	b110      	cbz	r0, 8006782 <_printf_float+0x86>
 800677c:	232d      	movs	r3, #45	; 0x2d
 800677e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006782:	4a92      	ldr	r2, [pc, #584]	; (80069cc <_printf_float+0x2d0>)
 8006784:	4b92      	ldr	r3, [pc, #584]	; (80069d0 <_printf_float+0x2d4>)
 8006786:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800678a:	bf94      	ite	ls
 800678c:	4690      	movls	r8, r2
 800678e:	4698      	movhi	r8, r3
 8006790:	2303      	movs	r3, #3
 8006792:	f04f 0a00 	mov.w	sl, #0
 8006796:	6123      	str	r3, [r4, #16]
 8006798:	f02b 0304 	bic.w	r3, fp, #4
 800679c:	6023      	str	r3, [r4, #0]
 800679e:	4633      	mov	r3, r6
 80067a0:	4621      	mov	r1, r4
 80067a2:	4628      	mov	r0, r5
 80067a4:	9700      	str	r7, [sp, #0]
 80067a6:	aa0f      	add	r2, sp, #60	; 0x3c
 80067a8:	f000 f9d6 	bl	8006b58 <_printf_common>
 80067ac:	3001      	adds	r0, #1
 80067ae:	f040 8090 	bne.w	80068d2 <_printf_float+0x1d6>
 80067b2:	f04f 30ff 	mov.w	r0, #4294967295
 80067b6:	b011      	add	sp, #68	; 0x44
 80067b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067bc:	4652      	mov	r2, sl
 80067be:	4643      	mov	r3, r8
 80067c0:	4650      	mov	r0, sl
 80067c2:	4641      	mov	r1, r8
 80067c4:	f7fa f98e 	bl	8000ae4 <__aeabi_dcmpun>
 80067c8:	b148      	cbz	r0, 80067de <_printf_float+0xe2>
 80067ca:	f1b8 0f00 	cmp.w	r8, #0
 80067ce:	bfb8      	it	lt
 80067d0:	232d      	movlt	r3, #45	; 0x2d
 80067d2:	4a80      	ldr	r2, [pc, #512]	; (80069d4 <_printf_float+0x2d8>)
 80067d4:	bfb8      	it	lt
 80067d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067da:	4b7f      	ldr	r3, [pc, #508]	; (80069d8 <_printf_float+0x2dc>)
 80067dc:	e7d3      	b.n	8006786 <_printf_float+0x8a>
 80067de:	6863      	ldr	r3, [r4, #4]
 80067e0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	d142      	bne.n	800686e <_printf_float+0x172>
 80067e8:	2306      	movs	r3, #6
 80067ea:	6063      	str	r3, [r4, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	9206      	str	r2, [sp, #24]
 80067f0:	aa0e      	add	r2, sp, #56	; 0x38
 80067f2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80067f6:	aa0d      	add	r2, sp, #52	; 0x34
 80067f8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80067fc:	9203      	str	r2, [sp, #12]
 80067fe:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006802:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006806:	6023      	str	r3, [r4, #0]
 8006808:	6863      	ldr	r3, [r4, #4]
 800680a:	4652      	mov	r2, sl
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	4628      	mov	r0, r5
 8006810:	4643      	mov	r3, r8
 8006812:	910b      	str	r1, [sp, #44]	; 0x2c
 8006814:	f7ff fed6 	bl	80065c4 <__cvt>
 8006818:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800681a:	4680      	mov	r8, r0
 800681c:	2947      	cmp	r1, #71	; 0x47
 800681e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006820:	d108      	bne.n	8006834 <_printf_float+0x138>
 8006822:	1cc8      	adds	r0, r1, #3
 8006824:	db02      	blt.n	800682c <_printf_float+0x130>
 8006826:	6863      	ldr	r3, [r4, #4]
 8006828:	4299      	cmp	r1, r3
 800682a:	dd40      	ble.n	80068ae <_printf_float+0x1b2>
 800682c:	f1a9 0902 	sub.w	r9, r9, #2
 8006830:	fa5f f989 	uxtb.w	r9, r9
 8006834:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006838:	d81f      	bhi.n	800687a <_printf_float+0x17e>
 800683a:	464a      	mov	r2, r9
 800683c:	3901      	subs	r1, #1
 800683e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006842:	910d      	str	r1, [sp, #52]	; 0x34
 8006844:	f7ff ff1d 	bl	8006682 <__exponent>
 8006848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800684a:	4682      	mov	sl, r0
 800684c:	1813      	adds	r3, r2, r0
 800684e:	2a01      	cmp	r2, #1
 8006850:	6123      	str	r3, [r4, #16]
 8006852:	dc02      	bgt.n	800685a <_printf_float+0x15e>
 8006854:	6822      	ldr	r2, [r4, #0]
 8006856:	07d2      	lsls	r2, r2, #31
 8006858:	d501      	bpl.n	800685e <_printf_float+0x162>
 800685a:	3301      	adds	r3, #1
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006862:	2b00      	cmp	r3, #0
 8006864:	d09b      	beq.n	800679e <_printf_float+0xa2>
 8006866:	232d      	movs	r3, #45	; 0x2d
 8006868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800686c:	e797      	b.n	800679e <_printf_float+0xa2>
 800686e:	2947      	cmp	r1, #71	; 0x47
 8006870:	d1bc      	bne.n	80067ec <_printf_float+0xf0>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1ba      	bne.n	80067ec <_printf_float+0xf0>
 8006876:	2301      	movs	r3, #1
 8006878:	e7b7      	b.n	80067ea <_printf_float+0xee>
 800687a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800687e:	d118      	bne.n	80068b2 <_printf_float+0x1b6>
 8006880:	2900      	cmp	r1, #0
 8006882:	6863      	ldr	r3, [r4, #4]
 8006884:	dd0b      	ble.n	800689e <_printf_float+0x1a2>
 8006886:	6121      	str	r1, [r4, #16]
 8006888:	b913      	cbnz	r3, 8006890 <_printf_float+0x194>
 800688a:	6822      	ldr	r2, [r4, #0]
 800688c:	07d0      	lsls	r0, r2, #31
 800688e:	d502      	bpl.n	8006896 <_printf_float+0x19a>
 8006890:	3301      	adds	r3, #1
 8006892:	440b      	add	r3, r1
 8006894:	6123      	str	r3, [r4, #16]
 8006896:	f04f 0a00 	mov.w	sl, #0
 800689a:	65a1      	str	r1, [r4, #88]	; 0x58
 800689c:	e7df      	b.n	800685e <_printf_float+0x162>
 800689e:	b913      	cbnz	r3, 80068a6 <_printf_float+0x1aa>
 80068a0:	6822      	ldr	r2, [r4, #0]
 80068a2:	07d2      	lsls	r2, r2, #31
 80068a4:	d501      	bpl.n	80068aa <_printf_float+0x1ae>
 80068a6:	3302      	adds	r3, #2
 80068a8:	e7f4      	b.n	8006894 <_printf_float+0x198>
 80068aa:	2301      	movs	r3, #1
 80068ac:	e7f2      	b.n	8006894 <_printf_float+0x198>
 80068ae:	f04f 0967 	mov.w	r9, #103	; 0x67
 80068b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068b4:	4299      	cmp	r1, r3
 80068b6:	db05      	blt.n	80068c4 <_printf_float+0x1c8>
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	6121      	str	r1, [r4, #16]
 80068bc:	07d8      	lsls	r0, r3, #31
 80068be:	d5ea      	bpl.n	8006896 <_printf_float+0x19a>
 80068c0:	1c4b      	adds	r3, r1, #1
 80068c2:	e7e7      	b.n	8006894 <_printf_float+0x198>
 80068c4:	2900      	cmp	r1, #0
 80068c6:	bfcc      	ite	gt
 80068c8:	2201      	movgt	r2, #1
 80068ca:	f1c1 0202 	rsble	r2, r1, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	e7e0      	b.n	8006894 <_printf_float+0x198>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	055a      	lsls	r2, r3, #21
 80068d6:	d407      	bmi.n	80068e8 <_printf_float+0x1ec>
 80068d8:	6923      	ldr	r3, [r4, #16]
 80068da:	4642      	mov	r2, r8
 80068dc:	4631      	mov	r1, r6
 80068de:	4628      	mov	r0, r5
 80068e0:	47b8      	blx	r7
 80068e2:	3001      	adds	r0, #1
 80068e4:	d12b      	bne.n	800693e <_printf_float+0x242>
 80068e6:	e764      	b.n	80067b2 <_printf_float+0xb6>
 80068e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80068ec:	f240 80dd 	bls.w	8006aaa <_printf_float+0x3ae>
 80068f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068f4:	2200      	movs	r2, #0
 80068f6:	2300      	movs	r3, #0
 80068f8:	f7fa f8c2 	bl	8000a80 <__aeabi_dcmpeq>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d033      	beq.n	8006968 <_printf_float+0x26c>
 8006900:	2301      	movs	r3, #1
 8006902:	4631      	mov	r1, r6
 8006904:	4628      	mov	r0, r5
 8006906:	4a35      	ldr	r2, [pc, #212]	; (80069dc <_printf_float+0x2e0>)
 8006908:	47b8      	blx	r7
 800690a:	3001      	adds	r0, #1
 800690c:	f43f af51 	beq.w	80067b2 <_printf_float+0xb6>
 8006910:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006914:	429a      	cmp	r2, r3
 8006916:	db02      	blt.n	800691e <_printf_float+0x222>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	07d8      	lsls	r0, r3, #31
 800691c:	d50f      	bpl.n	800693e <_printf_float+0x242>
 800691e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006922:	4631      	mov	r1, r6
 8006924:	4628      	mov	r0, r5
 8006926:	47b8      	blx	r7
 8006928:	3001      	adds	r0, #1
 800692a:	f43f af42 	beq.w	80067b2 <_printf_float+0xb6>
 800692e:	f04f 0800 	mov.w	r8, #0
 8006932:	f104 091a 	add.w	r9, r4, #26
 8006936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006938:	3b01      	subs	r3, #1
 800693a:	4543      	cmp	r3, r8
 800693c:	dc09      	bgt.n	8006952 <_printf_float+0x256>
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	079b      	lsls	r3, r3, #30
 8006942:	f100 8104 	bmi.w	8006b4e <_printf_float+0x452>
 8006946:	68e0      	ldr	r0, [r4, #12]
 8006948:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800694a:	4298      	cmp	r0, r3
 800694c:	bfb8      	it	lt
 800694e:	4618      	movlt	r0, r3
 8006950:	e731      	b.n	80067b6 <_printf_float+0xba>
 8006952:	2301      	movs	r3, #1
 8006954:	464a      	mov	r2, r9
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	47b8      	blx	r7
 800695c:	3001      	adds	r0, #1
 800695e:	f43f af28 	beq.w	80067b2 <_printf_float+0xb6>
 8006962:	f108 0801 	add.w	r8, r8, #1
 8006966:	e7e6      	b.n	8006936 <_printf_float+0x23a>
 8006968:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800696a:	2b00      	cmp	r3, #0
 800696c:	dc38      	bgt.n	80069e0 <_printf_float+0x2e4>
 800696e:	2301      	movs	r3, #1
 8006970:	4631      	mov	r1, r6
 8006972:	4628      	mov	r0, r5
 8006974:	4a19      	ldr	r2, [pc, #100]	; (80069dc <_printf_float+0x2e0>)
 8006976:	47b8      	blx	r7
 8006978:	3001      	adds	r0, #1
 800697a:	f43f af1a 	beq.w	80067b2 <_printf_float+0xb6>
 800697e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006982:	4313      	orrs	r3, r2
 8006984:	d102      	bne.n	800698c <_printf_float+0x290>
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	07d9      	lsls	r1, r3, #31
 800698a:	d5d8      	bpl.n	800693e <_printf_float+0x242>
 800698c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006990:	4631      	mov	r1, r6
 8006992:	4628      	mov	r0, r5
 8006994:	47b8      	blx	r7
 8006996:	3001      	adds	r0, #1
 8006998:	f43f af0b 	beq.w	80067b2 <_printf_float+0xb6>
 800699c:	f04f 0900 	mov.w	r9, #0
 80069a0:	f104 0a1a 	add.w	sl, r4, #26
 80069a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069a6:	425b      	negs	r3, r3
 80069a8:	454b      	cmp	r3, r9
 80069aa:	dc01      	bgt.n	80069b0 <_printf_float+0x2b4>
 80069ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069ae:	e794      	b.n	80068da <_printf_float+0x1de>
 80069b0:	2301      	movs	r3, #1
 80069b2:	4652      	mov	r2, sl
 80069b4:	4631      	mov	r1, r6
 80069b6:	4628      	mov	r0, r5
 80069b8:	47b8      	blx	r7
 80069ba:	3001      	adds	r0, #1
 80069bc:	f43f aef9 	beq.w	80067b2 <_printf_float+0xb6>
 80069c0:	f109 0901 	add.w	r9, r9, #1
 80069c4:	e7ee      	b.n	80069a4 <_printf_float+0x2a8>
 80069c6:	bf00      	nop
 80069c8:	7fefffff 	.word	0x7fefffff
 80069cc:	0800a28e 	.word	0x0800a28e
 80069d0:	0800a292 	.word	0x0800a292
 80069d4:	0800a296 	.word	0x0800a296
 80069d8:	0800a29a 	.word	0x0800a29a
 80069dc:	0800a29e 	.word	0x0800a29e
 80069e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069e4:	429a      	cmp	r2, r3
 80069e6:	bfa8      	it	ge
 80069e8:	461a      	movge	r2, r3
 80069ea:	2a00      	cmp	r2, #0
 80069ec:	4691      	mov	r9, r2
 80069ee:	dc37      	bgt.n	8006a60 <_printf_float+0x364>
 80069f0:	f04f 0b00 	mov.w	fp, #0
 80069f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069f8:	f104 021a 	add.w	r2, r4, #26
 80069fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006a00:	ebaa 0309 	sub.w	r3, sl, r9
 8006a04:	455b      	cmp	r3, fp
 8006a06:	dc33      	bgt.n	8006a70 <_printf_float+0x374>
 8006a08:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	db3b      	blt.n	8006a88 <_printf_float+0x38c>
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	07da      	lsls	r2, r3, #31
 8006a14:	d438      	bmi.n	8006a88 <_printf_float+0x38c>
 8006a16:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006a1a:	eba2 0903 	sub.w	r9, r2, r3
 8006a1e:	eba2 020a 	sub.w	r2, r2, sl
 8006a22:	4591      	cmp	r9, r2
 8006a24:	bfa8      	it	ge
 8006a26:	4691      	movge	r9, r2
 8006a28:	f1b9 0f00 	cmp.w	r9, #0
 8006a2c:	dc34      	bgt.n	8006a98 <_printf_float+0x39c>
 8006a2e:	f04f 0800 	mov.w	r8, #0
 8006a32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a36:	f104 0a1a 	add.w	sl, r4, #26
 8006a3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a3e:	1a9b      	subs	r3, r3, r2
 8006a40:	eba3 0309 	sub.w	r3, r3, r9
 8006a44:	4543      	cmp	r3, r8
 8006a46:	f77f af7a 	ble.w	800693e <_printf_float+0x242>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	4652      	mov	r2, sl
 8006a4e:	4631      	mov	r1, r6
 8006a50:	4628      	mov	r0, r5
 8006a52:	47b8      	blx	r7
 8006a54:	3001      	adds	r0, #1
 8006a56:	f43f aeac 	beq.w	80067b2 <_printf_float+0xb6>
 8006a5a:	f108 0801 	add.w	r8, r8, #1
 8006a5e:	e7ec      	b.n	8006a3a <_printf_float+0x33e>
 8006a60:	4613      	mov	r3, r2
 8006a62:	4631      	mov	r1, r6
 8006a64:	4642      	mov	r2, r8
 8006a66:	4628      	mov	r0, r5
 8006a68:	47b8      	blx	r7
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	d1c0      	bne.n	80069f0 <_printf_float+0x2f4>
 8006a6e:	e6a0      	b.n	80067b2 <_printf_float+0xb6>
 8006a70:	2301      	movs	r3, #1
 8006a72:	4631      	mov	r1, r6
 8006a74:	4628      	mov	r0, r5
 8006a76:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a78:	47b8      	blx	r7
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	f43f ae99 	beq.w	80067b2 <_printf_float+0xb6>
 8006a80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a82:	f10b 0b01 	add.w	fp, fp, #1
 8006a86:	e7b9      	b.n	80069fc <_printf_float+0x300>
 8006a88:	4631      	mov	r1, r6
 8006a8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a8e:	4628      	mov	r0, r5
 8006a90:	47b8      	blx	r7
 8006a92:	3001      	adds	r0, #1
 8006a94:	d1bf      	bne.n	8006a16 <_printf_float+0x31a>
 8006a96:	e68c      	b.n	80067b2 <_printf_float+0xb6>
 8006a98:	464b      	mov	r3, r9
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	eb08 020a 	add.w	r2, r8, sl
 8006aa2:	47b8      	blx	r7
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	d1c2      	bne.n	8006a2e <_printf_float+0x332>
 8006aa8:	e683      	b.n	80067b2 <_printf_float+0xb6>
 8006aaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006aac:	2a01      	cmp	r2, #1
 8006aae:	dc01      	bgt.n	8006ab4 <_printf_float+0x3b8>
 8006ab0:	07db      	lsls	r3, r3, #31
 8006ab2:	d539      	bpl.n	8006b28 <_printf_float+0x42c>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	4642      	mov	r2, r8
 8006ab8:	4631      	mov	r1, r6
 8006aba:	4628      	mov	r0, r5
 8006abc:	47b8      	blx	r7
 8006abe:	3001      	adds	r0, #1
 8006ac0:	f43f ae77 	beq.w	80067b2 <_printf_float+0xb6>
 8006ac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4628      	mov	r0, r5
 8006acc:	47b8      	blx	r7
 8006ace:	3001      	adds	r0, #1
 8006ad0:	f43f ae6f 	beq.w	80067b2 <_printf_float+0xb6>
 8006ad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2300      	movs	r3, #0
 8006adc:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006ae0:	f7f9 ffce 	bl	8000a80 <__aeabi_dcmpeq>
 8006ae4:	b9d8      	cbnz	r0, 8006b1e <_printf_float+0x422>
 8006ae6:	f109 33ff 	add.w	r3, r9, #4294967295
 8006aea:	f108 0201 	add.w	r2, r8, #1
 8006aee:	4631      	mov	r1, r6
 8006af0:	4628      	mov	r0, r5
 8006af2:	47b8      	blx	r7
 8006af4:	3001      	adds	r0, #1
 8006af6:	d10e      	bne.n	8006b16 <_printf_float+0x41a>
 8006af8:	e65b      	b.n	80067b2 <_printf_float+0xb6>
 8006afa:	2301      	movs	r3, #1
 8006afc:	464a      	mov	r2, r9
 8006afe:	4631      	mov	r1, r6
 8006b00:	4628      	mov	r0, r5
 8006b02:	47b8      	blx	r7
 8006b04:	3001      	adds	r0, #1
 8006b06:	f43f ae54 	beq.w	80067b2 <_printf_float+0xb6>
 8006b0a:	f108 0801 	add.w	r8, r8, #1
 8006b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b10:	3b01      	subs	r3, #1
 8006b12:	4543      	cmp	r3, r8
 8006b14:	dcf1      	bgt.n	8006afa <_printf_float+0x3fe>
 8006b16:	4653      	mov	r3, sl
 8006b18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b1c:	e6de      	b.n	80068dc <_printf_float+0x1e0>
 8006b1e:	f04f 0800 	mov.w	r8, #0
 8006b22:	f104 091a 	add.w	r9, r4, #26
 8006b26:	e7f2      	b.n	8006b0e <_printf_float+0x412>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4642      	mov	r2, r8
 8006b2c:	e7df      	b.n	8006aee <_printf_float+0x3f2>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	464a      	mov	r2, r9
 8006b32:	4631      	mov	r1, r6
 8006b34:	4628      	mov	r0, r5
 8006b36:	47b8      	blx	r7
 8006b38:	3001      	adds	r0, #1
 8006b3a:	f43f ae3a 	beq.w	80067b2 <_printf_float+0xb6>
 8006b3e:	f108 0801 	add.w	r8, r8, #1
 8006b42:	68e3      	ldr	r3, [r4, #12]
 8006b44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b46:	1a5b      	subs	r3, r3, r1
 8006b48:	4543      	cmp	r3, r8
 8006b4a:	dcf0      	bgt.n	8006b2e <_printf_float+0x432>
 8006b4c:	e6fb      	b.n	8006946 <_printf_float+0x24a>
 8006b4e:	f04f 0800 	mov.w	r8, #0
 8006b52:	f104 0919 	add.w	r9, r4, #25
 8006b56:	e7f4      	b.n	8006b42 <_printf_float+0x446>

08006b58 <_printf_common>:
 8006b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5c:	4616      	mov	r6, r2
 8006b5e:	4699      	mov	r9, r3
 8006b60:	688a      	ldr	r2, [r1, #8]
 8006b62:	690b      	ldr	r3, [r1, #16]
 8006b64:	4607      	mov	r7, r0
 8006b66:	4293      	cmp	r3, r2
 8006b68:	bfb8      	it	lt
 8006b6a:	4613      	movlt	r3, r2
 8006b6c:	6033      	str	r3, [r6, #0]
 8006b6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b72:	460c      	mov	r4, r1
 8006b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b78:	b10a      	cbz	r2, 8006b7e <_printf_common+0x26>
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	6033      	str	r3, [r6, #0]
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	0699      	lsls	r1, r3, #26
 8006b82:	bf42      	ittt	mi
 8006b84:	6833      	ldrmi	r3, [r6, #0]
 8006b86:	3302      	addmi	r3, #2
 8006b88:	6033      	strmi	r3, [r6, #0]
 8006b8a:	6825      	ldr	r5, [r4, #0]
 8006b8c:	f015 0506 	ands.w	r5, r5, #6
 8006b90:	d106      	bne.n	8006ba0 <_printf_common+0x48>
 8006b92:	f104 0a19 	add.w	sl, r4, #25
 8006b96:	68e3      	ldr	r3, [r4, #12]
 8006b98:	6832      	ldr	r2, [r6, #0]
 8006b9a:	1a9b      	subs	r3, r3, r2
 8006b9c:	42ab      	cmp	r3, r5
 8006b9e:	dc2b      	bgt.n	8006bf8 <_printf_common+0xa0>
 8006ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ba4:	1e13      	subs	r3, r2, #0
 8006ba6:	6822      	ldr	r2, [r4, #0]
 8006ba8:	bf18      	it	ne
 8006baa:	2301      	movne	r3, #1
 8006bac:	0692      	lsls	r2, r2, #26
 8006bae:	d430      	bmi.n	8006c12 <_printf_common+0xba>
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bb8:	47c0      	blx	r8
 8006bba:	3001      	adds	r0, #1
 8006bbc:	d023      	beq.n	8006c06 <_printf_common+0xae>
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	6922      	ldr	r2, [r4, #16]
 8006bc2:	f003 0306 	and.w	r3, r3, #6
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	bf14      	ite	ne
 8006bca:	2500      	movne	r5, #0
 8006bcc:	6833      	ldreq	r3, [r6, #0]
 8006bce:	f04f 0600 	mov.w	r6, #0
 8006bd2:	bf08      	it	eq
 8006bd4:	68e5      	ldreq	r5, [r4, #12]
 8006bd6:	f104 041a 	add.w	r4, r4, #26
 8006bda:	bf08      	it	eq
 8006bdc:	1aed      	subeq	r5, r5, r3
 8006bde:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006be2:	bf08      	it	eq
 8006be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006be8:	4293      	cmp	r3, r2
 8006bea:	bfc4      	itt	gt
 8006bec:	1a9b      	subgt	r3, r3, r2
 8006bee:	18ed      	addgt	r5, r5, r3
 8006bf0:	42b5      	cmp	r5, r6
 8006bf2:	d11a      	bne.n	8006c2a <_printf_common+0xd2>
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	e008      	b.n	8006c0a <_printf_common+0xb2>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	4652      	mov	r2, sl
 8006bfc:	4649      	mov	r1, r9
 8006bfe:	4638      	mov	r0, r7
 8006c00:	47c0      	blx	r8
 8006c02:	3001      	adds	r0, #1
 8006c04:	d103      	bne.n	8006c0e <_printf_common+0xb6>
 8006c06:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c0e:	3501      	adds	r5, #1
 8006c10:	e7c1      	b.n	8006b96 <_printf_common+0x3e>
 8006c12:	2030      	movs	r0, #48	; 0x30
 8006c14:	18e1      	adds	r1, r4, r3
 8006c16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c20:	4422      	add	r2, r4
 8006c22:	3302      	adds	r3, #2
 8006c24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c28:	e7c2      	b.n	8006bb0 <_printf_common+0x58>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	4649      	mov	r1, r9
 8006c30:	4638      	mov	r0, r7
 8006c32:	47c0      	blx	r8
 8006c34:	3001      	adds	r0, #1
 8006c36:	d0e6      	beq.n	8006c06 <_printf_common+0xae>
 8006c38:	3601      	adds	r6, #1
 8006c3a:	e7d9      	b.n	8006bf0 <_printf_common+0x98>

08006c3c <_printf_i>:
 8006c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c40:	7e0f      	ldrb	r7, [r1, #24]
 8006c42:	4691      	mov	r9, r2
 8006c44:	2f78      	cmp	r7, #120	; 0x78
 8006c46:	4680      	mov	r8, r0
 8006c48:	460c      	mov	r4, r1
 8006c4a:	469a      	mov	sl, r3
 8006c4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c52:	d807      	bhi.n	8006c64 <_printf_i+0x28>
 8006c54:	2f62      	cmp	r7, #98	; 0x62
 8006c56:	d80a      	bhi.n	8006c6e <_printf_i+0x32>
 8006c58:	2f00      	cmp	r7, #0
 8006c5a:	f000 80d5 	beq.w	8006e08 <_printf_i+0x1cc>
 8006c5e:	2f58      	cmp	r7, #88	; 0x58
 8006c60:	f000 80c1 	beq.w	8006de6 <_printf_i+0x1aa>
 8006c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c6c:	e03a      	b.n	8006ce4 <_printf_i+0xa8>
 8006c6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c72:	2b15      	cmp	r3, #21
 8006c74:	d8f6      	bhi.n	8006c64 <_printf_i+0x28>
 8006c76:	a101      	add	r1, pc, #4	; (adr r1, 8006c7c <_printf_i+0x40>)
 8006c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c7c:	08006cd5 	.word	0x08006cd5
 8006c80:	08006ce9 	.word	0x08006ce9
 8006c84:	08006c65 	.word	0x08006c65
 8006c88:	08006c65 	.word	0x08006c65
 8006c8c:	08006c65 	.word	0x08006c65
 8006c90:	08006c65 	.word	0x08006c65
 8006c94:	08006ce9 	.word	0x08006ce9
 8006c98:	08006c65 	.word	0x08006c65
 8006c9c:	08006c65 	.word	0x08006c65
 8006ca0:	08006c65 	.word	0x08006c65
 8006ca4:	08006c65 	.word	0x08006c65
 8006ca8:	08006def 	.word	0x08006def
 8006cac:	08006d15 	.word	0x08006d15
 8006cb0:	08006da9 	.word	0x08006da9
 8006cb4:	08006c65 	.word	0x08006c65
 8006cb8:	08006c65 	.word	0x08006c65
 8006cbc:	08006e11 	.word	0x08006e11
 8006cc0:	08006c65 	.word	0x08006c65
 8006cc4:	08006d15 	.word	0x08006d15
 8006cc8:	08006c65 	.word	0x08006c65
 8006ccc:	08006c65 	.word	0x08006c65
 8006cd0:	08006db1 	.word	0x08006db1
 8006cd4:	682b      	ldr	r3, [r5, #0]
 8006cd6:	1d1a      	adds	r2, r3, #4
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	602a      	str	r2, [r5, #0]
 8006cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e0a0      	b.n	8006e2a <_printf_i+0x1ee>
 8006ce8:	6820      	ldr	r0, [r4, #0]
 8006cea:	682b      	ldr	r3, [r5, #0]
 8006cec:	0607      	lsls	r7, r0, #24
 8006cee:	f103 0104 	add.w	r1, r3, #4
 8006cf2:	6029      	str	r1, [r5, #0]
 8006cf4:	d501      	bpl.n	8006cfa <_printf_i+0xbe>
 8006cf6:	681e      	ldr	r6, [r3, #0]
 8006cf8:	e003      	b.n	8006d02 <_printf_i+0xc6>
 8006cfa:	0646      	lsls	r6, r0, #25
 8006cfc:	d5fb      	bpl.n	8006cf6 <_printf_i+0xba>
 8006cfe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006d02:	2e00      	cmp	r6, #0
 8006d04:	da03      	bge.n	8006d0e <_printf_i+0xd2>
 8006d06:	232d      	movs	r3, #45	; 0x2d
 8006d08:	4276      	negs	r6, r6
 8006d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d0e:	230a      	movs	r3, #10
 8006d10:	4859      	ldr	r0, [pc, #356]	; (8006e78 <_printf_i+0x23c>)
 8006d12:	e012      	b.n	8006d3a <_printf_i+0xfe>
 8006d14:	682b      	ldr	r3, [r5, #0]
 8006d16:	6820      	ldr	r0, [r4, #0]
 8006d18:	1d19      	adds	r1, r3, #4
 8006d1a:	6029      	str	r1, [r5, #0]
 8006d1c:	0605      	lsls	r5, r0, #24
 8006d1e:	d501      	bpl.n	8006d24 <_printf_i+0xe8>
 8006d20:	681e      	ldr	r6, [r3, #0]
 8006d22:	e002      	b.n	8006d2a <_printf_i+0xee>
 8006d24:	0641      	lsls	r1, r0, #25
 8006d26:	d5fb      	bpl.n	8006d20 <_printf_i+0xe4>
 8006d28:	881e      	ldrh	r6, [r3, #0]
 8006d2a:	2f6f      	cmp	r7, #111	; 0x6f
 8006d2c:	bf0c      	ite	eq
 8006d2e:	2308      	moveq	r3, #8
 8006d30:	230a      	movne	r3, #10
 8006d32:	4851      	ldr	r0, [pc, #324]	; (8006e78 <_printf_i+0x23c>)
 8006d34:	2100      	movs	r1, #0
 8006d36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d3a:	6865      	ldr	r5, [r4, #4]
 8006d3c:	2d00      	cmp	r5, #0
 8006d3e:	bfa8      	it	ge
 8006d40:	6821      	ldrge	r1, [r4, #0]
 8006d42:	60a5      	str	r5, [r4, #8]
 8006d44:	bfa4      	itt	ge
 8006d46:	f021 0104 	bicge.w	r1, r1, #4
 8006d4a:	6021      	strge	r1, [r4, #0]
 8006d4c:	b90e      	cbnz	r6, 8006d52 <_printf_i+0x116>
 8006d4e:	2d00      	cmp	r5, #0
 8006d50:	d04b      	beq.n	8006dea <_printf_i+0x1ae>
 8006d52:	4615      	mov	r5, r2
 8006d54:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d58:	fb03 6711 	mls	r7, r3, r1, r6
 8006d5c:	5dc7      	ldrb	r7, [r0, r7]
 8006d5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d62:	4637      	mov	r7, r6
 8006d64:	42bb      	cmp	r3, r7
 8006d66:	460e      	mov	r6, r1
 8006d68:	d9f4      	bls.n	8006d54 <_printf_i+0x118>
 8006d6a:	2b08      	cmp	r3, #8
 8006d6c:	d10b      	bne.n	8006d86 <_printf_i+0x14a>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	07de      	lsls	r6, r3, #31
 8006d72:	d508      	bpl.n	8006d86 <_printf_i+0x14a>
 8006d74:	6923      	ldr	r3, [r4, #16]
 8006d76:	6861      	ldr	r1, [r4, #4]
 8006d78:	4299      	cmp	r1, r3
 8006d7a:	bfde      	ittt	le
 8006d7c:	2330      	movle	r3, #48	; 0x30
 8006d7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d86:	1b52      	subs	r2, r2, r5
 8006d88:	6122      	str	r2, [r4, #16]
 8006d8a:	464b      	mov	r3, r9
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	4640      	mov	r0, r8
 8006d90:	f8cd a000 	str.w	sl, [sp]
 8006d94:	aa03      	add	r2, sp, #12
 8006d96:	f7ff fedf 	bl	8006b58 <_printf_common>
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	d14a      	bne.n	8006e34 <_printf_i+0x1f8>
 8006d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006da2:	b004      	add	sp, #16
 8006da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	f043 0320 	orr.w	r3, r3, #32
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	2778      	movs	r7, #120	; 0x78
 8006db2:	4832      	ldr	r0, [pc, #200]	; (8006e7c <_printf_i+0x240>)
 8006db4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	6829      	ldr	r1, [r5, #0]
 8006dbc:	061f      	lsls	r7, r3, #24
 8006dbe:	f851 6b04 	ldr.w	r6, [r1], #4
 8006dc2:	d402      	bmi.n	8006dca <_printf_i+0x18e>
 8006dc4:	065f      	lsls	r7, r3, #25
 8006dc6:	bf48      	it	mi
 8006dc8:	b2b6      	uxthmi	r6, r6
 8006dca:	07df      	lsls	r7, r3, #31
 8006dcc:	bf48      	it	mi
 8006dce:	f043 0320 	orrmi.w	r3, r3, #32
 8006dd2:	6029      	str	r1, [r5, #0]
 8006dd4:	bf48      	it	mi
 8006dd6:	6023      	strmi	r3, [r4, #0]
 8006dd8:	b91e      	cbnz	r6, 8006de2 <_printf_i+0x1a6>
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	f023 0320 	bic.w	r3, r3, #32
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	2310      	movs	r3, #16
 8006de4:	e7a6      	b.n	8006d34 <_printf_i+0xf8>
 8006de6:	4824      	ldr	r0, [pc, #144]	; (8006e78 <_printf_i+0x23c>)
 8006de8:	e7e4      	b.n	8006db4 <_printf_i+0x178>
 8006dea:	4615      	mov	r5, r2
 8006dec:	e7bd      	b.n	8006d6a <_printf_i+0x12e>
 8006dee:	682b      	ldr	r3, [r5, #0]
 8006df0:	6826      	ldr	r6, [r4, #0]
 8006df2:	1d18      	adds	r0, r3, #4
 8006df4:	6961      	ldr	r1, [r4, #20]
 8006df6:	6028      	str	r0, [r5, #0]
 8006df8:	0635      	lsls	r5, r6, #24
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	d501      	bpl.n	8006e02 <_printf_i+0x1c6>
 8006dfe:	6019      	str	r1, [r3, #0]
 8006e00:	e002      	b.n	8006e08 <_printf_i+0x1cc>
 8006e02:	0670      	lsls	r0, r6, #25
 8006e04:	d5fb      	bpl.n	8006dfe <_printf_i+0x1c2>
 8006e06:	8019      	strh	r1, [r3, #0]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4615      	mov	r5, r2
 8006e0c:	6123      	str	r3, [r4, #16]
 8006e0e:	e7bc      	b.n	8006d8a <_printf_i+0x14e>
 8006e10:	682b      	ldr	r3, [r5, #0]
 8006e12:	2100      	movs	r1, #0
 8006e14:	1d1a      	adds	r2, r3, #4
 8006e16:	602a      	str	r2, [r5, #0]
 8006e18:	681d      	ldr	r5, [r3, #0]
 8006e1a:	6862      	ldr	r2, [r4, #4]
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f000 fab6 	bl	800738e <memchr>
 8006e22:	b108      	cbz	r0, 8006e28 <_printf_i+0x1ec>
 8006e24:	1b40      	subs	r0, r0, r5
 8006e26:	6060      	str	r0, [r4, #4]
 8006e28:	6863      	ldr	r3, [r4, #4]
 8006e2a:	6123      	str	r3, [r4, #16]
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e32:	e7aa      	b.n	8006d8a <_printf_i+0x14e>
 8006e34:	462a      	mov	r2, r5
 8006e36:	4649      	mov	r1, r9
 8006e38:	4640      	mov	r0, r8
 8006e3a:	6923      	ldr	r3, [r4, #16]
 8006e3c:	47d0      	blx	sl
 8006e3e:	3001      	adds	r0, #1
 8006e40:	d0ad      	beq.n	8006d9e <_printf_i+0x162>
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	079b      	lsls	r3, r3, #30
 8006e46:	d413      	bmi.n	8006e70 <_printf_i+0x234>
 8006e48:	68e0      	ldr	r0, [r4, #12]
 8006e4a:	9b03      	ldr	r3, [sp, #12]
 8006e4c:	4298      	cmp	r0, r3
 8006e4e:	bfb8      	it	lt
 8006e50:	4618      	movlt	r0, r3
 8006e52:	e7a6      	b.n	8006da2 <_printf_i+0x166>
 8006e54:	2301      	movs	r3, #1
 8006e56:	4632      	mov	r2, r6
 8006e58:	4649      	mov	r1, r9
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	47d0      	blx	sl
 8006e5e:	3001      	adds	r0, #1
 8006e60:	d09d      	beq.n	8006d9e <_printf_i+0x162>
 8006e62:	3501      	adds	r5, #1
 8006e64:	68e3      	ldr	r3, [r4, #12]
 8006e66:	9903      	ldr	r1, [sp, #12]
 8006e68:	1a5b      	subs	r3, r3, r1
 8006e6a:	42ab      	cmp	r3, r5
 8006e6c:	dcf2      	bgt.n	8006e54 <_printf_i+0x218>
 8006e6e:	e7eb      	b.n	8006e48 <_printf_i+0x20c>
 8006e70:	2500      	movs	r5, #0
 8006e72:	f104 0619 	add.w	r6, r4, #25
 8006e76:	e7f5      	b.n	8006e64 <_printf_i+0x228>
 8006e78:	0800a2a0 	.word	0x0800a2a0
 8006e7c:	0800a2b1 	.word	0x0800a2b1

08006e80 <std>:
 8006e80:	2300      	movs	r3, #0
 8006e82:	b510      	push	{r4, lr}
 8006e84:	4604      	mov	r4, r0
 8006e86:	e9c0 3300 	strd	r3, r3, [r0]
 8006e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e8e:	6083      	str	r3, [r0, #8]
 8006e90:	8181      	strh	r1, [r0, #12]
 8006e92:	6643      	str	r3, [r0, #100]	; 0x64
 8006e94:	81c2      	strh	r2, [r0, #14]
 8006e96:	6183      	str	r3, [r0, #24]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	2208      	movs	r2, #8
 8006e9c:	305c      	adds	r0, #92	; 0x5c
 8006e9e:	f000 f9f7 	bl	8007290 <memset>
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	; (8006ed8 <std+0x58>)
 8006ea4:	6224      	str	r4, [r4, #32]
 8006ea6:	6263      	str	r3, [r4, #36]	; 0x24
 8006ea8:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <std+0x5c>)
 8006eaa:	62a3      	str	r3, [r4, #40]	; 0x28
 8006eac:	4b0c      	ldr	r3, [pc, #48]	; (8006ee0 <std+0x60>)
 8006eae:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006eb0:	4b0c      	ldr	r3, [pc, #48]	; (8006ee4 <std+0x64>)
 8006eb2:	6323      	str	r3, [r4, #48]	; 0x30
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <std+0x68>)
 8006eb6:	429c      	cmp	r4, r3
 8006eb8:	d006      	beq.n	8006ec8 <std+0x48>
 8006eba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006ebe:	4294      	cmp	r4, r2
 8006ec0:	d002      	beq.n	8006ec8 <std+0x48>
 8006ec2:	33d0      	adds	r3, #208	; 0xd0
 8006ec4:	429c      	cmp	r4, r3
 8006ec6:	d105      	bne.n	8006ed4 <std+0x54>
 8006ec8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed0:	f000 ba5a 	b.w	8007388 <__retarget_lock_init_recursive>
 8006ed4:	bd10      	pop	{r4, pc}
 8006ed6:	bf00      	nop
 8006ed8:	080070e1 	.word	0x080070e1
 8006edc:	08007103 	.word	0x08007103
 8006ee0:	0800713b 	.word	0x0800713b
 8006ee4:	0800715f 	.word	0x0800715f
 8006ee8:	2000039c 	.word	0x2000039c

08006eec <stdio_exit_handler>:
 8006eec:	4a02      	ldr	r2, [pc, #8]	; (8006ef8 <stdio_exit_handler+0xc>)
 8006eee:	4903      	ldr	r1, [pc, #12]	; (8006efc <stdio_exit_handler+0x10>)
 8006ef0:	4803      	ldr	r0, [pc, #12]	; (8006f00 <stdio_exit_handler+0x14>)
 8006ef2:	f000 b869 	b.w	8006fc8 <_fwalk_sglue>
 8006ef6:	bf00      	nop
 8006ef8:	20000024 	.word	0x20000024
 8006efc:	08008cf9 	.word	0x08008cf9
 8006f00:	20000030 	.word	0x20000030

08006f04 <cleanup_stdio>:
 8006f04:	6841      	ldr	r1, [r0, #4]
 8006f06:	4b0c      	ldr	r3, [pc, #48]	; (8006f38 <cleanup_stdio+0x34>)
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	4299      	cmp	r1, r3
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	d001      	beq.n	8006f14 <cleanup_stdio+0x10>
 8006f10:	f001 fef2 	bl	8008cf8 <_fflush_r>
 8006f14:	68a1      	ldr	r1, [r4, #8]
 8006f16:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <cleanup_stdio+0x38>)
 8006f18:	4299      	cmp	r1, r3
 8006f1a:	d002      	beq.n	8006f22 <cleanup_stdio+0x1e>
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f001 feeb 	bl	8008cf8 <_fflush_r>
 8006f22:	68e1      	ldr	r1, [r4, #12]
 8006f24:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <cleanup_stdio+0x3c>)
 8006f26:	4299      	cmp	r1, r3
 8006f28:	d004      	beq.n	8006f34 <cleanup_stdio+0x30>
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f30:	f001 bee2 	b.w	8008cf8 <_fflush_r>
 8006f34:	bd10      	pop	{r4, pc}
 8006f36:	bf00      	nop
 8006f38:	2000039c 	.word	0x2000039c
 8006f3c:	20000404 	.word	0x20000404
 8006f40:	2000046c 	.word	0x2000046c

08006f44 <global_stdio_init.part.0>:
 8006f44:	b510      	push	{r4, lr}
 8006f46:	4b0b      	ldr	r3, [pc, #44]	; (8006f74 <global_stdio_init.part.0+0x30>)
 8006f48:	4c0b      	ldr	r4, [pc, #44]	; (8006f78 <global_stdio_init.part.0+0x34>)
 8006f4a:	4a0c      	ldr	r2, [pc, #48]	; (8006f7c <global_stdio_init.part.0+0x38>)
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	2104      	movs	r1, #4
 8006f52:	2200      	movs	r2, #0
 8006f54:	f7ff ff94 	bl	8006e80 <std>
 8006f58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	2109      	movs	r1, #9
 8006f60:	f7ff ff8e 	bl	8006e80 <std>
 8006f64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006f68:	2202      	movs	r2, #2
 8006f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f6e:	2112      	movs	r1, #18
 8006f70:	f7ff bf86 	b.w	8006e80 <std>
 8006f74:	200004d4 	.word	0x200004d4
 8006f78:	2000039c 	.word	0x2000039c
 8006f7c:	08006eed 	.word	0x08006eed

08006f80 <__sfp_lock_acquire>:
 8006f80:	4801      	ldr	r0, [pc, #4]	; (8006f88 <__sfp_lock_acquire+0x8>)
 8006f82:	f000 ba02 	b.w	800738a <__retarget_lock_acquire_recursive>
 8006f86:	bf00      	nop
 8006f88:	200004dd 	.word	0x200004dd

08006f8c <__sfp_lock_release>:
 8006f8c:	4801      	ldr	r0, [pc, #4]	; (8006f94 <__sfp_lock_release+0x8>)
 8006f8e:	f000 b9fd 	b.w	800738c <__retarget_lock_release_recursive>
 8006f92:	bf00      	nop
 8006f94:	200004dd 	.word	0x200004dd

08006f98 <__sinit>:
 8006f98:	b510      	push	{r4, lr}
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	f7ff fff0 	bl	8006f80 <__sfp_lock_acquire>
 8006fa0:	6a23      	ldr	r3, [r4, #32]
 8006fa2:	b11b      	cbz	r3, 8006fac <__sinit+0x14>
 8006fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa8:	f7ff bff0 	b.w	8006f8c <__sfp_lock_release>
 8006fac:	4b04      	ldr	r3, [pc, #16]	; (8006fc0 <__sinit+0x28>)
 8006fae:	6223      	str	r3, [r4, #32]
 8006fb0:	4b04      	ldr	r3, [pc, #16]	; (8006fc4 <__sinit+0x2c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1f5      	bne.n	8006fa4 <__sinit+0xc>
 8006fb8:	f7ff ffc4 	bl	8006f44 <global_stdio_init.part.0>
 8006fbc:	e7f2      	b.n	8006fa4 <__sinit+0xc>
 8006fbe:	bf00      	nop
 8006fc0:	08006f05 	.word	0x08006f05
 8006fc4:	200004d4 	.word	0x200004d4

08006fc8 <_fwalk_sglue>:
 8006fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fcc:	4607      	mov	r7, r0
 8006fce:	4688      	mov	r8, r1
 8006fd0:	4614      	mov	r4, r2
 8006fd2:	2600      	movs	r6, #0
 8006fd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fd8:	f1b9 0901 	subs.w	r9, r9, #1
 8006fdc:	d505      	bpl.n	8006fea <_fwalk_sglue+0x22>
 8006fde:	6824      	ldr	r4, [r4, #0]
 8006fe0:	2c00      	cmp	r4, #0
 8006fe2:	d1f7      	bne.n	8006fd4 <_fwalk_sglue+0xc>
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fea:	89ab      	ldrh	r3, [r5, #12]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d907      	bls.n	8007000 <_fwalk_sglue+0x38>
 8006ff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	d003      	beq.n	8007000 <_fwalk_sglue+0x38>
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	47c0      	blx	r8
 8006ffe:	4306      	orrs	r6, r0
 8007000:	3568      	adds	r5, #104	; 0x68
 8007002:	e7e9      	b.n	8006fd8 <_fwalk_sglue+0x10>

08007004 <iprintf>:
 8007004:	b40f      	push	{r0, r1, r2, r3}
 8007006:	b507      	push	{r0, r1, r2, lr}
 8007008:	4906      	ldr	r1, [pc, #24]	; (8007024 <iprintf+0x20>)
 800700a:	ab04      	add	r3, sp, #16
 800700c:	6808      	ldr	r0, [r1, #0]
 800700e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007012:	6881      	ldr	r1, [r0, #8]
 8007014:	9301      	str	r3, [sp, #4]
 8007016:	f001 fcd3 	bl	80089c0 <_vfiprintf_r>
 800701a:	b003      	add	sp, #12
 800701c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007020:	b004      	add	sp, #16
 8007022:	4770      	bx	lr
 8007024:	2000007c 	.word	0x2000007c

08007028 <_puts_r>:
 8007028:	6a03      	ldr	r3, [r0, #32]
 800702a:	b570      	push	{r4, r5, r6, lr}
 800702c:	4605      	mov	r5, r0
 800702e:	460e      	mov	r6, r1
 8007030:	6884      	ldr	r4, [r0, #8]
 8007032:	b90b      	cbnz	r3, 8007038 <_puts_r+0x10>
 8007034:	f7ff ffb0 	bl	8006f98 <__sinit>
 8007038:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800703a:	07db      	lsls	r3, r3, #31
 800703c:	d405      	bmi.n	800704a <_puts_r+0x22>
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	0598      	lsls	r0, r3, #22
 8007042:	d402      	bmi.n	800704a <_puts_r+0x22>
 8007044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007046:	f000 f9a0 	bl	800738a <__retarget_lock_acquire_recursive>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	0719      	lsls	r1, r3, #28
 800704e:	d513      	bpl.n	8007078 <_puts_r+0x50>
 8007050:	6923      	ldr	r3, [r4, #16]
 8007052:	b18b      	cbz	r3, 8007078 <_puts_r+0x50>
 8007054:	3e01      	subs	r6, #1
 8007056:	68a3      	ldr	r3, [r4, #8]
 8007058:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800705c:	3b01      	subs	r3, #1
 800705e:	60a3      	str	r3, [r4, #8]
 8007060:	b9e9      	cbnz	r1, 800709e <_puts_r+0x76>
 8007062:	2b00      	cmp	r3, #0
 8007064:	da2e      	bge.n	80070c4 <_puts_r+0x9c>
 8007066:	4622      	mov	r2, r4
 8007068:	210a      	movs	r1, #10
 800706a:	4628      	mov	r0, r5
 800706c:	f000 f87b 	bl	8007166 <__swbuf_r>
 8007070:	3001      	adds	r0, #1
 8007072:	d007      	beq.n	8007084 <_puts_r+0x5c>
 8007074:	250a      	movs	r5, #10
 8007076:	e007      	b.n	8007088 <_puts_r+0x60>
 8007078:	4621      	mov	r1, r4
 800707a:	4628      	mov	r0, r5
 800707c:	f000 f8b0 	bl	80071e0 <__swsetup_r>
 8007080:	2800      	cmp	r0, #0
 8007082:	d0e7      	beq.n	8007054 <_puts_r+0x2c>
 8007084:	f04f 35ff 	mov.w	r5, #4294967295
 8007088:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800708a:	07da      	lsls	r2, r3, #31
 800708c:	d405      	bmi.n	800709a <_puts_r+0x72>
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	059b      	lsls	r3, r3, #22
 8007092:	d402      	bmi.n	800709a <_puts_r+0x72>
 8007094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007096:	f000 f979 	bl	800738c <__retarget_lock_release_recursive>
 800709a:	4628      	mov	r0, r5
 800709c:	bd70      	pop	{r4, r5, r6, pc}
 800709e:	2b00      	cmp	r3, #0
 80070a0:	da04      	bge.n	80070ac <_puts_r+0x84>
 80070a2:	69a2      	ldr	r2, [r4, #24]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	dc06      	bgt.n	80070b6 <_puts_r+0x8e>
 80070a8:	290a      	cmp	r1, #10
 80070aa:	d004      	beq.n	80070b6 <_puts_r+0x8e>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	6022      	str	r2, [r4, #0]
 80070b2:	7019      	strb	r1, [r3, #0]
 80070b4:	e7cf      	b.n	8007056 <_puts_r+0x2e>
 80070b6:	4622      	mov	r2, r4
 80070b8:	4628      	mov	r0, r5
 80070ba:	f000 f854 	bl	8007166 <__swbuf_r>
 80070be:	3001      	adds	r0, #1
 80070c0:	d1c9      	bne.n	8007056 <_puts_r+0x2e>
 80070c2:	e7df      	b.n	8007084 <_puts_r+0x5c>
 80070c4:	250a      	movs	r5, #10
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	6022      	str	r2, [r4, #0]
 80070cc:	701d      	strb	r5, [r3, #0]
 80070ce:	e7db      	b.n	8007088 <_puts_r+0x60>

080070d0 <puts>:
 80070d0:	4b02      	ldr	r3, [pc, #8]	; (80070dc <puts+0xc>)
 80070d2:	4601      	mov	r1, r0
 80070d4:	6818      	ldr	r0, [r3, #0]
 80070d6:	f7ff bfa7 	b.w	8007028 <_puts_r>
 80070da:	bf00      	nop
 80070dc:	2000007c 	.word	0x2000007c

080070e0 <__sread>:
 80070e0:	b510      	push	{r4, lr}
 80070e2:	460c      	mov	r4, r1
 80070e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e8:	f000 f900 	bl	80072ec <_read_r>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	bfab      	itete	ge
 80070f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070f2:	89a3      	ldrhlt	r3, [r4, #12]
 80070f4:	181b      	addge	r3, r3, r0
 80070f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070fa:	bfac      	ite	ge
 80070fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80070fe:	81a3      	strhlt	r3, [r4, #12]
 8007100:	bd10      	pop	{r4, pc}

08007102 <__swrite>:
 8007102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007106:	461f      	mov	r7, r3
 8007108:	898b      	ldrh	r3, [r1, #12]
 800710a:	4605      	mov	r5, r0
 800710c:	05db      	lsls	r3, r3, #23
 800710e:	460c      	mov	r4, r1
 8007110:	4616      	mov	r6, r2
 8007112:	d505      	bpl.n	8007120 <__swrite+0x1e>
 8007114:	2302      	movs	r3, #2
 8007116:	2200      	movs	r2, #0
 8007118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800711c:	f000 f8d4 	bl	80072c8 <_lseek_r>
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	4632      	mov	r2, r6
 8007124:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007128:	81a3      	strh	r3, [r4, #12]
 800712a:	4628      	mov	r0, r5
 800712c:	463b      	mov	r3, r7
 800712e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007136:	f000 b8eb 	b.w	8007310 <_write_r>

0800713a <__sseek>:
 800713a:	b510      	push	{r4, lr}
 800713c:	460c      	mov	r4, r1
 800713e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007142:	f000 f8c1 	bl	80072c8 <_lseek_r>
 8007146:	1c43      	adds	r3, r0, #1
 8007148:	89a3      	ldrh	r3, [r4, #12]
 800714a:	bf15      	itete	ne
 800714c:	6560      	strne	r0, [r4, #84]	; 0x54
 800714e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007156:	81a3      	strheq	r3, [r4, #12]
 8007158:	bf18      	it	ne
 800715a:	81a3      	strhne	r3, [r4, #12]
 800715c:	bd10      	pop	{r4, pc}

0800715e <__sclose>:
 800715e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007162:	f000 b8a1 	b.w	80072a8 <_close_r>

08007166 <__swbuf_r>:
 8007166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007168:	460e      	mov	r6, r1
 800716a:	4614      	mov	r4, r2
 800716c:	4605      	mov	r5, r0
 800716e:	b118      	cbz	r0, 8007178 <__swbuf_r+0x12>
 8007170:	6a03      	ldr	r3, [r0, #32]
 8007172:	b90b      	cbnz	r3, 8007178 <__swbuf_r+0x12>
 8007174:	f7ff ff10 	bl	8006f98 <__sinit>
 8007178:	69a3      	ldr	r3, [r4, #24]
 800717a:	60a3      	str	r3, [r4, #8]
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	071a      	lsls	r2, r3, #28
 8007180:	d525      	bpl.n	80071ce <__swbuf_r+0x68>
 8007182:	6923      	ldr	r3, [r4, #16]
 8007184:	b31b      	cbz	r3, 80071ce <__swbuf_r+0x68>
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	6922      	ldr	r2, [r4, #16]
 800718a:	b2f6      	uxtb	r6, r6
 800718c:	1a98      	subs	r0, r3, r2
 800718e:	6963      	ldr	r3, [r4, #20]
 8007190:	4637      	mov	r7, r6
 8007192:	4283      	cmp	r3, r0
 8007194:	dc04      	bgt.n	80071a0 <__swbuf_r+0x3a>
 8007196:	4621      	mov	r1, r4
 8007198:	4628      	mov	r0, r5
 800719a:	f001 fdad 	bl	8008cf8 <_fflush_r>
 800719e:	b9e0      	cbnz	r0, 80071da <__swbuf_r+0x74>
 80071a0:	68a3      	ldr	r3, [r4, #8]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	60a3      	str	r3, [r4, #8]
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	6022      	str	r2, [r4, #0]
 80071ac:	701e      	strb	r6, [r3, #0]
 80071ae:	6962      	ldr	r2, [r4, #20]
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d004      	beq.n	80071c0 <__swbuf_r+0x5a>
 80071b6:	89a3      	ldrh	r3, [r4, #12]
 80071b8:	07db      	lsls	r3, r3, #31
 80071ba:	d506      	bpl.n	80071ca <__swbuf_r+0x64>
 80071bc:	2e0a      	cmp	r6, #10
 80071be:	d104      	bne.n	80071ca <__swbuf_r+0x64>
 80071c0:	4621      	mov	r1, r4
 80071c2:	4628      	mov	r0, r5
 80071c4:	f001 fd98 	bl	8008cf8 <_fflush_r>
 80071c8:	b938      	cbnz	r0, 80071da <__swbuf_r+0x74>
 80071ca:	4638      	mov	r0, r7
 80071cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071ce:	4621      	mov	r1, r4
 80071d0:	4628      	mov	r0, r5
 80071d2:	f000 f805 	bl	80071e0 <__swsetup_r>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	d0d5      	beq.n	8007186 <__swbuf_r+0x20>
 80071da:	f04f 37ff 	mov.w	r7, #4294967295
 80071de:	e7f4      	b.n	80071ca <__swbuf_r+0x64>

080071e0 <__swsetup_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	4b2a      	ldr	r3, [pc, #168]	; (800728c <__swsetup_r+0xac>)
 80071e4:	4605      	mov	r5, r0
 80071e6:	6818      	ldr	r0, [r3, #0]
 80071e8:	460c      	mov	r4, r1
 80071ea:	b118      	cbz	r0, 80071f4 <__swsetup_r+0x14>
 80071ec:	6a03      	ldr	r3, [r0, #32]
 80071ee:	b90b      	cbnz	r3, 80071f4 <__swsetup_r+0x14>
 80071f0:	f7ff fed2 	bl	8006f98 <__sinit>
 80071f4:	89a3      	ldrh	r3, [r4, #12]
 80071f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071fa:	0718      	lsls	r0, r3, #28
 80071fc:	d422      	bmi.n	8007244 <__swsetup_r+0x64>
 80071fe:	06d9      	lsls	r1, r3, #27
 8007200:	d407      	bmi.n	8007212 <__swsetup_r+0x32>
 8007202:	2309      	movs	r3, #9
 8007204:	602b      	str	r3, [r5, #0]
 8007206:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800720a:	f04f 30ff 	mov.w	r0, #4294967295
 800720e:	81a3      	strh	r3, [r4, #12]
 8007210:	e034      	b.n	800727c <__swsetup_r+0x9c>
 8007212:	0758      	lsls	r0, r3, #29
 8007214:	d512      	bpl.n	800723c <__swsetup_r+0x5c>
 8007216:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007218:	b141      	cbz	r1, 800722c <__swsetup_r+0x4c>
 800721a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800721e:	4299      	cmp	r1, r3
 8007220:	d002      	beq.n	8007228 <__swsetup_r+0x48>
 8007222:	4628      	mov	r0, r5
 8007224:	f000 ff30 	bl	8008088 <_free_r>
 8007228:	2300      	movs	r3, #0
 800722a:	6363      	str	r3, [r4, #52]	; 0x34
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007232:	81a3      	strh	r3, [r4, #12]
 8007234:	2300      	movs	r3, #0
 8007236:	6063      	str	r3, [r4, #4]
 8007238:	6923      	ldr	r3, [r4, #16]
 800723a:	6023      	str	r3, [r4, #0]
 800723c:	89a3      	ldrh	r3, [r4, #12]
 800723e:	f043 0308 	orr.w	r3, r3, #8
 8007242:	81a3      	strh	r3, [r4, #12]
 8007244:	6923      	ldr	r3, [r4, #16]
 8007246:	b94b      	cbnz	r3, 800725c <__swsetup_r+0x7c>
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800724e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007252:	d003      	beq.n	800725c <__swsetup_r+0x7c>
 8007254:	4621      	mov	r1, r4
 8007256:	4628      	mov	r0, r5
 8007258:	f001 fd9b 	bl	8008d92 <__smakebuf_r>
 800725c:	89a0      	ldrh	r0, [r4, #12]
 800725e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007262:	f010 0301 	ands.w	r3, r0, #1
 8007266:	d00a      	beq.n	800727e <__swsetup_r+0x9e>
 8007268:	2300      	movs	r3, #0
 800726a:	60a3      	str	r3, [r4, #8]
 800726c:	6963      	ldr	r3, [r4, #20]
 800726e:	425b      	negs	r3, r3
 8007270:	61a3      	str	r3, [r4, #24]
 8007272:	6923      	ldr	r3, [r4, #16]
 8007274:	b943      	cbnz	r3, 8007288 <__swsetup_r+0xa8>
 8007276:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800727a:	d1c4      	bne.n	8007206 <__swsetup_r+0x26>
 800727c:	bd38      	pop	{r3, r4, r5, pc}
 800727e:	0781      	lsls	r1, r0, #30
 8007280:	bf58      	it	pl
 8007282:	6963      	ldrpl	r3, [r4, #20]
 8007284:	60a3      	str	r3, [r4, #8]
 8007286:	e7f4      	b.n	8007272 <__swsetup_r+0x92>
 8007288:	2000      	movs	r0, #0
 800728a:	e7f7      	b.n	800727c <__swsetup_r+0x9c>
 800728c:	2000007c 	.word	0x2000007c

08007290 <memset>:
 8007290:	4603      	mov	r3, r0
 8007292:	4402      	add	r2, r0
 8007294:	4293      	cmp	r3, r2
 8007296:	d100      	bne.n	800729a <memset+0xa>
 8007298:	4770      	bx	lr
 800729a:	f803 1b01 	strb.w	r1, [r3], #1
 800729e:	e7f9      	b.n	8007294 <memset+0x4>

080072a0 <_localeconv_r>:
 80072a0:	4800      	ldr	r0, [pc, #0]	; (80072a4 <_localeconv_r+0x4>)
 80072a2:	4770      	bx	lr
 80072a4:	20000170 	.word	0x20000170

080072a8 <_close_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	2300      	movs	r3, #0
 80072ac:	4d05      	ldr	r5, [pc, #20]	; (80072c4 <_close_r+0x1c>)
 80072ae:	4604      	mov	r4, r0
 80072b0:	4608      	mov	r0, r1
 80072b2:	602b      	str	r3, [r5, #0]
 80072b4:	f7fb fef8 	bl	80030a8 <_close>
 80072b8:	1c43      	adds	r3, r0, #1
 80072ba:	d102      	bne.n	80072c2 <_close_r+0x1a>
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	b103      	cbz	r3, 80072c2 <_close_r+0x1a>
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	bd38      	pop	{r3, r4, r5, pc}
 80072c4:	200004d8 	.word	0x200004d8

080072c8 <_lseek_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	4604      	mov	r4, r0
 80072cc:	4608      	mov	r0, r1
 80072ce:	4611      	mov	r1, r2
 80072d0:	2200      	movs	r2, #0
 80072d2:	4d05      	ldr	r5, [pc, #20]	; (80072e8 <_lseek_r+0x20>)
 80072d4:	602a      	str	r2, [r5, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	f7fb ff0a 	bl	80030f0 <_lseek>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d102      	bne.n	80072e6 <_lseek_r+0x1e>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	b103      	cbz	r3, 80072e6 <_lseek_r+0x1e>
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	200004d8 	.word	0x200004d8

080072ec <_read_r>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4604      	mov	r4, r0
 80072f0:	4608      	mov	r0, r1
 80072f2:	4611      	mov	r1, r2
 80072f4:	2200      	movs	r2, #0
 80072f6:	4d05      	ldr	r5, [pc, #20]	; (800730c <_read_r+0x20>)
 80072f8:	602a      	str	r2, [r5, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	f7fb feb7 	bl	800306e <_read>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d102      	bne.n	800730a <_read_r+0x1e>
 8007304:	682b      	ldr	r3, [r5, #0]
 8007306:	b103      	cbz	r3, 800730a <_read_r+0x1e>
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	200004d8 	.word	0x200004d8

08007310 <_write_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4604      	mov	r4, r0
 8007314:	4608      	mov	r0, r1
 8007316:	4611      	mov	r1, r2
 8007318:	2200      	movs	r2, #0
 800731a:	4d05      	ldr	r5, [pc, #20]	; (8007330 <_write_r+0x20>)
 800731c:	602a      	str	r2, [r5, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	f7fa fa28 	bl	8001774 <_write>
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	d102      	bne.n	800732e <_write_r+0x1e>
 8007328:	682b      	ldr	r3, [r5, #0]
 800732a:	b103      	cbz	r3, 800732e <_write_r+0x1e>
 800732c:	6023      	str	r3, [r4, #0]
 800732e:	bd38      	pop	{r3, r4, r5, pc}
 8007330:	200004d8 	.word	0x200004d8

08007334 <__errno>:
 8007334:	4b01      	ldr	r3, [pc, #4]	; (800733c <__errno+0x8>)
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	2000007c 	.word	0x2000007c

08007340 <__libc_init_array>:
 8007340:	b570      	push	{r4, r5, r6, lr}
 8007342:	2600      	movs	r6, #0
 8007344:	4d0c      	ldr	r5, [pc, #48]	; (8007378 <__libc_init_array+0x38>)
 8007346:	4c0d      	ldr	r4, [pc, #52]	; (800737c <__libc_init_array+0x3c>)
 8007348:	1b64      	subs	r4, r4, r5
 800734a:	10a4      	asrs	r4, r4, #2
 800734c:	42a6      	cmp	r6, r4
 800734e:	d109      	bne.n	8007364 <__libc_init_array+0x24>
 8007350:	f002 fcf2 	bl	8009d38 <_init>
 8007354:	2600      	movs	r6, #0
 8007356:	4d0a      	ldr	r5, [pc, #40]	; (8007380 <__libc_init_array+0x40>)
 8007358:	4c0a      	ldr	r4, [pc, #40]	; (8007384 <__libc_init_array+0x44>)
 800735a:	1b64      	subs	r4, r4, r5
 800735c:	10a4      	asrs	r4, r4, #2
 800735e:	42a6      	cmp	r6, r4
 8007360:	d105      	bne.n	800736e <__libc_init_array+0x2e>
 8007362:	bd70      	pop	{r4, r5, r6, pc}
 8007364:	f855 3b04 	ldr.w	r3, [r5], #4
 8007368:	4798      	blx	r3
 800736a:	3601      	adds	r6, #1
 800736c:	e7ee      	b.n	800734c <__libc_init_array+0xc>
 800736e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007372:	4798      	blx	r3
 8007374:	3601      	adds	r6, #1
 8007376:	e7f2      	b.n	800735e <__libc_init_array+0x1e>
 8007378:	0800a9d4 	.word	0x0800a9d4
 800737c:	0800a9d4 	.word	0x0800a9d4
 8007380:	0800a9d4 	.word	0x0800a9d4
 8007384:	0800a9d8 	.word	0x0800a9d8

08007388 <__retarget_lock_init_recursive>:
 8007388:	4770      	bx	lr

0800738a <__retarget_lock_acquire_recursive>:
 800738a:	4770      	bx	lr

0800738c <__retarget_lock_release_recursive>:
 800738c:	4770      	bx	lr

0800738e <memchr>:
 800738e:	4603      	mov	r3, r0
 8007390:	b510      	push	{r4, lr}
 8007392:	b2c9      	uxtb	r1, r1
 8007394:	4402      	add	r2, r0
 8007396:	4293      	cmp	r3, r2
 8007398:	4618      	mov	r0, r3
 800739a:	d101      	bne.n	80073a0 <memchr+0x12>
 800739c:	2000      	movs	r0, #0
 800739e:	e003      	b.n	80073a8 <memchr+0x1a>
 80073a0:	7804      	ldrb	r4, [r0, #0]
 80073a2:	3301      	adds	r3, #1
 80073a4:	428c      	cmp	r4, r1
 80073a6:	d1f6      	bne.n	8007396 <memchr+0x8>
 80073a8:	bd10      	pop	{r4, pc}

080073aa <quorem>:
 80073aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ae:	6903      	ldr	r3, [r0, #16]
 80073b0:	690c      	ldr	r4, [r1, #16]
 80073b2:	4607      	mov	r7, r0
 80073b4:	42a3      	cmp	r3, r4
 80073b6:	db7f      	blt.n	80074b8 <quorem+0x10e>
 80073b8:	3c01      	subs	r4, #1
 80073ba:	f100 0514 	add.w	r5, r0, #20
 80073be:	f101 0814 	add.w	r8, r1, #20
 80073c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073c6:	9301      	str	r3, [sp, #4]
 80073c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073d0:	3301      	adds	r3, #1
 80073d2:	429a      	cmp	r2, r3
 80073d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80073d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80073dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073e0:	d331      	bcc.n	8007446 <quorem+0x9c>
 80073e2:	f04f 0e00 	mov.w	lr, #0
 80073e6:	4640      	mov	r0, r8
 80073e8:	46ac      	mov	ip, r5
 80073ea:	46f2      	mov	sl, lr
 80073ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80073f0:	b293      	uxth	r3, r2
 80073f2:	fb06 e303 	mla	r3, r6, r3, lr
 80073f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073fa:	0c1a      	lsrs	r2, r3, #16
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	fb06 220e 	mla	r2, r6, lr, r2
 8007402:	ebaa 0303 	sub.w	r3, sl, r3
 8007406:	f8dc a000 	ldr.w	sl, [ip]
 800740a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800740e:	fa1f fa8a 	uxth.w	sl, sl
 8007412:	4453      	add	r3, sl
 8007414:	f8dc a000 	ldr.w	sl, [ip]
 8007418:	b292      	uxth	r2, r2
 800741a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800741e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007422:	b29b      	uxth	r3, r3
 8007424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007428:	4581      	cmp	r9, r0
 800742a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800742e:	f84c 3b04 	str.w	r3, [ip], #4
 8007432:	d2db      	bcs.n	80073ec <quorem+0x42>
 8007434:	f855 300b 	ldr.w	r3, [r5, fp]
 8007438:	b92b      	cbnz	r3, 8007446 <quorem+0x9c>
 800743a:	9b01      	ldr	r3, [sp, #4]
 800743c:	3b04      	subs	r3, #4
 800743e:	429d      	cmp	r5, r3
 8007440:	461a      	mov	r2, r3
 8007442:	d32d      	bcc.n	80074a0 <quorem+0xf6>
 8007444:	613c      	str	r4, [r7, #16]
 8007446:	4638      	mov	r0, r7
 8007448:	f001 f994 	bl	8008774 <__mcmp>
 800744c:	2800      	cmp	r0, #0
 800744e:	db23      	blt.n	8007498 <quorem+0xee>
 8007450:	4629      	mov	r1, r5
 8007452:	2000      	movs	r0, #0
 8007454:	3601      	adds	r6, #1
 8007456:	f858 2b04 	ldr.w	r2, [r8], #4
 800745a:	f8d1 c000 	ldr.w	ip, [r1]
 800745e:	b293      	uxth	r3, r2
 8007460:	1ac3      	subs	r3, r0, r3
 8007462:	0c12      	lsrs	r2, r2, #16
 8007464:	fa1f f08c 	uxth.w	r0, ip
 8007468:	4403      	add	r3, r0
 800746a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800746e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007472:	b29b      	uxth	r3, r3
 8007474:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007478:	45c1      	cmp	r9, r8
 800747a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800747e:	f841 3b04 	str.w	r3, [r1], #4
 8007482:	d2e8      	bcs.n	8007456 <quorem+0xac>
 8007484:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007488:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800748c:	b922      	cbnz	r2, 8007498 <quorem+0xee>
 800748e:	3b04      	subs	r3, #4
 8007490:	429d      	cmp	r5, r3
 8007492:	461a      	mov	r2, r3
 8007494:	d30a      	bcc.n	80074ac <quorem+0x102>
 8007496:	613c      	str	r4, [r7, #16]
 8007498:	4630      	mov	r0, r6
 800749a:	b003      	add	sp, #12
 800749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	3b04      	subs	r3, #4
 80074a4:	2a00      	cmp	r2, #0
 80074a6:	d1cd      	bne.n	8007444 <quorem+0x9a>
 80074a8:	3c01      	subs	r4, #1
 80074aa:	e7c8      	b.n	800743e <quorem+0x94>
 80074ac:	6812      	ldr	r2, [r2, #0]
 80074ae:	3b04      	subs	r3, #4
 80074b0:	2a00      	cmp	r2, #0
 80074b2:	d1f0      	bne.n	8007496 <quorem+0xec>
 80074b4:	3c01      	subs	r4, #1
 80074b6:	e7eb      	b.n	8007490 <quorem+0xe6>
 80074b8:	2000      	movs	r0, #0
 80074ba:	e7ee      	b.n	800749a <quorem+0xf0>
 80074bc:	0000      	movs	r0, r0
	...

080074c0 <_dtoa_r>:
 80074c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c4:	4616      	mov	r6, r2
 80074c6:	461f      	mov	r7, r3
 80074c8:	69c4      	ldr	r4, [r0, #28]
 80074ca:	b099      	sub	sp, #100	; 0x64
 80074cc:	4605      	mov	r5, r0
 80074ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80074d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80074d6:	b974      	cbnz	r4, 80074f6 <_dtoa_r+0x36>
 80074d8:	2010      	movs	r0, #16
 80074da:	f000 fe1d 	bl	8008118 <malloc>
 80074de:	4602      	mov	r2, r0
 80074e0:	61e8      	str	r0, [r5, #28]
 80074e2:	b920      	cbnz	r0, 80074ee <_dtoa_r+0x2e>
 80074e4:	21ef      	movs	r1, #239	; 0xef
 80074e6:	4bac      	ldr	r3, [pc, #688]	; (8007798 <_dtoa_r+0x2d8>)
 80074e8:	48ac      	ldr	r0, [pc, #688]	; (800779c <_dtoa_r+0x2dc>)
 80074ea:	f001 fccf 	bl	8008e8c <__assert_func>
 80074ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074f2:	6004      	str	r4, [r0, #0]
 80074f4:	60c4      	str	r4, [r0, #12]
 80074f6:	69eb      	ldr	r3, [r5, #28]
 80074f8:	6819      	ldr	r1, [r3, #0]
 80074fa:	b151      	cbz	r1, 8007512 <_dtoa_r+0x52>
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	2301      	movs	r3, #1
 8007500:	4093      	lsls	r3, r2
 8007502:	604a      	str	r2, [r1, #4]
 8007504:	608b      	str	r3, [r1, #8]
 8007506:	4628      	mov	r0, r5
 8007508:	f000 fefa 	bl	8008300 <_Bfree>
 800750c:	2200      	movs	r2, #0
 800750e:	69eb      	ldr	r3, [r5, #28]
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	1e3b      	subs	r3, r7, #0
 8007514:	bfaf      	iteee	ge
 8007516:	2300      	movge	r3, #0
 8007518:	2201      	movlt	r2, #1
 800751a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800751e:	9305      	strlt	r3, [sp, #20]
 8007520:	bfa8      	it	ge
 8007522:	f8c8 3000 	strge.w	r3, [r8]
 8007526:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800752a:	4b9d      	ldr	r3, [pc, #628]	; (80077a0 <_dtoa_r+0x2e0>)
 800752c:	bfb8      	it	lt
 800752e:	f8c8 2000 	strlt.w	r2, [r8]
 8007532:	ea33 0309 	bics.w	r3, r3, r9
 8007536:	d119      	bne.n	800756c <_dtoa_r+0xac>
 8007538:	f242 730f 	movw	r3, #9999	; 0x270f
 800753c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007544:	4333      	orrs	r3, r6
 8007546:	f000 8589 	beq.w	800805c <_dtoa_r+0xb9c>
 800754a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800754c:	b953      	cbnz	r3, 8007564 <_dtoa_r+0xa4>
 800754e:	4b95      	ldr	r3, [pc, #596]	; (80077a4 <_dtoa_r+0x2e4>)
 8007550:	e023      	b.n	800759a <_dtoa_r+0xda>
 8007552:	4b95      	ldr	r3, [pc, #596]	; (80077a8 <_dtoa_r+0x2e8>)
 8007554:	9303      	str	r3, [sp, #12]
 8007556:	3308      	adds	r3, #8
 8007558:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800755a:	6013      	str	r3, [r2, #0]
 800755c:	9803      	ldr	r0, [sp, #12]
 800755e:	b019      	add	sp, #100	; 0x64
 8007560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007564:	4b8f      	ldr	r3, [pc, #572]	; (80077a4 <_dtoa_r+0x2e4>)
 8007566:	9303      	str	r3, [sp, #12]
 8007568:	3303      	adds	r3, #3
 800756a:	e7f5      	b.n	8007558 <_dtoa_r+0x98>
 800756c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007570:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007574:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007578:	2200      	movs	r2, #0
 800757a:	2300      	movs	r3, #0
 800757c:	f7f9 fa80 	bl	8000a80 <__aeabi_dcmpeq>
 8007580:	4680      	mov	r8, r0
 8007582:	b160      	cbz	r0, 800759e <_dtoa_r+0xde>
 8007584:	2301      	movs	r3, #1
 8007586:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 8562 	beq.w	8008056 <_dtoa_r+0xb96>
 8007592:	4b86      	ldr	r3, [pc, #536]	; (80077ac <_dtoa_r+0x2ec>)
 8007594:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007596:	6013      	str	r3, [r2, #0]
 8007598:	3b01      	subs	r3, #1
 800759a:	9303      	str	r3, [sp, #12]
 800759c:	e7de      	b.n	800755c <_dtoa_r+0x9c>
 800759e:	ab16      	add	r3, sp, #88	; 0x58
 80075a0:	9301      	str	r3, [sp, #4]
 80075a2:	ab17      	add	r3, sp, #92	; 0x5c
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	4628      	mov	r0, r5
 80075a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80075ac:	f001 f98a 	bl	80088c4 <__d2b>
 80075b0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80075b4:	4682      	mov	sl, r0
 80075b6:	2c00      	cmp	r4, #0
 80075b8:	d07e      	beq.n	80076b8 <_dtoa_r+0x1f8>
 80075ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075c0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80075c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075c8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80075cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80075d0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80075d4:	4619      	mov	r1, r3
 80075d6:	2200      	movs	r2, #0
 80075d8:	4b75      	ldr	r3, [pc, #468]	; (80077b0 <_dtoa_r+0x2f0>)
 80075da:	f7f8 fe31 	bl	8000240 <__aeabi_dsub>
 80075de:	a368      	add	r3, pc, #416	; (adr r3, 8007780 <_dtoa_r+0x2c0>)
 80075e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e4:	f7f8 ffe4 	bl	80005b0 <__aeabi_dmul>
 80075e8:	a367      	add	r3, pc, #412	; (adr r3, 8007788 <_dtoa_r+0x2c8>)
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	f7f8 fe29 	bl	8000244 <__adddf3>
 80075f2:	4606      	mov	r6, r0
 80075f4:	4620      	mov	r0, r4
 80075f6:	460f      	mov	r7, r1
 80075f8:	f7f8 ff70 	bl	80004dc <__aeabi_i2d>
 80075fc:	a364      	add	r3, pc, #400	; (adr r3, 8007790 <_dtoa_r+0x2d0>)
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	f7f8 ffd5 	bl	80005b0 <__aeabi_dmul>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	4630      	mov	r0, r6
 800760c:	4639      	mov	r1, r7
 800760e:	f7f8 fe19 	bl	8000244 <__adddf3>
 8007612:	4606      	mov	r6, r0
 8007614:	460f      	mov	r7, r1
 8007616:	f7f9 fa7b 	bl	8000b10 <__aeabi_d2iz>
 800761a:	2200      	movs	r2, #0
 800761c:	4683      	mov	fp, r0
 800761e:	2300      	movs	r3, #0
 8007620:	4630      	mov	r0, r6
 8007622:	4639      	mov	r1, r7
 8007624:	f7f9 fa36 	bl	8000a94 <__aeabi_dcmplt>
 8007628:	b148      	cbz	r0, 800763e <_dtoa_r+0x17e>
 800762a:	4658      	mov	r0, fp
 800762c:	f7f8 ff56 	bl	80004dc <__aeabi_i2d>
 8007630:	4632      	mov	r2, r6
 8007632:	463b      	mov	r3, r7
 8007634:	f7f9 fa24 	bl	8000a80 <__aeabi_dcmpeq>
 8007638:	b908      	cbnz	r0, 800763e <_dtoa_r+0x17e>
 800763a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800763e:	f1bb 0f16 	cmp.w	fp, #22
 8007642:	d857      	bhi.n	80076f4 <_dtoa_r+0x234>
 8007644:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007648:	4b5a      	ldr	r3, [pc, #360]	; (80077b4 <_dtoa_r+0x2f4>)
 800764a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007652:	f7f9 fa1f 	bl	8000a94 <__aeabi_dcmplt>
 8007656:	2800      	cmp	r0, #0
 8007658:	d04e      	beq.n	80076f8 <_dtoa_r+0x238>
 800765a:	2300      	movs	r3, #0
 800765c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007660:	930f      	str	r3, [sp, #60]	; 0x3c
 8007662:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007664:	1b1b      	subs	r3, r3, r4
 8007666:	1e5a      	subs	r2, r3, #1
 8007668:	bf46      	itte	mi
 800766a:	f1c3 0901 	rsbmi	r9, r3, #1
 800766e:	2300      	movmi	r3, #0
 8007670:	f04f 0900 	movpl.w	r9, #0
 8007674:	9209      	str	r2, [sp, #36]	; 0x24
 8007676:	bf48      	it	mi
 8007678:	9309      	strmi	r3, [sp, #36]	; 0x24
 800767a:	f1bb 0f00 	cmp.w	fp, #0
 800767e:	db3d      	blt.n	80076fc <_dtoa_r+0x23c>
 8007680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007682:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007686:	445b      	add	r3, fp
 8007688:	9309      	str	r3, [sp, #36]	; 0x24
 800768a:	2300      	movs	r3, #0
 800768c:	930a      	str	r3, [sp, #40]	; 0x28
 800768e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007690:	2b09      	cmp	r3, #9
 8007692:	d867      	bhi.n	8007764 <_dtoa_r+0x2a4>
 8007694:	2b05      	cmp	r3, #5
 8007696:	bfc4      	itt	gt
 8007698:	3b04      	subgt	r3, #4
 800769a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800769c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800769e:	bfc8      	it	gt
 80076a0:	2400      	movgt	r4, #0
 80076a2:	f1a3 0302 	sub.w	r3, r3, #2
 80076a6:	bfd8      	it	le
 80076a8:	2401      	movle	r4, #1
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	f200 8086 	bhi.w	80077bc <_dtoa_r+0x2fc>
 80076b0:	e8df f003 	tbb	[pc, r3]
 80076b4:	5637392c 	.word	0x5637392c
 80076b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80076bc:	441c      	add	r4, r3
 80076be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	bfc1      	itttt	gt
 80076c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80076ca:	fa09 f903 	lslgt.w	r9, r9, r3
 80076ce:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80076d2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80076d6:	bfd6      	itet	le
 80076d8:	f1c3 0320 	rsble	r3, r3, #32
 80076dc:	ea49 0003 	orrgt.w	r0, r9, r3
 80076e0:	fa06 f003 	lslle.w	r0, r6, r3
 80076e4:	f7f8 feea 	bl	80004bc <__aeabi_ui2d>
 80076e8:	2201      	movs	r2, #1
 80076ea:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80076ee:	3c01      	subs	r4, #1
 80076f0:	9213      	str	r2, [sp, #76]	; 0x4c
 80076f2:	e76f      	b.n	80075d4 <_dtoa_r+0x114>
 80076f4:	2301      	movs	r3, #1
 80076f6:	e7b3      	b.n	8007660 <_dtoa_r+0x1a0>
 80076f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80076fa:	e7b2      	b.n	8007662 <_dtoa_r+0x1a2>
 80076fc:	f1cb 0300 	rsb	r3, fp, #0
 8007700:	930a      	str	r3, [sp, #40]	; 0x28
 8007702:	2300      	movs	r3, #0
 8007704:	eba9 090b 	sub.w	r9, r9, fp
 8007708:	930e      	str	r3, [sp, #56]	; 0x38
 800770a:	e7c0      	b.n	800768e <_dtoa_r+0x1ce>
 800770c:	2300      	movs	r3, #0
 800770e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007710:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007712:	2b00      	cmp	r3, #0
 8007714:	dc55      	bgt.n	80077c2 <_dtoa_r+0x302>
 8007716:	2301      	movs	r3, #1
 8007718:	461a      	mov	r2, r3
 800771a:	9306      	str	r3, [sp, #24]
 800771c:	9308      	str	r3, [sp, #32]
 800771e:	9223      	str	r2, [sp, #140]	; 0x8c
 8007720:	e00b      	b.n	800773a <_dtoa_r+0x27a>
 8007722:	2301      	movs	r3, #1
 8007724:	e7f3      	b.n	800770e <_dtoa_r+0x24e>
 8007726:	2300      	movs	r3, #0
 8007728:	930b      	str	r3, [sp, #44]	; 0x2c
 800772a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800772c:	445b      	add	r3, fp
 800772e:	9306      	str	r3, [sp, #24]
 8007730:	3301      	adds	r3, #1
 8007732:	2b01      	cmp	r3, #1
 8007734:	9308      	str	r3, [sp, #32]
 8007736:	bfb8      	it	lt
 8007738:	2301      	movlt	r3, #1
 800773a:	2100      	movs	r1, #0
 800773c:	2204      	movs	r2, #4
 800773e:	69e8      	ldr	r0, [r5, #28]
 8007740:	f102 0614 	add.w	r6, r2, #20
 8007744:	429e      	cmp	r6, r3
 8007746:	d940      	bls.n	80077ca <_dtoa_r+0x30a>
 8007748:	6041      	str	r1, [r0, #4]
 800774a:	4628      	mov	r0, r5
 800774c:	f000 fd98 	bl	8008280 <_Balloc>
 8007750:	9003      	str	r0, [sp, #12]
 8007752:	2800      	cmp	r0, #0
 8007754:	d13c      	bne.n	80077d0 <_dtoa_r+0x310>
 8007756:	4602      	mov	r2, r0
 8007758:	f240 11af 	movw	r1, #431	; 0x1af
 800775c:	4b16      	ldr	r3, [pc, #88]	; (80077b8 <_dtoa_r+0x2f8>)
 800775e:	e6c3      	b.n	80074e8 <_dtoa_r+0x28>
 8007760:	2301      	movs	r3, #1
 8007762:	e7e1      	b.n	8007728 <_dtoa_r+0x268>
 8007764:	2401      	movs	r4, #1
 8007766:	2300      	movs	r3, #0
 8007768:	940b      	str	r4, [sp, #44]	; 0x2c
 800776a:	9322      	str	r3, [sp, #136]	; 0x88
 800776c:	f04f 33ff 	mov.w	r3, #4294967295
 8007770:	2200      	movs	r2, #0
 8007772:	9306      	str	r3, [sp, #24]
 8007774:	9308      	str	r3, [sp, #32]
 8007776:	2312      	movs	r3, #18
 8007778:	e7d1      	b.n	800771e <_dtoa_r+0x25e>
 800777a:	bf00      	nop
 800777c:	f3af 8000 	nop.w
 8007780:	636f4361 	.word	0x636f4361
 8007784:	3fd287a7 	.word	0x3fd287a7
 8007788:	8b60c8b3 	.word	0x8b60c8b3
 800778c:	3fc68a28 	.word	0x3fc68a28
 8007790:	509f79fb 	.word	0x509f79fb
 8007794:	3fd34413 	.word	0x3fd34413
 8007798:	0800a2cf 	.word	0x0800a2cf
 800779c:	0800a2e6 	.word	0x0800a2e6
 80077a0:	7ff00000 	.word	0x7ff00000
 80077a4:	0800a2cb 	.word	0x0800a2cb
 80077a8:	0800a2c2 	.word	0x0800a2c2
 80077ac:	0800a29f 	.word	0x0800a29f
 80077b0:	3ff80000 	.word	0x3ff80000
 80077b4:	0800a3d0 	.word	0x0800a3d0
 80077b8:	0800a33e 	.word	0x0800a33e
 80077bc:	2301      	movs	r3, #1
 80077be:	930b      	str	r3, [sp, #44]	; 0x2c
 80077c0:	e7d4      	b.n	800776c <_dtoa_r+0x2ac>
 80077c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077c4:	9306      	str	r3, [sp, #24]
 80077c6:	9308      	str	r3, [sp, #32]
 80077c8:	e7b7      	b.n	800773a <_dtoa_r+0x27a>
 80077ca:	3101      	adds	r1, #1
 80077cc:	0052      	lsls	r2, r2, #1
 80077ce:	e7b7      	b.n	8007740 <_dtoa_r+0x280>
 80077d0:	69eb      	ldr	r3, [r5, #28]
 80077d2:	9a03      	ldr	r2, [sp, #12]
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	9b08      	ldr	r3, [sp, #32]
 80077d8:	2b0e      	cmp	r3, #14
 80077da:	f200 80a8 	bhi.w	800792e <_dtoa_r+0x46e>
 80077de:	2c00      	cmp	r4, #0
 80077e0:	f000 80a5 	beq.w	800792e <_dtoa_r+0x46e>
 80077e4:	f1bb 0f00 	cmp.w	fp, #0
 80077e8:	dd34      	ble.n	8007854 <_dtoa_r+0x394>
 80077ea:	4b9a      	ldr	r3, [pc, #616]	; (8007a54 <_dtoa_r+0x594>)
 80077ec:	f00b 020f 	and.w	r2, fp, #15
 80077f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80077f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077fc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007800:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007804:	d016      	beq.n	8007834 <_dtoa_r+0x374>
 8007806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800780a:	4b93      	ldr	r3, [pc, #588]	; (8007a58 <_dtoa_r+0x598>)
 800780c:	2703      	movs	r7, #3
 800780e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007812:	f7f8 fff7 	bl	8000804 <__aeabi_ddiv>
 8007816:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800781a:	f004 040f 	and.w	r4, r4, #15
 800781e:	4e8e      	ldr	r6, [pc, #568]	; (8007a58 <_dtoa_r+0x598>)
 8007820:	b954      	cbnz	r4, 8007838 <_dtoa_r+0x378>
 8007822:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007826:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800782a:	f7f8 ffeb 	bl	8000804 <__aeabi_ddiv>
 800782e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007832:	e029      	b.n	8007888 <_dtoa_r+0x3c8>
 8007834:	2702      	movs	r7, #2
 8007836:	e7f2      	b.n	800781e <_dtoa_r+0x35e>
 8007838:	07e1      	lsls	r1, r4, #31
 800783a:	d508      	bpl.n	800784e <_dtoa_r+0x38e>
 800783c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007840:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007844:	f7f8 feb4 	bl	80005b0 <__aeabi_dmul>
 8007848:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800784c:	3701      	adds	r7, #1
 800784e:	1064      	asrs	r4, r4, #1
 8007850:	3608      	adds	r6, #8
 8007852:	e7e5      	b.n	8007820 <_dtoa_r+0x360>
 8007854:	f000 80a5 	beq.w	80079a2 <_dtoa_r+0x4e2>
 8007858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800785c:	f1cb 0400 	rsb	r4, fp, #0
 8007860:	4b7c      	ldr	r3, [pc, #496]	; (8007a54 <_dtoa_r+0x594>)
 8007862:	f004 020f 	and.w	r2, r4, #15
 8007866:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786e:	f7f8 fe9f 	bl	80005b0 <__aeabi_dmul>
 8007872:	2702      	movs	r7, #2
 8007874:	2300      	movs	r3, #0
 8007876:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800787a:	4e77      	ldr	r6, [pc, #476]	; (8007a58 <_dtoa_r+0x598>)
 800787c:	1124      	asrs	r4, r4, #4
 800787e:	2c00      	cmp	r4, #0
 8007880:	f040 8084 	bne.w	800798c <_dtoa_r+0x4cc>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1d2      	bne.n	800782e <_dtoa_r+0x36e>
 8007888:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800788c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 8087 	beq.w	80079a6 <_dtoa_r+0x4e6>
 8007898:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800789c:	2200      	movs	r2, #0
 800789e:	4b6f      	ldr	r3, [pc, #444]	; (8007a5c <_dtoa_r+0x59c>)
 80078a0:	f7f9 f8f8 	bl	8000a94 <__aeabi_dcmplt>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d07e      	beq.n	80079a6 <_dtoa_r+0x4e6>
 80078a8:	9b08      	ldr	r3, [sp, #32]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d07b      	beq.n	80079a6 <_dtoa_r+0x4e6>
 80078ae:	9b06      	ldr	r3, [sp, #24]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dd38      	ble.n	8007926 <_dtoa_r+0x466>
 80078b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078b8:	2200      	movs	r2, #0
 80078ba:	4b69      	ldr	r3, [pc, #420]	; (8007a60 <_dtoa_r+0x5a0>)
 80078bc:	f7f8 fe78 	bl	80005b0 <__aeabi_dmul>
 80078c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078c4:	9c06      	ldr	r4, [sp, #24]
 80078c6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80078ca:	3701      	adds	r7, #1
 80078cc:	4638      	mov	r0, r7
 80078ce:	f7f8 fe05 	bl	80004dc <__aeabi_i2d>
 80078d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078d6:	f7f8 fe6b 	bl	80005b0 <__aeabi_dmul>
 80078da:	2200      	movs	r2, #0
 80078dc:	4b61      	ldr	r3, [pc, #388]	; (8007a64 <_dtoa_r+0x5a4>)
 80078de:	f7f8 fcb1 	bl	8000244 <__adddf3>
 80078e2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80078e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078ea:	9611      	str	r6, [sp, #68]	; 0x44
 80078ec:	2c00      	cmp	r4, #0
 80078ee:	d15d      	bne.n	80079ac <_dtoa_r+0x4ec>
 80078f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078f4:	2200      	movs	r2, #0
 80078f6:	4b5c      	ldr	r3, [pc, #368]	; (8007a68 <_dtoa_r+0x5a8>)
 80078f8:	f7f8 fca2 	bl	8000240 <__aeabi_dsub>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007904:	4633      	mov	r3, r6
 8007906:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007908:	f7f9 f8e2 	bl	8000ad0 <__aeabi_dcmpgt>
 800790c:	2800      	cmp	r0, #0
 800790e:	f040 8295 	bne.w	8007e3c <_dtoa_r+0x97c>
 8007912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007916:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007918:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800791c:	f7f9 f8ba 	bl	8000a94 <__aeabi_dcmplt>
 8007920:	2800      	cmp	r0, #0
 8007922:	f040 8289 	bne.w	8007e38 <_dtoa_r+0x978>
 8007926:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800792a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800792e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007930:	2b00      	cmp	r3, #0
 8007932:	f2c0 8151 	blt.w	8007bd8 <_dtoa_r+0x718>
 8007936:	f1bb 0f0e 	cmp.w	fp, #14
 800793a:	f300 814d 	bgt.w	8007bd8 <_dtoa_r+0x718>
 800793e:	4b45      	ldr	r3, [pc, #276]	; (8007a54 <_dtoa_r+0x594>)
 8007940:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007944:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007948:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800794c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800794e:	2b00      	cmp	r3, #0
 8007950:	f280 80da 	bge.w	8007b08 <_dtoa_r+0x648>
 8007954:	9b08      	ldr	r3, [sp, #32]
 8007956:	2b00      	cmp	r3, #0
 8007958:	f300 80d6 	bgt.w	8007b08 <_dtoa_r+0x648>
 800795c:	f040 826b 	bne.w	8007e36 <_dtoa_r+0x976>
 8007960:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007964:	2200      	movs	r2, #0
 8007966:	4b40      	ldr	r3, [pc, #256]	; (8007a68 <_dtoa_r+0x5a8>)
 8007968:	f7f8 fe22 	bl	80005b0 <__aeabi_dmul>
 800796c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007970:	f7f9 f8a4 	bl	8000abc <__aeabi_dcmpge>
 8007974:	9c08      	ldr	r4, [sp, #32]
 8007976:	4626      	mov	r6, r4
 8007978:	2800      	cmp	r0, #0
 800797a:	f040 8241 	bne.w	8007e00 <_dtoa_r+0x940>
 800797e:	2331      	movs	r3, #49	; 0x31
 8007980:	9f03      	ldr	r7, [sp, #12]
 8007982:	f10b 0b01 	add.w	fp, fp, #1
 8007986:	f807 3b01 	strb.w	r3, [r7], #1
 800798a:	e23d      	b.n	8007e08 <_dtoa_r+0x948>
 800798c:	07e2      	lsls	r2, r4, #31
 800798e:	d505      	bpl.n	800799c <_dtoa_r+0x4dc>
 8007990:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007994:	f7f8 fe0c 	bl	80005b0 <__aeabi_dmul>
 8007998:	2301      	movs	r3, #1
 800799a:	3701      	adds	r7, #1
 800799c:	1064      	asrs	r4, r4, #1
 800799e:	3608      	adds	r6, #8
 80079a0:	e76d      	b.n	800787e <_dtoa_r+0x3be>
 80079a2:	2702      	movs	r7, #2
 80079a4:	e770      	b.n	8007888 <_dtoa_r+0x3c8>
 80079a6:	46d8      	mov	r8, fp
 80079a8:	9c08      	ldr	r4, [sp, #32]
 80079aa:	e78f      	b.n	80078cc <_dtoa_r+0x40c>
 80079ac:	9903      	ldr	r1, [sp, #12]
 80079ae:	4b29      	ldr	r3, [pc, #164]	; (8007a54 <_dtoa_r+0x594>)
 80079b0:	4421      	add	r1, r4
 80079b2:	9112      	str	r1, [sp, #72]	; 0x48
 80079b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079ba:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80079be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80079c2:	2900      	cmp	r1, #0
 80079c4:	d054      	beq.n	8007a70 <_dtoa_r+0x5b0>
 80079c6:	2000      	movs	r0, #0
 80079c8:	4928      	ldr	r1, [pc, #160]	; (8007a6c <_dtoa_r+0x5ac>)
 80079ca:	f7f8 ff1b 	bl	8000804 <__aeabi_ddiv>
 80079ce:	463b      	mov	r3, r7
 80079d0:	4632      	mov	r2, r6
 80079d2:	f7f8 fc35 	bl	8000240 <__aeabi_dsub>
 80079d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079da:	9f03      	ldr	r7, [sp, #12]
 80079dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079e0:	f7f9 f896 	bl	8000b10 <__aeabi_d2iz>
 80079e4:	4604      	mov	r4, r0
 80079e6:	f7f8 fd79 	bl	80004dc <__aeabi_i2d>
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079f2:	f7f8 fc25 	bl	8000240 <__aeabi_dsub>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	3430      	adds	r4, #48	; 0x30
 80079fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a04:	f807 4b01 	strb.w	r4, [r7], #1
 8007a08:	f7f9 f844 	bl	8000a94 <__aeabi_dcmplt>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	d173      	bne.n	8007af8 <_dtoa_r+0x638>
 8007a10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a14:	2000      	movs	r0, #0
 8007a16:	4911      	ldr	r1, [pc, #68]	; (8007a5c <_dtoa_r+0x59c>)
 8007a18:	f7f8 fc12 	bl	8000240 <__aeabi_dsub>
 8007a1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a20:	f7f9 f838 	bl	8000a94 <__aeabi_dcmplt>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	f040 80b6 	bne.w	8007b96 <_dtoa_r+0x6d6>
 8007a2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a2c:	429f      	cmp	r7, r3
 8007a2e:	f43f af7a 	beq.w	8007926 <_dtoa_r+0x466>
 8007a32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a36:	2200      	movs	r2, #0
 8007a38:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <_dtoa_r+0x5a0>)
 8007a3a:	f7f8 fdb9 	bl	80005b0 <__aeabi_dmul>
 8007a3e:	2200      	movs	r2, #0
 8007a40:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a48:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <_dtoa_r+0x5a0>)
 8007a4a:	f7f8 fdb1 	bl	80005b0 <__aeabi_dmul>
 8007a4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a52:	e7c3      	b.n	80079dc <_dtoa_r+0x51c>
 8007a54:	0800a3d0 	.word	0x0800a3d0
 8007a58:	0800a3a8 	.word	0x0800a3a8
 8007a5c:	3ff00000 	.word	0x3ff00000
 8007a60:	40240000 	.word	0x40240000
 8007a64:	401c0000 	.word	0x401c0000
 8007a68:	40140000 	.word	0x40140000
 8007a6c:	3fe00000 	.word	0x3fe00000
 8007a70:	4630      	mov	r0, r6
 8007a72:	4639      	mov	r1, r7
 8007a74:	f7f8 fd9c 	bl	80005b0 <__aeabi_dmul>
 8007a78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a7e:	9c03      	ldr	r4, [sp, #12]
 8007a80:	9314      	str	r3, [sp, #80]	; 0x50
 8007a82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a86:	f7f9 f843 	bl	8000b10 <__aeabi_d2iz>
 8007a8a:	9015      	str	r0, [sp, #84]	; 0x54
 8007a8c:	f7f8 fd26 	bl	80004dc <__aeabi_i2d>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a98:	f7f8 fbd2 	bl	8000240 <__aeabi_dsub>
 8007a9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	3330      	adds	r3, #48	; 0x30
 8007aa2:	f804 3b01 	strb.w	r3, [r4], #1
 8007aa6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007aa8:	460f      	mov	r7, r1
 8007aaa:	429c      	cmp	r4, r3
 8007aac:	f04f 0200 	mov.w	r2, #0
 8007ab0:	d124      	bne.n	8007afc <_dtoa_r+0x63c>
 8007ab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ab6:	4baf      	ldr	r3, [pc, #700]	; (8007d74 <_dtoa_r+0x8b4>)
 8007ab8:	f7f8 fbc4 	bl	8000244 <__adddf3>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	f7f9 f804 	bl	8000ad0 <__aeabi_dcmpgt>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d163      	bne.n	8007b94 <_dtoa_r+0x6d4>
 8007acc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	49a8      	ldr	r1, [pc, #672]	; (8007d74 <_dtoa_r+0x8b4>)
 8007ad4:	f7f8 fbb4 	bl	8000240 <__aeabi_dsub>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	4630      	mov	r0, r6
 8007ade:	4639      	mov	r1, r7
 8007ae0:	f7f8 ffd8 	bl	8000a94 <__aeabi_dcmplt>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	f43f af1e 	beq.w	8007926 <_dtoa_r+0x466>
 8007aea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007aec:	1e7b      	subs	r3, r7, #1
 8007aee:	9314      	str	r3, [sp, #80]	; 0x50
 8007af0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007af4:	2b30      	cmp	r3, #48	; 0x30
 8007af6:	d0f8      	beq.n	8007aea <_dtoa_r+0x62a>
 8007af8:	46c3      	mov	fp, r8
 8007afa:	e03b      	b.n	8007b74 <_dtoa_r+0x6b4>
 8007afc:	4b9e      	ldr	r3, [pc, #632]	; (8007d78 <_dtoa_r+0x8b8>)
 8007afe:	f7f8 fd57 	bl	80005b0 <__aeabi_dmul>
 8007b02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b06:	e7bc      	b.n	8007a82 <_dtoa_r+0x5c2>
 8007b08:	9f03      	ldr	r7, [sp, #12]
 8007b0a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007b0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b12:	4640      	mov	r0, r8
 8007b14:	4649      	mov	r1, r9
 8007b16:	f7f8 fe75 	bl	8000804 <__aeabi_ddiv>
 8007b1a:	f7f8 fff9 	bl	8000b10 <__aeabi_d2iz>
 8007b1e:	4604      	mov	r4, r0
 8007b20:	f7f8 fcdc 	bl	80004dc <__aeabi_i2d>
 8007b24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b28:	f7f8 fd42 	bl	80005b0 <__aeabi_dmul>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4640      	mov	r0, r8
 8007b32:	4649      	mov	r1, r9
 8007b34:	f7f8 fb84 	bl	8000240 <__aeabi_dsub>
 8007b38:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007b3c:	f807 6b01 	strb.w	r6, [r7], #1
 8007b40:	9e03      	ldr	r6, [sp, #12]
 8007b42:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007b46:	1bbe      	subs	r6, r7, r6
 8007b48:	45b4      	cmp	ip, r6
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	d136      	bne.n	8007bbe <_dtoa_r+0x6fe>
 8007b50:	f7f8 fb78 	bl	8000244 <__adddf3>
 8007b54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b58:	4680      	mov	r8, r0
 8007b5a:	4689      	mov	r9, r1
 8007b5c:	f7f8 ffb8 	bl	8000ad0 <__aeabi_dcmpgt>
 8007b60:	bb58      	cbnz	r0, 8007bba <_dtoa_r+0x6fa>
 8007b62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b66:	4640      	mov	r0, r8
 8007b68:	4649      	mov	r1, r9
 8007b6a:	f7f8 ff89 	bl	8000a80 <__aeabi_dcmpeq>
 8007b6e:	b108      	cbz	r0, 8007b74 <_dtoa_r+0x6b4>
 8007b70:	07e3      	lsls	r3, r4, #31
 8007b72:	d422      	bmi.n	8007bba <_dtoa_r+0x6fa>
 8007b74:	4651      	mov	r1, sl
 8007b76:	4628      	mov	r0, r5
 8007b78:	f000 fbc2 	bl	8008300 <_Bfree>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b80:	703b      	strb	r3, [r7, #0]
 8007b82:	f10b 0301 	add.w	r3, fp, #1
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f43f ace6 	beq.w	800755c <_dtoa_r+0x9c>
 8007b90:	601f      	str	r7, [r3, #0]
 8007b92:	e4e3      	b.n	800755c <_dtoa_r+0x9c>
 8007b94:	4627      	mov	r7, r4
 8007b96:	463b      	mov	r3, r7
 8007b98:	461f      	mov	r7, r3
 8007b9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b9e:	2a39      	cmp	r2, #57	; 0x39
 8007ba0:	d107      	bne.n	8007bb2 <_dtoa_r+0x6f2>
 8007ba2:	9a03      	ldr	r2, [sp, #12]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d1f7      	bne.n	8007b98 <_dtoa_r+0x6d8>
 8007ba8:	2230      	movs	r2, #48	; 0x30
 8007baa:	9903      	ldr	r1, [sp, #12]
 8007bac:	f108 0801 	add.w	r8, r8, #1
 8007bb0:	700a      	strb	r2, [r1, #0]
 8007bb2:	781a      	ldrb	r2, [r3, #0]
 8007bb4:	3201      	adds	r2, #1
 8007bb6:	701a      	strb	r2, [r3, #0]
 8007bb8:	e79e      	b.n	8007af8 <_dtoa_r+0x638>
 8007bba:	46d8      	mov	r8, fp
 8007bbc:	e7eb      	b.n	8007b96 <_dtoa_r+0x6d6>
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	4b6d      	ldr	r3, [pc, #436]	; (8007d78 <_dtoa_r+0x8b8>)
 8007bc2:	f7f8 fcf5 	bl	80005b0 <__aeabi_dmul>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2300      	movs	r3, #0
 8007bca:	4680      	mov	r8, r0
 8007bcc:	4689      	mov	r9, r1
 8007bce:	f7f8 ff57 	bl	8000a80 <__aeabi_dcmpeq>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d09b      	beq.n	8007b0e <_dtoa_r+0x64e>
 8007bd6:	e7cd      	b.n	8007b74 <_dtoa_r+0x6b4>
 8007bd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bda:	2a00      	cmp	r2, #0
 8007bdc:	f000 80c4 	beq.w	8007d68 <_dtoa_r+0x8a8>
 8007be0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007be2:	2a01      	cmp	r2, #1
 8007be4:	f300 80a8 	bgt.w	8007d38 <_dtoa_r+0x878>
 8007be8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bea:	2a00      	cmp	r2, #0
 8007bec:	f000 80a0 	beq.w	8007d30 <_dtoa_r+0x870>
 8007bf0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bf4:	464f      	mov	r7, r9
 8007bf6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	441a      	add	r2, r3
 8007bfe:	4628      	mov	r0, r5
 8007c00:	4499      	add	r9, r3
 8007c02:	9209      	str	r2, [sp, #36]	; 0x24
 8007c04:	f000 fc32 	bl	800846c <__i2b>
 8007c08:	4606      	mov	r6, r0
 8007c0a:	b15f      	cbz	r7, 8007c24 <_dtoa_r+0x764>
 8007c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	dd08      	ble.n	8007c24 <_dtoa_r+0x764>
 8007c12:	42bb      	cmp	r3, r7
 8007c14:	bfa8      	it	ge
 8007c16:	463b      	movge	r3, r7
 8007c18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c1a:	eba9 0903 	sub.w	r9, r9, r3
 8007c1e:	1aff      	subs	r7, r7, r3
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	9309      	str	r3, [sp, #36]	; 0x24
 8007c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c26:	b1f3      	cbz	r3, 8007c66 <_dtoa_r+0x7a6>
 8007c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 80a0 	beq.w	8007d70 <_dtoa_r+0x8b0>
 8007c30:	2c00      	cmp	r4, #0
 8007c32:	dd10      	ble.n	8007c56 <_dtoa_r+0x796>
 8007c34:	4631      	mov	r1, r6
 8007c36:	4622      	mov	r2, r4
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f000 fcd5 	bl	80085e8 <__pow5mult>
 8007c3e:	4652      	mov	r2, sl
 8007c40:	4601      	mov	r1, r0
 8007c42:	4606      	mov	r6, r0
 8007c44:	4628      	mov	r0, r5
 8007c46:	f000 fc27 	bl	8008498 <__multiply>
 8007c4a:	4680      	mov	r8, r0
 8007c4c:	4651      	mov	r1, sl
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f000 fb56 	bl	8008300 <_Bfree>
 8007c54:	46c2      	mov	sl, r8
 8007c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c58:	1b1a      	subs	r2, r3, r4
 8007c5a:	d004      	beq.n	8007c66 <_dtoa_r+0x7a6>
 8007c5c:	4651      	mov	r1, sl
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f000 fcc2 	bl	80085e8 <__pow5mult>
 8007c64:	4682      	mov	sl, r0
 8007c66:	2101      	movs	r1, #1
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f000 fbff 	bl	800846c <__i2b>
 8007c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c70:	4604      	mov	r4, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f340 8082 	ble.w	8007d7c <_dtoa_r+0x8bc>
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4601      	mov	r1, r0
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	f000 fcb3 	bl	80085e8 <__pow5mult>
 8007c82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c84:	4604      	mov	r4, r0
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	dd7b      	ble.n	8007d82 <_dtoa_r+0x8c2>
 8007c8a:	f04f 0800 	mov.w	r8, #0
 8007c8e:	6923      	ldr	r3, [r4, #16]
 8007c90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c94:	6918      	ldr	r0, [r3, #16]
 8007c96:	f000 fb9b 	bl	80083d0 <__hi0bits>
 8007c9a:	f1c0 0020 	rsb	r0, r0, #32
 8007c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ca0:	4418      	add	r0, r3
 8007ca2:	f010 001f 	ands.w	r0, r0, #31
 8007ca6:	f000 8092 	beq.w	8007dce <_dtoa_r+0x90e>
 8007caa:	f1c0 0320 	rsb	r3, r0, #32
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	f340 8085 	ble.w	8007dbe <_dtoa_r+0x8fe>
 8007cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb6:	f1c0 001c 	rsb	r0, r0, #28
 8007cba:	4403      	add	r3, r0
 8007cbc:	4481      	add	r9, r0
 8007cbe:	4407      	add	r7, r0
 8007cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc2:	f1b9 0f00 	cmp.w	r9, #0
 8007cc6:	dd05      	ble.n	8007cd4 <_dtoa_r+0x814>
 8007cc8:	4651      	mov	r1, sl
 8007cca:	464a      	mov	r2, r9
 8007ccc:	4628      	mov	r0, r5
 8007cce:	f000 fce5 	bl	800869c <__lshift>
 8007cd2:	4682      	mov	sl, r0
 8007cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	dd05      	ble.n	8007ce6 <_dtoa_r+0x826>
 8007cda:	4621      	mov	r1, r4
 8007cdc:	461a      	mov	r2, r3
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f000 fcdc 	bl	800869c <__lshift>
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d072      	beq.n	8007dd2 <_dtoa_r+0x912>
 8007cec:	4621      	mov	r1, r4
 8007cee:	4650      	mov	r0, sl
 8007cf0:	f000 fd40 	bl	8008774 <__mcmp>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	da6c      	bge.n	8007dd2 <_dtoa_r+0x912>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	4651      	mov	r1, sl
 8007cfc:	220a      	movs	r2, #10
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f000 fb20 	bl	8008344 <__multadd>
 8007d04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d06:	4682      	mov	sl, r0
 8007d08:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 81ac 	beq.w	800806a <_dtoa_r+0xbaa>
 8007d12:	2300      	movs	r3, #0
 8007d14:	4631      	mov	r1, r6
 8007d16:	220a      	movs	r2, #10
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f000 fb13 	bl	8008344 <__multadd>
 8007d1e:	9b06      	ldr	r3, [sp, #24]
 8007d20:	4606      	mov	r6, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f300 8093 	bgt.w	8007e4e <_dtoa_r+0x98e>
 8007d28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	dc59      	bgt.n	8007de2 <_dtoa_r+0x922>
 8007d2e:	e08e      	b.n	8007e4e <_dtoa_r+0x98e>
 8007d30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007d32:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d36:	e75d      	b.n	8007bf4 <_dtoa_r+0x734>
 8007d38:	9b08      	ldr	r3, [sp, #32]
 8007d3a:	1e5c      	subs	r4, r3, #1
 8007d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3e:	42a3      	cmp	r3, r4
 8007d40:	bfbf      	itttt	lt
 8007d42:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d44:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007d46:	1ae3      	sublt	r3, r4, r3
 8007d48:	18d2      	addlt	r2, r2, r3
 8007d4a:	bfa8      	it	ge
 8007d4c:	1b1c      	subge	r4, r3, r4
 8007d4e:	9b08      	ldr	r3, [sp, #32]
 8007d50:	bfbe      	ittt	lt
 8007d52:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007d54:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007d56:	2400      	movlt	r4, #0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	bfb5      	itete	lt
 8007d5c:	eba9 0703 	sublt.w	r7, r9, r3
 8007d60:	464f      	movge	r7, r9
 8007d62:	2300      	movlt	r3, #0
 8007d64:	9b08      	ldrge	r3, [sp, #32]
 8007d66:	e747      	b.n	8007bf8 <_dtoa_r+0x738>
 8007d68:	464f      	mov	r7, r9
 8007d6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d6c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007d6e:	e74c      	b.n	8007c0a <_dtoa_r+0x74a>
 8007d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d72:	e773      	b.n	8007c5c <_dtoa_r+0x79c>
 8007d74:	3fe00000 	.word	0x3fe00000
 8007d78:	40240000 	.word	0x40240000
 8007d7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	dc18      	bgt.n	8007db4 <_dtoa_r+0x8f4>
 8007d82:	9b04      	ldr	r3, [sp, #16]
 8007d84:	b9b3      	cbnz	r3, 8007db4 <_dtoa_r+0x8f4>
 8007d86:	9b05      	ldr	r3, [sp, #20]
 8007d88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d8c:	b993      	cbnz	r3, 8007db4 <_dtoa_r+0x8f4>
 8007d8e:	9b05      	ldr	r3, [sp, #20]
 8007d90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d94:	0d1b      	lsrs	r3, r3, #20
 8007d96:	051b      	lsls	r3, r3, #20
 8007d98:	b17b      	cbz	r3, 8007dba <_dtoa_r+0x8fa>
 8007d9a:	f04f 0801 	mov.w	r8, #1
 8007d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da0:	f109 0901 	add.w	r9, r9, #1
 8007da4:	3301      	adds	r3, #1
 8007da6:	9309      	str	r3, [sp, #36]	; 0x24
 8007da8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f47f af6f 	bne.w	8007c8e <_dtoa_r+0x7ce>
 8007db0:	2001      	movs	r0, #1
 8007db2:	e774      	b.n	8007c9e <_dtoa_r+0x7de>
 8007db4:	f04f 0800 	mov.w	r8, #0
 8007db8:	e7f6      	b.n	8007da8 <_dtoa_r+0x8e8>
 8007dba:	4698      	mov	r8, r3
 8007dbc:	e7f4      	b.n	8007da8 <_dtoa_r+0x8e8>
 8007dbe:	d080      	beq.n	8007cc2 <_dtoa_r+0x802>
 8007dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dc2:	331c      	adds	r3, #28
 8007dc4:	441a      	add	r2, r3
 8007dc6:	4499      	add	r9, r3
 8007dc8:	441f      	add	r7, r3
 8007dca:	9209      	str	r2, [sp, #36]	; 0x24
 8007dcc:	e779      	b.n	8007cc2 <_dtoa_r+0x802>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	e7f6      	b.n	8007dc0 <_dtoa_r+0x900>
 8007dd2:	9b08      	ldr	r3, [sp, #32]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	dc34      	bgt.n	8007e42 <_dtoa_r+0x982>
 8007dd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	dd31      	ble.n	8007e42 <_dtoa_r+0x982>
 8007dde:	9b08      	ldr	r3, [sp, #32]
 8007de0:	9306      	str	r3, [sp, #24]
 8007de2:	9b06      	ldr	r3, [sp, #24]
 8007de4:	b963      	cbnz	r3, 8007e00 <_dtoa_r+0x940>
 8007de6:	4621      	mov	r1, r4
 8007de8:	2205      	movs	r2, #5
 8007dea:	4628      	mov	r0, r5
 8007dec:	f000 faaa 	bl	8008344 <__multadd>
 8007df0:	4601      	mov	r1, r0
 8007df2:	4604      	mov	r4, r0
 8007df4:	4650      	mov	r0, sl
 8007df6:	f000 fcbd 	bl	8008774 <__mcmp>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	f73f adbf 	bgt.w	800797e <_dtoa_r+0x4be>
 8007e00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e02:	9f03      	ldr	r7, [sp, #12]
 8007e04:	ea6f 0b03 	mvn.w	fp, r3
 8007e08:	f04f 0800 	mov.w	r8, #0
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f000 fa76 	bl	8008300 <_Bfree>
 8007e14:	2e00      	cmp	r6, #0
 8007e16:	f43f aead 	beq.w	8007b74 <_dtoa_r+0x6b4>
 8007e1a:	f1b8 0f00 	cmp.w	r8, #0
 8007e1e:	d005      	beq.n	8007e2c <_dtoa_r+0x96c>
 8007e20:	45b0      	cmp	r8, r6
 8007e22:	d003      	beq.n	8007e2c <_dtoa_r+0x96c>
 8007e24:	4641      	mov	r1, r8
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 fa6a 	bl	8008300 <_Bfree>
 8007e2c:	4631      	mov	r1, r6
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f000 fa66 	bl	8008300 <_Bfree>
 8007e34:	e69e      	b.n	8007b74 <_dtoa_r+0x6b4>
 8007e36:	2400      	movs	r4, #0
 8007e38:	4626      	mov	r6, r4
 8007e3a:	e7e1      	b.n	8007e00 <_dtoa_r+0x940>
 8007e3c:	46c3      	mov	fp, r8
 8007e3e:	4626      	mov	r6, r4
 8007e40:	e59d      	b.n	800797e <_dtoa_r+0x4be>
 8007e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 80c8 	beq.w	8007fda <_dtoa_r+0xb1a>
 8007e4a:	9b08      	ldr	r3, [sp, #32]
 8007e4c:	9306      	str	r3, [sp, #24]
 8007e4e:	2f00      	cmp	r7, #0
 8007e50:	dd05      	ble.n	8007e5e <_dtoa_r+0x99e>
 8007e52:	4631      	mov	r1, r6
 8007e54:	463a      	mov	r2, r7
 8007e56:	4628      	mov	r0, r5
 8007e58:	f000 fc20 	bl	800869c <__lshift>
 8007e5c:	4606      	mov	r6, r0
 8007e5e:	f1b8 0f00 	cmp.w	r8, #0
 8007e62:	d05b      	beq.n	8007f1c <_dtoa_r+0xa5c>
 8007e64:	4628      	mov	r0, r5
 8007e66:	6871      	ldr	r1, [r6, #4]
 8007e68:	f000 fa0a 	bl	8008280 <_Balloc>
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	b928      	cbnz	r0, 8007e7c <_dtoa_r+0x9bc>
 8007e70:	4602      	mov	r2, r0
 8007e72:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007e76:	4b81      	ldr	r3, [pc, #516]	; (800807c <_dtoa_r+0xbbc>)
 8007e78:	f7ff bb36 	b.w	80074e8 <_dtoa_r+0x28>
 8007e7c:	6932      	ldr	r2, [r6, #16]
 8007e7e:	f106 010c 	add.w	r1, r6, #12
 8007e82:	3202      	adds	r2, #2
 8007e84:	0092      	lsls	r2, r2, #2
 8007e86:	300c      	adds	r0, #12
 8007e88:	f000 fff2 	bl	8008e70 <memcpy>
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	4639      	mov	r1, r7
 8007e90:	4628      	mov	r0, r5
 8007e92:	f000 fc03 	bl	800869c <__lshift>
 8007e96:	46b0      	mov	r8, r6
 8007e98:	4606      	mov	r6, r0
 8007e9a:	9b03      	ldr	r3, [sp, #12]
 8007e9c:	9a03      	ldr	r2, [sp, #12]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	9308      	str	r3, [sp, #32]
 8007ea2:	9b06      	ldr	r3, [sp, #24]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ea8:	9b04      	ldr	r3, [sp, #16]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	930a      	str	r3, [sp, #40]	; 0x28
 8007eb0:	9b08      	ldr	r3, [sp, #32]
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	9304      	str	r3, [sp, #16]
 8007eba:	f7ff fa76 	bl	80073aa <quorem>
 8007ebe:	4641      	mov	r1, r8
 8007ec0:	9006      	str	r0, [sp, #24]
 8007ec2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007ec6:	4650      	mov	r0, sl
 8007ec8:	f000 fc54 	bl	8008774 <__mcmp>
 8007ecc:	4632      	mov	r2, r6
 8007ece:	9009      	str	r0, [sp, #36]	; 0x24
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f000 fc6a 	bl	80087ac <__mdiff>
 8007ed8:	68c2      	ldr	r2, [r0, #12]
 8007eda:	4607      	mov	r7, r0
 8007edc:	bb02      	cbnz	r2, 8007f20 <_dtoa_r+0xa60>
 8007ede:	4601      	mov	r1, r0
 8007ee0:	4650      	mov	r0, sl
 8007ee2:	f000 fc47 	bl	8008774 <__mcmp>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	4639      	mov	r1, r7
 8007eea:	4628      	mov	r0, r5
 8007eec:	920c      	str	r2, [sp, #48]	; 0x30
 8007eee:	f000 fa07 	bl	8008300 <_Bfree>
 8007ef2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ef4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ef6:	9f08      	ldr	r7, [sp, #32]
 8007ef8:	ea43 0102 	orr.w	r1, r3, r2
 8007efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007efe:	4319      	orrs	r1, r3
 8007f00:	d110      	bne.n	8007f24 <_dtoa_r+0xa64>
 8007f02:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f06:	d029      	beq.n	8007f5c <_dtoa_r+0xa9c>
 8007f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	dd02      	ble.n	8007f14 <_dtoa_r+0xa54>
 8007f0e:	9b06      	ldr	r3, [sp, #24]
 8007f10:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007f14:	9b04      	ldr	r3, [sp, #16]
 8007f16:	f883 9000 	strb.w	r9, [r3]
 8007f1a:	e777      	b.n	8007e0c <_dtoa_r+0x94c>
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	e7ba      	b.n	8007e96 <_dtoa_r+0x9d6>
 8007f20:	2201      	movs	r2, #1
 8007f22:	e7e1      	b.n	8007ee8 <_dtoa_r+0xa28>
 8007f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	db04      	blt.n	8007f34 <_dtoa_r+0xa74>
 8007f2a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007f2c:	430b      	orrs	r3, r1
 8007f2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f30:	430b      	orrs	r3, r1
 8007f32:	d120      	bne.n	8007f76 <_dtoa_r+0xab6>
 8007f34:	2a00      	cmp	r2, #0
 8007f36:	dded      	ble.n	8007f14 <_dtoa_r+0xa54>
 8007f38:	4651      	mov	r1, sl
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	f000 fbad 	bl	800869c <__lshift>
 8007f42:	4621      	mov	r1, r4
 8007f44:	4682      	mov	sl, r0
 8007f46:	f000 fc15 	bl	8008774 <__mcmp>
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	dc03      	bgt.n	8007f56 <_dtoa_r+0xa96>
 8007f4e:	d1e1      	bne.n	8007f14 <_dtoa_r+0xa54>
 8007f50:	f019 0f01 	tst.w	r9, #1
 8007f54:	d0de      	beq.n	8007f14 <_dtoa_r+0xa54>
 8007f56:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f5a:	d1d8      	bne.n	8007f0e <_dtoa_r+0xa4e>
 8007f5c:	2339      	movs	r3, #57	; 0x39
 8007f5e:	9a04      	ldr	r2, [sp, #16]
 8007f60:	7013      	strb	r3, [r2, #0]
 8007f62:	463b      	mov	r3, r7
 8007f64:	461f      	mov	r7, r3
 8007f66:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	2a39      	cmp	r2, #57	; 0x39
 8007f6e:	d06b      	beq.n	8008048 <_dtoa_r+0xb88>
 8007f70:	3201      	adds	r2, #1
 8007f72:	701a      	strb	r2, [r3, #0]
 8007f74:	e74a      	b.n	8007e0c <_dtoa_r+0x94c>
 8007f76:	2a00      	cmp	r2, #0
 8007f78:	dd07      	ble.n	8007f8a <_dtoa_r+0xaca>
 8007f7a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f7e:	d0ed      	beq.n	8007f5c <_dtoa_r+0xa9c>
 8007f80:	9a04      	ldr	r2, [sp, #16]
 8007f82:	f109 0301 	add.w	r3, r9, #1
 8007f86:	7013      	strb	r3, [r2, #0]
 8007f88:	e740      	b.n	8007e0c <_dtoa_r+0x94c>
 8007f8a:	9b08      	ldr	r3, [sp, #32]
 8007f8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f8e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d042      	beq.n	800801c <_dtoa_r+0xb5c>
 8007f96:	4651      	mov	r1, sl
 8007f98:	2300      	movs	r3, #0
 8007f9a:	220a      	movs	r2, #10
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	f000 f9d1 	bl	8008344 <__multadd>
 8007fa2:	45b0      	cmp	r8, r6
 8007fa4:	4682      	mov	sl, r0
 8007fa6:	f04f 0300 	mov.w	r3, #0
 8007faa:	f04f 020a 	mov.w	r2, #10
 8007fae:	4641      	mov	r1, r8
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	d107      	bne.n	8007fc4 <_dtoa_r+0xb04>
 8007fb4:	f000 f9c6 	bl	8008344 <__multadd>
 8007fb8:	4680      	mov	r8, r0
 8007fba:	4606      	mov	r6, r0
 8007fbc:	9b08      	ldr	r3, [sp, #32]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	9308      	str	r3, [sp, #32]
 8007fc2:	e775      	b.n	8007eb0 <_dtoa_r+0x9f0>
 8007fc4:	f000 f9be 	bl	8008344 <__multadd>
 8007fc8:	4631      	mov	r1, r6
 8007fca:	4680      	mov	r8, r0
 8007fcc:	2300      	movs	r3, #0
 8007fce:	220a      	movs	r2, #10
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	f000 f9b7 	bl	8008344 <__multadd>
 8007fd6:	4606      	mov	r6, r0
 8007fd8:	e7f0      	b.n	8007fbc <_dtoa_r+0xafc>
 8007fda:	9b08      	ldr	r3, [sp, #32]
 8007fdc:	9306      	str	r3, [sp, #24]
 8007fde:	9f03      	ldr	r7, [sp, #12]
 8007fe0:	4621      	mov	r1, r4
 8007fe2:	4650      	mov	r0, sl
 8007fe4:	f7ff f9e1 	bl	80073aa <quorem>
 8007fe8:	9b03      	ldr	r3, [sp, #12]
 8007fea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007fee:	f807 9b01 	strb.w	r9, [r7], #1
 8007ff2:	1afa      	subs	r2, r7, r3
 8007ff4:	9b06      	ldr	r3, [sp, #24]
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	dd07      	ble.n	800800a <_dtoa_r+0xb4a>
 8007ffa:	4651      	mov	r1, sl
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	220a      	movs	r2, #10
 8008000:	4628      	mov	r0, r5
 8008002:	f000 f99f 	bl	8008344 <__multadd>
 8008006:	4682      	mov	sl, r0
 8008008:	e7ea      	b.n	8007fe0 <_dtoa_r+0xb20>
 800800a:	9b06      	ldr	r3, [sp, #24]
 800800c:	f04f 0800 	mov.w	r8, #0
 8008010:	2b00      	cmp	r3, #0
 8008012:	bfcc      	ite	gt
 8008014:	461f      	movgt	r7, r3
 8008016:	2701      	movle	r7, #1
 8008018:	9b03      	ldr	r3, [sp, #12]
 800801a:	441f      	add	r7, r3
 800801c:	4651      	mov	r1, sl
 800801e:	2201      	movs	r2, #1
 8008020:	4628      	mov	r0, r5
 8008022:	f000 fb3b 	bl	800869c <__lshift>
 8008026:	4621      	mov	r1, r4
 8008028:	4682      	mov	sl, r0
 800802a:	f000 fba3 	bl	8008774 <__mcmp>
 800802e:	2800      	cmp	r0, #0
 8008030:	dc97      	bgt.n	8007f62 <_dtoa_r+0xaa2>
 8008032:	d102      	bne.n	800803a <_dtoa_r+0xb7a>
 8008034:	f019 0f01 	tst.w	r9, #1
 8008038:	d193      	bne.n	8007f62 <_dtoa_r+0xaa2>
 800803a:	463b      	mov	r3, r7
 800803c:	461f      	mov	r7, r3
 800803e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008042:	2a30      	cmp	r2, #48	; 0x30
 8008044:	d0fa      	beq.n	800803c <_dtoa_r+0xb7c>
 8008046:	e6e1      	b.n	8007e0c <_dtoa_r+0x94c>
 8008048:	9a03      	ldr	r2, [sp, #12]
 800804a:	429a      	cmp	r2, r3
 800804c:	d18a      	bne.n	8007f64 <_dtoa_r+0xaa4>
 800804e:	2331      	movs	r3, #49	; 0x31
 8008050:	f10b 0b01 	add.w	fp, fp, #1
 8008054:	e797      	b.n	8007f86 <_dtoa_r+0xac6>
 8008056:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <_dtoa_r+0xbc0>)
 8008058:	f7ff ba9f 	b.w	800759a <_dtoa_r+0xda>
 800805c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800805e:	2b00      	cmp	r3, #0
 8008060:	f47f aa77 	bne.w	8007552 <_dtoa_r+0x92>
 8008064:	4b07      	ldr	r3, [pc, #28]	; (8008084 <_dtoa_r+0xbc4>)
 8008066:	f7ff ba98 	b.w	800759a <_dtoa_r+0xda>
 800806a:	9b06      	ldr	r3, [sp, #24]
 800806c:	2b00      	cmp	r3, #0
 800806e:	dcb6      	bgt.n	8007fde <_dtoa_r+0xb1e>
 8008070:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008072:	2b02      	cmp	r3, #2
 8008074:	f73f aeb5 	bgt.w	8007de2 <_dtoa_r+0x922>
 8008078:	e7b1      	b.n	8007fde <_dtoa_r+0xb1e>
 800807a:	bf00      	nop
 800807c:	0800a33e 	.word	0x0800a33e
 8008080:	0800a29e 	.word	0x0800a29e
 8008084:	0800a2c2 	.word	0x0800a2c2

08008088 <_free_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4605      	mov	r5, r0
 800808c:	2900      	cmp	r1, #0
 800808e:	d040      	beq.n	8008112 <_free_r+0x8a>
 8008090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008094:	1f0c      	subs	r4, r1, #4
 8008096:	2b00      	cmp	r3, #0
 8008098:	bfb8      	it	lt
 800809a:	18e4      	addlt	r4, r4, r3
 800809c:	f000 f8e4 	bl	8008268 <__malloc_lock>
 80080a0:	4a1c      	ldr	r2, [pc, #112]	; (8008114 <_free_r+0x8c>)
 80080a2:	6813      	ldr	r3, [r2, #0]
 80080a4:	b933      	cbnz	r3, 80080b4 <_free_r+0x2c>
 80080a6:	6063      	str	r3, [r4, #4]
 80080a8:	6014      	str	r4, [r2, #0]
 80080aa:	4628      	mov	r0, r5
 80080ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080b0:	f000 b8e0 	b.w	8008274 <__malloc_unlock>
 80080b4:	42a3      	cmp	r3, r4
 80080b6:	d908      	bls.n	80080ca <_free_r+0x42>
 80080b8:	6820      	ldr	r0, [r4, #0]
 80080ba:	1821      	adds	r1, r4, r0
 80080bc:	428b      	cmp	r3, r1
 80080be:	bf01      	itttt	eq
 80080c0:	6819      	ldreq	r1, [r3, #0]
 80080c2:	685b      	ldreq	r3, [r3, #4]
 80080c4:	1809      	addeq	r1, r1, r0
 80080c6:	6021      	streq	r1, [r4, #0]
 80080c8:	e7ed      	b.n	80080a6 <_free_r+0x1e>
 80080ca:	461a      	mov	r2, r3
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	b10b      	cbz	r3, 80080d4 <_free_r+0x4c>
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	d9fa      	bls.n	80080ca <_free_r+0x42>
 80080d4:	6811      	ldr	r1, [r2, #0]
 80080d6:	1850      	adds	r0, r2, r1
 80080d8:	42a0      	cmp	r0, r4
 80080da:	d10b      	bne.n	80080f4 <_free_r+0x6c>
 80080dc:	6820      	ldr	r0, [r4, #0]
 80080de:	4401      	add	r1, r0
 80080e0:	1850      	adds	r0, r2, r1
 80080e2:	4283      	cmp	r3, r0
 80080e4:	6011      	str	r1, [r2, #0]
 80080e6:	d1e0      	bne.n	80080aa <_free_r+0x22>
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	4408      	add	r0, r1
 80080ee:	6010      	str	r0, [r2, #0]
 80080f0:	6053      	str	r3, [r2, #4]
 80080f2:	e7da      	b.n	80080aa <_free_r+0x22>
 80080f4:	d902      	bls.n	80080fc <_free_r+0x74>
 80080f6:	230c      	movs	r3, #12
 80080f8:	602b      	str	r3, [r5, #0]
 80080fa:	e7d6      	b.n	80080aa <_free_r+0x22>
 80080fc:	6820      	ldr	r0, [r4, #0]
 80080fe:	1821      	adds	r1, r4, r0
 8008100:	428b      	cmp	r3, r1
 8008102:	bf01      	itttt	eq
 8008104:	6819      	ldreq	r1, [r3, #0]
 8008106:	685b      	ldreq	r3, [r3, #4]
 8008108:	1809      	addeq	r1, r1, r0
 800810a:	6021      	streq	r1, [r4, #0]
 800810c:	6063      	str	r3, [r4, #4]
 800810e:	6054      	str	r4, [r2, #4]
 8008110:	e7cb      	b.n	80080aa <_free_r+0x22>
 8008112:	bd38      	pop	{r3, r4, r5, pc}
 8008114:	200004e0 	.word	0x200004e0

08008118 <malloc>:
 8008118:	4b02      	ldr	r3, [pc, #8]	; (8008124 <malloc+0xc>)
 800811a:	4601      	mov	r1, r0
 800811c:	6818      	ldr	r0, [r3, #0]
 800811e:	f000 b823 	b.w	8008168 <_malloc_r>
 8008122:	bf00      	nop
 8008124:	2000007c 	.word	0x2000007c

08008128 <sbrk_aligned>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	4e0e      	ldr	r6, [pc, #56]	; (8008164 <sbrk_aligned+0x3c>)
 800812c:	460c      	mov	r4, r1
 800812e:	6831      	ldr	r1, [r6, #0]
 8008130:	4605      	mov	r5, r0
 8008132:	b911      	cbnz	r1, 800813a <sbrk_aligned+0x12>
 8008134:	f000 fe8c 	bl	8008e50 <_sbrk_r>
 8008138:	6030      	str	r0, [r6, #0]
 800813a:	4621      	mov	r1, r4
 800813c:	4628      	mov	r0, r5
 800813e:	f000 fe87 	bl	8008e50 <_sbrk_r>
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	d00a      	beq.n	800815c <sbrk_aligned+0x34>
 8008146:	1cc4      	adds	r4, r0, #3
 8008148:	f024 0403 	bic.w	r4, r4, #3
 800814c:	42a0      	cmp	r0, r4
 800814e:	d007      	beq.n	8008160 <sbrk_aligned+0x38>
 8008150:	1a21      	subs	r1, r4, r0
 8008152:	4628      	mov	r0, r5
 8008154:	f000 fe7c 	bl	8008e50 <_sbrk_r>
 8008158:	3001      	adds	r0, #1
 800815a:	d101      	bne.n	8008160 <sbrk_aligned+0x38>
 800815c:	f04f 34ff 	mov.w	r4, #4294967295
 8008160:	4620      	mov	r0, r4
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	200004e4 	.word	0x200004e4

08008168 <_malloc_r>:
 8008168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800816c:	1ccd      	adds	r5, r1, #3
 800816e:	f025 0503 	bic.w	r5, r5, #3
 8008172:	3508      	adds	r5, #8
 8008174:	2d0c      	cmp	r5, #12
 8008176:	bf38      	it	cc
 8008178:	250c      	movcc	r5, #12
 800817a:	2d00      	cmp	r5, #0
 800817c:	4607      	mov	r7, r0
 800817e:	db01      	blt.n	8008184 <_malloc_r+0x1c>
 8008180:	42a9      	cmp	r1, r5
 8008182:	d905      	bls.n	8008190 <_malloc_r+0x28>
 8008184:	230c      	movs	r3, #12
 8008186:	2600      	movs	r6, #0
 8008188:	603b      	str	r3, [r7, #0]
 800818a:	4630      	mov	r0, r6
 800818c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008190:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008264 <_malloc_r+0xfc>
 8008194:	f000 f868 	bl	8008268 <__malloc_lock>
 8008198:	f8d8 3000 	ldr.w	r3, [r8]
 800819c:	461c      	mov	r4, r3
 800819e:	bb5c      	cbnz	r4, 80081f8 <_malloc_r+0x90>
 80081a0:	4629      	mov	r1, r5
 80081a2:	4638      	mov	r0, r7
 80081a4:	f7ff ffc0 	bl	8008128 <sbrk_aligned>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	4604      	mov	r4, r0
 80081ac:	d155      	bne.n	800825a <_malloc_r+0xf2>
 80081ae:	f8d8 4000 	ldr.w	r4, [r8]
 80081b2:	4626      	mov	r6, r4
 80081b4:	2e00      	cmp	r6, #0
 80081b6:	d145      	bne.n	8008244 <_malloc_r+0xdc>
 80081b8:	2c00      	cmp	r4, #0
 80081ba:	d048      	beq.n	800824e <_malloc_r+0xe6>
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	4631      	mov	r1, r6
 80081c0:	4638      	mov	r0, r7
 80081c2:	eb04 0903 	add.w	r9, r4, r3
 80081c6:	f000 fe43 	bl	8008e50 <_sbrk_r>
 80081ca:	4581      	cmp	r9, r0
 80081cc:	d13f      	bne.n	800824e <_malloc_r+0xe6>
 80081ce:	6821      	ldr	r1, [r4, #0]
 80081d0:	4638      	mov	r0, r7
 80081d2:	1a6d      	subs	r5, r5, r1
 80081d4:	4629      	mov	r1, r5
 80081d6:	f7ff ffa7 	bl	8008128 <sbrk_aligned>
 80081da:	3001      	adds	r0, #1
 80081dc:	d037      	beq.n	800824e <_malloc_r+0xe6>
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	442b      	add	r3, r5
 80081e2:	6023      	str	r3, [r4, #0]
 80081e4:	f8d8 3000 	ldr.w	r3, [r8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d038      	beq.n	800825e <_malloc_r+0xf6>
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	42a2      	cmp	r2, r4
 80081f0:	d12b      	bne.n	800824a <_malloc_r+0xe2>
 80081f2:	2200      	movs	r2, #0
 80081f4:	605a      	str	r2, [r3, #4]
 80081f6:	e00f      	b.n	8008218 <_malloc_r+0xb0>
 80081f8:	6822      	ldr	r2, [r4, #0]
 80081fa:	1b52      	subs	r2, r2, r5
 80081fc:	d41f      	bmi.n	800823e <_malloc_r+0xd6>
 80081fe:	2a0b      	cmp	r2, #11
 8008200:	d917      	bls.n	8008232 <_malloc_r+0xca>
 8008202:	1961      	adds	r1, r4, r5
 8008204:	42a3      	cmp	r3, r4
 8008206:	6025      	str	r5, [r4, #0]
 8008208:	bf18      	it	ne
 800820a:	6059      	strne	r1, [r3, #4]
 800820c:	6863      	ldr	r3, [r4, #4]
 800820e:	bf08      	it	eq
 8008210:	f8c8 1000 	streq.w	r1, [r8]
 8008214:	5162      	str	r2, [r4, r5]
 8008216:	604b      	str	r3, [r1, #4]
 8008218:	4638      	mov	r0, r7
 800821a:	f104 060b 	add.w	r6, r4, #11
 800821e:	f000 f829 	bl	8008274 <__malloc_unlock>
 8008222:	f026 0607 	bic.w	r6, r6, #7
 8008226:	1d23      	adds	r3, r4, #4
 8008228:	1af2      	subs	r2, r6, r3
 800822a:	d0ae      	beq.n	800818a <_malloc_r+0x22>
 800822c:	1b9b      	subs	r3, r3, r6
 800822e:	50a3      	str	r3, [r4, r2]
 8008230:	e7ab      	b.n	800818a <_malloc_r+0x22>
 8008232:	42a3      	cmp	r3, r4
 8008234:	6862      	ldr	r2, [r4, #4]
 8008236:	d1dd      	bne.n	80081f4 <_malloc_r+0x8c>
 8008238:	f8c8 2000 	str.w	r2, [r8]
 800823c:	e7ec      	b.n	8008218 <_malloc_r+0xb0>
 800823e:	4623      	mov	r3, r4
 8008240:	6864      	ldr	r4, [r4, #4]
 8008242:	e7ac      	b.n	800819e <_malloc_r+0x36>
 8008244:	4634      	mov	r4, r6
 8008246:	6876      	ldr	r6, [r6, #4]
 8008248:	e7b4      	b.n	80081b4 <_malloc_r+0x4c>
 800824a:	4613      	mov	r3, r2
 800824c:	e7cc      	b.n	80081e8 <_malloc_r+0x80>
 800824e:	230c      	movs	r3, #12
 8008250:	4638      	mov	r0, r7
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	f000 f80e 	bl	8008274 <__malloc_unlock>
 8008258:	e797      	b.n	800818a <_malloc_r+0x22>
 800825a:	6025      	str	r5, [r4, #0]
 800825c:	e7dc      	b.n	8008218 <_malloc_r+0xb0>
 800825e:	605b      	str	r3, [r3, #4]
 8008260:	deff      	udf	#255	; 0xff
 8008262:	bf00      	nop
 8008264:	200004e0 	.word	0x200004e0

08008268 <__malloc_lock>:
 8008268:	4801      	ldr	r0, [pc, #4]	; (8008270 <__malloc_lock+0x8>)
 800826a:	f7ff b88e 	b.w	800738a <__retarget_lock_acquire_recursive>
 800826e:	bf00      	nop
 8008270:	200004dc 	.word	0x200004dc

08008274 <__malloc_unlock>:
 8008274:	4801      	ldr	r0, [pc, #4]	; (800827c <__malloc_unlock+0x8>)
 8008276:	f7ff b889 	b.w	800738c <__retarget_lock_release_recursive>
 800827a:	bf00      	nop
 800827c:	200004dc 	.word	0x200004dc

08008280 <_Balloc>:
 8008280:	b570      	push	{r4, r5, r6, lr}
 8008282:	69c6      	ldr	r6, [r0, #28]
 8008284:	4604      	mov	r4, r0
 8008286:	460d      	mov	r5, r1
 8008288:	b976      	cbnz	r6, 80082a8 <_Balloc+0x28>
 800828a:	2010      	movs	r0, #16
 800828c:	f7ff ff44 	bl	8008118 <malloc>
 8008290:	4602      	mov	r2, r0
 8008292:	61e0      	str	r0, [r4, #28]
 8008294:	b920      	cbnz	r0, 80082a0 <_Balloc+0x20>
 8008296:	216b      	movs	r1, #107	; 0x6b
 8008298:	4b17      	ldr	r3, [pc, #92]	; (80082f8 <_Balloc+0x78>)
 800829a:	4818      	ldr	r0, [pc, #96]	; (80082fc <_Balloc+0x7c>)
 800829c:	f000 fdf6 	bl	8008e8c <__assert_func>
 80082a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082a4:	6006      	str	r6, [r0, #0]
 80082a6:	60c6      	str	r6, [r0, #12]
 80082a8:	69e6      	ldr	r6, [r4, #28]
 80082aa:	68f3      	ldr	r3, [r6, #12]
 80082ac:	b183      	cbz	r3, 80082d0 <_Balloc+0x50>
 80082ae:	69e3      	ldr	r3, [r4, #28]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082b6:	b9b8      	cbnz	r0, 80082e8 <_Balloc+0x68>
 80082b8:	2101      	movs	r1, #1
 80082ba:	fa01 f605 	lsl.w	r6, r1, r5
 80082be:	1d72      	adds	r2, r6, #5
 80082c0:	4620      	mov	r0, r4
 80082c2:	0092      	lsls	r2, r2, #2
 80082c4:	f000 fe00 	bl	8008ec8 <_calloc_r>
 80082c8:	b160      	cbz	r0, 80082e4 <_Balloc+0x64>
 80082ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082ce:	e00e      	b.n	80082ee <_Balloc+0x6e>
 80082d0:	2221      	movs	r2, #33	; 0x21
 80082d2:	2104      	movs	r1, #4
 80082d4:	4620      	mov	r0, r4
 80082d6:	f000 fdf7 	bl	8008ec8 <_calloc_r>
 80082da:	69e3      	ldr	r3, [r4, #28]
 80082dc:	60f0      	str	r0, [r6, #12]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e4      	bne.n	80082ae <_Balloc+0x2e>
 80082e4:	2000      	movs	r0, #0
 80082e6:	bd70      	pop	{r4, r5, r6, pc}
 80082e8:	6802      	ldr	r2, [r0, #0]
 80082ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082ee:	2300      	movs	r3, #0
 80082f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082f4:	e7f7      	b.n	80082e6 <_Balloc+0x66>
 80082f6:	bf00      	nop
 80082f8:	0800a2cf 	.word	0x0800a2cf
 80082fc:	0800a34f 	.word	0x0800a34f

08008300 <_Bfree>:
 8008300:	b570      	push	{r4, r5, r6, lr}
 8008302:	69c6      	ldr	r6, [r0, #28]
 8008304:	4605      	mov	r5, r0
 8008306:	460c      	mov	r4, r1
 8008308:	b976      	cbnz	r6, 8008328 <_Bfree+0x28>
 800830a:	2010      	movs	r0, #16
 800830c:	f7ff ff04 	bl	8008118 <malloc>
 8008310:	4602      	mov	r2, r0
 8008312:	61e8      	str	r0, [r5, #28]
 8008314:	b920      	cbnz	r0, 8008320 <_Bfree+0x20>
 8008316:	218f      	movs	r1, #143	; 0x8f
 8008318:	4b08      	ldr	r3, [pc, #32]	; (800833c <_Bfree+0x3c>)
 800831a:	4809      	ldr	r0, [pc, #36]	; (8008340 <_Bfree+0x40>)
 800831c:	f000 fdb6 	bl	8008e8c <__assert_func>
 8008320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008324:	6006      	str	r6, [r0, #0]
 8008326:	60c6      	str	r6, [r0, #12]
 8008328:	b13c      	cbz	r4, 800833a <_Bfree+0x3a>
 800832a:	69eb      	ldr	r3, [r5, #28]
 800832c:	6862      	ldr	r2, [r4, #4]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008334:	6021      	str	r1, [r4, #0]
 8008336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800833a:	bd70      	pop	{r4, r5, r6, pc}
 800833c:	0800a2cf 	.word	0x0800a2cf
 8008340:	0800a34f 	.word	0x0800a34f

08008344 <__multadd>:
 8008344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008348:	4607      	mov	r7, r0
 800834a:	460c      	mov	r4, r1
 800834c:	461e      	mov	r6, r3
 800834e:	2000      	movs	r0, #0
 8008350:	690d      	ldr	r5, [r1, #16]
 8008352:	f101 0c14 	add.w	ip, r1, #20
 8008356:	f8dc 3000 	ldr.w	r3, [ip]
 800835a:	3001      	adds	r0, #1
 800835c:	b299      	uxth	r1, r3
 800835e:	fb02 6101 	mla	r1, r2, r1, r6
 8008362:	0c1e      	lsrs	r6, r3, #16
 8008364:	0c0b      	lsrs	r3, r1, #16
 8008366:	fb02 3306 	mla	r3, r2, r6, r3
 800836a:	b289      	uxth	r1, r1
 800836c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008370:	4285      	cmp	r5, r0
 8008372:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008376:	f84c 1b04 	str.w	r1, [ip], #4
 800837a:	dcec      	bgt.n	8008356 <__multadd+0x12>
 800837c:	b30e      	cbz	r6, 80083c2 <__multadd+0x7e>
 800837e:	68a3      	ldr	r3, [r4, #8]
 8008380:	42ab      	cmp	r3, r5
 8008382:	dc19      	bgt.n	80083b8 <__multadd+0x74>
 8008384:	6861      	ldr	r1, [r4, #4]
 8008386:	4638      	mov	r0, r7
 8008388:	3101      	adds	r1, #1
 800838a:	f7ff ff79 	bl	8008280 <_Balloc>
 800838e:	4680      	mov	r8, r0
 8008390:	b928      	cbnz	r0, 800839e <__multadd+0x5a>
 8008392:	4602      	mov	r2, r0
 8008394:	21ba      	movs	r1, #186	; 0xba
 8008396:	4b0c      	ldr	r3, [pc, #48]	; (80083c8 <__multadd+0x84>)
 8008398:	480c      	ldr	r0, [pc, #48]	; (80083cc <__multadd+0x88>)
 800839a:	f000 fd77 	bl	8008e8c <__assert_func>
 800839e:	6922      	ldr	r2, [r4, #16]
 80083a0:	f104 010c 	add.w	r1, r4, #12
 80083a4:	3202      	adds	r2, #2
 80083a6:	0092      	lsls	r2, r2, #2
 80083a8:	300c      	adds	r0, #12
 80083aa:	f000 fd61 	bl	8008e70 <memcpy>
 80083ae:	4621      	mov	r1, r4
 80083b0:	4638      	mov	r0, r7
 80083b2:	f7ff ffa5 	bl	8008300 <_Bfree>
 80083b6:	4644      	mov	r4, r8
 80083b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083bc:	3501      	adds	r5, #1
 80083be:	615e      	str	r6, [r3, #20]
 80083c0:	6125      	str	r5, [r4, #16]
 80083c2:	4620      	mov	r0, r4
 80083c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c8:	0800a33e 	.word	0x0800a33e
 80083cc:	0800a34f 	.word	0x0800a34f

080083d0 <__hi0bits>:
 80083d0:	0c02      	lsrs	r2, r0, #16
 80083d2:	0412      	lsls	r2, r2, #16
 80083d4:	4603      	mov	r3, r0
 80083d6:	b9ca      	cbnz	r2, 800840c <__hi0bits+0x3c>
 80083d8:	0403      	lsls	r3, r0, #16
 80083da:	2010      	movs	r0, #16
 80083dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80083e0:	bf04      	itt	eq
 80083e2:	021b      	lsleq	r3, r3, #8
 80083e4:	3008      	addeq	r0, #8
 80083e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80083ea:	bf04      	itt	eq
 80083ec:	011b      	lsleq	r3, r3, #4
 80083ee:	3004      	addeq	r0, #4
 80083f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80083f4:	bf04      	itt	eq
 80083f6:	009b      	lsleq	r3, r3, #2
 80083f8:	3002      	addeq	r0, #2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	db05      	blt.n	800840a <__hi0bits+0x3a>
 80083fe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008402:	f100 0001 	add.w	r0, r0, #1
 8008406:	bf08      	it	eq
 8008408:	2020      	moveq	r0, #32
 800840a:	4770      	bx	lr
 800840c:	2000      	movs	r0, #0
 800840e:	e7e5      	b.n	80083dc <__hi0bits+0xc>

08008410 <__lo0bits>:
 8008410:	6803      	ldr	r3, [r0, #0]
 8008412:	4602      	mov	r2, r0
 8008414:	f013 0007 	ands.w	r0, r3, #7
 8008418:	d00b      	beq.n	8008432 <__lo0bits+0x22>
 800841a:	07d9      	lsls	r1, r3, #31
 800841c:	d421      	bmi.n	8008462 <__lo0bits+0x52>
 800841e:	0798      	lsls	r0, r3, #30
 8008420:	bf49      	itett	mi
 8008422:	085b      	lsrmi	r3, r3, #1
 8008424:	089b      	lsrpl	r3, r3, #2
 8008426:	2001      	movmi	r0, #1
 8008428:	6013      	strmi	r3, [r2, #0]
 800842a:	bf5c      	itt	pl
 800842c:	2002      	movpl	r0, #2
 800842e:	6013      	strpl	r3, [r2, #0]
 8008430:	4770      	bx	lr
 8008432:	b299      	uxth	r1, r3
 8008434:	b909      	cbnz	r1, 800843a <__lo0bits+0x2a>
 8008436:	2010      	movs	r0, #16
 8008438:	0c1b      	lsrs	r3, r3, #16
 800843a:	b2d9      	uxtb	r1, r3
 800843c:	b909      	cbnz	r1, 8008442 <__lo0bits+0x32>
 800843e:	3008      	adds	r0, #8
 8008440:	0a1b      	lsrs	r3, r3, #8
 8008442:	0719      	lsls	r1, r3, #28
 8008444:	bf04      	itt	eq
 8008446:	091b      	lsreq	r3, r3, #4
 8008448:	3004      	addeq	r0, #4
 800844a:	0799      	lsls	r1, r3, #30
 800844c:	bf04      	itt	eq
 800844e:	089b      	lsreq	r3, r3, #2
 8008450:	3002      	addeq	r0, #2
 8008452:	07d9      	lsls	r1, r3, #31
 8008454:	d403      	bmi.n	800845e <__lo0bits+0x4e>
 8008456:	085b      	lsrs	r3, r3, #1
 8008458:	f100 0001 	add.w	r0, r0, #1
 800845c:	d003      	beq.n	8008466 <__lo0bits+0x56>
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	4770      	bx	lr
 8008462:	2000      	movs	r0, #0
 8008464:	4770      	bx	lr
 8008466:	2020      	movs	r0, #32
 8008468:	4770      	bx	lr
	...

0800846c <__i2b>:
 800846c:	b510      	push	{r4, lr}
 800846e:	460c      	mov	r4, r1
 8008470:	2101      	movs	r1, #1
 8008472:	f7ff ff05 	bl	8008280 <_Balloc>
 8008476:	4602      	mov	r2, r0
 8008478:	b928      	cbnz	r0, 8008486 <__i2b+0x1a>
 800847a:	f240 1145 	movw	r1, #325	; 0x145
 800847e:	4b04      	ldr	r3, [pc, #16]	; (8008490 <__i2b+0x24>)
 8008480:	4804      	ldr	r0, [pc, #16]	; (8008494 <__i2b+0x28>)
 8008482:	f000 fd03 	bl	8008e8c <__assert_func>
 8008486:	2301      	movs	r3, #1
 8008488:	6144      	str	r4, [r0, #20]
 800848a:	6103      	str	r3, [r0, #16]
 800848c:	bd10      	pop	{r4, pc}
 800848e:	bf00      	nop
 8008490:	0800a33e 	.word	0x0800a33e
 8008494:	0800a34f 	.word	0x0800a34f

08008498 <__multiply>:
 8008498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849c:	4691      	mov	r9, r2
 800849e:	690a      	ldr	r2, [r1, #16]
 80084a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084a4:	460c      	mov	r4, r1
 80084a6:	429a      	cmp	r2, r3
 80084a8:	bfbe      	ittt	lt
 80084aa:	460b      	movlt	r3, r1
 80084ac:	464c      	movlt	r4, r9
 80084ae:	4699      	movlt	r9, r3
 80084b0:	6927      	ldr	r7, [r4, #16]
 80084b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084b6:	68a3      	ldr	r3, [r4, #8]
 80084b8:	6861      	ldr	r1, [r4, #4]
 80084ba:	eb07 060a 	add.w	r6, r7, sl
 80084be:	42b3      	cmp	r3, r6
 80084c0:	b085      	sub	sp, #20
 80084c2:	bfb8      	it	lt
 80084c4:	3101      	addlt	r1, #1
 80084c6:	f7ff fedb 	bl	8008280 <_Balloc>
 80084ca:	b930      	cbnz	r0, 80084da <__multiply+0x42>
 80084cc:	4602      	mov	r2, r0
 80084ce:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80084d2:	4b43      	ldr	r3, [pc, #268]	; (80085e0 <__multiply+0x148>)
 80084d4:	4843      	ldr	r0, [pc, #268]	; (80085e4 <__multiply+0x14c>)
 80084d6:	f000 fcd9 	bl	8008e8c <__assert_func>
 80084da:	f100 0514 	add.w	r5, r0, #20
 80084de:	462b      	mov	r3, r5
 80084e0:	2200      	movs	r2, #0
 80084e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80084e6:	4543      	cmp	r3, r8
 80084e8:	d321      	bcc.n	800852e <__multiply+0x96>
 80084ea:	f104 0314 	add.w	r3, r4, #20
 80084ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80084f2:	f109 0314 	add.w	r3, r9, #20
 80084f6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80084fa:	9202      	str	r2, [sp, #8]
 80084fc:	1b3a      	subs	r2, r7, r4
 80084fe:	3a15      	subs	r2, #21
 8008500:	f022 0203 	bic.w	r2, r2, #3
 8008504:	3204      	adds	r2, #4
 8008506:	f104 0115 	add.w	r1, r4, #21
 800850a:	428f      	cmp	r7, r1
 800850c:	bf38      	it	cc
 800850e:	2204      	movcc	r2, #4
 8008510:	9201      	str	r2, [sp, #4]
 8008512:	9a02      	ldr	r2, [sp, #8]
 8008514:	9303      	str	r3, [sp, #12]
 8008516:	429a      	cmp	r2, r3
 8008518:	d80c      	bhi.n	8008534 <__multiply+0x9c>
 800851a:	2e00      	cmp	r6, #0
 800851c:	dd03      	ble.n	8008526 <__multiply+0x8e>
 800851e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008522:	2b00      	cmp	r3, #0
 8008524:	d05a      	beq.n	80085dc <__multiply+0x144>
 8008526:	6106      	str	r6, [r0, #16]
 8008528:	b005      	add	sp, #20
 800852a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852e:	f843 2b04 	str.w	r2, [r3], #4
 8008532:	e7d8      	b.n	80084e6 <__multiply+0x4e>
 8008534:	f8b3 a000 	ldrh.w	sl, [r3]
 8008538:	f1ba 0f00 	cmp.w	sl, #0
 800853c:	d023      	beq.n	8008586 <__multiply+0xee>
 800853e:	46a9      	mov	r9, r5
 8008540:	f04f 0c00 	mov.w	ip, #0
 8008544:	f104 0e14 	add.w	lr, r4, #20
 8008548:	f85e 2b04 	ldr.w	r2, [lr], #4
 800854c:	f8d9 1000 	ldr.w	r1, [r9]
 8008550:	fa1f fb82 	uxth.w	fp, r2
 8008554:	b289      	uxth	r1, r1
 8008556:	fb0a 110b 	mla	r1, sl, fp, r1
 800855a:	4461      	add	r1, ip
 800855c:	f8d9 c000 	ldr.w	ip, [r9]
 8008560:	0c12      	lsrs	r2, r2, #16
 8008562:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008566:	fb0a c202 	mla	r2, sl, r2, ip
 800856a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800856e:	b289      	uxth	r1, r1
 8008570:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008574:	4577      	cmp	r7, lr
 8008576:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800857a:	f849 1b04 	str.w	r1, [r9], #4
 800857e:	d8e3      	bhi.n	8008548 <__multiply+0xb0>
 8008580:	9a01      	ldr	r2, [sp, #4]
 8008582:	f845 c002 	str.w	ip, [r5, r2]
 8008586:	9a03      	ldr	r2, [sp, #12]
 8008588:	3304      	adds	r3, #4
 800858a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800858e:	f1b9 0f00 	cmp.w	r9, #0
 8008592:	d021      	beq.n	80085d8 <__multiply+0x140>
 8008594:	46ae      	mov	lr, r5
 8008596:	f04f 0a00 	mov.w	sl, #0
 800859a:	6829      	ldr	r1, [r5, #0]
 800859c:	f104 0c14 	add.w	ip, r4, #20
 80085a0:	f8bc b000 	ldrh.w	fp, [ip]
 80085a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80085a8:	b289      	uxth	r1, r1
 80085aa:	fb09 220b 	mla	r2, r9, fp, r2
 80085ae:	4452      	add	r2, sl
 80085b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085b4:	f84e 1b04 	str.w	r1, [lr], #4
 80085b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80085bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80085c0:	f8be 1000 	ldrh.w	r1, [lr]
 80085c4:	4567      	cmp	r7, ip
 80085c6:	fb09 110a 	mla	r1, r9, sl, r1
 80085ca:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80085ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80085d2:	d8e5      	bhi.n	80085a0 <__multiply+0x108>
 80085d4:	9a01      	ldr	r2, [sp, #4]
 80085d6:	50a9      	str	r1, [r5, r2]
 80085d8:	3504      	adds	r5, #4
 80085da:	e79a      	b.n	8008512 <__multiply+0x7a>
 80085dc:	3e01      	subs	r6, #1
 80085de:	e79c      	b.n	800851a <__multiply+0x82>
 80085e0:	0800a33e 	.word	0x0800a33e
 80085e4:	0800a34f 	.word	0x0800a34f

080085e8 <__pow5mult>:
 80085e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085ec:	4615      	mov	r5, r2
 80085ee:	f012 0203 	ands.w	r2, r2, #3
 80085f2:	4606      	mov	r6, r0
 80085f4:	460f      	mov	r7, r1
 80085f6:	d007      	beq.n	8008608 <__pow5mult+0x20>
 80085f8:	4c25      	ldr	r4, [pc, #148]	; (8008690 <__pow5mult+0xa8>)
 80085fa:	3a01      	subs	r2, #1
 80085fc:	2300      	movs	r3, #0
 80085fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008602:	f7ff fe9f 	bl	8008344 <__multadd>
 8008606:	4607      	mov	r7, r0
 8008608:	10ad      	asrs	r5, r5, #2
 800860a:	d03d      	beq.n	8008688 <__pow5mult+0xa0>
 800860c:	69f4      	ldr	r4, [r6, #28]
 800860e:	b97c      	cbnz	r4, 8008630 <__pow5mult+0x48>
 8008610:	2010      	movs	r0, #16
 8008612:	f7ff fd81 	bl	8008118 <malloc>
 8008616:	4602      	mov	r2, r0
 8008618:	61f0      	str	r0, [r6, #28]
 800861a:	b928      	cbnz	r0, 8008628 <__pow5mult+0x40>
 800861c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008620:	4b1c      	ldr	r3, [pc, #112]	; (8008694 <__pow5mult+0xac>)
 8008622:	481d      	ldr	r0, [pc, #116]	; (8008698 <__pow5mult+0xb0>)
 8008624:	f000 fc32 	bl	8008e8c <__assert_func>
 8008628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800862c:	6004      	str	r4, [r0, #0]
 800862e:	60c4      	str	r4, [r0, #12]
 8008630:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008638:	b94c      	cbnz	r4, 800864e <__pow5mult+0x66>
 800863a:	f240 2171 	movw	r1, #625	; 0x271
 800863e:	4630      	mov	r0, r6
 8008640:	f7ff ff14 	bl	800846c <__i2b>
 8008644:	2300      	movs	r3, #0
 8008646:	4604      	mov	r4, r0
 8008648:	f8c8 0008 	str.w	r0, [r8, #8]
 800864c:	6003      	str	r3, [r0, #0]
 800864e:	f04f 0900 	mov.w	r9, #0
 8008652:	07eb      	lsls	r3, r5, #31
 8008654:	d50a      	bpl.n	800866c <__pow5mult+0x84>
 8008656:	4639      	mov	r1, r7
 8008658:	4622      	mov	r2, r4
 800865a:	4630      	mov	r0, r6
 800865c:	f7ff ff1c 	bl	8008498 <__multiply>
 8008660:	4680      	mov	r8, r0
 8008662:	4639      	mov	r1, r7
 8008664:	4630      	mov	r0, r6
 8008666:	f7ff fe4b 	bl	8008300 <_Bfree>
 800866a:	4647      	mov	r7, r8
 800866c:	106d      	asrs	r5, r5, #1
 800866e:	d00b      	beq.n	8008688 <__pow5mult+0xa0>
 8008670:	6820      	ldr	r0, [r4, #0]
 8008672:	b938      	cbnz	r0, 8008684 <__pow5mult+0x9c>
 8008674:	4622      	mov	r2, r4
 8008676:	4621      	mov	r1, r4
 8008678:	4630      	mov	r0, r6
 800867a:	f7ff ff0d 	bl	8008498 <__multiply>
 800867e:	6020      	str	r0, [r4, #0]
 8008680:	f8c0 9000 	str.w	r9, [r0]
 8008684:	4604      	mov	r4, r0
 8008686:	e7e4      	b.n	8008652 <__pow5mult+0x6a>
 8008688:	4638      	mov	r0, r7
 800868a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800868e:	bf00      	nop
 8008690:	0800a498 	.word	0x0800a498
 8008694:	0800a2cf 	.word	0x0800a2cf
 8008698:	0800a34f 	.word	0x0800a34f

0800869c <__lshift>:
 800869c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a0:	460c      	mov	r4, r1
 80086a2:	4607      	mov	r7, r0
 80086a4:	4691      	mov	r9, r2
 80086a6:	6923      	ldr	r3, [r4, #16]
 80086a8:	6849      	ldr	r1, [r1, #4]
 80086aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086ae:	68a3      	ldr	r3, [r4, #8]
 80086b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086b4:	f108 0601 	add.w	r6, r8, #1
 80086b8:	42b3      	cmp	r3, r6
 80086ba:	db0b      	blt.n	80086d4 <__lshift+0x38>
 80086bc:	4638      	mov	r0, r7
 80086be:	f7ff fddf 	bl	8008280 <_Balloc>
 80086c2:	4605      	mov	r5, r0
 80086c4:	b948      	cbnz	r0, 80086da <__lshift+0x3e>
 80086c6:	4602      	mov	r2, r0
 80086c8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80086cc:	4b27      	ldr	r3, [pc, #156]	; (800876c <__lshift+0xd0>)
 80086ce:	4828      	ldr	r0, [pc, #160]	; (8008770 <__lshift+0xd4>)
 80086d0:	f000 fbdc 	bl	8008e8c <__assert_func>
 80086d4:	3101      	adds	r1, #1
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	e7ee      	b.n	80086b8 <__lshift+0x1c>
 80086da:	2300      	movs	r3, #0
 80086dc:	f100 0114 	add.w	r1, r0, #20
 80086e0:	f100 0210 	add.w	r2, r0, #16
 80086e4:	4618      	mov	r0, r3
 80086e6:	4553      	cmp	r3, sl
 80086e8:	db33      	blt.n	8008752 <__lshift+0xb6>
 80086ea:	6920      	ldr	r0, [r4, #16]
 80086ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086f0:	f104 0314 	add.w	r3, r4, #20
 80086f4:	f019 091f 	ands.w	r9, r9, #31
 80086f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008700:	d02b      	beq.n	800875a <__lshift+0xbe>
 8008702:	468a      	mov	sl, r1
 8008704:	2200      	movs	r2, #0
 8008706:	f1c9 0e20 	rsb	lr, r9, #32
 800870a:	6818      	ldr	r0, [r3, #0]
 800870c:	fa00 f009 	lsl.w	r0, r0, r9
 8008710:	4310      	orrs	r0, r2
 8008712:	f84a 0b04 	str.w	r0, [sl], #4
 8008716:	f853 2b04 	ldr.w	r2, [r3], #4
 800871a:	459c      	cmp	ip, r3
 800871c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008720:	d8f3      	bhi.n	800870a <__lshift+0x6e>
 8008722:	ebac 0304 	sub.w	r3, ip, r4
 8008726:	3b15      	subs	r3, #21
 8008728:	f023 0303 	bic.w	r3, r3, #3
 800872c:	3304      	adds	r3, #4
 800872e:	f104 0015 	add.w	r0, r4, #21
 8008732:	4584      	cmp	ip, r0
 8008734:	bf38      	it	cc
 8008736:	2304      	movcc	r3, #4
 8008738:	50ca      	str	r2, [r1, r3]
 800873a:	b10a      	cbz	r2, 8008740 <__lshift+0xa4>
 800873c:	f108 0602 	add.w	r6, r8, #2
 8008740:	3e01      	subs	r6, #1
 8008742:	4638      	mov	r0, r7
 8008744:	4621      	mov	r1, r4
 8008746:	612e      	str	r6, [r5, #16]
 8008748:	f7ff fdda 	bl	8008300 <_Bfree>
 800874c:	4628      	mov	r0, r5
 800874e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008752:	f842 0f04 	str.w	r0, [r2, #4]!
 8008756:	3301      	adds	r3, #1
 8008758:	e7c5      	b.n	80086e6 <__lshift+0x4a>
 800875a:	3904      	subs	r1, #4
 800875c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008760:	459c      	cmp	ip, r3
 8008762:	f841 2f04 	str.w	r2, [r1, #4]!
 8008766:	d8f9      	bhi.n	800875c <__lshift+0xc0>
 8008768:	e7ea      	b.n	8008740 <__lshift+0xa4>
 800876a:	bf00      	nop
 800876c:	0800a33e 	.word	0x0800a33e
 8008770:	0800a34f 	.word	0x0800a34f

08008774 <__mcmp>:
 8008774:	4603      	mov	r3, r0
 8008776:	690a      	ldr	r2, [r1, #16]
 8008778:	6900      	ldr	r0, [r0, #16]
 800877a:	b530      	push	{r4, r5, lr}
 800877c:	1a80      	subs	r0, r0, r2
 800877e:	d10d      	bne.n	800879c <__mcmp+0x28>
 8008780:	3314      	adds	r3, #20
 8008782:	3114      	adds	r1, #20
 8008784:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008788:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800878c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008790:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008794:	4295      	cmp	r5, r2
 8008796:	d002      	beq.n	800879e <__mcmp+0x2a>
 8008798:	d304      	bcc.n	80087a4 <__mcmp+0x30>
 800879a:	2001      	movs	r0, #1
 800879c:	bd30      	pop	{r4, r5, pc}
 800879e:	42a3      	cmp	r3, r4
 80087a0:	d3f4      	bcc.n	800878c <__mcmp+0x18>
 80087a2:	e7fb      	b.n	800879c <__mcmp+0x28>
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	e7f8      	b.n	800879c <__mcmp+0x28>
	...

080087ac <__mdiff>:
 80087ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b0:	460d      	mov	r5, r1
 80087b2:	4607      	mov	r7, r0
 80087b4:	4611      	mov	r1, r2
 80087b6:	4628      	mov	r0, r5
 80087b8:	4614      	mov	r4, r2
 80087ba:	f7ff ffdb 	bl	8008774 <__mcmp>
 80087be:	1e06      	subs	r6, r0, #0
 80087c0:	d111      	bne.n	80087e6 <__mdiff+0x3a>
 80087c2:	4631      	mov	r1, r6
 80087c4:	4638      	mov	r0, r7
 80087c6:	f7ff fd5b 	bl	8008280 <_Balloc>
 80087ca:	4602      	mov	r2, r0
 80087cc:	b928      	cbnz	r0, 80087da <__mdiff+0x2e>
 80087ce:	f240 2137 	movw	r1, #567	; 0x237
 80087d2:	4b3a      	ldr	r3, [pc, #232]	; (80088bc <__mdiff+0x110>)
 80087d4:	483a      	ldr	r0, [pc, #232]	; (80088c0 <__mdiff+0x114>)
 80087d6:	f000 fb59 	bl	8008e8c <__assert_func>
 80087da:	2301      	movs	r3, #1
 80087dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80087e0:	4610      	mov	r0, r2
 80087e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e6:	bfa4      	itt	ge
 80087e8:	4623      	movge	r3, r4
 80087ea:	462c      	movge	r4, r5
 80087ec:	4638      	mov	r0, r7
 80087ee:	6861      	ldr	r1, [r4, #4]
 80087f0:	bfa6      	itte	ge
 80087f2:	461d      	movge	r5, r3
 80087f4:	2600      	movge	r6, #0
 80087f6:	2601      	movlt	r6, #1
 80087f8:	f7ff fd42 	bl	8008280 <_Balloc>
 80087fc:	4602      	mov	r2, r0
 80087fe:	b918      	cbnz	r0, 8008808 <__mdiff+0x5c>
 8008800:	f240 2145 	movw	r1, #581	; 0x245
 8008804:	4b2d      	ldr	r3, [pc, #180]	; (80088bc <__mdiff+0x110>)
 8008806:	e7e5      	b.n	80087d4 <__mdiff+0x28>
 8008808:	f102 0814 	add.w	r8, r2, #20
 800880c:	46c2      	mov	sl, r8
 800880e:	f04f 0c00 	mov.w	ip, #0
 8008812:	6927      	ldr	r7, [r4, #16]
 8008814:	60c6      	str	r6, [r0, #12]
 8008816:	692e      	ldr	r6, [r5, #16]
 8008818:	f104 0014 	add.w	r0, r4, #20
 800881c:	f105 0914 	add.w	r9, r5, #20
 8008820:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008824:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008828:	3410      	adds	r4, #16
 800882a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800882e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008832:	fa1f f18b 	uxth.w	r1, fp
 8008836:	4461      	add	r1, ip
 8008838:	fa1f fc83 	uxth.w	ip, r3
 800883c:	0c1b      	lsrs	r3, r3, #16
 800883e:	eba1 010c 	sub.w	r1, r1, ip
 8008842:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008846:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800884a:	b289      	uxth	r1, r1
 800884c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008850:	454e      	cmp	r6, r9
 8008852:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008856:	f84a 1b04 	str.w	r1, [sl], #4
 800885a:	d8e6      	bhi.n	800882a <__mdiff+0x7e>
 800885c:	1b73      	subs	r3, r6, r5
 800885e:	3b15      	subs	r3, #21
 8008860:	f023 0303 	bic.w	r3, r3, #3
 8008864:	3515      	adds	r5, #21
 8008866:	3304      	adds	r3, #4
 8008868:	42ae      	cmp	r6, r5
 800886a:	bf38      	it	cc
 800886c:	2304      	movcc	r3, #4
 800886e:	4418      	add	r0, r3
 8008870:	4443      	add	r3, r8
 8008872:	461e      	mov	r6, r3
 8008874:	4605      	mov	r5, r0
 8008876:	4575      	cmp	r5, lr
 8008878:	d30e      	bcc.n	8008898 <__mdiff+0xec>
 800887a:	f10e 0103 	add.w	r1, lr, #3
 800887e:	1a09      	subs	r1, r1, r0
 8008880:	f021 0103 	bic.w	r1, r1, #3
 8008884:	3803      	subs	r0, #3
 8008886:	4586      	cmp	lr, r0
 8008888:	bf38      	it	cc
 800888a:	2100      	movcc	r1, #0
 800888c:	440b      	add	r3, r1
 800888e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008892:	b189      	cbz	r1, 80088b8 <__mdiff+0x10c>
 8008894:	6117      	str	r7, [r2, #16]
 8008896:	e7a3      	b.n	80087e0 <__mdiff+0x34>
 8008898:	f855 8b04 	ldr.w	r8, [r5], #4
 800889c:	fa1f f188 	uxth.w	r1, r8
 80088a0:	4461      	add	r1, ip
 80088a2:	140c      	asrs	r4, r1, #16
 80088a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80088a8:	b289      	uxth	r1, r1
 80088aa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80088ae:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80088b2:	f846 1b04 	str.w	r1, [r6], #4
 80088b6:	e7de      	b.n	8008876 <__mdiff+0xca>
 80088b8:	3f01      	subs	r7, #1
 80088ba:	e7e8      	b.n	800888e <__mdiff+0xe2>
 80088bc:	0800a33e 	.word	0x0800a33e
 80088c0:	0800a34f 	.word	0x0800a34f

080088c4 <__d2b>:
 80088c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088c6:	2101      	movs	r1, #1
 80088c8:	4617      	mov	r7, r2
 80088ca:	461c      	mov	r4, r3
 80088cc:	9e08      	ldr	r6, [sp, #32]
 80088ce:	f7ff fcd7 	bl	8008280 <_Balloc>
 80088d2:	4605      	mov	r5, r0
 80088d4:	b930      	cbnz	r0, 80088e4 <__d2b+0x20>
 80088d6:	4602      	mov	r2, r0
 80088d8:	f240 310f 	movw	r1, #783	; 0x30f
 80088dc:	4b22      	ldr	r3, [pc, #136]	; (8008968 <__d2b+0xa4>)
 80088de:	4823      	ldr	r0, [pc, #140]	; (800896c <__d2b+0xa8>)
 80088e0:	f000 fad4 	bl	8008e8c <__assert_func>
 80088e4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80088e8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80088ec:	bb24      	cbnz	r4, 8008938 <__d2b+0x74>
 80088ee:	2f00      	cmp	r7, #0
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	d026      	beq.n	8008942 <__d2b+0x7e>
 80088f4:	4668      	mov	r0, sp
 80088f6:	9700      	str	r7, [sp, #0]
 80088f8:	f7ff fd8a 	bl	8008410 <__lo0bits>
 80088fc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008900:	b1e8      	cbz	r0, 800893e <__d2b+0x7a>
 8008902:	f1c0 0320 	rsb	r3, r0, #32
 8008906:	fa02 f303 	lsl.w	r3, r2, r3
 800890a:	430b      	orrs	r3, r1
 800890c:	40c2      	lsrs	r2, r0
 800890e:	616b      	str	r3, [r5, #20]
 8008910:	9201      	str	r2, [sp, #4]
 8008912:	9b01      	ldr	r3, [sp, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	bf14      	ite	ne
 8008918:	2102      	movne	r1, #2
 800891a:	2101      	moveq	r1, #1
 800891c:	61ab      	str	r3, [r5, #24]
 800891e:	6129      	str	r1, [r5, #16]
 8008920:	b1bc      	cbz	r4, 8008952 <__d2b+0x8e>
 8008922:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008926:	4404      	add	r4, r0
 8008928:	6034      	str	r4, [r6, #0]
 800892a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800892e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008930:	6018      	str	r0, [r3, #0]
 8008932:	4628      	mov	r0, r5
 8008934:	b003      	add	sp, #12
 8008936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008938:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800893c:	e7d7      	b.n	80088ee <__d2b+0x2a>
 800893e:	6169      	str	r1, [r5, #20]
 8008940:	e7e7      	b.n	8008912 <__d2b+0x4e>
 8008942:	a801      	add	r0, sp, #4
 8008944:	f7ff fd64 	bl	8008410 <__lo0bits>
 8008948:	9b01      	ldr	r3, [sp, #4]
 800894a:	2101      	movs	r1, #1
 800894c:	616b      	str	r3, [r5, #20]
 800894e:	3020      	adds	r0, #32
 8008950:	e7e5      	b.n	800891e <__d2b+0x5a>
 8008952:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008956:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800895a:	6030      	str	r0, [r6, #0]
 800895c:	6918      	ldr	r0, [r3, #16]
 800895e:	f7ff fd37 	bl	80083d0 <__hi0bits>
 8008962:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008966:	e7e2      	b.n	800892e <__d2b+0x6a>
 8008968:	0800a33e 	.word	0x0800a33e
 800896c:	0800a34f 	.word	0x0800a34f

08008970 <__sfputc_r>:
 8008970:	6893      	ldr	r3, [r2, #8]
 8008972:	b410      	push	{r4}
 8008974:	3b01      	subs	r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	6093      	str	r3, [r2, #8]
 800897a:	da07      	bge.n	800898c <__sfputc_r+0x1c>
 800897c:	6994      	ldr	r4, [r2, #24]
 800897e:	42a3      	cmp	r3, r4
 8008980:	db01      	blt.n	8008986 <__sfputc_r+0x16>
 8008982:	290a      	cmp	r1, #10
 8008984:	d102      	bne.n	800898c <__sfputc_r+0x1c>
 8008986:	bc10      	pop	{r4}
 8008988:	f7fe bbed 	b.w	8007166 <__swbuf_r>
 800898c:	6813      	ldr	r3, [r2, #0]
 800898e:	1c58      	adds	r0, r3, #1
 8008990:	6010      	str	r0, [r2, #0]
 8008992:	7019      	strb	r1, [r3, #0]
 8008994:	4608      	mov	r0, r1
 8008996:	bc10      	pop	{r4}
 8008998:	4770      	bx	lr

0800899a <__sfputs_r>:
 800899a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899c:	4606      	mov	r6, r0
 800899e:	460f      	mov	r7, r1
 80089a0:	4614      	mov	r4, r2
 80089a2:	18d5      	adds	r5, r2, r3
 80089a4:	42ac      	cmp	r4, r5
 80089a6:	d101      	bne.n	80089ac <__sfputs_r+0x12>
 80089a8:	2000      	movs	r0, #0
 80089aa:	e007      	b.n	80089bc <__sfputs_r+0x22>
 80089ac:	463a      	mov	r2, r7
 80089ae:	4630      	mov	r0, r6
 80089b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089b4:	f7ff ffdc 	bl	8008970 <__sfputc_r>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d1f3      	bne.n	80089a4 <__sfputs_r+0xa>
 80089bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089c0 <_vfiprintf_r>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	460d      	mov	r5, r1
 80089c6:	4614      	mov	r4, r2
 80089c8:	4698      	mov	r8, r3
 80089ca:	4606      	mov	r6, r0
 80089cc:	b09d      	sub	sp, #116	; 0x74
 80089ce:	b118      	cbz	r0, 80089d8 <_vfiprintf_r+0x18>
 80089d0:	6a03      	ldr	r3, [r0, #32]
 80089d2:	b90b      	cbnz	r3, 80089d8 <_vfiprintf_r+0x18>
 80089d4:	f7fe fae0 	bl	8006f98 <__sinit>
 80089d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089da:	07d9      	lsls	r1, r3, #31
 80089dc:	d405      	bmi.n	80089ea <_vfiprintf_r+0x2a>
 80089de:	89ab      	ldrh	r3, [r5, #12]
 80089e0:	059a      	lsls	r2, r3, #22
 80089e2:	d402      	bmi.n	80089ea <_vfiprintf_r+0x2a>
 80089e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089e6:	f7fe fcd0 	bl	800738a <__retarget_lock_acquire_recursive>
 80089ea:	89ab      	ldrh	r3, [r5, #12]
 80089ec:	071b      	lsls	r3, r3, #28
 80089ee:	d501      	bpl.n	80089f4 <_vfiprintf_r+0x34>
 80089f0:	692b      	ldr	r3, [r5, #16]
 80089f2:	b99b      	cbnz	r3, 8008a1c <_vfiprintf_r+0x5c>
 80089f4:	4629      	mov	r1, r5
 80089f6:	4630      	mov	r0, r6
 80089f8:	f7fe fbf2 	bl	80071e0 <__swsetup_r>
 80089fc:	b170      	cbz	r0, 8008a1c <_vfiprintf_r+0x5c>
 80089fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a00:	07dc      	lsls	r4, r3, #31
 8008a02:	d504      	bpl.n	8008a0e <_vfiprintf_r+0x4e>
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295
 8008a08:	b01d      	add	sp, #116	; 0x74
 8008a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0e:	89ab      	ldrh	r3, [r5, #12]
 8008a10:	0598      	lsls	r0, r3, #22
 8008a12:	d4f7      	bmi.n	8008a04 <_vfiprintf_r+0x44>
 8008a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a16:	f7fe fcb9 	bl	800738c <__retarget_lock_release_recursive>
 8008a1a:	e7f3      	b.n	8008a04 <_vfiprintf_r+0x44>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a20:	2320      	movs	r3, #32
 8008a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a26:	2330      	movs	r3, #48	; 0x30
 8008a28:	f04f 0901 	mov.w	r9, #1
 8008a2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a30:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008be0 <_vfiprintf_r+0x220>
 8008a34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a38:	4623      	mov	r3, r4
 8008a3a:	469a      	mov	sl, r3
 8008a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a40:	b10a      	cbz	r2, 8008a46 <_vfiprintf_r+0x86>
 8008a42:	2a25      	cmp	r2, #37	; 0x25
 8008a44:	d1f9      	bne.n	8008a3a <_vfiprintf_r+0x7a>
 8008a46:	ebba 0b04 	subs.w	fp, sl, r4
 8008a4a:	d00b      	beq.n	8008a64 <_vfiprintf_r+0xa4>
 8008a4c:	465b      	mov	r3, fp
 8008a4e:	4622      	mov	r2, r4
 8008a50:	4629      	mov	r1, r5
 8008a52:	4630      	mov	r0, r6
 8008a54:	f7ff ffa1 	bl	800899a <__sfputs_r>
 8008a58:	3001      	adds	r0, #1
 8008a5a:	f000 80a9 	beq.w	8008bb0 <_vfiprintf_r+0x1f0>
 8008a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a60:	445a      	add	r2, fp
 8008a62:	9209      	str	r2, [sp, #36]	; 0x24
 8008a64:	f89a 3000 	ldrb.w	r3, [sl]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 80a1 	beq.w	8008bb0 <_vfiprintf_r+0x1f0>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f04f 32ff 	mov.w	r2, #4294967295
 8008a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a78:	f10a 0a01 	add.w	sl, sl, #1
 8008a7c:	9304      	str	r3, [sp, #16]
 8008a7e:	9307      	str	r3, [sp, #28]
 8008a80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a84:	931a      	str	r3, [sp, #104]	; 0x68
 8008a86:	4654      	mov	r4, sl
 8008a88:	2205      	movs	r2, #5
 8008a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a8e:	4854      	ldr	r0, [pc, #336]	; (8008be0 <_vfiprintf_r+0x220>)
 8008a90:	f7fe fc7d 	bl	800738e <memchr>
 8008a94:	9a04      	ldr	r2, [sp, #16]
 8008a96:	b9d8      	cbnz	r0, 8008ad0 <_vfiprintf_r+0x110>
 8008a98:	06d1      	lsls	r1, r2, #27
 8008a9a:	bf44      	itt	mi
 8008a9c:	2320      	movmi	r3, #32
 8008a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aa2:	0713      	lsls	r3, r2, #28
 8008aa4:	bf44      	itt	mi
 8008aa6:	232b      	movmi	r3, #43	; 0x2b
 8008aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aac:	f89a 3000 	ldrb.w	r3, [sl]
 8008ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ab2:	d015      	beq.n	8008ae0 <_vfiprintf_r+0x120>
 8008ab4:	4654      	mov	r4, sl
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	f04f 0c0a 	mov.w	ip, #10
 8008abc:	9a07      	ldr	r2, [sp, #28]
 8008abe:	4621      	mov	r1, r4
 8008ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ac4:	3b30      	subs	r3, #48	; 0x30
 8008ac6:	2b09      	cmp	r3, #9
 8008ac8:	d94d      	bls.n	8008b66 <_vfiprintf_r+0x1a6>
 8008aca:	b1b0      	cbz	r0, 8008afa <_vfiprintf_r+0x13a>
 8008acc:	9207      	str	r2, [sp, #28]
 8008ace:	e014      	b.n	8008afa <_vfiprintf_r+0x13a>
 8008ad0:	eba0 0308 	sub.w	r3, r0, r8
 8008ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	46a2      	mov	sl, r4
 8008adc:	9304      	str	r3, [sp, #16]
 8008ade:	e7d2      	b.n	8008a86 <_vfiprintf_r+0xc6>
 8008ae0:	9b03      	ldr	r3, [sp, #12]
 8008ae2:	1d19      	adds	r1, r3, #4
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	9103      	str	r1, [sp, #12]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	bfbb      	ittet	lt
 8008aec:	425b      	neglt	r3, r3
 8008aee:	f042 0202 	orrlt.w	r2, r2, #2
 8008af2:	9307      	strge	r3, [sp, #28]
 8008af4:	9307      	strlt	r3, [sp, #28]
 8008af6:	bfb8      	it	lt
 8008af8:	9204      	strlt	r2, [sp, #16]
 8008afa:	7823      	ldrb	r3, [r4, #0]
 8008afc:	2b2e      	cmp	r3, #46	; 0x2e
 8008afe:	d10c      	bne.n	8008b1a <_vfiprintf_r+0x15a>
 8008b00:	7863      	ldrb	r3, [r4, #1]
 8008b02:	2b2a      	cmp	r3, #42	; 0x2a
 8008b04:	d134      	bne.n	8008b70 <_vfiprintf_r+0x1b0>
 8008b06:	9b03      	ldr	r3, [sp, #12]
 8008b08:	3402      	adds	r4, #2
 8008b0a:	1d1a      	adds	r2, r3, #4
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	9203      	str	r2, [sp, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	bfb8      	it	lt
 8008b14:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b18:	9305      	str	r3, [sp, #20]
 8008b1a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008be4 <_vfiprintf_r+0x224>
 8008b1e:	2203      	movs	r2, #3
 8008b20:	4650      	mov	r0, sl
 8008b22:	7821      	ldrb	r1, [r4, #0]
 8008b24:	f7fe fc33 	bl	800738e <memchr>
 8008b28:	b138      	cbz	r0, 8008b3a <_vfiprintf_r+0x17a>
 8008b2a:	2240      	movs	r2, #64	; 0x40
 8008b2c:	9b04      	ldr	r3, [sp, #16]
 8008b2e:	eba0 000a 	sub.w	r0, r0, sl
 8008b32:	4082      	lsls	r2, r0
 8008b34:	4313      	orrs	r3, r2
 8008b36:	3401      	adds	r4, #1
 8008b38:	9304      	str	r3, [sp, #16]
 8008b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b3e:	2206      	movs	r2, #6
 8008b40:	4829      	ldr	r0, [pc, #164]	; (8008be8 <_vfiprintf_r+0x228>)
 8008b42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b46:	f7fe fc22 	bl	800738e <memchr>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d03f      	beq.n	8008bce <_vfiprintf_r+0x20e>
 8008b4e:	4b27      	ldr	r3, [pc, #156]	; (8008bec <_vfiprintf_r+0x22c>)
 8008b50:	bb1b      	cbnz	r3, 8008b9a <_vfiprintf_r+0x1da>
 8008b52:	9b03      	ldr	r3, [sp, #12]
 8008b54:	3307      	adds	r3, #7
 8008b56:	f023 0307 	bic.w	r3, r3, #7
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	9303      	str	r3, [sp, #12]
 8008b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b60:	443b      	add	r3, r7
 8008b62:	9309      	str	r3, [sp, #36]	; 0x24
 8008b64:	e768      	b.n	8008a38 <_vfiprintf_r+0x78>
 8008b66:	460c      	mov	r4, r1
 8008b68:	2001      	movs	r0, #1
 8008b6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b6e:	e7a6      	b.n	8008abe <_vfiprintf_r+0xfe>
 8008b70:	2300      	movs	r3, #0
 8008b72:	f04f 0c0a 	mov.w	ip, #10
 8008b76:	4619      	mov	r1, r3
 8008b78:	3401      	adds	r4, #1
 8008b7a:	9305      	str	r3, [sp, #20]
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b82:	3a30      	subs	r2, #48	; 0x30
 8008b84:	2a09      	cmp	r2, #9
 8008b86:	d903      	bls.n	8008b90 <_vfiprintf_r+0x1d0>
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d0c6      	beq.n	8008b1a <_vfiprintf_r+0x15a>
 8008b8c:	9105      	str	r1, [sp, #20]
 8008b8e:	e7c4      	b.n	8008b1a <_vfiprintf_r+0x15a>
 8008b90:	4604      	mov	r4, r0
 8008b92:	2301      	movs	r3, #1
 8008b94:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b98:	e7f0      	b.n	8008b7c <_vfiprintf_r+0x1bc>
 8008b9a:	ab03      	add	r3, sp, #12
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	462a      	mov	r2, r5
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	4b13      	ldr	r3, [pc, #76]	; (8008bf0 <_vfiprintf_r+0x230>)
 8008ba4:	a904      	add	r1, sp, #16
 8008ba6:	f7fd fda9 	bl	80066fc <_printf_float>
 8008baa:	4607      	mov	r7, r0
 8008bac:	1c78      	adds	r0, r7, #1
 8008bae:	d1d6      	bne.n	8008b5e <_vfiprintf_r+0x19e>
 8008bb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bb2:	07d9      	lsls	r1, r3, #31
 8008bb4:	d405      	bmi.n	8008bc2 <_vfiprintf_r+0x202>
 8008bb6:	89ab      	ldrh	r3, [r5, #12]
 8008bb8:	059a      	lsls	r2, r3, #22
 8008bba:	d402      	bmi.n	8008bc2 <_vfiprintf_r+0x202>
 8008bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bbe:	f7fe fbe5 	bl	800738c <__retarget_lock_release_recursive>
 8008bc2:	89ab      	ldrh	r3, [r5, #12]
 8008bc4:	065b      	lsls	r3, r3, #25
 8008bc6:	f53f af1d 	bmi.w	8008a04 <_vfiprintf_r+0x44>
 8008bca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bcc:	e71c      	b.n	8008a08 <_vfiprintf_r+0x48>
 8008bce:	ab03      	add	r3, sp, #12
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	462a      	mov	r2, r5
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	4b06      	ldr	r3, [pc, #24]	; (8008bf0 <_vfiprintf_r+0x230>)
 8008bd8:	a904      	add	r1, sp, #16
 8008bda:	f7fe f82f 	bl	8006c3c <_printf_i>
 8008bde:	e7e4      	b.n	8008baa <_vfiprintf_r+0x1ea>
 8008be0:	0800a4a4 	.word	0x0800a4a4
 8008be4:	0800a4aa 	.word	0x0800a4aa
 8008be8:	0800a4ae 	.word	0x0800a4ae
 8008bec:	080066fd 	.word	0x080066fd
 8008bf0:	0800899b 	.word	0x0800899b

08008bf4 <__sflush_r>:
 8008bf4:	898a      	ldrh	r2, [r1, #12]
 8008bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	0710      	lsls	r0, r2, #28
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	d457      	bmi.n	8008cb0 <__sflush_r+0xbc>
 8008c00:	684b      	ldr	r3, [r1, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	dc04      	bgt.n	8008c10 <__sflush_r+0x1c>
 8008c06:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	dc01      	bgt.n	8008c10 <__sflush_r+0x1c>
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c12:	2e00      	cmp	r6, #0
 8008c14:	d0fa      	beq.n	8008c0c <__sflush_r+0x18>
 8008c16:	2300      	movs	r3, #0
 8008c18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c1c:	682f      	ldr	r7, [r5, #0]
 8008c1e:	6a21      	ldr	r1, [r4, #32]
 8008c20:	602b      	str	r3, [r5, #0]
 8008c22:	d032      	beq.n	8008c8a <__sflush_r+0x96>
 8008c24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	075a      	lsls	r2, r3, #29
 8008c2a:	d505      	bpl.n	8008c38 <__sflush_r+0x44>
 8008c2c:	6863      	ldr	r3, [r4, #4]
 8008c2e:	1ac0      	subs	r0, r0, r3
 8008c30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c32:	b10b      	cbz	r3, 8008c38 <__sflush_r+0x44>
 8008c34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c36:	1ac0      	subs	r0, r0, r3
 8008c38:	2300      	movs	r3, #0
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c3e:	4628      	mov	r0, r5
 8008c40:	6a21      	ldr	r1, [r4, #32]
 8008c42:	47b0      	blx	r6
 8008c44:	1c43      	adds	r3, r0, #1
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	d106      	bne.n	8008c58 <__sflush_r+0x64>
 8008c4a:	6829      	ldr	r1, [r5, #0]
 8008c4c:	291d      	cmp	r1, #29
 8008c4e:	d82b      	bhi.n	8008ca8 <__sflush_r+0xb4>
 8008c50:	4a28      	ldr	r2, [pc, #160]	; (8008cf4 <__sflush_r+0x100>)
 8008c52:	410a      	asrs	r2, r1
 8008c54:	07d6      	lsls	r6, r2, #31
 8008c56:	d427      	bmi.n	8008ca8 <__sflush_r+0xb4>
 8008c58:	2200      	movs	r2, #0
 8008c5a:	6062      	str	r2, [r4, #4]
 8008c5c:	6922      	ldr	r2, [r4, #16]
 8008c5e:	04d9      	lsls	r1, r3, #19
 8008c60:	6022      	str	r2, [r4, #0]
 8008c62:	d504      	bpl.n	8008c6e <__sflush_r+0x7a>
 8008c64:	1c42      	adds	r2, r0, #1
 8008c66:	d101      	bne.n	8008c6c <__sflush_r+0x78>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	b903      	cbnz	r3, 8008c6e <__sflush_r+0x7a>
 8008c6c:	6560      	str	r0, [r4, #84]	; 0x54
 8008c6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c70:	602f      	str	r7, [r5, #0]
 8008c72:	2900      	cmp	r1, #0
 8008c74:	d0ca      	beq.n	8008c0c <__sflush_r+0x18>
 8008c76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c7a:	4299      	cmp	r1, r3
 8008c7c:	d002      	beq.n	8008c84 <__sflush_r+0x90>
 8008c7e:	4628      	mov	r0, r5
 8008c80:	f7ff fa02 	bl	8008088 <_free_r>
 8008c84:	2000      	movs	r0, #0
 8008c86:	6360      	str	r0, [r4, #52]	; 0x34
 8008c88:	e7c1      	b.n	8008c0e <__sflush_r+0x1a>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	47b0      	blx	r6
 8008c90:	1c41      	adds	r1, r0, #1
 8008c92:	d1c8      	bne.n	8008c26 <__sflush_r+0x32>
 8008c94:	682b      	ldr	r3, [r5, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0c5      	beq.n	8008c26 <__sflush_r+0x32>
 8008c9a:	2b1d      	cmp	r3, #29
 8008c9c:	d001      	beq.n	8008ca2 <__sflush_r+0xae>
 8008c9e:	2b16      	cmp	r3, #22
 8008ca0:	d101      	bne.n	8008ca6 <__sflush_r+0xb2>
 8008ca2:	602f      	str	r7, [r5, #0]
 8008ca4:	e7b2      	b.n	8008c0c <__sflush_r+0x18>
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cac:	81a3      	strh	r3, [r4, #12]
 8008cae:	e7ae      	b.n	8008c0e <__sflush_r+0x1a>
 8008cb0:	690f      	ldr	r7, [r1, #16]
 8008cb2:	2f00      	cmp	r7, #0
 8008cb4:	d0aa      	beq.n	8008c0c <__sflush_r+0x18>
 8008cb6:	0793      	lsls	r3, r2, #30
 8008cb8:	bf18      	it	ne
 8008cba:	2300      	movne	r3, #0
 8008cbc:	680e      	ldr	r6, [r1, #0]
 8008cbe:	bf08      	it	eq
 8008cc0:	694b      	ldreq	r3, [r1, #20]
 8008cc2:	1bf6      	subs	r6, r6, r7
 8008cc4:	600f      	str	r7, [r1, #0]
 8008cc6:	608b      	str	r3, [r1, #8]
 8008cc8:	2e00      	cmp	r6, #0
 8008cca:	dd9f      	ble.n	8008c0c <__sflush_r+0x18>
 8008ccc:	4633      	mov	r3, r6
 8008cce:	463a      	mov	r2, r7
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	6a21      	ldr	r1, [r4, #32]
 8008cd4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008cd8:	47e0      	blx	ip
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	dc06      	bgt.n	8008cec <__sflush_r+0xf8>
 8008cde:	89a3      	ldrh	r3, [r4, #12]
 8008ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	e790      	b.n	8008c0e <__sflush_r+0x1a>
 8008cec:	4407      	add	r7, r0
 8008cee:	1a36      	subs	r6, r6, r0
 8008cf0:	e7ea      	b.n	8008cc8 <__sflush_r+0xd4>
 8008cf2:	bf00      	nop
 8008cf4:	dfbffffe 	.word	0xdfbffffe

08008cf8 <_fflush_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	690b      	ldr	r3, [r1, #16]
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	460c      	mov	r4, r1
 8008d00:	b913      	cbnz	r3, 8008d08 <_fflush_r+0x10>
 8008d02:	2500      	movs	r5, #0
 8008d04:	4628      	mov	r0, r5
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	b118      	cbz	r0, 8008d12 <_fflush_r+0x1a>
 8008d0a:	6a03      	ldr	r3, [r0, #32]
 8008d0c:	b90b      	cbnz	r3, 8008d12 <_fflush_r+0x1a>
 8008d0e:	f7fe f943 	bl	8006f98 <__sinit>
 8008d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0f3      	beq.n	8008d02 <_fflush_r+0xa>
 8008d1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d1c:	07d0      	lsls	r0, r2, #31
 8008d1e:	d404      	bmi.n	8008d2a <_fflush_r+0x32>
 8008d20:	0599      	lsls	r1, r3, #22
 8008d22:	d402      	bmi.n	8008d2a <_fflush_r+0x32>
 8008d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d26:	f7fe fb30 	bl	800738a <__retarget_lock_acquire_recursive>
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	f7ff ff61 	bl	8008bf4 <__sflush_r>
 8008d32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d34:	4605      	mov	r5, r0
 8008d36:	07da      	lsls	r2, r3, #31
 8008d38:	d4e4      	bmi.n	8008d04 <_fflush_r+0xc>
 8008d3a:	89a3      	ldrh	r3, [r4, #12]
 8008d3c:	059b      	lsls	r3, r3, #22
 8008d3e:	d4e1      	bmi.n	8008d04 <_fflush_r+0xc>
 8008d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d42:	f7fe fb23 	bl	800738c <__retarget_lock_release_recursive>
 8008d46:	e7dd      	b.n	8008d04 <_fflush_r+0xc>

08008d48 <__swhatbuf_r>:
 8008d48:	b570      	push	{r4, r5, r6, lr}
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d50:	4615      	mov	r5, r2
 8008d52:	2900      	cmp	r1, #0
 8008d54:	461e      	mov	r6, r3
 8008d56:	b096      	sub	sp, #88	; 0x58
 8008d58:	da0c      	bge.n	8008d74 <__swhatbuf_r+0x2c>
 8008d5a:	89a3      	ldrh	r3, [r4, #12]
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008d62:	bf0c      	ite	eq
 8008d64:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008d68:	2340      	movne	r3, #64	; 0x40
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	6031      	str	r1, [r6, #0]
 8008d6e:	602b      	str	r3, [r5, #0]
 8008d70:	b016      	add	sp, #88	; 0x58
 8008d72:	bd70      	pop	{r4, r5, r6, pc}
 8008d74:	466a      	mov	r2, sp
 8008d76:	f000 f849 	bl	8008e0c <_fstat_r>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	dbed      	blt.n	8008d5a <__swhatbuf_r+0x12>
 8008d7e:	9901      	ldr	r1, [sp, #4]
 8008d80:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008d84:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008d88:	4259      	negs	r1, r3
 8008d8a:	4159      	adcs	r1, r3
 8008d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d90:	e7eb      	b.n	8008d6a <__swhatbuf_r+0x22>

08008d92 <__smakebuf_r>:
 8008d92:	898b      	ldrh	r3, [r1, #12]
 8008d94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d96:	079d      	lsls	r5, r3, #30
 8008d98:	4606      	mov	r6, r0
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	d507      	bpl.n	8008dae <__smakebuf_r+0x1c>
 8008d9e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008da2:	6023      	str	r3, [r4, #0]
 8008da4:	6123      	str	r3, [r4, #16]
 8008da6:	2301      	movs	r3, #1
 8008da8:	6163      	str	r3, [r4, #20]
 8008daa:	b002      	add	sp, #8
 8008dac:	bd70      	pop	{r4, r5, r6, pc}
 8008dae:	466a      	mov	r2, sp
 8008db0:	ab01      	add	r3, sp, #4
 8008db2:	f7ff ffc9 	bl	8008d48 <__swhatbuf_r>
 8008db6:	9900      	ldr	r1, [sp, #0]
 8008db8:	4605      	mov	r5, r0
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f7ff f9d4 	bl	8008168 <_malloc_r>
 8008dc0:	b948      	cbnz	r0, 8008dd6 <__smakebuf_r+0x44>
 8008dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dc6:	059a      	lsls	r2, r3, #22
 8008dc8:	d4ef      	bmi.n	8008daa <__smakebuf_r+0x18>
 8008dca:	f023 0303 	bic.w	r3, r3, #3
 8008dce:	f043 0302 	orr.w	r3, r3, #2
 8008dd2:	81a3      	strh	r3, [r4, #12]
 8008dd4:	e7e3      	b.n	8008d9e <__smakebuf_r+0xc>
 8008dd6:	89a3      	ldrh	r3, [r4, #12]
 8008dd8:	6020      	str	r0, [r4, #0]
 8008dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dde:	81a3      	strh	r3, [r4, #12]
 8008de0:	9b00      	ldr	r3, [sp, #0]
 8008de2:	6120      	str	r0, [r4, #16]
 8008de4:	6163      	str	r3, [r4, #20]
 8008de6:	9b01      	ldr	r3, [sp, #4]
 8008de8:	b15b      	cbz	r3, 8008e02 <__smakebuf_r+0x70>
 8008dea:	4630      	mov	r0, r6
 8008dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008df0:	f000 f81e 	bl	8008e30 <_isatty_r>
 8008df4:	b128      	cbz	r0, 8008e02 <__smakebuf_r+0x70>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	f023 0303 	bic.w	r3, r3, #3
 8008dfc:	f043 0301 	orr.w	r3, r3, #1
 8008e00:	81a3      	strh	r3, [r4, #12]
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	431d      	orrs	r5, r3
 8008e06:	81a5      	strh	r5, [r4, #12]
 8008e08:	e7cf      	b.n	8008daa <__smakebuf_r+0x18>
	...

08008e0c <_fstat_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	2300      	movs	r3, #0
 8008e10:	4d06      	ldr	r5, [pc, #24]	; (8008e2c <_fstat_r+0x20>)
 8008e12:	4604      	mov	r4, r0
 8008e14:	4608      	mov	r0, r1
 8008e16:	4611      	mov	r1, r2
 8008e18:	602b      	str	r3, [r5, #0]
 8008e1a:	f7fa f950 	bl	80030be <_fstat>
 8008e1e:	1c43      	adds	r3, r0, #1
 8008e20:	d102      	bne.n	8008e28 <_fstat_r+0x1c>
 8008e22:	682b      	ldr	r3, [r5, #0]
 8008e24:	b103      	cbz	r3, 8008e28 <_fstat_r+0x1c>
 8008e26:	6023      	str	r3, [r4, #0]
 8008e28:	bd38      	pop	{r3, r4, r5, pc}
 8008e2a:	bf00      	nop
 8008e2c:	200004d8 	.word	0x200004d8

08008e30 <_isatty_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	2300      	movs	r3, #0
 8008e34:	4d05      	ldr	r5, [pc, #20]	; (8008e4c <_isatty_r+0x1c>)
 8008e36:	4604      	mov	r4, r0
 8008e38:	4608      	mov	r0, r1
 8008e3a:	602b      	str	r3, [r5, #0]
 8008e3c:	f7fa f94e 	bl	80030dc <_isatty>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_isatty_r+0x1a>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_isatty_r+0x1a>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	200004d8 	.word	0x200004d8

08008e50 <_sbrk_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	2300      	movs	r3, #0
 8008e54:	4d05      	ldr	r5, [pc, #20]	; (8008e6c <_sbrk_r+0x1c>)
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	602b      	str	r3, [r5, #0]
 8008e5c:	f7fa f954 	bl	8003108 <_sbrk>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	d102      	bne.n	8008e6a <_sbrk_r+0x1a>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	b103      	cbz	r3, 8008e6a <_sbrk_r+0x1a>
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
 8008e6c:	200004d8 	.word	0x200004d8

08008e70 <memcpy>:
 8008e70:	440a      	add	r2, r1
 8008e72:	4291      	cmp	r1, r2
 8008e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e78:	d100      	bne.n	8008e7c <memcpy+0xc>
 8008e7a:	4770      	bx	lr
 8008e7c:	b510      	push	{r4, lr}
 8008e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e82:	4291      	cmp	r1, r2
 8008e84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e88:	d1f9      	bne.n	8008e7e <memcpy+0xe>
 8008e8a:	bd10      	pop	{r4, pc}

08008e8c <__assert_func>:
 8008e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e8e:	4614      	mov	r4, r2
 8008e90:	461a      	mov	r2, r3
 8008e92:	4b09      	ldr	r3, [pc, #36]	; (8008eb8 <__assert_func+0x2c>)
 8008e94:	4605      	mov	r5, r0
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68d8      	ldr	r0, [r3, #12]
 8008e9a:	b14c      	cbz	r4, 8008eb0 <__assert_func+0x24>
 8008e9c:	4b07      	ldr	r3, [pc, #28]	; (8008ebc <__assert_func+0x30>)
 8008e9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ea2:	9100      	str	r1, [sp, #0]
 8008ea4:	462b      	mov	r3, r5
 8008ea6:	4906      	ldr	r1, [pc, #24]	; (8008ec0 <__assert_func+0x34>)
 8008ea8:	f000 f842 	bl	8008f30 <fiprintf>
 8008eac:	f000 f852 	bl	8008f54 <abort>
 8008eb0:	4b04      	ldr	r3, [pc, #16]	; (8008ec4 <__assert_func+0x38>)
 8008eb2:	461c      	mov	r4, r3
 8008eb4:	e7f3      	b.n	8008e9e <__assert_func+0x12>
 8008eb6:	bf00      	nop
 8008eb8:	2000007c 	.word	0x2000007c
 8008ebc:	0800a4bf 	.word	0x0800a4bf
 8008ec0:	0800a4cc 	.word	0x0800a4cc
 8008ec4:	0800a4fa 	.word	0x0800a4fa

08008ec8 <_calloc_r>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	fba1 5402 	umull	r5, r4, r1, r2
 8008ece:	b934      	cbnz	r4, 8008ede <_calloc_r+0x16>
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	f7ff f949 	bl	8008168 <_malloc_r>
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	b928      	cbnz	r0, 8008ee6 <_calloc_r+0x1e>
 8008eda:	4630      	mov	r0, r6
 8008edc:	bd70      	pop	{r4, r5, r6, pc}
 8008ede:	220c      	movs	r2, #12
 8008ee0:	2600      	movs	r6, #0
 8008ee2:	6002      	str	r2, [r0, #0]
 8008ee4:	e7f9      	b.n	8008eda <_calloc_r+0x12>
 8008ee6:	462a      	mov	r2, r5
 8008ee8:	4621      	mov	r1, r4
 8008eea:	f7fe f9d1 	bl	8007290 <memset>
 8008eee:	e7f4      	b.n	8008eda <_calloc_r+0x12>

08008ef0 <__ascii_mbtowc>:
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	b901      	cbnz	r1, 8008ef6 <__ascii_mbtowc+0x6>
 8008ef4:	a901      	add	r1, sp, #4
 8008ef6:	b142      	cbz	r2, 8008f0a <__ascii_mbtowc+0x1a>
 8008ef8:	b14b      	cbz	r3, 8008f0e <__ascii_mbtowc+0x1e>
 8008efa:	7813      	ldrb	r3, [r2, #0]
 8008efc:	600b      	str	r3, [r1, #0]
 8008efe:	7812      	ldrb	r2, [r2, #0]
 8008f00:	1e10      	subs	r0, r2, #0
 8008f02:	bf18      	it	ne
 8008f04:	2001      	movne	r0, #1
 8008f06:	b002      	add	sp, #8
 8008f08:	4770      	bx	lr
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	e7fb      	b.n	8008f06 <__ascii_mbtowc+0x16>
 8008f0e:	f06f 0001 	mvn.w	r0, #1
 8008f12:	e7f8      	b.n	8008f06 <__ascii_mbtowc+0x16>

08008f14 <__ascii_wctomb>:
 8008f14:	4603      	mov	r3, r0
 8008f16:	4608      	mov	r0, r1
 8008f18:	b141      	cbz	r1, 8008f2c <__ascii_wctomb+0x18>
 8008f1a:	2aff      	cmp	r2, #255	; 0xff
 8008f1c:	d904      	bls.n	8008f28 <__ascii_wctomb+0x14>
 8008f1e:	228a      	movs	r2, #138	; 0x8a
 8008f20:	f04f 30ff 	mov.w	r0, #4294967295
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	4770      	bx	lr
 8008f28:	2001      	movs	r0, #1
 8008f2a:	700a      	strb	r2, [r1, #0]
 8008f2c:	4770      	bx	lr
	...

08008f30 <fiprintf>:
 8008f30:	b40e      	push	{r1, r2, r3}
 8008f32:	b503      	push	{r0, r1, lr}
 8008f34:	4601      	mov	r1, r0
 8008f36:	ab03      	add	r3, sp, #12
 8008f38:	4805      	ldr	r0, [pc, #20]	; (8008f50 <fiprintf+0x20>)
 8008f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f3e:	6800      	ldr	r0, [r0, #0]
 8008f40:	9301      	str	r3, [sp, #4]
 8008f42:	f7ff fd3d 	bl	80089c0 <_vfiprintf_r>
 8008f46:	b002      	add	sp, #8
 8008f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f4c:	b003      	add	sp, #12
 8008f4e:	4770      	bx	lr
 8008f50:	2000007c 	.word	0x2000007c

08008f54 <abort>:
 8008f54:	2006      	movs	r0, #6
 8008f56:	b508      	push	{r3, lr}
 8008f58:	f000 f82c 	bl	8008fb4 <raise>
 8008f5c:	2001      	movs	r0, #1
 8008f5e:	f7fa f87c 	bl	800305a <_exit>

08008f62 <_raise_r>:
 8008f62:	291f      	cmp	r1, #31
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4604      	mov	r4, r0
 8008f68:	460d      	mov	r5, r1
 8008f6a:	d904      	bls.n	8008f76 <_raise_r+0x14>
 8008f6c:	2316      	movs	r3, #22
 8008f6e:	6003      	str	r3, [r0, #0]
 8008f70:	f04f 30ff 	mov.w	r0, #4294967295
 8008f74:	bd38      	pop	{r3, r4, r5, pc}
 8008f76:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008f78:	b112      	cbz	r2, 8008f80 <_raise_r+0x1e>
 8008f7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f7e:	b94b      	cbnz	r3, 8008f94 <_raise_r+0x32>
 8008f80:	4620      	mov	r0, r4
 8008f82:	f000 f831 	bl	8008fe8 <_getpid_r>
 8008f86:	462a      	mov	r2, r5
 8008f88:	4601      	mov	r1, r0
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f90:	f000 b818 	b.w	8008fc4 <_kill_r>
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d00a      	beq.n	8008fae <_raise_r+0x4c>
 8008f98:	1c59      	adds	r1, r3, #1
 8008f9a:	d103      	bne.n	8008fa4 <_raise_r+0x42>
 8008f9c:	2316      	movs	r3, #22
 8008f9e:	6003      	str	r3, [r0, #0]
 8008fa0:	2001      	movs	r0, #1
 8008fa2:	e7e7      	b.n	8008f74 <_raise_r+0x12>
 8008fa4:	2400      	movs	r4, #0
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fac:	4798      	blx	r3
 8008fae:	2000      	movs	r0, #0
 8008fb0:	e7e0      	b.n	8008f74 <_raise_r+0x12>
	...

08008fb4 <raise>:
 8008fb4:	4b02      	ldr	r3, [pc, #8]	; (8008fc0 <raise+0xc>)
 8008fb6:	4601      	mov	r1, r0
 8008fb8:	6818      	ldr	r0, [r3, #0]
 8008fba:	f7ff bfd2 	b.w	8008f62 <_raise_r>
 8008fbe:	bf00      	nop
 8008fc0:	2000007c 	.word	0x2000007c

08008fc4 <_kill_r>:
 8008fc4:	b538      	push	{r3, r4, r5, lr}
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	4d06      	ldr	r5, [pc, #24]	; (8008fe4 <_kill_r+0x20>)
 8008fca:	4604      	mov	r4, r0
 8008fcc:	4608      	mov	r0, r1
 8008fce:	4611      	mov	r1, r2
 8008fd0:	602b      	str	r3, [r5, #0]
 8008fd2:	f7fa f832 	bl	800303a <_kill>
 8008fd6:	1c43      	adds	r3, r0, #1
 8008fd8:	d102      	bne.n	8008fe0 <_kill_r+0x1c>
 8008fda:	682b      	ldr	r3, [r5, #0]
 8008fdc:	b103      	cbz	r3, 8008fe0 <_kill_r+0x1c>
 8008fde:	6023      	str	r3, [r4, #0]
 8008fe0:	bd38      	pop	{r3, r4, r5, pc}
 8008fe2:	bf00      	nop
 8008fe4:	200004d8 	.word	0x200004d8

08008fe8 <_getpid_r>:
 8008fe8:	f7fa b820 	b.w	800302c <_getpid>

08008fec <fmodf>:
 8008fec:	b570      	push	{r4, r5, r6, lr}
 8008fee:	4606      	mov	r6, r0
 8008ff0:	460d      	mov	r5, r1
 8008ff2:	f000 f97f 	bl	80092f4 <__ieee754_fmodf>
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f7f8 f884 	bl	8001108 <__aeabi_fcmpun>
 8009000:	b968      	cbnz	r0, 800901e <fmodf+0x32>
 8009002:	2100      	movs	r1, #0
 8009004:	4628      	mov	r0, r5
 8009006:	f7f8 f84d 	bl	80010a4 <__aeabi_fcmpeq>
 800900a:	b140      	cbz	r0, 800901e <fmodf+0x32>
 800900c:	f7fe f992 	bl	8007334 <__errno>
 8009010:	2321      	movs	r3, #33	; 0x21
 8009012:	2100      	movs	r1, #0
 8009014:	6003      	str	r3, [r0, #0]
 8009016:	4608      	mov	r0, r1
 8009018:	f7f7 ff64 	bl	8000ee4 <__aeabi_fdiv>
 800901c:	4604      	mov	r4, r0
 800901e:	4620      	mov	r0, r4
 8009020:	bd70      	pop	{r4, r5, r6, pc}
	...

08009024 <cosf>:
 8009024:	b507      	push	{r0, r1, r2, lr}
 8009026:	4a1a      	ldr	r2, [pc, #104]	; (8009090 <cosf+0x6c>)
 8009028:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800902c:	4293      	cmp	r3, r2
 800902e:	4601      	mov	r1, r0
 8009030:	dc05      	bgt.n	800903e <cosf+0x1a>
 8009032:	2100      	movs	r1, #0
 8009034:	b003      	add	sp, #12
 8009036:	f85d eb04 	ldr.w	lr, [sp], #4
 800903a:	f000 b865 	b.w	8009108 <__kernel_cosf>
 800903e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009042:	db04      	blt.n	800904e <cosf+0x2a>
 8009044:	f7f7 fd90 	bl	8000b68 <__aeabi_fsub>
 8009048:	b003      	add	sp, #12
 800904a:	f85d fb04 	ldr.w	pc, [sp], #4
 800904e:	4669      	mov	r1, sp
 8009050:	f000 f9d0 	bl	80093f4 <__ieee754_rem_pio2f>
 8009054:	f000 0203 	and.w	r2, r0, #3
 8009058:	2a01      	cmp	r2, #1
 800905a:	d007      	beq.n	800906c <cosf+0x48>
 800905c:	2a02      	cmp	r2, #2
 800905e:	d00c      	beq.n	800907a <cosf+0x56>
 8009060:	b982      	cbnz	r2, 8009084 <cosf+0x60>
 8009062:	9901      	ldr	r1, [sp, #4]
 8009064:	9800      	ldr	r0, [sp, #0]
 8009066:	f000 f84f 	bl	8009108 <__kernel_cosf>
 800906a:	e7ed      	b.n	8009048 <cosf+0x24>
 800906c:	9901      	ldr	r1, [sp, #4]
 800906e:	9800      	ldr	r0, [sp, #0]
 8009070:	f000 f8ca 	bl	8009208 <__kernel_sinf>
 8009074:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009078:	e7e6      	b.n	8009048 <cosf+0x24>
 800907a:	9901      	ldr	r1, [sp, #4]
 800907c:	9800      	ldr	r0, [sp, #0]
 800907e:	f000 f843 	bl	8009108 <__kernel_cosf>
 8009082:	e7f7      	b.n	8009074 <cosf+0x50>
 8009084:	2201      	movs	r2, #1
 8009086:	9901      	ldr	r1, [sp, #4]
 8009088:	9800      	ldr	r0, [sp, #0]
 800908a:	f000 f8bd 	bl	8009208 <__kernel_sinf>
 800908e:	e7db      	b.n	8009048 <cosf+0x24>
 8009090:	3f490fd8 	.word	0x3f490fd8

08009094 <sinf>:
 8009094:	b507      	push	{r0, r1, r2, lr}
 8009096:	4a1b      	ldr	r2, [pc, #108]	; (8009104 <sinf+0x70>)
 8009098:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800909c:	4293      	cmp	r3, r2
 800909e:	4601      	mov	r1, r0
 80090a0:	dc06      	bgt.n	80090b0 <sinf+0x1c>
 80090a2:	2200      	movs	r2, #0
 80090a4:	2100      	movs	r1, #0
 80090a6:	b003      	add	sp, #12
 80090a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80090ac:	f000 b8ac 	b.w	8009208 <__kernel_sinf>
 80090b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80090b4:	db04      	blt.n	80090c0 <sinf+0x2c>
 80090b6:	f7f7 fd57 	bl	8000b68 <__aeabi_fsub>
 80090ba:	b003      	add	sp, #12
 80090bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80090c0:	4669      	mov	r1, sp
 80090c2:	f000 f997 	bl	80093f4 <__ieee754_rem_pio2f>
 80090c6:	f000 0003 	and.w	r0, r0, #3
 80090ca:	2801      	cmp	r0, #1
 80090cc:	d008      	beq.n	80090e0 <sinf+0x4c>
 80090ce:	2802      	cmp	r0, #2
 80090d0:	d00b      	beq.n	80090ea <sinf+0x56>
 80090d2:	b990      	cbnz	r0, 80090fa <sinf+0x66>
 80090d4:	2201      	movs	r2, #1
 80090d6:	9901      	ldr	r1, [sp, #4]
 80090d8:	9800      	ldr	r0, [sp, #0]
 80090da:	f000 f895 	bl	8009208 <__kernel_sinf>
 80090de:	e7ec      	b.n	80090ba <sinf+0x26>
 80090e0:	9901      	ldr	r1, [sp, #4]
 80090e2:	9800      	ldr	r0, [sp, #0]
 80090e4:	f000 f810 	bl	8009108 <__kernel_cosf>
 80090e8:	e7e7      	b.n	80090ba <sinf+0x26>
 80090ea:	2201      	movs	r2, #1
 80090ec:	9901      	ldr	r1, [sp, #4]
 80090ee:	9800      	ldr	r0, [sp, #0]
 80090f0:	f000 f88a 	bl	8009208 <__kernel_sinf>
 80090f4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80090f8:	e7df      	b.n	80090ba <sinf+0x26>
 80090fa:	9901      	ldr	r1, [sp, #4]
 80090fc:	9800      	ldr	r0, [sp, #0]
 80090fe:	f000 f803 	bl	8009108 <__kernel_cosf>
 8009102:	e7f7      	b.n	80090f4 <sinf+0x60>
 8009104:	3f490fd8 	.word	0x3f490fd8

08009108 <__kernel_cosf>:
 8009108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800910c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8009110:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8009114:	4606      	mov	r6, r0
 8009116:	4688      	mov	r8, r1
 8009118:	da03      	bge.n	8009122 <__kernel_cosf+0x1a>
 800911a:	f7f8 f80b 	bl	8001134 <__aeabi_f2iz>
 800911e:	2800      	cmp	r0, #0
 8009120:	d05c      	beq.n	80091dc <__kernel_cosf+0xd4>
 8009122:	4631      	mov	r1, r6
 8009124:	4630      	mov	r0, r6
 8009126:	f7f7 fe29 	bl	8000d7c <__aeabi_fmul>
 800912a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800912e:	4605      	mov	r5, r0
 8009130:	f7f7 fe24 	bl	8000d7c <__aeabi_fmul>
 8009134:	492b      	ldr	r1, [pc, #172]	; (80091e4 <__kernel_cosf+0xdc>)
 8009136:	4607      	mov	r7, r0
 8009138:	4628      	mov	r0, r5
 800913a:	f7f7 fe1f 	bl	8000d7c <__aeabi_fmul>
 800913e:	492a      	ldr	r1, [pc, #168]	; (80091e8 <__kernel_cosf+0xe0>)
 8009140:	f7f7 fd14 	bl	8000b6c <__addsf3>
 8009144:	4629      	mov	r1, r5
 8009146:	f7f7 fe19 	bl	8000d7c <__aeabi_fmul>
 800914a:	4928      	ldr	r1, [pc, #160]	; (80091ec <__kernel_cosf+0xe4>)
 800914c:	f7f7 fd0c 	bl	8000b68 <__aeabi_fsub>
 8009150:	4629      	mov	r1, r5
 8009152:	f7f7 fe13 	bl	8000d7c <__aeabi_fmul>
 8009156:	4926      	ldr	r1, [pc, #152]	; (80091f0 <__kernel_cosf+0xe8>)
 8009158:	f7f7 fd08 	bl	8000b6c <__addsf3>
 800915c:	4629      	mov	r1, r5
 800915e:	f7f7 fe0d 	bl	8000d7c <__aeabi_fmul>
 8009162:	4924      	ldr	r1, [pc, #144]	; (80091f4 <__kernel_cosf+0xec>)
 8009164:	f7f7 fd00 	bl	8000b68 <__aeabi_fsub>
 8009168:	4629      	mov	r1, r5
 800916a:	f7f7 fe07 	bl	8000d7c <__aeabi_fmul>
 800916e:	4922      	ldr	r1, [pc, #136]	; (80091f8 <__kernel_cosf+0xf0>)
 8009170:	f7f7 fcfc 	bl	8000b6c <__addsf3>
 8009174:	4629      	mov	r1, r5
 8009176:	f7f7 fe01 	bl	8000d7c <__aeabi_fmul>
 800917a:	4629      	mov	r1, r5
 800917c:	f7f7 fdfe 	bl	8000d7c <__aeabi_fmul>
 8009180:	4641      	mov	r1, r8
 8009182:	4605      	mov	r5, r0
 8009184:	4630      	mov	r0, r6
 8009186:	f7f7 fdf9 	bl	8000d7c <__aeabi_fmul>
 800918a:	4601      	mov	r1, r0
 800918c:	4628      	mov	r0, r5
 800918e:	f7f7 fceb 	bl	8000b68 <__aeabi_fsub>
 8009192:	4b1a      	ldr	r3, [pc, #104]	; (80091fc <__kernel_cosf+0xf4>)
 8009194:	4605      	mov	r5, r0
 8009196:	429c      	cmp	r4, r3
 8009198:	dc0a      	bgt.n	80091b0 <__kernel_cosf+0xa8>
 800919a:	4601      	mov	r1, r0
 800919c:	4638      	mov	r0, r7
 800919e:	f7f7 fce3 	bl	8000b68 <__aeabi_fsub>
 80091a2:	4601      	mov	r1, r0
 80091a4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80091a8:	f7f7 fcde 	bl	8000b68 <__aeabi_fsub>
 80091ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b0:	4b13      	ldr	r3, [pc, #76]	; (8009200 <__kernel_cosf+0xf8>)
 80091b2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80091b6:	429c      	cmp	r4, r3
 80091b8:	bfcc      	ite	gt
 80091ba:	4c12      	ldrgt	r4, [pc, #72]	; (8009204 <__kernel_cosf+0xfc>)
 80091bc:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 80091c0:	4621      	mov	r1, r4
 80091c2:	f7f7 fcd1 	bl	8000b68 <__aeabi_fsub>
 80091c6:	4621      	mov	r1, r4
 80091c8:	4606      	mov	r6, r0
 80091ca:	4638      	mov	r0, r7
 80091cc:	f7f7 fccc 	bl	8000b68 <__aeabi_fsub>
 80091d0:	4629      	mov	r1, r5
 80091d2:	f7f7 fcc9 	bl	8000b68 <__aeabi_fsub>
 80091d6:	4601      	mov	r1, r0
 80091d8:	4630      	mov	r0, r6
 80091da:	e7e5      	b.n	80091a8 <__kernel_cosf+0xa0>
 80091dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80091e0:	e7e4      	b.n	80091ac <__kernel_cosf+0xa4>
 80091e2:	bf00      	nop
 80091e4:	ad47d74e 	.word	0xad47d74e
 80091e8:	310f74f6 	.word	0x310f74f6
 80091ec:	3493f27c 	.word	0x3493f27c
 80091f0:	37d00d01 	.word	0x37d00d01
 80091f4:	3ab60b61 	.word	0x3ab60b61
 80091f8:	3d2aaaab 	.word	0x3d2aaaab
 80091fc:	3e999999 	.word	0x3e999999
 8009200:	3f480000 	.word	0x3f480000
 8009204:	3e900000 	.word	0x3e900000

08009208 <__kernel_sinf>:
 8009208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800920c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009210:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009214:	4604      	mov	r4, r0
 8009216:	460f      	mov	r7, r1
 8009218:	4691      	mov	r9, r2
 800921a:	da03      	bge.n	8009224 <__kernel_sinf+0x1c>
 800921c:	f7f7 ff8a 	bl	8001134 <__aeabi_f2iz>
 8009220:	2800      	cmp	r0, #0
 8009222:	d035      	beq.n	8009290 <__kernel_sinf+0x88>
 8009224:	4621      	mov	r1, r4
 8009226:	4620      	mov	r0, r4
 8009228:	f7f7 fda8 	bl	8000d7c <__aeabi_fmul>
 800922c:	4605      	mov	r5, r0
 800922e:	4601      	mov	r1, r0
 8009230:	4620      	mov	r0, r4
 8009232:	f7f7 fda3 	bl	8000d7c <__aeabi_fmul>
 8009236:	4929      	ldr	r1, [pc, #164]	; (80092dc <__kernel_sinf+0xd4>)
 8009238:	4606      	mov	r6, r0
 800923a:	4628      	mov	r0, r5
 800923c:	f7f7 fd9e 	bl	8000d7c <__aeabi_fmul>
 8009240:	4927      	ldr	r1, [pc, #156]	; (80092e0 <__kernel_sinf+0xd8>)
 8009242:	f7f7 fc91 	bl	8000b68 <__aeabi_fsub>
 8009246:	4629      	mov	r1, r5
 8009248:	f7f7 fd98 	bl	8000d7c <__aeabi_fmul>
 800924c:	4925      	ldr	r1, [pc, #148]	; (80092e4 <__kernel_sinf+0xdc>)
 800924e:	f7f7 fc8d 	bl	8000b6c <__addsf3>
 8009252:	4629      	mov	r1, r5
 8009254:	f7f7 fd92 	bl	8000d7c <__aeabi_fmul>
 8009258:	4923      	ldr	r1, [pc, #140]	; (80092e8 <__kernel_sinf+0xe0>)
 800925a:	f7f7 fc85 	bl	8000b68 <__aeabi_fsub>
 800925e:	4629      	mov	r1, r5
 8009260:	f7f7 fd8c 	bl	8000d7c <__aeabi_fmul>
 8009264:	4921      	ldr	r1, [pc, #132]	; (80092ec <__kernel_sinf+0xe4>)
 8009266:	f7f7 fc81 	bl	8000b6c <__addsf3>
 800926a:	4680      	mov	r8, r0
 800926c:	f1b9 0f00 	cmp.w	r9, #0
 8009270:	d111      	bne.n	8009296 <__kernel_sinf+0x8e>
 8009272:	4601      	mov	r1, r0
 8009274:	4628      	mov	r0, r5
 8009276:	f7f7 fd81 	bl	8000d7c <__aeabi_fmul>
 800927a:	491d      	ldr	r1, [pc, #116]	; (80092f0 <__kernel_sinf+0xe8>)
 800927c:	f7f7 fc74 	bl	8000b68 <__aeabi_fsub>
 8009280:	4631      	mov	r1, r6
 8009282:	f7f7 fd7b 	bl	8000d7c <__aeabi_fmul>
 8009286:	4601      	mov	r1, r0
 8009288:	4620      	mov	r0, r4
 800928a:	f7f7 fc6f 	bl	8000b6c <__addsf3>
 800928e:	4604      	mov	r4, r0
 8009290:	4620      	mov	r0, r4
 8009292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009296:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800929a:	4638      	mov	r0, r7
 800929c:	f7f7 fd6e 	bl	8000d7c <__aeabi_fmul>
 80092a0:	4641      	mov	r1, r8
 80092a2:	4681      	mov	r9, r0
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7f7 fd69 	bl	8000d7c <__aeabi_fmul>
 80092aa:	4601      	mov	r1, r0
 80092ac:	4648      	mov	r0, r9
 80092ae:	f7f7 fc5b 	bl	8000b68 <__aeabi_fsub>
 80092b2:	4629      	mov	r1, r5
 80092b4:	f7f7 fd62 	bl	8000d7c <__aeabi_fmul>
 80092b8:	4639      	mov	r1, r7
 80092ba:	f7f7 fc55 	bl	8000b68 <__aeabi_fsub>
 80092be:	490c      	ldr	r1, [pc, #48]	; (80092f0 <__kernel_sinf+0xe8>)
 80092c0:	4605      	mov	r5, r0
 80092c2:	4630      	mov	r0, r6
 80092c4:	f7f7 fd5a 	bl	8000d7c <__aeabi_fmul>
 80092c8:	4601      	mov	r1, r0
 80092ca:	4628      	mov	r0, r5
 80092cc:	f7f7 fc4e 	bl	8000b6c <__addsf3>
 80092d0:	4601      	mov	r1, r0
 80092d2:	4620      	mov	r0, r4
 80092d4:	f7f7 fc48 	bl	8000b68 <__aeabi_fsub>
 80092d8:	e7d9      	b.n	800928e <__kernel_sinf+0x86>
 80092da:	bf00      	nop
 80092dc:	2f2ec9d3 	.word	0x2f2ec9d3
 80092e0:	32d72f34 	.word	0x32d72f34
 80092e4:	3638ef1b 	.word	0x3638ef1b
 80092e8:	39500d01 	.word	0x39500d01
 80092ec:	3c088889 	.word	0x3c088889
 80092f0:	3e2aaaab 	.word	0x3e2aaaab

080092f4 <__ieee754_fmodf>:
 80092f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f6:	f031 4500 	bics.w	r5, r1, #2147483648	; 0x80000000
 80092fa:	460e      	mov	r6, r1
 80092fc:	d008      	beq.n	8009310 <__ieee754_fmodf+0x1c>
 80092fe:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 8009302:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8009306:	4603      	mov	r3, r0
 8009308:	da02      	bge.n	8009310 <__ieee754_fmodf+0x1c>
 800930a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800930e:	dd05      	ble.n	800931c <__ieee754_fmodf+0x28>
 8009310:	f7f7 fd34 	bl	8000d7c <__aeabi_fmul>
 8009314:	4601      	mov	r1, r0
 8009316:	f7f7 fde5 	bl	8000ee4 <__aeabi_fdiv>
 800931a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800931c:	42af      	cmp	r7, r5
 800931e:	dbfc      	blt.n	800931a <__ieee754_fmodf+0x26>
 8009320:	f000 4400 	and.w	r4, r0, #2147483648	; 0x80000000
 8009324:	d104      	bne.n	8009330 <__ieee754_fmodf+0x3c>
 8009326:	4b32      	ldr	r3, [pc, #200]	; (80093f0 <__ieee754_fmodf+0xfc>)
 8009328:	0fe4      	lsrs	r4, r4, #31
 800932a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800932e:	e7f4      	b.n	800931a <__ieee754_fmodf+0x26>
 8009330:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8009334:	d13e      	bne.n	80093b4 <__ieee754_fmodf+0xc0>
 8009336:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800933a:	023a      	lsls	r2, r7, #8
 800933c:	2a00      	cmp	r2, #0
 800933e:	dc36      	bgt.n	80093ae <__ieee754_fmodf+0xba>
 8009340:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8009344:	d13c      	bne.n	80093c0 <__ieee754_fmodf+0xcc>
 8009346:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800934a:	0228      	lsls	r0, r5, #8
 800934c:	2800      	cmp	r0, #0
 800934e:	da34      	bge.n	80093ba <__ieee754_fmodf+0xc6>
 8009350:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8009354:	bfb5      	itete	lt
 8009356:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800935a:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800935e:	1a5b      	sublt	r3, r3, r1
 8009360:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8009364:	bfb8      	it	lt
 8009366:	fa07 f303 	lsllt.w	r3, r7, r3
 800936a:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800936e:	bfb5      	itete	lt
 8009370:	f06f 007d 	mvnlt.w	r0, #125	; 0x7d
 8009374:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8009378:	1a80      	sublt	r0, r0, r2
 800937a:	f446 0500 	orrge.w	r5, r6, #8388608	; 0x800000
 800937e:	bfb8      	it	lt
 8009380:	4085      	lsllt	r5, r0
 8009382:	1a89      	subs	r1, r1, r2
 8009384:	1b58      	subs	r0, r3, r5
 8009386:	b9f1      	cbnz	r1, 80093c6 <__ieee754_fmodf+0xd2>
 8009388:	ea13 0320 	ands.w	r3, r3, r0, asr #32
 800938c:	bf38      	it	cc
 800938e:	4603      	movcc	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d0c8      	beq.n	8009326 <__ieee754_fmodf+0x32>
 8009394:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009398:	db1d      	blt.n	80093d6 <__ieee754_fmodf+0xe2>
 800939a:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800939e:	db1d      	blt.n	80093dc <__ieee754_fmodf+0xe8>
 80093a0:	f5a3 0000 	sub.w	r0, r3, #8388608	; 0x800000
 80093a4:	327f      	adds	r2, #127	; 0x7f
 80093a6:	4320      	orrs	r0, r4
 80093a8:	ea40 50c2 	orr.w	r0, r0, r2, lsl #23
 80093ac:	e7b5      	b.n	800931a <__ieee754_fmodf+0x26>
 80093ae:	3901      	subs	r1, #1
 80093b0:	0052      	lsls	r2, r2, #1
 80093b2:	e7c3      	b.n	800933c <__ieee754_fmodf+0x48>
 80093b4:	15f9      	asrs	r1, r7, #23
 80093b6:	397f      	subs	r1, #127	; 0x7f
 80093b8:	e7c2      	b.n	8009340 <__ieee754_fmodf+0x4c>
 80093ba:	3a01      	subs	r2, #1
 80093bc:	0040      	lsls	r0, r0, #1
 80093be:	e7c5      	b.n	800934c <__ieee754_fmodf+0x58>
 80093c0:	15ea      	asrs	r2, r5, #23
 80093c2:	3a7f      	subs	r2, #127	; 0x7f
 80093c4:	e7c4      	b.n	8009350 <__ieee754_fmodf+0x5c>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	da02      	bge.n	80093d0 <__ieee754_fmodf+0xdc>
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	3901      	subs	r1, #1
 80093ce:	e7d9      	b.n	8009384 <__ieee754_fmodf+0x90>
 80093d0:	d0a9      	beq.n	8009326 <__ieee754_fmodf+0x32>
 80093d2:	0043      	lsls	r3, r0, #1
 80093d4:	e7fa      	b.n	80093cc <__ieee754_fmodf+0xd8>
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	3a01      	subs	r2, #1
 80093da:	e7db      	b.n	8009394 <__ieee754_fmodf+0xa0>
 80093dc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80093e0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80093e4:	3282      	adds	r2, #130	; 0x82
 80093e6:	fa43 f002 	asr.w	r0, r3, r2
 80093ea:	4320      	orrs	r0, r4
 80093ec:	e795      	b.n	800931a <__ieee754_fmodf+0x26>
 80093ee:	bf00      	nop
 80093f0:	0800a5fc 	.word	0x0800a5fc

080093f4 <__ieee754_rem_pio2f>:
 80093f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f8:	4aa0      	ldr	r2, [pc, #640]	; (800967c <__ieee754_rem_pio2f+0x288>)
 80093fa:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80093fe:	4296      	cmp	r6, r2
 8009400:	460c      	mov	r4, r1
 8009402:	4682      	mov	sl, r0
 8009404:	b087      	sub	sp, #28
 8009406:	dc04      	bgt.n	8009412 <__ieee754_rem_pio2f+0x1e>
 8009408:	2300      	movs	r3, #0
 800940a:	6008      	str	r0, [r1, #0]
 800940c:	604b      	str	r3, [r1, #4]
 800940e:	2500      	movs	r5, #0
 8009410:	e01a      	b.n	8009448 <__ieee754_rem_pio2f+0x54>
 8009412:	4a9b      	ldr	r2, [pc, #620]	; (8009680 <__ieee754_rem_pio2f+0x28c>)
 8009414:	4296      	cmp	r6, r2
 8009416:	dc4b      	bgt.n	80094b0 <__ieee754_rem_pio2f+0xbc>
 8009418:	2800      	cmp	r0, #0
 800941a:	499a      	ldr	r1, [pc, #616]	; (8009684 <__ieee754_rem_pio2f+0x290>)
 800941c:	4f9a      	ldr	r7, [pc, #616]	; (8009688 <__ieee754_rem_pio2f+0x294>)
 800941e:	f026 060f 	bic.w	r6, r6, #15
 8009422:	dd23      	ble.n	800946c <__ieee754_rem_pio2f+0x78>
 8009424:	f7f7 fba0 	bl	8000b68 <__aeabi_fsub>
 8009428:	42be      	cmp	r6, r7
 800942a:	4605      	mov	r5, r0
 800942c:	d010      	beq.n	8009450 <__ieee754_rem_pio2f+0x5c>
 800942e:	4997      	ldr	r1, [pc, #604]	; (800968c <__ieee754_rem_pio2f+0x298>)
 8009430:	f7f7 fb9a 	bl	8000b68 <__aeabi_fsub>
 8009434:	4601      	mov	r1, r0
 8009436:	6020      	str	r0, [r4, #0]
 8009438:	4628      	mov	r0, r5
 800943a:	f7f7 fb95 	bl	8000b68 <__aeabi_fsub>
 800943e:	4993      	ldr	r1, [pc, #588]	; (800968c <__ieee754_rem_pio2f+0x298>)
 8009440:	f7f7 fb92 	bl	8000b68 <__aeabi_fsub>
 8009444:	2501      	movs	r5, #1
 8009446:	6060      	str	r0, [r4, #4]
 8009448:	4628      	mov	r0, r5
 800944a:	b007      	add	sp, #28
 800944c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009450:	498f      	ldr	r1, [pc, #572]	; (8009690 <__ieee754_rem_pio2f+0x29c>)
 8009452:	f7f7 fb89 	bl	8000b68 <__aeabi_fsub>
 8009456:	498f      	ldr	r1, [pc, #572]	; (8009694 <__ieee754_rem_pio2f+0x2a0>)
 8009458:	4605      	mov	r5, r0
 800945a:	f7f7 fb85 	bl	8000b68 <__aeabi_fsub>
 800945e:	4601      	mov	r1, r0
 8009460:	6020      	str	r0, [r4, #0]
 8009462:	4628      	mov	r0, r5
 8009464:	f7f7 fb80 	bl	8000b68 <__aeabi_fsub>
 8009468:	498a      	ldr	r1, [pc, #552]	; (8009694 <__ieee754_rem_pio2f+0x2a0>)
 800946a:	e7e9      	b.n	8009440 <__ieee754_rem_pio2f+0x4c>
 800946c:	f7f7 fb7e 	bl	8000b6c <__addsf3>
 8009470:	42be      	cmp	r6, r7
 8009472:	4605      	mov	r5, r0
 8009474:	d00e      	beq.n	8009494 <__ieee754_rem_pio2f+0xa0>
 8009476:	4985      	ldr	r1, [pc, #532]	; (800968c <__ieee754_rem_pio2f+0x298>)
 8009478:	f7f7 fb78 	bl	8000b6c <__addsf3>
 800947c:	4601      	mov	r1, r0
 800947e:	6020      	str	r0, [r4, #0]
 8009480:	4628      	mov	r0, r5
 8009482:	f7f7 fb71 	bl	8000b68 <__aeabi_fsub>
 8009486:	4981      	ldr	r1, [pc, #516]	; (800968c <__ieee754_rem_pio2f+0x298>)
 8009488:	f7f7 fb70 	bl	8000b6c <__addsf3>
 800948c:	f04f 35ff 	mov.w	r5, #4294967295
 8009490:	6060      	str	r0, [r4, #4]
 8009492:	e7d9      	b.n	8009448 <__ieee754_rem_pio2f+0x54>
 8009494:	497e      	ldr	r1, [pc, #504]	; (8009690 <__ieee754_rem_pio2f+0x29c>)
 8009496:	f7f7 fb69 	bl	8000b6c <__addsf3>
 800949a:	497e      	ldr	r1, [pc, #504]	; (8009694 <__ieee754_rem_pio2f+0x2a0>)
 800949c:	4605      	mov	r5, r0
 800949e:	f7f7 fb65 	bl	8000b6c <__addsf3>
 80094a2:	4601      	mov	r1, r0
 80094a4:	6020      	str	r0, [r4, #0]
 80094a6:	4628      	mov	r0, r5
 80094a8:	f7f7 fb5e 	bl	8000b68 <__aeabi_fsub>
 80094ac:	4979      	ldr	r1, [pc, #484]	; (8009694 <__ieee754_rem_pio2f+0x2a0>)
 80094ae:	e7eb      	b.n	8009488 <__ieee754_rem_pio2f+0x94>
 80094b0:	4a79      	ldr	r2, [pc, #484]	; (8009698 <__ieee754_rem_pio2f+0x2a4>)
 80094b2:	4296      	cmp	r6, r2
 80094b4:	f300 8091 	bgt.w	80095da <__ieee754_rem_pio2f+0x1e6>
 80094b8:	f000 f8fa 	bl	80096b0 <fabsf>
 80094bc:	4977      	ldr	r1, [pc, #476]	; (800969c <__ieee754_rem_pio2f+0x2a8>)
 80094be:	4607      	mov	r7, r0
 80094c0:	f7f7 fc5c 	bl	8000d7c <__aeabi_fmul>
 80094c4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80094c8:	f7f7 fb50 	bl	8000b6c <__addsf3>
 80094cc:	f7f7 fe32 	bl	8001134 <__aeabi_f2iz>
 80094d0:	4605      	mov	r5, r0
 80094d2:	f7f7 fbff 	bl	8000cd4 <__aeabi_i2f>
 80094d6:	496b      	ldr	r1, [pc, #428]	; (8009684 <__ieee754_rem_pio2f+0x290>)
 80094d8:	4681      	mov	r9, r0
 80094da:	f7f7 fc4f 	bl	8000d7c <__aeabi_fmul>
 80094de:	4601      	mov	r1, r0
 80094e0:	4638      	mov	r0, r7
 80094e2:	f7f7 fb41 	bl	8000b68 <__aeabi_fsub>
 80094e6:	4969      	ldr	r1, [pc, #420]	; (800968c <__ieee754_rem_pio2f+0x298>)
 80094e8:	4680      	mov	r8, r0
 80094ea:	4648      	mov	r0, r9
 80094ec:	f7f7 fc46 	bl	8000d7c <__aeabi_fmul>
 80094f0:	2d1f      	cmp	r5, #31
 80094f2:	4607      	mov	r7, r0
 80094f4:	dc0c      	bgt.n	8009510 <__ieee754_rem_pio2f+0x11c>
 80094f6:	4a6a      	ldr	r2, [pc, #424]	; (80096a0 <__ieee754_rem_pio2f+0x2ac>)
 80094f8:	1e69      	subs	r1, r5, #1
 80094fa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80094fe:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8009502:	4293      	cmp	r3, r2
 8009504:	d004      	beq.n	8009510 <__ieee754_rem_pio2f+0x11c>
 8009506:	4639      	mov	r1, r7
 8009508:	4640      	mov	r0, r8
 800950a:	f7f7 fb2d 	bl	8000b68 <__aeabi_fsub>
 800950e:	e00b      	b.n	8009528 <__ieee754_rem_pio2f+0x134>
 8009510:	4639      	mov	r1, r7
 8009512:	4640      	mov	r0, r8
 8009514:	f7f7 fb28 	bl	8000b68 <__aeabi_fsub>
 8009518:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800951c:	ebc3 53d6 	rsb	r3, r3, r6, lsr #23
 8009520:	2b08      	cmp	r3, #8
 8009522:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8009526:	dc01      	bgt.n	800952c <__ieee754_rem_pio2f+0x138>
 8009528:	6020      	str	r0, [r4, #0]
 800952a:	e026      	b.n	800957a <__ieee754_rem_pio2f+0x186>
 800952c:	4958      	ldr	r1, [pc, #352]	; (8009690 <__ieee754_rem_pio2f+0x29c>)
 800952e:	4648      	mov	r0, r9
 8009530:	f7f7 fc24 	bl	8000d7c <__aeabi_fmul>
 8009534:	4607      	mov	r7, r0
 8009536:	4601      	mov	r1, r0
 8009538:	4640      	mov	r0, r8
 800953a:	f7f7 fb15 	bl	8000b68 <__aeabi_fsub>
 800953e:	4601      	mov	r1, r0
 8009540:	4606      	mov	r6, r0
 8009542:	4640      	mov	r0, r8
 8009544:	f7f7 fb10 	bl	8000b68 <__aeabi_fsub>
 8009548:	4639      	mov	r1, r7
 800954a:	f7f7 fb0d 	bl	8000b68 <__aeabi_fsub>
 800954e:	4607      	mov	r7, r0
 8009550:	4950      	ldr	r1, [pc, #320]	; (8009694 <__ieee754_rem_pio2f+0x2a0>)
 8009552:	4648      	mov	r0, r9
 8009554:	f7f7 fc12 	bl	8000d7c <__aeabi_fmul>
 8009558:	4639      	mov	r1, r7
 800955a:	f7f7 fb05 	bl	8000b68 <__aeabi_fsub>
 800955e:	4601      	mov	r1, r0
 8009560:	4607      	mov	r7, r0
 8009562:	4630      	mov	r0, r6
 8009564:	f7f7 fb00 	bl	8000b68 <__aeabi_fsub>
 8009568:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800956c:	ebab 0b03 	sub.w	fp, fp, r3
 8009570:	f1bb 0f19 	cmp.w	fp, #25
 8009574:	dc16      	bgt.n	80095a4 <__ieee754_rem_pio2f+0x1b0>
 8009576:	46b0      	mov	r8, r6
 8009578:	6020      	str	r0, [r4, #0]
 800957a:	6826      	ldr	r6, [r4, #0]
 800957c:	4640      	mov	r0, r8
 800957e:	4631      	mov	r1, r6
 8009580:	f7f7 faf2 	bl	8000b68 <__aeabi_fsub>
 8009584:	4639      	mov	r1, r7
 8009586:	f7f7 faef 	bl	8000b68 <__aeabi_fsub>
 800958a:	f1ba 0f00 	cmp.w	sl, #0
 800958e:	6060      	str	r0, [r4, #4]
 8009590:	f6bf af5a 	bge.w	8009448 <__ieee754_rem_pio2f+0x54>
 8009594:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009598:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800959c:	6026      	str	r6, [r4, #0]
 800959e:	6060      	str	r0, [r4, #4]
 80095a0:	426d      	negs	r5, r5
 80095a2:	e751      	b.n	8009448 <__ieee754_rem_pio2f+0x54>
 80095a4:	493f      	ldr	r1, [pc, #252]	; (80096a4 <__ieee754_rem_pio2f+0x2b0>)
 80095a6:	4648      	mov	r0, r9
 80095a8:	f7f7 fbe8 	bl	8000d7c <__aeabi_fmul>
 80095ac:	4607      	mov	r7, r0
 80095ae:	4601      	mov	r1, r0
 80095b0:	4630      	mov	r0, r6
 80095b2:	f7f7 fad9 	bl	8000b68 <__aeabi_fsub>
 80095b6:	4601      	mov	r1, r0
 80095b8:	4680      	mov	r8, r0
 80095ba:	4630      	mov	r0, r6
 80095bc:	f7f7 fad4 	bl	8000b68 <__aeabi_fsub>
 80095c0:	4639      	mov	r1, r7
 80095c2:	f7f7 fad1 	bl	8000b68 <__aeabi_fsub>
 80095c6:	4606      	mov	r6, r0
 80095c8:	4937      	ldr	r1, [pc, #220]	; (80096a8 <__ieee754_rem_pio2f+0x2b4>)
 80095ca:	4648      	mov	r0, r9
 80095cc:	f7f7 fbd6 	bl	8000d7c <__aeabi_fmul>
 80095d0:	4631      	mov	r1, r6
 80095d2:	f7f7 fac9 	bl	8000b68 <__aeabi_fsub>
 80095d6:	4607      	mov	r7, r0
 80095d8:	e795      	b.n	8009506 <__ieee754_rem_pio2f+0x112>
 80095da:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80095de:	db05      	blt.n	80095ec <__ieee754_rem_pio2f+0x1f8>
 80095e0:	4601      	mov	r1, r0
 80095e2:	f7f7 fac1 	bl	8000b68 <__aeabi_fsub>
 80095e6:	6060      	str	r0, [r4, #4]
 80095e8:	6020      	str	r0, [r4, #0]
 80095ea:	e710      	b.n	800940e <__ieee754_rem_pio2f+0x1a>
 80095ec:	15f7      	asrs	r7, r6, #23
 80095ee:	3f86      	subs	r7, #134	; 0x86
 80095f0:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 80095f4:	4630      	mov	r0, r6
 80095f6:	f7f7 fd9d 	bl	8001134 <__aeabi_f2iz>
 80095fa:	f7f7 fb6b 	bl	8000cd4 <__aeabi_i2f>
 80095fe:	4601      	mov	r1, r0
 8009600:	9003      	str	r0, [sp, #12]
 8009602:	4630      	mov	r0, r6
 8009604:	f7f7 fab0 	bl	8000b68 <__aeabi_fsub>
 8009608:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800960c:	f7f7 fbb6 	bl	8000d7c <__aeabi_fmul>
 8009610:	4606      	mov	r6, r0
 8009612:	f7f7 fd8f 	bl	8001134 <__aeabi_f2iz>
 8009616:	f7f7 fb5d 	bl	8000cd4 <__aeabi_i2f>
 800961a:	4601      	mov	r1, r0
 800961c:	9004      	str	r0, [sp, #16]
 800961e:	4605      	mov	r5, r0
 8009620:	4630      	mov	r0, r6
 8009622:	f7f7 faa1 	bl	8000b68 <__aeabi_fsub>
 8009626:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800962a:	f7f7 fba7 	bl	8000d7c <__aeabi_fmul>
 800962e:	2100      	movs	r1, #0
 8009630:	9005      	str	r0, [sp, #20]
 8009632:	f7f7 fd37 	bl	80010a4 <__aeabi_fcmpeq>
 8009636:	b1f0      	cbz	r0, 8009676 <__ieee754_rem_pio2f+0x282>
 8009638:	2100      	movs	r1, #0
 800963a:	4628      	mov	r0, r5
 800963c:	f7f7 fd32 	bl	80010a4 <__aeabi_fcmpeq>
 8009640:	2800      	cmp	r0, #0
 8009642:	bf14      	ite	ne
 8009644:	2301      	movne	r3, #1
 8009646:	2302      	moveq	r3, #2
 8009648:	4a18      	ldr	r2, [pc, #96]	; (80096ac <__ieee754_rem_pio2f+0x2b8>)
 800964a:	4621      	mov	r1, r4
 800964c:	9201      	str	r2, [sp, #4]
 800964e:	2202      	movs	r2, #2
 8009650:	a803      	add	r0, sp, #12
 8009652:	9200      	str	r2, [sp, #0]
 8009654:	463a      	mov	r2, r7
 8009656:	f000 f82f 	bl	80096b8 <__kernel_rem_pio2f>
 800965a:	f1ba 0f00 	cmp.w	sl, #0
 800965e:	4605      	mov	r5, r0
 8009660:	f6bf aef2 	bge.w	8009448 <__ieee754_rem_pio2f+0x54>
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800966a:	6023      	str	r3, [r4, #0]
 800966c:	6863      	ldr	r3, [r4, #4]
 800966e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009672:	6063      	str	r3, [r4, #4]
 8009674:	e794      	b.n	80095a0 <__ieee754_rem_pio2f+0x1ac>
 8009676:	2303      	movs	r3, #3
 8009678:	e7e6      	b.n	8009648 <__ieee754_rem_pio2f+0x254>
 800967a:	bf00      	nop
 800967c:	3f490fd8 	.word	0x3f490fd8
 8009680:	4016cbe3 	.word	0x4016cbe3
 8009684:	3fc90f80 	.word	0x3fc90f80
 8009688:	3fc90fd0 	.word	0x3fc90fd0
 800968c:	37354443 	.word	0x37354443
 8009690:	37354400 	.word	0x37354400
 8009694:	2e85a308 	.word	0x2e85a308
 8009698:	43490f80 	.word	0x43490f80
 800969c:	3f22f984 	.word	0x3f22f984
 80096a0:	0800a604 	.word	0x0800a604
 80096a4:	2e85a300 	.word	0x2e85a300
 80096a8:	248d3132 	.word	0x248d3132
 80096ac:	0800a684 	.word	0x0800a684

080096b0 <fabsf>:
 80096b0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80096b4:	4770      	bx	lr
	...

080096b8 <__kernel_rem_pio2f>:
 80096b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096bc:	b0db      	sub	sp, #364	; 0x16c
 80096be:	9202      	str	r2, [sp, #8]
 80096c0:	9304      	str	r3, [sp, #16]
 80096c2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80096c4:	4bbb      	ldr	r3, [pc, #748]	; (80099b4 <__kernel_rem_pio2f+0x2fc>)
 80096c6:	9005      	str	r0, [sp, #20]
 80096c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096cc:	9100      	str	r1, [sp, #0]
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	9b04      	ldr	r3, [sp, #16]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	9303      	str	r3, [sp, #12]
 80096d6:	9b02      	ldr	r3, [sp, #8]
 80096d8:	1d1a      	adds	r2, r3, #4
 80096da:	f2c0 809b 	blt.w	8009814 <__kernel_rem_pio2f+0x15c>
 80096de:	1edc      	subs	r4, r3, #3
 80096e0:	bf48      	it	mi
 80096e2:	1d1c      	addmi	r4, r3, #4
 80096e4:	10e4      	asrs	r4, r4, #3
 80096e6:	2500      	movs	r5, #0
 80096e8:	f04f 0b00 	mov.w	fp, #0
 80096ec:	1c67      	adds	r7, r4, #1
 80096ee:	00fb      	lsls	r3, r7, #3
 80096f0:	9306      	str	r3, [sp, #24]
 80096f2:	9b02      	ldr	r3, [sp, #8]
 80096f4:	9a03      	ldr	r2, [sp, #12]
 80096f6:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 80096fa:	9b01      	ldr	r3, [sp, #4]
 80096fc:	eba4 0802 	sub.w	r8, r4, r2
 8009700:	eb03 0902 	add.w	r9, r3, r2
 8009704:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8009706:	ae1e      	add	r6, sp, #120	; 0x78
 8009708:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800970c:	454d      	cmp	r5, r9
 800970e:	f340 8083 	ble.w	8009818 <__kernel_rem_pio2f+0x160>
 8009712:	9a04      	ldr	r2, [sp, #16]
 8009714:	ab1e      	add	r3, sp, #120	; 0x78
 8009716:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800971a:	f04f 0900 	mov.w	r9, #0
 800971e:	2300      	movs	r3, #0
 8009720:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8009724:	9a01      	ldr	r2, [sp, #4]
 8009726:	4591      	cmp	r9, r2
 8009728:	f340 809e 	ble.w	8009868 <__kernel_rem_pio2f+0x1b0>
 800972c:	4613      	mov	r3, r2
 800972e:	aa0a      	add	r2, sp, #40	; 0x28
 8009730:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009734:	9308      	str	r3, [sp, #32]
 8009736:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8009738:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800973c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009740:	9307      	str	r3, [sp, #28]
 8009742:	ac0a      	add	r4, sp, #40	; 0x28
 8009744:	4626      	mov	r6, r4
 8009746:	46c3      	mov	fp, r8
 8009748:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800974c:	ab5a      	add	r3, sp, #360	; 0x168
 800974e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8009752:	f853 5c50 	ldr.w	r5, [r3, #-80]
 8009756:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800975a:	f1bb 0f00 	cmp.w	fp, #0
 800975e:	f300 8088 	bgt.w	8009872 <__kernel_rem_pio2f+0x1ba>
 8009762:	4639      	mov	r1, r7
 8009764:	4628      	mov	r0, r5
 8009766:	f000 fa5b 	bl	8009c20 <scalbnf>
 800976a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800976e:	4605      	mov	r5, r0
 8009770:	f7f7 fb04 	bl	8000d7c <__aeabi_fmul>
 8009774:	f000 faa0 	bl	8009cb8 <floorf>
 8009778:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800977c:	f7f7 fafe 	bl	8000d7c <__aeabi_fmul>
 8009780:	4601      	mov	r1, r0
 8009782:	4628      	mov	r0, r5
 8009784:	f7f7 f9f0 	bl	8000b68 <__aeabi_fsub>
 8009788:	4605      	mov	r5, r0
 800978a:	f7f7 fcd3 	bl	8001134 <__aeabi_f2iz>
 800978e:	4606      	mov	r6, r0
 8009790:	f7f7 faa0 	bl	8000cd4 <__aeabi_i2f>
 8009794:	4601      	mov	r1, r0
 8009796:	4628      	mov	r0, r5
 8009798:	f7f7 f9e6 	bl	8000b68 <__aeabi_fsub>
 800979c:	2f00      	cmp	r7, #0
 800979e:	4681      	mov	r9, r0
 80097a0:	f340 8086 	ble.w	80098b0 <__kernel_rem_pio2f+0x1f8>
 80097a4:	f108 32ff 	add.w	r2, r8, #4294967295
 80097a8:	ab0a      	add	r3, sp, #40	; 0x28
 80097aa:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80097ae:	f1c7 0108 	rsb	r1, r7, #8
 80097b2:	fa45 f301 	asr.w	r3, r5, r1
 80097b6:	441e      	add	r6, r3
 80097b8:	408b      	lsls	r3, r1
 80097ba:	1aed      	subs	r5, r5, r3
 80097bc:	ab0a      	add	r3, sp, #40	; 0x28
 80097be:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80097c2:	f1c7 0307 	rsb	r3, r7, #7
 80097c6:	411d      	asrs	r5, r3
 80097c8:	2d00      	cmp	r5, #0
 80097ca:	dd7f      	ble.n	80098cc <__kernel_rem_pio2f+0x214>
 80097cc:	2200      	movs	r2, #0
 80097ce:	4692      	mov	sl, r2
 80097d0:	3601      	adds	r6, #1
 80097d2:	4590      	cmp	r8, r2
 80097d4:	f300 80b0 	bgt.w	8009938 <__kernel_rem_pio2f+0x280>
 80097d8:	2f00      	cmp	r7, #0
 80097da:	dd05      	ble.n	80097e8 <__kernel_rem_pio2f+0x130>
 80097dc:	2f01      	cmp	r7, #1
 80097de:	f000 80bd 	beq.w	800995c <__kernel_rem_pio2f+0x2a4>
 80097e2:	2f02      	cmp	r7, #2
 80097e4:	f000 80c5 	beq.w	8009972 <__kernel_rem_pio2f+0x2ba>
 80097e8:	2d02      	cmp	r5, #2
 80097ea:	d16f      	bne.n	80098cc <__kernel_rem_pio2f+0x214>
 80097ec:	4649      	mov	r1, r9
 80097ee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80097f2:	f7f7 f9b9 	bl	8000b68 <__aeabi_fsub>
 80097f6:	4681      	mov	r9, r0
 80097f8:	f1ba 0f00 	cmp.w	sl, #0
 80097fc:	d066      	beq.n	80098cc <__kernel_rem_pio2f+0x214>
 80097fe:	4639      	mov	r1, r7
 8009800:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009804:	f000 fa0c 	bl	8009c20 <scalbnf>
 8009808:	4601      	mov	r1, r0
 800980a:	4648      	mov	r0, r9
 800980c:	f7f7 f9ac 	bl	8000b68 <__aeabi_fsub>
 8009810:	4681      	mov	r9, r0
 8009812:	e05b      	b.n	80098cc <__kernel_rem_pio2f+0x214>
 8009814:	2400      	movs	r4, #0
 8009816:	e766      	b.n	80096e6 <__kernel_rem_pio2f+0x2e>
 8009818:	eb18 0f05 	cmn.w	r8, r5
 800981c:	d407      	bmi.n	800982e <__kernel_rem_pio2f+0x176>
 800981e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8009822:	f7f7 fa57 	bl	8000cd4 <__aeabi_i2f>
 8009826:	f846 0b04 	str.w	r0, [r6], #4
 800982a:	3501      	adds	r5, #1
 800982c:	e76e      	b.n	800970c <__kernel_rem_pio2f+0x54>
 800982e:	4658      	mov	r0, fp
 8009830:	e7f9      	b.n	8009826 <__kernel_rem_pio2f+0x16e>
 8009832:	9307      	str	r3, [sp, #28]
 8009834:	9b05      	ldr	r3, [sp, #20]
 8009836:	f8da 1000 	ldr.w	r1, [sl]
 800983a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800983e:	f7f7 fa9d 	bl	8000d7c <__aeabi_fmul>
 8009842:	4601      	mov	r1, r0
 8009844:	4630      	mov	r0, r6
 8009846:	f7f7 f991 	bl	8000b6c <__addsf3>
 800984a:	4606      	mov	r6, r0
 800984c:	9b07      	ldr	r3, [sp, #28]
 800984e:	f108 0801 	add.w	r8, r8, #1
 8009852:	9a03      	ldr	r2, [sp, #12]
 8009854:	f1aa 0a04 	sub.w	sl, sl, #4
 8009858:	4590      	cmp	r8, r2
 800985a:	ddea      	ble.n	8009832 <__kernel_rem_pio2f+0x17a>
 800985c:	f84b 6b04 	str.w	r6, [fp], #4
 8009860:	f109 0901 	add.w	r9, r9, #1
 8009864:	3504      	adds	r5, #4
 8009866:	e75d      	b.n	8009724 <__kernel_rem_pio2f+0x6c>
 8009868:	46aa      	mov	sl, r5
 800986a:	461e      	mov	r6, r3
 800986c:	f04f 0800 	mov.w	r8, #0
 8009870:	e7ef      	b.n	8009852 <__kernel_rem_pio2f+0x19a>
 8009872:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8009876:	4628      	mov	r0, r5
 8009878:	f7f7 fa80 	bl	8000d7c <__aeabi_fmul>
 800987c:	f7f7 fc5a 	bl	8001134 <__aeabi_f2iz>
 8009880:	f7f7 fa28 	bl	8000cd4 <__aeabi_i2f>
 8009884:	4649      	mov	r1, r9
 8009886:	9009      	str	r0, [sp, #36]	; 0x24
 8009888:	f7f7 fa78 	bl	8000d7c <__aeabi_fmul>
 800988c:	4601      	mov	r1, r0
 800988e:	4628      	mov	r0, r5
 8009890:	f7f7 f96a 	bl	8000b68 <__aeabi_fsub>
 8009894:	f7f7 fc4e 	bl	8001134 <__aeabi_f2iz>
 8009898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800989a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800989e:	f846 0b04 	str.w	r0, [r6], #4
 80098a2:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7f7 f960 	bl	8000b6c <__addsf3>
 80098ac:	4605      	mov	r5, r0
 80098ae:	e754      	b.n	800975a <__kernel_rem_pio2f+0xa2>
 80098b0:	d106      	bne.n	80098c0 <__kernel_rem_pio2f+0x208>
 80098b2:	f108 33ff 	add.w	r3, r8, #4294967295
 80098b6:	aa0a      	add	r2, sp, #40	; 0x28
 80098b8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80098bc:	11ed      	asrs	r5, r5, #7
 80098be:	e783      	b.n	80097c8 <__kernel_rem_pio2f+0x110>
 80098c0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80098c4:	f7f7 fc0c 	bl	80010e0 <__aeabi_fcmpge>
 80098c8:	4605      	mov	r5, r0
 80098ca:	bb98      	cbnz	r0, 8009934 <__kernel_rem_pio2f+0x27c>
 80098cc:	2100      	movs	r1, #0
 80098ce:	4648      	mov	r0, r9
 80098d0:	f7f7 fbe8 	bl	80010a4 <__aeabi_fcmpeq>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	f000 8098 	beq.w	8009a0a <__kernel_rem_pio2f+0x352>
 80098da:	f108 34ff 	add.w	r4, r8, #4294967295
 80098de:	4623      	mov	r3, r4
 80098e0:	2200      	movs	r2, #0
 80098e2:	9901      	ldr	r1, [sp, #4]
 80098e4:	428b      	cmp	r3, r1
 80098e6:	da4c      	bge.n	8009982 <__kernel_rem_pio2f+0x2ca>
 80098e8:	2a00      	cmp	r2, #0
 80098ea:	d067      	beq.n	80099bc <__kernel_rem_pio2f+0x304>
 80098ec:	ab0a      	add	r3, sp, #40	; 0x28
 80098ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80098f2:	3f08      	subs	r7, #8
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f000 8086 	beq.w	8009a06 <__kernel_rem_pio2f+0x34e>
 80098fa:	4639      	mov	r1, r7
 80098fc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009900:	f000 f98e 	bl	8009c20 <scalbnf>
 8009904:	46a2      	mov	sl, r4
 8009906:	4681      	mov	r9, r0
 8009908:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800990c:	af46      	add	r7, sp, #280	; 0x118
 800990e:	f1ba 0f00 	cmp.w	sl, #0
 8009912:	f280 80af 	bge.w	8009a74 <__kernel_rem_pio2f+0x3bc>
 8009916:	4627      	mov	r7, r4
 8009918:	2200      	movs	r2, #0
 800991a:	2f00      	cmp	r7, #0
 800991c:	f2c0 80d9 	blt.w	8009ad2 <__kernel_rem_pio2f+0x41a>
 8009920:	a946      	add	r1, sp, #280	; 0x118
 8009922:	4690      	mov	r8, r2
 8009924:	f04f 0a00 	mov.w	sl, #0
 8009928:	4b23      	ldr	r3, [pc, #140]	; (80099b8 <__kernel_rem_pio2f+0x300>)
 800992a:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800992e:	eba4 0907 	sub.w	r9, r4, r7
 8009932:	e0c2      	b.n	8009aba <__kernel_rem_pio2f+0x402>
 8009934:	2502      	movs	r5, #2
 8009936:	e749      	b.n	80097cc <__kernel_rem_pio2f+0x114>
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	f1ba 0f00 	cmp.w	sl, #0
 800993e:	d108      	bne.n	8009952 <__kernel_rem_pio2f+0x29a>
 8009940:	b11b      	cbz	r3, 800994a <__kernel_rem_pio2f+0x292>
 8009942:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009946:	6023      	str	r3, [r4, #0]
 8009948:	2301      	movs	r3, #1
 800994a:	469a      	mov	sl, r3
 800994c:	3201      	adds	r2, #1
 800994e:	3404      	adds	r4, #4
 8009950:	e73f      	b.n	80097d2 <__kernel_rem_pio2f+0x11a>
 8009952:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	4653      	mov	r3, sl
 800995a:	e7f6      	b.n	800994a <__kernel_rem_pio2f+0x292>
 800995c:	f108 32ff 	add.w	r2, r8, #4294967295
 8009960:	ab0a      	add	r3, sp, #40	; 0x28
 8009962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800996a:	a90a      	add	r1, sp, #40	; 0x28
 800996c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009970:	e73a      	b.n	80097e8 <__kernel_rem_pio2f+0x130>
 8009972:	f108 32ff 	add.w	r2, r8, #4294967295
 8009976:	ab0a      	add	r3, sp, #40	; 0x28
 8009978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800997c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009980:	e7f3      	b.n	800996a <__kernel_rem_pio2f+0x2b2>
 8009982:	a90a      	add	r1, sp, #40	; 0x28
 8009984:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009988:	3b01      	subs	r3, #1
 800998a:	430a      	orrs	r2, r1
 800998c:	e7a9      	b.n	80098e2 <__kernel_rem_pio2f+0x22a>
 800998e:	3401      	adds	r4, #1
 8009990:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009994:	2a00      	cmp	r2, #0
 8009996:	d0fa      	beq.n	800998e <__kernel_rem_pio2f+0x2d6>
 8009998:	9b04      	ldr	r3, [sp, #16]
 800999a:	aa1e      	add	r2, sp, #120	; 0x78
 800999c:	4443      	add	r3, r8
 800999e:	f108 0601 	add.w	r6, r8, #1
 80099a2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80099a6:	4444      	add	r4, r8
 80099a8:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 80099ac:	42b4      	cmp	r4, r6
 80099ae:	da08      	bge.n	80099c2 <__kernel_rem_pio2f+0x30a>
 80099b0:	46a0      	mov	r8, r4
 80099b2:	e6c6      	b.n	8009742 <__kernel_rem_pio2f+0x8a>
 80099b4:	0800a9c8 	.word	0x0800a9c8
 80099b8:	0800a99c 	.word	0x0800a99c
 80099bc:	2401      	movs	r4, #1
 80099be:	9b08      	ldr	r3, [sp, #32]
 80099c0:	e7e6      	b.n	8009990 <__kernel_rem_pio2f+0x2d8>
 80099c2:	9b07      	ldr	r3, [sp, #28]
 80099c4:	46ab      	mov	fp, r5
 80099c6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80099ca:	f7f7 f983 	bl	8000cd4 <__aeabi_i2f>
 80099ce:	f04f 0a00 	mov.w	sl, #0
 80099d2:	f04f 0800 	mov.w	r8, #0
 80099d6:	6028      	str	r0, [r5, #0]
 80099d8:	9b03      	ldr	r3, [sp, #12]
 80099da:	459a      	cmp	sl, r3
 80099dc:	dd04      	ble.n	80099e8 <__kernel_rem_pio2f+0x330>
 80099de:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 80099e2:	3504      	adds	r5, #4
 80099e4:	3601      	adds	r6, #1
 80099e6:	e7e1      	b.n	80099ac <__kernel_rem_pio2f+0x2f4>
 80099e8:	9b05      	ldr	r3, [sp, #20]
 80099ea:	f85b 0904 	ldr.w	r0, [fp], #-4
 80099ee:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 80099f2:	f7f7 f9c3 	bl	8000d7c <__aeabi_fmul>
 80099f6:	4601      	mov	r1, r0
 80099f8:	4640      	mov	r0, r8
 80099fa:	f7f7 f8b7 	bl	8000b6c <__addsf3>
 80099fe:	f10a 0a01 	add.w	sl, sl, #1
 8009a02:	4680      	mov	r8, r0
 8009a04:	e7e8      	b.n	80099d8 <__kernel_rem_pio2f+0x320>
 8009a06:	3c01      	subs	r4, #1
 8009a08:	e770      	b.n	80098ec <__kernel_rem_pio2f+0x234>
 8009a0a:	9b06      	ldr	r3, [sp, #24]
 8009a0c:	9a02      	ldr	r2, [sp, #8]
 8009a0e:	4648      	mov	r0, r9
 8009a10:	1a99      	subs	r1, r3, r2
 8009a12:	f000 f905 	bl	8009c20 <scalbnf>
 8009a16:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	f7f7 fb60 	bl	80010e0 <__aeabi_fcmpge>
 8009a20:	b300      	cbz	r0, 8009a64 <__kernel_rem_pio2f+0x3ac>
 8009a22:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8009a26:	4620      	mov	r0, r4
 8009a28:	f7f7 f9a8 	bl	8000d7c <__aeabi_fmul>
 8009a2c:	f7f7 fb82 	bl	8001134 <__aeabi_f2iz>
 8009a30:	f7f7 f950 	bl	8000cd4 <__aeabi_i2f>
 8009a34:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009a38:	4681      	mov	r9, r0
 8009a3a:	f7f7 f99f 	bl	8000d7c <__aeabi_fmul>
 8009a3e:	4601      	mov	r1, r0
 8009a40:	4620      	mov	r0, r4
 8009a42:	f7f7 f891 	bl	8000b68 <__aeabi_fsub>
 8009a46:	f7f7 fb75 	bl	8001134 <__aeabi_f2iz>
 8009a4a:	ab0a      	add	r3, sp, #40	; 0x28
 8009a4c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009a50:	4648      	mov	r0, r9
 8009a52:	f7f7 fb6f 	bl	8001134 <__aeabi_f2iz>
 8009a56:	f108 0401 	add.w	r4, r8, #1
 8009a5a:	ab0a      	add	r3, sp, #40	; 0x28
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009a62:	e74a      	b.n	80098fa <__kernel_rem_pio2f+0x242>
 8009a64:	4620      	mov	r0, r4
 8009a66:	f7f7 fb65 	bl	8001134 <__aeabi_f2iz>
 8009a6a:	ab0a      	add	r3, sp, #40	; 0x28
 8009a6c:	4644      	mov	r4, r8
 8009a6e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009a72:	e742      	b.n	80098fa <__kernel_rem_pio2f+0x242>
 8009a74:	ab0a      	add	r3, sp, #40	; 0x28
 8009a76:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009a7a:	f7f7 f92b 	bl	8000cd4 <__aeabi_i2f>
 8009a7e:	4649      	mov	r1, r9
 8009a80:	f7f7 f97c 	bl	8000d7c <__aeabi_fmul>
 8009a84:	4641      	mov	r1, r8
 8009a86:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8009a8a:	4648      	mov	r0, r9
 8009a8c:	f7f7 f976 	bl	8000d7c <__aeabi_fmul>
 8009a90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a94:	4681      	mov	r9, r0
 8009a96:	e73a      	b.n	800990e <__kernel_rem_pio2f+0x256>
 8009a98:	f853 0b04 	ldr.w	r0, [r3], #4
 8009a9c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8009aa0:	9203      	str	r2, [sp, #12]
 8009aa2:	9302      	str	r3, [sp, #8]
 8009aa4:	f7f7 f96a 	bl	8000d7c <__aeabi_fmul>
 8009aa8:	4601      	mov	r1, r0
 8009aaa:	4640      	mov	r0, r8
 8009aac:	f7f7 f85e 	bl	8000b6c <__addsf3>
 8009ab0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009ab4:	4680      	mov	r8, r0
 8009ab6:	f10a 0a01 	add.w	sl, sl, #1
 8009aba:	9901      	ldr	r1, [sp, #4]
 8009abc:	458a      	cmp	sl, r1
 8009abe:	dc01      	bgt.n	8009ac4 <__kernel_rem_pio2f+0x40c>
 8009ac0:	45ca      	cmp	sl, r9
 8009ac2:	dde9      	ble.n	8009a98 <__kernel_rem_pio2f+0x3e0>
 8009ac4:	ab5a      	add	r3, sp, #360	; 0x168
 8009ac6:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8009aca:	f849 8ca0 	str.w	r8, [r9, #-160]
 8009ace:	3f01      	subs	r7, #1
 8009ad0:	e723      	b.n	800991a <__kernel_rem_pio2f+0x262>
 8009ad2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	dc07      	bgt.n	8009ae8 <__kernel_rem_pio2f+0x430>
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	dc4e      	bgt.n	8009b7a <__kernel_rem_pio2f+0x4c2>
 8009adc:	d02e      	beq.n	8009b3c <__kernel_rem_pio2f+0x484>
 8009ade:	f006 0007 	and.w	r0, r6, #7
 8009ae2:	b05b      	add	sp, #364	; 0x16c
 8009ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d1f7      	bne.n	8009ade <__kernel_rem_pio2f+0x426>
 8009aee:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8009af2:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8009af6:	46b8      	mov	r8, r7
 8009af8:	46a2      	mov	sl, r4
 8009afa:	f1ba 0f00 	cmp.w	sl, #0
 8009afe:	dc49      	bgt.n	8009b94 <__kernel_rem_pio2f+0x4dc>
 8009b00:	46a1      	mov	r9, r4
 8009b02:	f1b9 0f01 	cmp.w	r9, #1
 8009b06:	dc60      	bgt.n	8009bca <__kernel_rem_pio2f+0x512>
 8009b08:	2000      	movs	r0, #0
 8009b0a:	2c01      	cmp	r4, #1
 8009b0c:	dc76      	bgt.n	8009bfc <__kernel_rem_pio2f+0x544>
 8009b0e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8009b10:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8009b12:	2d00      	cmp	r5, #0
 8009b14:	d178      	bne.n	8009c08 <__kernel_rem_pio2f+0x550>
 8009b16:	9900      	ldr	r1, [sp, #0]
 8009b18:	600a      	str	r2, [r1, #0]
 8009b1a:	460a      	mov	r2, r1
 8009b1c:	604b      	str	r3, [r1, #4]
 8009b1e:	6090      	str	r0, [r2, #8]
 8009b20:	e7dd      	b.n	8009ade <__kernel_rem_pio2f+0x426>
 8009b22:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8009b26:	f7f7 f821 	bl	8000b6c <__addsf3>
 8009b2a:	3c01      	subs	r4, #1
 8009b2c:	2c00      	cmp	r4, #0
 8009b2e:	daf8      	bge.n	8009b22 <__kernel_rem_pio2f+0x46a>
 8009b30:	b10d      	cbz	r5, 8009b36 <__kernel_rem_pio2f+0x47e>
 8009b32:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009b36:	9b00      	ldr	r3, [sp, #0]
 8009b38:	6018      	str	r0, [r3, #0]
 8009b3a:	e7d0      	b.n	8009ade <__kernel_rem_pio2f+0x426>
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	af32      	add	r7, sp, #200	; 0xc8
 8009b40:	e7f4      	b.n	8009b2c <__kernel_rem_pio2f+0x474>
 8009b42:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8009b46:	f7f7 f811 	bl	8000b6c <__addsf3>
 8009b4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b4e:	f1b8 0f00 	cmp.w	r8, #0
 8009b52:	daf6      	bge.n	8009b42 <__kernel_rem_pio2f+0x48a>
 8009b54:	b1ad      	cbz	r5, 8009b82 <__kernel_rem_pio2f+0x4ca>
 8009b56:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8009b5a:	9a00      	ldr	r2, [sp, #0]
 8009b5c:	4601      	mov	r1, r0
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8009b62:	f7f7 f801 	bl	8000b68 <__aeabi_fsub>
 8009b66:	f04f 0801 	mov.w	r8, #1
 8009b6a:	4544      	cmp	r4, r8
 8009b6c:	da0b      	bge.n	8009b86 <__kernel_rem_pio2f+0x4ce>
 8009b6e:	b10d      	cbz	r5, 8009b74 <__kernel_rem_pio2f+0x4bc>
 8009b70:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009b74:	9b00      	ldr	r3, [sp, #0]
 8009b76:	6058      	str	r0, [r3, #4]
 8009b78:	e7b1      	b.n	8009ade <__kernel_rem_pio2f+0x426>
 8009b7a:	46a0      	mov	r8, r4
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	af32      	add	r7, sp, #200	; 0xc8
 8009b80:	e7e5      	b.n	8009b4e <__kernel_rem_pio2f+0x496>
 8009b82:	4603      	mov	r3, r0
 8009b84:	e7e9      	b.n	8009b5a <__kernel_rem_pio2f+0x4a2>
 8009b86:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8009b8a:	f7f6 ffef 	bl	8000b6c <__addsf3>
 8009b8e:	f108 0801 	add.w	r8, r8, #1
 8009b92:	e7ea      	b.n	8009b6a <__kernel_rem_pio2f+0x4b2>
 8009b94:	f8d8 3000 	ldr.w	r3, [r8]
 8009b98:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	9302      	str	r3, [sp, #8]
 8009ba2:	9201      	str	r2, [sp, #4]
 8009ba4:	f7f6 ffe2 	bl	8000b6c <__addsf3>
 8009ba8:	9a01      	ldr	r2, [sp, #4]
 8009baa:	4601      	mov	r1, r0
 8009bac:	4681      	mov	r9, r0
 8009bae:	4610      	mov	r0, r2
 8009bb0:	f7f6 ffda 	bl	8000b68 <__aeabi_fsub>
 8009bb4:	9b02      	ldr	r3, [sp, #8]
 8009bb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bba:	4619      	mov	r1, r3
 8009bbc:	f7f6 ffd6 	bl	8000b6c <__addsf3>
 8009bc0:	f848 0904 	str.w	r0, [r8], #-4
 8009bc4:	f8c8 9000 	str.w	r9, [r8]
 8009bc8:	e797      	b.n	8009afa <__kernel_rem_pio2f+0x442>
 8009bca:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8009bce:	f8d7 a000 	ldr.w	sl, [r7]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	4651      	mov	r1, sl
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	f7f6 ffc8 	bl	8000b6c <__addsf3>
 8009bdc:	9b01      	ldr	r3, [sp, #4]
 8009bde:	4601      	mov	r1, r0
 8009be0:	4680      	mov	r8, r0
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7f6 ffc0 	bl	8000b68 <__aeabi_fsub>
 8009be8:	4651      	mov	r1, sl
 8009bea:	f7f6 ffbf 	bl	8000b6c <__addsf3>
 8009bee:	f847 0904 	str.w	r0, [r7], #-4
 8009bf2:	f109 39ff 	add.w	r9, r9, #4294967295
 8009bf6:	f8c7 8000 	str.w	r8, [r7]
 8009bfa:	e782      	b.n	8009b02 <__kernel_rem_pio2f+0x44a>
 8009bfc:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8009c00:	f7f6 ffb4 	bl	8000b6c <__addsf3>
 8009c04:	3c01      	subs	r4, #1
 8009c06:	e780      	b.n	8009b0a <__kernel_rem_pio2f+0x452>
 8009c08:	9900      	ldr	r1, [sp, #0]
 8009c0a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8009c0e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009c12:	600a      	str	r2, [r1, #0]
 8009c14:	604b      	str	r3, [r1, #4]
 8009c16:	460a      	mov	r2, r1
 8009c18:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009c1c:	e77f      	b.n	8009b1e <__kernel_rem_pio2f+0x466>
 8009c1e:	bf00      	nop

08009c20 <scalbnf>:
 8009c20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4603      	mov	r3, r0
 8009c28:	460d      	mov	r5, r1
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	d02e      	beq.n	8009c8c <scalbnf+0x6c>
 8009c2e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009c32:	d304      	bcc.n	8009c3e <scalbnf+0x1e>
 8009c34:	4601      	mov	r1, r0
 8009c36:	f7f6 ff99 	bl	8000b6c <__addsf3>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	e026      	b.n	8009c8c <scalbnf+0x6c>
 8009c3e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8009c42:	d118      	bne.n	8009c76 <scalbnf+0x56>
 8009c44:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8009c48:	f7f7 f898 	bl	8000d7c <__aeabi_fmul>
 8009c4c:	4a17      	ldr	r2, [pc, #92]	; (8009cac <scalbnf+0x8c>)
 8009c4e:	4603      	mov	r3, r0
 8009c50:	4295      	cmp	r5, r2
 8009c52:	db0c      	blt.n	8009c6e <scalbnf+0x4e>
 8009c54:	4604      	mov	r4, r0
 8009c56:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009c5a:	3a19      	subs	r2, #25
 8009c5c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8009c60:	428d      	cmp	r5, r1
 8009c62:	dd0a      	ble.n	8009c7a <scalbnf+0x5a>
 8009c64:	4912      	ldr	r1, [pc, #72]	; (8009cb0 <scalbnf+0x90>)
 8009c66:	4618      	mov	r0, r3
 8009c68:	f361 001e 	bfi	r0, r1, #0, #31
 8009c6c:	e000      	b.n	8009c70 <scalbnf+0x50>
 8009c6e:	4911      	ldr	r1, [pc, #68]	; (8009cb4 <scalbnf+0x94>)
 8009c70:	f7f7 f884 	bl	8000d7c <__aeabi_fmul>
 8009c74:	e7e1      	b.n	8009c3a <scalbnf+0x1a>
 8009c76:	0dd2      	lsrs	r2, r2, #23
 8009c78:	e7f0      	b.n	8009c5c <scalbnf+0x3c>
 8009c7a:	1951      	adds	r1, r2, r5
 8009c7c:	29fe      	cmp	r1, #254	; 0xfe
 8009c7e:	dcf1      	bgt.n	8009c64 <scalbnf+0x44>
 8009c80:	2900      	cmp	r1, #0
 8009c82:	dd05      	ble.n	8009c90 <scalbnf+0x70>
 8009c84:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8009c88:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	bd38      	pop	{r3, r4, r5, pc}
 8009c90:	f111 0f16 	cmn.w	r1, #22
 8009c94:	da01      	bge.n	8009c9a <scalbnf+0x7a>
 8009c96:	4907      	ldr	r1, [pc, #28]	; (8009cb4 <scalbnf+0x94>)
 8009c98:	e7e5      	b.n	8009c66 <scalbnf+0x46>
 8009c9a:	f101 0019 	add.w	r0, r1, #25
 8009c9e:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8009ca2:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8009ca6:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8009caa:	e7e1      	b.n	8009c70 <scalbnf+0x50>
 8009cac:	ffff3cb0 	.word	0xffff3cb0
 8009cb0:	7149f2ca 	.word	0x7149f2ca
 8009cb4:	0da24260 	.word	0x0da24260

08009cb8 <floorf>:
 8009cb8:	b570      	push	{r4, r5, r6, lr}
 8009cba:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8009cbe:	3d7f      	subs	r5, #127	; 0x7f
 8009cc0:	2d16      	cmp	r5, #22
 8009cc2:	4601      	mov	r1, r0
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009cca:	dc25      	bgt.n	8009d18 <floorf+0x60>
 8009ccc:	2d00      	cmp	r5, #0
 8009cce:	da0e      	bge.n	8009cee <floorf+0x36>
 8009cd0:	4916      	ldr	r1, [pc, #88]	; (8009d2c <floorf+0x74>)
 8009cd2:	f7f6 ff4b 	bl	8000b6c <__addsf3>
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	f7f7 fa0c 	bl	80010f4 <__aeabi_fcmpgt>
 8009cdc:	b128      	cbz	r0, 8009cea <floorf+0x32>
 8009cde:	2c00      	cmp	r4, #0
 8009ce0:	da22      	bge.n	8009d28 <floorf+0x70>
 8009ce2:	4b13      	ldr	r3, [pc, #76]	; (8009d30 <floorf+0x78>)
 8009ce4:	2e00      	cmp	r6, #0
 8009ce6:	bf18      	it	ne
 8009ce8:	461c      	movne	r4, r3
 8009cea:	4621      	mov	r1, r4
 8009cec:	e01a      	b.n	8009d24 <floorf+0x6c>
 8009cee:	4e11      	ldr	r6, [pc, #68]	; (8009d34 <floorf+0x7c>)
 8009cf0:	412e      	asrs	r6, r5
 8009cf2:	4230      	tst	r0, r6
 8009cf4:	d016      	beq.n	8009d24 <floorf+0x6c>
 8009cf6:	490d      	ldr	r1, [pc, #52]	; (8009d2c <floorf+0x74>)
 8009cf8:	f7f6 ff38 	bl	8000b6c <__addsf3>
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	f7f7 f9f9 	bl	80010f4 <__aeabi_fcmpgt>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d0f1      	beq.n	8009cea <floorf+0x32>
 8009d06:	2c00      	cmp	r4, #0
 8009d08:	bfbe      	ittt	lt
 8009d0a:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8009d0e:	412b      	asrlt	r3, r5
 8009d10:	18e4      	addlt	r4, r4, r3
 8009d12:	ea24 0406 	bic.w	r4, r4, r6
 8009d16:	e7e8      	b.n	8009cea <floorf+0x32>
 8009d18:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009d1c:	d302      	bcc.n	8009d24 <floorf+0x6c>
 8009d1e:	f7f6 ff25 	bl	8000b6c <__addsf3>
 8009d22:	4601      	mov	r1, r0
 8009d24:	4608      	mov	r0, r1
 8009d26:	bd70      	pop	{r4, r5, r6, pc}
 8009d28:	2400      	movs	r4, #0
 8009d2a:	e7de      	b.n	8009cea <floorf+0x32>
 8009d2c:	7149f2ca 	.word	0x7149f2ca
 8009d30:	bf800000 	.word	0xbf800000
 8009d34:	007fffff 	.word	0x007fffff

08009d38 <_init>:
 8009d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3a:	bf00      	nop
 8009d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3e:	bc08      	pop	{r3}
 8009d40:	469e      	mov	lr, r3
 8009d42:	4770      	bx	lr

08009d44 <_fini>:
 8009d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d46:	bf00      	nop
 8009d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d4a:	bc08      	pop	{r3}
 8009d4c:	469e      	mov	lr, r3
 8009d4e:	4770      	bx	lr
