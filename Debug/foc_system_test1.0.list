
foc_system_test1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076e4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  080078d0  080078d0  000178d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dbc  08007dbc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08007dbc  08007dbc  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007dbc  08007dbc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dbc  08007dbc  00017dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007dc0  08007dc0  00017dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  200001d4  08007f98  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08007f98  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e5b0  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000242b  00000000  00000000  0002e7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  00030c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b55  00000000  00000000  00031aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b5c6  00000000  00000000  000325f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001147e  00000000  00000000  0004dbbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a09ab  00000000  00000000  0005f039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d60  00000000  00000000  000ff9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00104744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	080078b4 	.word	0x080078b4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	080078b4 	.word	0x080078b4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <_write>:
float current_a = 0.0f;
float current_b = 0.0f;
float current_c = 0.0f;

/* USER CODE BEGIN PV */
int _write(int fd, char *ptr, int len) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d002      	beq.n	8001034 <_write+0x18>
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d111      	bne.n	8001058 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	b29a      	uxth	r2, r3
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	4809      	ldr	r0, [pc, #36]	; (8001064 <_write+0x48>)
 8001040:	f003 fd4f 	bl	8004ae2 <HAL_UART_Transmit>
 8001044:	4603      	mov	r3, r0
 8001046:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 8001048:	7dfb      	ldrb	r3, [r7, #23]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <_write+0x36>
            return len;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	e004      	b.n	800105c <_write+0x40>
        else
            return -1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	e001      	b.n	800105c <_write+0x40>
    }
    return -1;
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200002ac 	.word	0x200002ac

08001068 <Read_Current_Sensors>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Read_Current_Sensors(void){
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
	uint32_t timeout = HAL_GetTick() + 100;
 800106e:	f000 fe3b 	bl	8001ce8 <HAL_GetTick>
 8001072:	4603      	mov	r3, r0
 8001074:	3364      	adds	r3, #100	; 0x64
 8001076:	60fb      	str	r3, [r7, #12]

	while(!adc_conversion_complete && HAL_GetTick() < timeout){
 8001078:	bf00      	nop
 800107a:	4b39      	ldr	r3, [pc, #228]	; (8001160 <Read_Current_Sensors+0xf8>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d105      	bne.n	8001090 <Read_Current_Sensors+0x28>
 8001084:	f000 fe30 	bl	8001ce8 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4293      	cmp	r3, r2
 800108e:	d8f4      	bhi.n	800107a <Read_Current_Sensors+0x12>
		// ADC 변환 완료 대기
	}
	if(adc_conversion_complete){
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <Read_Current_Sensors+0xf8>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d05d      	beq.n	8001156 <Read_Current_Sensors+0xee>
		adc_conversion_complete = 0;
 800109a:	4b31      	ldr	r3, [pc, #196]	; (8001160 <Read_Current_Sensors+0xf8>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]

		float adc_voltage_a = (float)adc_values[0] * VREF / ADC_RESOLUTION;
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <Read_Current_Sensors+0xfc>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fe10 	bl	8000ccc <__aeabi_ui2f>
 80010ac:	4603      	mov	r3, r0
 80010ae:	492e      	ldr	r1, [pc, #184]	; (8001168 <Read_Current_Sensors+0x100>)
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fe63 	bl	8000d7c <__aeabi_fmul>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff11 	bl	8000ee4 <__aeabi_fdiv>
 80010c2:	4603      	mov	r3, r0
 80010c4:	60bb      	str	r3, [r7, #8]
		float adc_voltage_b = (float)adc_values[1] * VREF / ADC_RESOLUTION;
 80010c6:	4b27      	ldr	r3, [pc, #156]	; (8001164 <Read_Current_Sensors+0xfc>)
 80010c8:	885b      	ldrh	r3, [r3, #2]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fdfd 	bl	8000ccc <__aeabi_ui2f>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4924      	ldr	r1, [pc, #144]	; (8001168 <Read_Current_Sensors+0x100>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fe50 	bl	8000d7c <__aeabi_fmul>
 80010dc:	4603      	mov	r3, r0
 80010de:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fefe 	bl	8000ee4 <__aeabi_fdiv>
 80010e8:	4603      	mov	r3, r0
 80010ea:	607b      	str	r3, [r7, #4]

		// INA240의 출력에서 오프셋 제거 후 전류 계산
		// 주의: R_sense 값에 따라 조정 필요 (일반적으로 0.01Ω ~ 0.1Ω)
		float R_sense = 0.01f;  // 센스 저항값 (실제 값으로 수정 필요)
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <Read_Current_Sensors+0x104>)
 80010ee:	603b      	str	r3, [r7, #0]

		current_a = (adc_voltage_a - VREF/2.0f) / (INA240_GAIN * R_sense);
 80010f0:	491f      	ldr	r1, [pc, #124]	; (8001170 <Read_Current_Sensors+0x108>)
 80010f2:	68b8      	ldr	r0, [r7, #8]
 80010f4:	f7ff fd38 	bl	8000b68 <__aeabi_fsub>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461c      	mov	r4, r3
 80010fc:	491d      	ldr	r1, [pc, #116]	; (8001174 <Read_Current_Sensors+0x10c>)
 80010fe:	6838      	ldr	r0, [r7, #0]
 8001100:	f7ff fe3c 	bl	8000d7c <__aeabi_fmul>
 8001104:	4603      	mov	r3, r0
 8001106:	4619      	mov	r1, r3
 8001108:	4620      	mov	r0, r4
 800110a:	f7ff feeb 	bl	8000ee4 <__aeabi_fdiv>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <Read_Current_Sensors+0x110>)
 8001114:	601a      	str	r2, [r3, #0]
		current_b = (adc_voltage_b - VREF/2.0f) / (INA240_GAIN * R_sense);
 8001116:	4916      	ldr	r1, [pc, #88]	; (8001170 <Read_Current_Sensors+0x108>)
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff fd25 	bl	8000b68 <__aeabi_fsub>
 800111e:	4603      	mov	r3, r0
 8001120:	461c      	mov	r4, r3
 8001122:	4914      	ldr	r1, [pc, #80]	; (8001174 <Read_Current_Sensors+0x10c>)
 8001124:	6838      	ldr	r0, [r7, #0]
 8001126:	f7ff fe29 	bl	8000d7c <__aeabi_fmul>
 800112a:	4603      	mov	r3, r0
 800112c:	4619      	mov	r1, r3
 800112e:	4620      	mov	r0, r4
 8001130:	f7ff fed8 	bl	8000ee4 <__aeabi_fdiv>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <Read_Current_Sensors+0x114>)
 800113a:	601a      	str	r2, [r3, #0]
		current_c = -(current_a + current_b);  // 키르히호프 법칙
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <Read_Current_Sensors+0x110>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0e      	ldr	r2, [pc, #56]	; (800117c <Read_Current_Sensors+0x114>)
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fd10 	bl	8000b6c <__addsf3>
 800114c:	4603      	mov	r3, r0
 800114e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <Read_Current_Sensors+0x118>)
 8001154:	6013      	str	r3, [r2, #0]
	}
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	bd90      	pop	{r4, r7, pc}
 800115e:	bf00      	nop
 8001160:	200002f8 	.word	0x200002f8
 8001164:	200002f4 	.word	0x200002f4
 8001168:	40533333 	.word	0x40533333
 800116c:	3c23d70a 	.word	0x3c23d70a
 8001170:	3fd33333 	.word	0x3fd33333
 8001174:	41a00000 	.word	0x41a00000
 8001178:	200002fc 	.word	0x200002fc
 800117c:	20000300 	.word	0x20000300
 8001180:	20000304 	.word	0x20000304

08001184 <Print_Current_Data>:

void Print_Current_Data(void) {
 8001184:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af04      	add	r7, sp, #16
    printf("ADC Raw: [%4d, %4d] | ", adc_values[0], adc_values[1]);
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <Print_Current_Data+0xcc>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	4619      	mov	r1, r3
 8001194:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <Print_Current_Data+0xcc>)
 8001196:	885b      	ldrh	r3, [r3, #2]
 8001198:	b29b      	uxth	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	482d      	ldr	r0, [pc, #180]	; (8001254 <Print_Current_Data+0xd0>)
 800119e:	f004 fb95 	bl	80058cc <iprintf>
    printf("Voltage: [%.3fV, %.3fV] | ", (float)adc_values[0] * VREF / ADC_RESOLUTION,(float)adc_values[1] * VREF / ADC_RESOLUTION);
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <Print_Current_Data+0xcc>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fd8f 	bl	8000ccc <__aeabi_ui2f>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4929      	ldr	r1, [pc, #164]	; (8001258 <Print_Current_Data+0xd4>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fde2 	bl	8000d7c <__aeabi_fmul>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fe90 	bl	8000ee4 <__aeabi_fdiv>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f99a 	bl	8000500 <__aeabi_f2d>
 80011cc:	4604      	mov	r4, r0
 80011ce:	460d      	mov	r5, r1
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <Print_Current_Data+0xcc>)
 80011d2:	885b      	ldrh	r3, [r3, #2]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fd78 	bl	8000ccc <__aeabi_ui2f>
 80011dc:	4603      	mov	r3, r0
 80011de:	491e      	ldr	r1, [pc, #120]	; (8001258 <Print_Current_Data+0xd4>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fdcb 	bl	8000d7c <__aeabi_fmul>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fe79 	bl	8000ee4 <__aeabi_fdiv>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f983 	bl	8000500 <__aeabi_f2d>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	e9cd 2300 	strd	r2, r3, [sp]
 8001202:	4622      	mov	r2, r4
 8001204:	462b      	mov	r3, r5
 8001206:	4815      	ldr	r0, [pc, #84]	; (800125c <Print_Current_Data+0xd8>)
 8001208:	f004 fb60 	bl	80058cc <iprintf>
    printf("Current: A=%.3fA, B=%.3fA, C=%.3fA\r\n", current_a, current_b, current_c);
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <Print_Current_Data+0xdc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f975 	bl	8000500 <__aeabi_f2d>
 8001216:	4680      	mov	r8, r0
 8001218:	4689      	mov	r9, r1
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <Print_Current_Data+0xe0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f96e 	bl	8000500 <__aeabi_f2d>
 8001224:	4604      	mov	r4, r0
 8001226:	460d      	mov	r5, r1
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <Print_Current_Data+0xe4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f967 	bl	8000500 <__aeabi_f2d>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800123a:	e9cd 4500 	strd	r4, r5, [sp]
 800123e:	4642      	mov	r2, r8
 8001240:	464b      	mov	r3, r9
 8001242:	480a      	ldr	r0, [pc, #40]	; (800126c <Print_Current_Data+0xe8>)
 8001244:	f004 fb42 	bl	80058cc <iprintf>
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001250:	200002f4 	.word	0x200002f4
 8001254:	080078d0 	.word	0x080078d0
 8001258:	40533333 	.word	0x40533333
 800125c:	080078e8 	.word	0x080078e8
 8001260:	200002fc 	.word	0x200002fc
 8001264:	20000300 	.word	0x20000300
 8001268:	20000304 	.word	0x20000304
 800126c:	08007904 	.word	0x08007904

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001274:	f000 fce0 	bl	8001c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001278:	f000 f864 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127c:	f000 fa14 	bl	80016a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001280:	f000 f9f4 	bl	800166c <MX_DMA_Init>
  MX_ADC3_Init();
 8001284:	f000 f8bc 	bl	8001400 <MX_ADC3_Init>
  MX_TIM1_Init();
 8001288:	f000 f90a 	bl	80014a0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800128c:	f000 f9c4 	bl	8001618 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  // ADC 보정
  if(HAL_ADCEx_Calibration_Start(&hadc3) != HAL_OK){
 8001290:	4821      	ldr	r0, [pc, #132]	; (8001318 <main+0xa8>)
 8001292:	f001 f9f3 	bl	800267c <HAL_ADCEx_Calibration_Start>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d004      	beq.n	80012a6 <main+0x36>
	  printf("ADC Calibration Failed!\r\n");
 800129c:	481f      	ldr	r0, [pc, #124]	; (800131c <main+0xac>)
 800129e:	f004 fb7b 	bl	8005998 <puts>
	  Error_Handler();
 80012a2:	f000 fa63 	bl	800176c <Error_Handler>
  }
  printf("ADC Calibration Complete\r\n");
 80012a6:	481e      	ldr	r0, [pc, #120]	; (8001320 <main+0xb0>)
 80012a8:	f004 fb76 	bl	8005998 <puts>
#if 1
  // Timer 1 시작 (ADC 트리거용)
  printf("Starting Timer1 for ADC trigger...\r\n");
 80012ac:	481d      	ldr	r0, [pc, #116]	; (8001324 <main+0xb4>)
 80012ae:	f004 fb73 	bl	8005998 <puts>
  if (HAL_TIM_Base_Start(&htim1) != HAL_OK) {
 80012b2:	481d      	ldr	r0, [pc, #116]	; (8001328 <main+0xb8>)
 80012b4:	f002 fe32 	bl	8003f1c <HAL_TIM_Base_Start>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d004      	beq.n	80012c8 <main+0x58>
	  printf("Timer1 Start Failed!\r\n");
 80012be:	481b      	ldr	r0, [pc, #108]	; (800132c <main+0xbc>)
 80012c0:	f004 fb6a 	bl	8005998 <puts>
      Error_Handler();
 80012c4:	f000 fa52 	bl	800176c <Error_Handler>
  }

  // TIM1 CH3 Compare 이벤트 활성화
  if (HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) {
 80012c8:	2108      	movs	r1, #8
 80012ca:	4817      	ldr	r0, [pc, #92]	; (8001328 <main+0xb8>)
 80012cc:	f002 fe7e 	bl	8003fcc <HAL_TIM_OC_Start>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d004      	beq.n	80012e0 <main+0x70>
      printf("Timer1 CH3 OC Start Failed!\r\n");
 80012d6:	4816      	ldr	r0, [pc, #88]	; (8001330 <main+0xc0>)
 80012d8:	f004 fb5e 	bl	8005998 <puts>
      Error_Handler();
 80012dc:	f000 fa46 	bl	800176c <Error_Handler>
  }
#endif
  // ADC DMA 시작
  printf("Starting ADC DMA...\r\n");
 80012e0:	4814      	ldr	r0, [pc, #80]	; (8001334 <main+0xc4>)
 80012e2:	f004 fb59 	bl	8005998 <puts>
  if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc_values, 2) != HAL_OK){
 80012e6:	2202      	movs	r2, #2
 80012e8:	4913      	ldr	r1, [pc, #76]	; (8001338 <main+0xc8>)
 80012ea:	480b      	ldr	r0, [pc, #44]	; (8001318 <main+0xa8>)
 80012ec:	f000 fe14 	bl	8001f18 <HAL_ADC_Start_DMA>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <main+0x90>
	  printf("ADC DMA Start Failed!\r\n");
 80012f6:	4811      	ldr	r0, [pc, #68]	; (800133c <main+0xcc>)
 80012f8:	f004 fb4e 	bl	8005998 <puts>
	  Error_Handler();
 80012fc:	f000 fa36 	bl	800176c <Error_Handler>
  }


  printf("ADC DMA Started Successfully\r\n");
 8001300:	480f      	ldr	r0, [pc, #60]	; (8001340 <main+0xd0>)
 8001302:	f004 fb49 	bl	8005998 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Read_Current_Sensors();
 8001306:	f7ff feaf 	bl	8001068 <Read_Current_Sensors>
	  Print_Current_Data();
 800130a:	f7ff ff3b 	bl	8001184 <Print_Current_Data>

	  HAL_Delay(500);
 800130e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001312:	f000 fcf3 	bl	8001cfc <HAL_Delay>
	  Read_Current_Sensors();
 8001316:	e7f6      	b.n	8001306 <main+0x96>
 8001318:	200001f0 	.word	0x200001f0
 800131c:	0800792c 	.word	0x0800792c
 8001320:	08007948 	.word	0x08007948
 8001324:	08007964 	.word	0x08007964
 8001328:	20000264 	.word	0x20000264
 800132c:	08007988 	.word	0x08007988
 8001330:	080079a0 	.word	0x080079a0
 8001334:	080079c0 	.word	0x080079c0
 8001338:	200002f4 	.word	0x200002f4
 800133c:	080079d8 	.word	0x080079d8
 8001340:	080079f0 	.word	0x080079f0

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b096      	sub	sp, #88	; 0x58
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800134e:	2228      	movs	r2, #40	; 0x28
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f004 fc00 	bl	8005b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001378:	2301      	movs	r3, #1
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001386:	2301      	movs	r3, #1
 8001388:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138a:	2302      	movs	r3, #2
 800138c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001392:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001394:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001398:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 f81e 	bl	80033e0 <HAL_RCC_OscConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80013aa:	f000 f9df 	bl	800176c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ae:	230f      	movs	r3, #15
 80013b0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b2:	2302      	movs	r3, #2
 80013b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	2102      	movs	r1, #2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 fa8a 	bl	80038e4 <HAL_RCC_ClockConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013d6:	f000 f9c9 	bl	800176c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013da:	2302      	movs	r3, #2
 80013dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013e2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 fc0a 	bl	8003c00 <HAL_RCCEx_PeriphCLKConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80013f2:	f000 f9bb 	bl	800176c <Error_Handler>
  }
}
 80013f6:	bf00      	nop
 80013f8:	3758      	adds	r7, #88	; 0x58
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <MX_ADC3_Init+0x98>)
 8001412:	4a22      	ldr	r2, [pc, #136]	; (800149c <MX_ADC3_Init+0x9c>)
 8001414:	601a      	str	r2, [r3, #0]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <MX_ADC3_Init+0x98>)
 8001418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800141e:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <MX_ADC3_Init+0x98>)
 8001420:	2201      	movs	r2, #1
 8001422:	731a      	strb	r2, [r3, #12]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <MX_ADC3_Init+0x98>)
 8001426:	2200      	movs	r2, #0
 8001428:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <MX_ADC3_Init+0x98>)
 800142c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001430:	61da      	str	r2, [r3, #28]
  //hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <MX_ADC3_Init+0x98>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
  hadc3.Init.NbrOfConversion = 2;
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <MX_ADC3_Init+0x98>)
 800143a:	2202      	movs	r2, #2
 800143c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800143e:	4816      	ldr	r0, [pc, #88]	; (8001498 <MX_ADC3_Init+0x98>)
 8001440:	f000 fc80 	bl	8001d44 <HAL_ADC_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_ADC3_Init+0x4e>
  {
    Error_Handler();
 800144a:	f000 f98f 	bl	800176c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800144e:	2304      	movs	r3, #4
 8001450:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001452:	2301      	movs	r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001456:	2307      	movs	r3, #7
 8001458:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4619      	mov	r1, r3
 800145e:	480e      	ldr	r0, [pc, #56]	; (8001498 <MX_ADC3_Init+0x98>)
 8001460:	f000 ff12 	bl	8002288 <HAL_ADC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800146a:	f000 f97f 	bl	800176c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800146e:	2305      	movs	r3, #5
 8001470:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001472:	2302      	movs	r3, #2
 8001474:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001476:	2307      	movs	r3, #7
 8001478:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	; (8001498 <MX_ADC3_Init+0x98>)
 8001480:	f000 ff02 	bl	8002288 <HAL_ADC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800148a:	f000 f96f 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200001f0 	.word	0x200001f0
 800149c:	40013c00 	.word	0x40013c00

080014a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b098      	sub	sp, #96	; 0x60
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	615a      	str	r2, [r3, #20]
 80014c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	2220      	movs	r2, #32
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f004 fb43 	bl	8005b58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014d2:	4b4f      	ldr	r3, [pc, #316]	; (8001610 <MX_TIM1_Init+0x170>)
 80014d4:	4a4f      	ldr	r2, [pc, #316]	; (8001614 <MX_TIM1_Init+0x174>)
 80014d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014d8:	4b4d      	ldr	r3, [pc, #308]	; (8001610 <MX_TIM1_Init+0x170>)
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <MX_TIM1_Init+0x170>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80014e4:	4b4a      	ldr	r3, [pc, #296]	; (8001610 <MX_TIM1_Init+0x170>)
 80014e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80014ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ec:	4b48      	ldr	r3, [pc, #288]	; (8001610 <MX_TIM1_Init+0x170>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <MX_TIM1_Init+0x170>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b45      	ldr	r3, [pc, #276]	; (8001610 <MX_TIM1_Init+0x170>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014fe:	4844      	ldr	r0, [pc, #272]	; (8001610 <MX_TIM1_Init+0x170>)
 8001500:	f002 fe1e 	bl	8004140 <HAL_TIM_PWM_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800150a:	f000 f92f 	bl	800176c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001516:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800151a:	4619      	mov	r1, r3
 800151c:	483c      	ldr	r0, [pc, #240]	; (8001610 <MX_TIM1_Init+0x170>)
 800151e:	f003 f9d3 	bl	80048c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001528:	f000 f920 	bl	800176c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152c:	2360      	movs	r3, #96	; 0x60
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.Pulse = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001534:	2300      	movs	r3, #0
 8001536:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001538:	2300      	movs	r3, #0
 800153a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001548:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800154c:	2200      	movs	r2, #0
 800154e:	4619      	mov	r1, r3
 8001550:	482f      	ldr	r0, [pc, #188]	; (8001610 <MX_TIM1_Init+0x170>)
 8001552:	f002 fea1 	bl	8004298 <HAL_TIM_PWM_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800155c:	f000 f906 	bl	800176c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001560:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001564:	2204      	movs	r2, #4
 8001566:	4619      	mov	r1, r3
 8001568:	4829      	ldr	r0, [pc, #164]	; (8001610 <MX_TIM1_Init+0x170>)
 800156a:	f002 fe95 	bl	8004298 <HAL_TIM_PWM_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001574:	f000 f8fa 	bl	800176c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001578:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800157c:	2208      	movs	r2, #8
 800157e:	4619      	mov	r1, r3
 8001580:	4823      	ldr	r0, [pc, #140]	; (8001610 <MX_TIM1_Init+0x170>)
 8001582:	f002 fe89 	bl	8004298 <HAL_TIM_PWM_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800158c:	f000 f8ee 	bl	800176c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.DeadTime = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	4619      	mov	r1, r3
 80015b4:	4816      	ldr	r0, [pc, #88]	; (8001610 <MX_TIM1_Init+0x170>)
 80015b6:	f003 f9f3 	bl	80049a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80015c0:	f000 f8d4 	bl	800176c <Error_Handler>
  }
  // 추가 1
  // ADC 트리거용 CH3 Compare 설정 추가
  TIM_OC_InitTypeDef sConfigOC_CH3 = {0};
 80015c4:	463b      	mov	r3, r7
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	619a      	str	r2, [r3, #24]
  sConfigOC_CH3.OCMode = TIM_OCMODE_PWM1;
 80015d6:	2360      	movs	r3, #96	; 0x60
 80015d8:	603b      	str	r3, [r7, #0]
  sConfigOC_CH3.Pulse = 1000;  // Period(2000)의 50% 지점
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	607b      	str	r3, [r7, #4]
  sConfigOC_CH3.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfigOC_CH3.OCFastMode = TIM_OCFAST_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
  sConfigOC_CH3.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC_CH3, TIM_CHANNEL_3) != HAL_OK)
 80015ec:	463b      	mov	r3, r7
 80015ee:	2208      	movs	r2, #8
 80015f0:	4619      	mov	r1, r3
 80015f2:	4807      	ldr	r0, [pc, #28]	; (8001610 <MX_TIM1_Init+0x170>)
 80015f4:	f002 fdf4 	bl	80041e0 <HAL_TIM_OC_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM1_Init+0x162>
  {
      Error_Handler();
 80015fe:	f000 f8b5 	bl	800176c <Error_Handler>
  }

  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001602:	4803      	ldr	r0, [pc, #12]	; (8001610 <MX_TIM1_Init+0x170>)
 8001604:	f000 f97a 	bl	80018fc <HAL_TIM_MspPostInit>

}
 8001608:	bf00      	nop
 800160a:	3760      	adds	r7, #96	; 0x60
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000264 	.word	0x20000264
 8001614:	40012c00 	.word	0x40012c00

08001618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <MX_USART2_UART_Init+0x50>)
 8001620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_USART2_UART_Init+0x4c>)
 8001650:	f003 f9f7 	bl	8004a42 <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800165a:	f000 f887 	bl	800176c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200002ac 	.word	0x200002ac
 8001668:	40004400 	.word	0x40004400

0800166c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_DMA_Init+0x38>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <MX_DMA_Init+0x38>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6153      	str	r3, [r2, #20]
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_DMA_Init+0x38>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	203b      	movs	r0, #59	; 0x3b
 8001690:	f001 f983 	bl	800299a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8001694:	203b      	movs	r0, #59	; 0x3b
 8001696:	f001 f99c 	bl	80029d2 <HAL_NVIC_EnableIRQ>

}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000

080016a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016bc:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <MX_GPIO_Init+0x90>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <MX_GPIO_Init+0x90>)
 80016c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <MX_GPIO_Init+0x90>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <MX_GPIO_Init+0x90>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a17      	ldr	r2, [pc, #92]	; (8001738 <MX_GPIO_Init+0x90>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <MX_GPIO_Init+0x90>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <MX_GPIO_Init+0x90>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a11      	ldr	r2, [pc, #68]	; (8001738 <MX_GPIO_Init+0x90>)
 80016f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_GPIO_Init+0x90>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800170a:	480c      	ldr	r0, [pc, #48]	; (800173c <MX_GPIO_Init+0x94>)
 800170c:	f001 fe50 	bl	80033b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Enable_Pin */
  GPIO_InitStruct.Pin = Enable_Pin;
 8001710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2302      	movs	r3, #2
 8001720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Enable_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 0310 	add.w	r3, r7, #16
 8001726:	4619      	mov	r1, r3
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <MX_GPIO_Init+0x94>)
 800172a:	f001 fcad 	bl	8003088 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800172e:	bf00      	nop
 8001730:	3720      	adds	r7, #32
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	40011800 	.word	0x40011800

08001740 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC3){
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a05      	ldr	r2, [pc, #20]	; (8001764 <HAL_ADC_ConvCpltCallback+0x24>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d102      	bne.n	8001758 <HAL_ADC_ConvCpltCallback+0x18>
		adc_conversion_complete = 1;
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_ADC_ConvCpltCallback+0x28>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
	}
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40013c00 	.word	0x40013c00
 8001768:	200002f8 	.word	0x200002f8

0800176c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001770:	b672      	cpsid	i
}
 8001772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001774:	e7fe      	b.n	8001774 <Error_Handler+0x8>
	...

08001778 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_MspInit+0x5c>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <HAL_MspInit+0x5c>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6193      	str	r3, [r2, #24]
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_MspInit+0x5c>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_MspInit+0x5c>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_MspInit+0x5c>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	61d3      	str	r3, [r2, #28]
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_MspInit+0x5c>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_MspInit+0x60>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <HAL_MspInit+0x60>)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010000 	.word	0x40010000

080017dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC3)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a2d      	ldr	r2, [pc, #180]	; (80018ac <HAL_ADC_MspInit+0xd0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d152      	bne.n	80018a2 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80017fc:	4b2c      	ldr	r3, [pc, #176]	; (80018b0 <HAL_ADC_MspInit+0xd4>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a2b      	ldr	r2, [pc, #172]	; (80018b0 <HAL_ADC_MspInit+0xd4>)
 8001802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <HAL_ADC_MspInit+0xd4>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001814:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <HAL_ADC_MspInit+0xd4>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a25      	ldr	r2, [pc, #148]	; (80018b0 <HAL_ADC_MspInit+0xd4>)
 800181a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <HAL_ADC_MspInit+0xd4>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF6     ------> ADC3_IN4
    PF7     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = phase_a_Pin|phase_b_Pin;
 800182c:	23c0      	movs	r3, #192	; 0xc0
 800182e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001830:	2303      	movs	r3, #3
 8001832:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	4619      	mov	r1, r3
 800183a:	481e      	ldr	r0, [pc, #120]	; (80018b4 <HAL_ADC_MspInit+0xd8>)
 800183c:	f001 fc24 	bl	8003088 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Channel5;
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_ADC_MspInit+0xdc>)
 8001842:	4a1e      	ldr	r2, [pc, #120]	; (80018bc <HAL_ADC_MspInit+0xe0>)
 8001844:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <HAL_ADC_MspInit+0xdc>)
 8001848:	2200      	movs	r2, #0
 800184a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <HAL_ADC_MspInit+0xdc>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_ADC_MspInit+0xdc>)
 8001854:	2280      	movs	r2, #128	; 0x80
 8001856:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_ADC_MspInit+0xdc>)
 800185a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800185e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_ADC_MspInit+0xdc>)
 8001862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001866:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <HAL_ADC_MspInit+0xdc>)
 800186a:	2220      	movs	r2, #32
 800186c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_ADC_MspInit+0xdc>)
 8001870:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001874:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001876:	4810      	ldr	r0, [pc, #64]	; (80018b8 <HAL_ADC_MspInit+0xdc>)
 8001878:	f001 f8c6 	bl	8002a08 <HAL_DMA_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8001882:	f7ff ff73 	bl	800176c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <HAL_ADC_MspInit+0xdc>)
 800188a:	621a      	str	r2, [r3, #32]
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_ADC_MspInit+0xdc>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	202f      	movs	r0, #47	; 0x2f
 8001898:	f001 f87f 	bl	800299a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800189c:	202f      	movs	r0, #47	; 0x2f
 800189e:	f001 f898 	bl	80029d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 80018a2:	bf00      	nop
 80018a4:	3720      	adds	r7, #32
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40013c00 	.word	0x40013c00
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40011c00 	.word	0x40011c00
 80018b8:	20000220 	.word	0x20000220
 80018bc:	40020458 	.word	0x40020458

080018c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <HAL_TIM_PWM_MspInit+0x34>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d10b      	bne.n	80018ea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_TIM_PWM_MspInit+0x38>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <HAL_TIM_PWM_MspInit+0x38>)
 80018d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018dc:	6193      	str	r3, [r2, #24]
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_TIM_PWM_MspInit+0x38>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	40012c00 	.word	0x40012c00
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a19      	ldr	r2, [pc, #100]	; (800197c <HAL_TIM_MspPostInit+0x80>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d12a      	bne.n	8001972 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_TIM_MspPostInit+0x84>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a17      	ldr	r2, [pc, #92]	; (8001980 <HAL_TIM_MspPostInit+0x84>)
 8001922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_TIM_MspPostInit+0x84>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_A_Pin|PWM_B_Pin|PWM_C_Pin;
 8001934:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001938:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	4619      	mov	r1, r3
 8001948:	480e      	ldr	r0, [pc, #56]	; (8001984 <HAL_TIM_MspPostInit+0x88>)
 800194a:	f001 fb9d 	bl	8003088 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <HAL_TIM_MspPostInit+0x8c>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	61fb      	str	r3, [r7, #28]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800195a:	61fb      	str	r3, [r7, #28]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001962:	61fb      	str	r3, [r7, #28]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	4a06      	ldr	r2, [pc, #24]	; (8001988 <HAL_TIM_MspPostInit+0x8c>)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001972:	bf00      	nop
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40012c00 	.word	0x40012c00
 8001980:	40021000 	.word	0x40021000
 8001984:	40011800 	.word	0x40011800
 8001988:	40010000 	.word	0x40010000

0800198c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1b      	ldr	r2, [pc, #108]	; (8001a14 <HAL_UART_MspInit+0x88>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d12f      	bne.n	8001a0c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ac:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <HAL_UART_MspInit+0x8c>)
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	4a19      	ldr	r2, [pc, #100]	; (8001a18 <HAL_UART_MspInit+0x8c>)
 80019b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b6:	61d3      	str	r3, [r2, #28]
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <HAL_UART_MspInit+0x8c>)
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <HAL_UART_MspInit+0x8c>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <HAL_UART_MspInit+0x8c>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_UART_MspInit+0x8c>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019dc:	2304      	movs	r3, #4
 80019de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	4619      	mov	r1, r3
 80019ee:	480b      	ldr	r0, [pc, #44]	; (8001a1c <HAL_UART_MspInit+0x90>)
 80019f0:	f001 fb4a 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019f4:	2308      	movs	r3, #8
 80019f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	4619      	mov	r1, r3
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <HAL_UART_MspInit+0x90>)
 8001a08:	f001 fb3e 	bl	8003088 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a0c:	bf00      	nop
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40004400 	.word	0x40004400
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010800 	.word	0x40010800

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a24:	e7fe      	b.n	8001a24 <NMI_Handler+0x4>

08001a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <HardFault_Handler+0x4>

08001a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <MemManage_Handler+0x4>

08001a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a66:	f000 f92d 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <ADC3_IRQHandler+0x10>)
 8001a76:	f000 fb2d 	bl	80020d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200001f0 	.word	0x200001f0

08001a84 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <DMA2_Channel4_5_IRQHandler+0x10>)
 8001a8a:	f001 f893 	bl	8002bb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000220 	.word	0x20000220

08001a98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return 1;
 8001a9c:	2301      	movs	r3, #1
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <_kill>:

int _kill(int pid, int sig)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ab0:	f004 f8a4 	bl	8005bfc <__errno>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2216      	movs	r2, #22
 8001ab8:	601a      	str	r2, [r3, #0]
  return -1;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_exit>:

void _exit (int status)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ace:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffe7 	bl	8001aa6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ad8:	e7fe      	b.n	8001ad8 <_exit+0x12>

08001ada <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e00a      	b.n	8001b02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aec:	f3af 8000 	nop.w
 8001af0:	4601      	mov	r1, r0
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	60ba      	str	r2, [r7, #8]
 8001af8:	b2ca      	uxtb	r2, r1
 8001afa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dbf0      	blt.n	8001aec <_read+0x12>
  }

  return len;
 8001b0a:	687b      	ldr	r3, [r7, #4]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b3a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <_isatty>:

int _isatty(int file)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b50:	2301      	movs	r3, #1
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <_sbrk+0x5c>)
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <_sbrk+0x60>)
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <_sbrk+0x64>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <_sbrk+0x68>)
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d207      	bcs.n	8001bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba4:	f004 f82a 	bl	8005bfc <__errno>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	220c      	movs	r2, #12
 8001bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	e009      	b.n	8001bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <_sbrk+0x64>)
 8001bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20010000 	.word	0x20010000
 8001bd4:	00000400 	.word	0x00000400
 8001bd8:	20000308 	.word	0x20000308
 8001bdc:	20000460 	.word	0x20000460

08001be0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bec:	f7ff fff8 	bl	8001be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf0:	480b      	ldr	r0, [pc, #44]	; (8001c20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bf2:	490c      	ldr	r1, [pc, #48]	; (8001c24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bf4:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf8:	e002      	b.n	8001c00 <LoopCopyDataInit>

08001bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfe:	3304      	adds	r3, #4

08001c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c04:	d3f9      	bcc.n	8001bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c06:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c08:	4c09      	ldr	r4, [pc, #36]	; (8001c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c0c:	e001      	b.n	8001c12 <LoopFillZerobss>

08001c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c10:	3204      	adds	r2, #4

08001c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c14:	d3fb      	bcc.n	8001c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c16:	f003 fff7 	bl	8005c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c1a:	f7ff fb29 	bl	8001270 <main>
  bx lr
 8001c1e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c24:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c28:	08007dc4 	.word	0x08007dc4
  ldr r2, =_sbss
 8001c2c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c30:	2000045c 	.word	0x2000045c

08001c34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c34:	e7fe      	b.n	8001c34 <ADC1_2_IRQHandler>
	...

08001c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_Init+0x28>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <HAL_Init+0x28>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 fe9b 	bl	8002984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	200f      	movs	r0, #15
 8001c50:	f000 f808 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fd90 	bl	8001778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40022000 	.word	0x40022000

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 feb3 	bl	80029ee <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f000 fe7b 	bl	800299a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_IncTick+0x1c>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a03      	ldr	r2, [pc, #12]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	2000030c 	.word	0x2000030c

08001ce8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b02      	ldr	r3, [pc, #8]	; (8001cf8 <HAL_GetTick+0x10>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	2000030c 	.word	0x2000030c

08001cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f7ff fff0 	bl	8001ce8 <HAL_GetTick>
 8001d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d005      	beq.n	8001d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_Delay+0x44>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d22:	bf00      	nop
 8001d24:	f7ff ffe0 	bl	8001ce8 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d8f7      	bhi.n	8001d24 <HAL_Delay+0x28>
  {
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000008 	.word	0x20000008

08001d44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0ce      	b.n	8001f04 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d109      	bne.n	8001d88 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fd2a 	bl	80017dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fbcf 	bl	800252c <ADC_ConversionStop_Disable>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 80a9 	bne.w	8001ef2 <HAL_ADC_Init+0x1ae>
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f040 80a5 	bne.w	8001ef2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001db0:	f023 0302 	bic.w	r3, r3, #2
 8001db4:	f043 0202 	orr.w	r2, r3, #2
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4951      	ldr	r1, [pc, #324]	; (8001f0c <HAL_ADC_Init+0x1c8>)
 8001dc6:	428b      	cmp	r3, r1
 8001dc8:	d10a      	bne.n	8001de0 <HAL_ADC_Init+0x9c>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001dd2:	d002      	beq.n	8001dda <HAL_ADC_Init+0x96>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	e004      	b.n	8001de4 <HAL_ADC_Init+0xa0>
 8001dda:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001dde:	e001      	b.n	8001de4 <HAL_ADC_Init+0xa0>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001de4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7b1b      	ldrb	r3, [r3, #12]
 8001dea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dfc:	d003      	beq.n	8001e06 <HAL_ADC_Init+0xc2>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d102      	bne.n	8001e0c <HAL_ADC_Init+0xc8>
 8001e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e0a:	e000      	b.n	8001e0e <HAL_ADC_Init+0xca>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7d1b      	ldrb	r3, [r3, #20]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d119      	bne.n	8001e50 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7b1b      	ldrb	r3, [r3, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d109      	bne.n	8001e38 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	035a      	lsls	r2, r3, #13
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	e00b      	b.n	8001e50 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	f043 0220 	orr.w	r2, r3, #32
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	f043 0201 	orr.w	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <HAL_ADC_Init+0x1cc>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	430b      	orrs	r3, r1
 8001e76:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e80:	d003      	beq.n	8001e8a <HAL_ADC_Init+0x146>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d104      	bne.n	8001e94 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	051b      	lsls	r3, r3, #20
 8001e92:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_ADC_Init+0x1d0>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	f023 0303 	bic.w	r3, r3, #3
 8001ec6:	f043 0201 	orr.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ece:	e018      	b.n	8001f02 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	f023 0312 	bic.w	r3, r3, #18
 8001ed8:	f043 0210 	orr.w	r2, r3, #16
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	f043 0201 	orr.w	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ef0:	e007      	b.n	8001f02 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef6:	f043 0210 	orr.w	r2, r3, #16
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40013c00 	.word	0x40013c00
 8001f10:	ffe1f7fd 	.word	0xffe1f7fd
 8001f14:	ff1f0efe 	.word	0xff1f0efe

08001f18 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a64      	ldr	r2, [pc, #400]	; (80020c0 <HAL_ADC_Start_DMA+0x1a8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d004      	beq.n	8001f3c <HAL_ADC_Start_DMA+0x24>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a63      	ldr	r2, [pc, #396]	; (80020c4 <HAL_ADC_Start_DMA+0x1ac>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d106      	bne.n	8001f4a <HAL_ADC_Start_DMA+0x32>
 8001f3c:	4b60      	ldr	r3, [pc, #384]	; (80020c0 <HAL_ADC_Start_DMA+0x1a8>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f040 80b3 	bne.w	80020b0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_Start_DMA+0x40>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e0ae      	b.n	80020b6 <HAL_ADC_Start_DMA+0x19e>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 fa89 	bl	8002478 <ADC_Enable>
 8001f66:	4603      	mov	r3, r0
 8001f68:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f6a:	7dfb      	ldrb	r3, [r7, #23]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f040 809a 	bne.w	80020a6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a4e      	ldr	r2, [pc, #312]	; (80020c4 <HAL_ADC_Start_DMA+0x1ac>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d105      	bne.n	8001f9c <HAL_ADC_Start_DMA+0x84>
 8001f90:	4b4b      	ldr	r3, [pc, #300]	; (80020c0 <HAL_ADC_Start_DMA+0x1a8>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d115      	bne.n	8001fc8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d026      	beq.n	8002004 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fbe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fc6:	e01d      	b.n	8002004 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a39      	ldr	r2, [pc, #228]	; (80020c0 <HAL_ADC_Start_DMA+0x1a8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d004      	beq.n	8001fe8 <HAL_ADC_Start_DMA+0xd0>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a38      	ldr	r2, [pc, #224]	; (80020c4 <HAL_ADC_Start_DMA+0x1ac>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d10d      	bne.n	8002004 <HAL_ADC_Start_DMA+0xec>
 8001fe8:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <HAL_ADC_Start_DMA+0x1a8>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ffc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d006      	beq.n	800201e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	f023 0206 	bic.w	r2, r3, #6
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c
 800201c:	e002      	b.n	8002024 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4a25      	ldr	r2, [pc, #148]	; (80020c8 <HAL_ADC_Start_DMA+0x1b0>)
 8002032:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4a24      	ldr	r2, [pc, #144]	; (80020cc <HAL_ADC_Start_DMA+0x1b4>)
 800203a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4a23      	ldr	r2, [pc, #140]	; (80020d0 <HAL_ADC_Start_DMA+0x1b8>)
 8002042:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0202 	mvn.w	r2, #2
 800204c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800205c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a18      	ldr	r0, [r3, #32]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	334c      	adds	r3, #76	; 0x4c
 8002068:	4619      	mov	r1, r3
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f000 fd41 	bl	8002af4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800207c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002080:	d108      	bne.n	8002094 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002090:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002092:	e00f      	b.n	80020b4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020a2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80020a4:	e006      	b.n	80020b4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80020ae:	e001      	b.n	80020b4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40012400 	.word	0x40012400
 80020c4:	40012800 	.word	0x40012800
 80020c8:	080025af 	.word	0x080025af
 80020cc:	0800262b 	.word	0x0800262b
 80020d0:	08002647 	.word	0x08002647

080020d4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d03e      	beq.n	8002174 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d039      	beq.n	8002174 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b00      	cmp	r3, #0
 800210a:	d105      	bne.n	8002118 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002122:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002126:	d11d      	bne.n	8002164 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800212c:	2b00      	cmp	r3, #0
 800212e:	d119      	bne.n	8002164 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0220 	bic.w	r2, r2, #32
 800213e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d105      	bne.n	8002164 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	f043 0201 	orr.w	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff faeb 	bl	8001740 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f06f 0212 	mvn.w	r2, #18
 8002172:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217a:	2b00      	cmp	r3, #0
 800217c:	d04d      	beq.n	800221a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d048      	beq.n	800221a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	2b00      	cmp	r3, #0
 8002192:	d105      	bne.n	80021a0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80021aa:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80021ae:	d012      	beq.n	80021d6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d125      	bne.n	800220a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80021c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021cc:	d11d      	bne.n	800220a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d119      	bne.n	800220a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d105      	bne.n	800220a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fae4 	bl	80027d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 020c 	mvn.w	r2, #12
 8002218:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002220:	2b00      	cmp	r3, #0
 8002222:	d012      	beq.n	800224a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00d      	beq.n	800224a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f812 	bl	8002264 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0201 	mvn.w	r2, #1
 8002248:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x20>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e0dc      	b.n	8002462 <HAL_ADC_ConfigChannel+0x1da>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b06      	cmp	r3, #6
 80022b6:	d81c      	bhi.n	80022f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	3b05      	subs	r3, #5
 80022ca:	221f      	movs	r2, #31
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	4019      	ands	r1, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	3b05      	subs	r3, #5
 80022e4:	fa00 f203 	lsl.w	r2, r0, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	635a      	str	r2, [r3, #52]	; 0x34
 80022f0:	e03c      	b.n	800236c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d81c      	bhi.n	8002334 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	3b23      	subs	r3, #35	; 0x23
 800230c:	221f      	movs	r2, #31
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	4019      	ands	r1, r3
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	3b23      	subs	r3, #35	; 0x23
 8002326:	fa00 f203 	lsl.w	r2, r0, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
 8002332:	e01b      	b.n	800236c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	3b41      	subs	r3, #65	; 0x41
 8002346:	221f      	movs	r2, #31
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	4019      	ands	r1, r3
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	3b41      	subs	r3, #65	; 0x41
 8002360:	fa00 f203 	lsl.w	r2, r0, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b09      	cmp	r3, #9
 8002372:	d91c      	bls.n	80023ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68d9      	ldr	r1, [r3, #12]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	3b1e      	subs	r3, #30
 8002386:	2207      	movs	r2, #7
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	4019      	ands	r1, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6898      	ldr	r0, [r3, #8]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	3b1e      	subs	r3, #30
 80023a0:	fa00 f203 	lsl.w	r2, r0, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	60da      	str	r2, [r3, #12]
 80023ac:	e019      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6919      	ldr	r1, [r3, #16]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	2207      	movs	r2, #7
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	4019      	ands	r1, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6898      	ldr	r0, [r3, #8]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	fa00 f203 	lsl.w	r2, r0, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d003      	beq.n	80023f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023ee:	2b11      	cmp	r3, #17
 80023f0:	d132      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1d      	ldr	r2, [pc, #116]	; (800246c <HAL_ADC_ConfigChannel+0x1e4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d125      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d126      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002418:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b10      	cmp	r3, #16
 8002420:	d11a      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <HAL_ADC_ConfigChannel+0x1e8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a13      	ldr	r2, [pc, #76]	; (8002474 <HAL_ADC_ConfigChannel+0x1ec>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	0c9a      	lsrs	r2, r3, #18
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002438:	e002      	b.n	8002440 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	3b01      	subs	r3, #1
 800243e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f9      	bne.n	800243a <HAL_ADC_ConfigChannel+0x1b2>
 8002446:	e007      	b.n	8002458 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	f043 0220 	orr.w	r2, r3, #32
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	40012400 	.word	0x40012400
 8002470:	20000000 	.word	0x20000000
 8002474:	431bde83 	.word	0x431bde83

08002478 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b01      	cmp	r3, #1
 8002494:	d040      	beq.n	8002518 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0201 	orr.w	r2, r2, #1
 80024a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024a6:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <ADC_Enable+0xac>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1f      	ldr	r2, [pc, #124]	; (8002528 <ADC_Enable+0xb0>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	0c9b      	lsrs	r3, r3, #18
 80024b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024b4:	e002      	b.n	80024bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f9      	bne.n	80024b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024c2:	f7ff fc11 	bl	8001ce8 <HAL_GetTick>
 80024c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024c8:	e01f      	b.n	800250a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ca:	f7ff fc0d 	bl	8001ce8 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d918      	bls.n	800250a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d011      	beq.n	800250a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	f043 0210 	orr.w	r2, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e007      	b.n	800251a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d1d8      	bne.n	80024ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000000 	.word	0x20000000
 8002528:	431bde83 	.word	0x431bde83

0800252c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d12e      	bne.n	80025a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002556:	f7ff fbc7 	bl	8001ce8 <HAL_GetTick>
 800255a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800255c:	e01b      	b.n	8002596 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800255e:	f7ff fbc3 	bl	8001ce8 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d914      	bls.n	8002596 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d10d      	bne.n	8002596 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	f043 0210 	orr.w	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	f043 0201 	orr.w	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e007      	b.n	80025a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d0dc      	beq.n	800255e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d127      	bne.n	8002618 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80025de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80025e2:	d115      	bne.n	8002610 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d111      	bne.n	8002610 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff f895 	bl	8001740 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002616:	e004      	b.n	8002622 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	4798      	blx	r3
}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7ff fe0a 	bl	8002252 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	f043 0204 	orr.w	r2, r3, #4
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f7ff fe02 	bl	8002276 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_ADCEx_Calibration_Start+0x1e>
 8002696:	2302      	movs	r3, #2
 8002698:	e097      	b.n	80027ca <HAL_ADCEx_Calibration_Start+0x14e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ff42 	bl	800252c <ADC_ConversionStop_Disable>
 80026a8:	4603      	mov	r3, r0
 80026aa:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff fee3 	bl	8002478 <ADC_Enable>
 80026b2:	4603      	mov	r3, r0
 80026b4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80026b6:	7dfb      	ldrb	r3, [r7, #23]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f040 8081 	bne.w	80027c0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026c6:	f023 0302 	bic.w	r3, r3, #2
 80026ca:	f043 0202 	orr.w	r2, r3, #2
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80026d2:	4b40      	ldr	r3, [pc, #256]	; (80027d4 <HAL_ADCEx_Calibration_Start+0x158>)
 80026d4:	681c      	ldr	r4, [r3, #0]
 80026d6:	2002      	movs	r0, #2
 80026d8:	f001 fb48 	bl	8003d6c <HAL_RCCEx_GetPeriphCLKFreq>
 80026dc:	4603      	mov	r3, r0
 80026de:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80026e2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80026e4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80026e6:	e002      	b.n	80026ee <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f9      	bne.n	80026e8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0208 	orr.w	r2, r2, #8
 8002702:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002704:	f7ff faf0 	bl	8001ce8 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800270a:	e01b      	b.n	8002744 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800270c:	f7ff faec 	bl	8001ce8 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b0a      	cmp	r3, #10
 8002718:	d914      	bls.n	8002744 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	f023 0312 	bic.w	r3, r3, #18
 8002730:	f043 0210 	orr.w	r2, r3, #16
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e042      	b.n	80027ca <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1dc      	bne.n	800270c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0204 	orr.w	r2, r2, #4
 8002760:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002762:	f7ff fac1 	bl	8001ce8 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002768:	e01b      	b.n	80027a2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800276a:	f7ff fabd 	bl	8001ce8 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b0a      	cmp	r3, #10
 8002776:	d914      	bls.n	80027a2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00d      	beq.n	80027a2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	f023 0312 	bic.w	r3, r3, #18
 800278e:	f043 0210 	orr.w	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e013      	b.n	80027ca <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1dc      	bne.n	800276a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	f023 0303 	bic.w	r3, r3, #3
 80027b8:	f043 0201 	orr.w	r2, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd90      	pop	{r4, r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000000 	.word	0x20000000

080027d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
	...

080027ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002808:	4013      	ands	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281e:	4a04      	ldr	r2, [pc, #16]	; (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	60d3      	str	r3, [r2, #12]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002838:	4b04      	ldr	r3, [pc, #16]	; (800284c <__NVIC_GetPriorityGrouping+0x18>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	f003 0307 	and.w	r3, r3, #7
}
 8002842:	4618      	mov	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	2b00      	cmp	r3, #0
 8002860:	db0b      	blt.n	800287a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	f003 021f 	and.w	r2, r3, #31
 8002868:	4906      	ldr	r1, [pc, #24]	; (8002884 <__NVIC_EnableIRQ+0x34>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2001      	movs	r0, #1
 8002872:	fa00 f202 	lsl.w	r2, r0, r2
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	e000e100 	.word	0xe000e100

08002888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	2b00      	cmp	r3, #0
 800289a:	db0a      	blt.n	80028b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	490c      	ldr	r1, [pc, #48]	; (80028d4 <__NVIC_SetPriority+0x4c>)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	0112      	lsls	r2, r2, #4
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	440b      	add	r3, r1
 80028ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b0:	e00a      	b.n	80028c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4908      	ldr	r1, [pc, #32]	; (80028d8 <__NVIC_SetPriority+0x50>)
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	3b04      	subs	r3, #4
 80028c0:	0112      	lsls	r2, r2, #4
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	440b      	add	r3, r1
 80028c6:	761a      	strb	r2, [r3, #24]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000e100 	.word	0xe000e100
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f1c3 0307 	rsb	r3, r3, #7
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	bf28      	it	cs
 80028fa:	2304      	movcs	r3, #4
 80028fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3304      	adds	r3, #4
 8002902:	2b06      	cmp	r3, #6
 8002904:	d902      	bls.n	800290c <NVIC_EncodePriority+0x30>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3b03      	subs	r3, #3
 800290a:	e000      	b.n	800290e <NVIC_EncodePriority+0x32>
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	401a      	ands	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002924:	f04f 31ff 	mov.w	r1, #4294967295
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	43d9      	mvns	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	4313      	orrs	r3, r2
         );
}
 8002936:	4618      	mov	r0, r3
 8002938:	3724      	adds	r7, #36	; 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002950:	d301      	bcc.n	8002956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002952:	2301      	movs	r3, #1
 8002954:	e00f      	b.n	8002976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002956:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <SysTick_Config+0x40>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800295e:	210f      	movs	r1, #15
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	f7ff ff90 	bl	8002888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <SysTick_Config+0x40>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800296e:	4b04      	ldr	r3, [pc, #16]	; (8002980 <SysTick_Config+0x40>)
 8002970:	2207      	movs	r2, #7
 8002972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	e000e010 	.word	0xe000e010

08002984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff ff2d 	bl	80027ec <__NVIC_SetPriorityGrouping>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800299a:	b580      	push	{r7, lr}
 800299c:	b086      	sub	sp, #24
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029ac:	f7ff ff42 	bl	8002834 <__NVIC_GetPriorityGrouping>
 80029b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	6978      	ldr	r0, [r7, #20]
 80029b8:	f7ff ff90 	bl	80028dc <NVIC_EncodePriority>
 80029bc:	4602      	mov	r2, r0
 80029be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff5f 	bl	8002888 <__NVIC_SetPriority>
}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff35 	bl	8002850 <__NVIC_EnableIRQ>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff ffa2 	bl	8002940 <SysTick_Config>
 80029fc:	4603      	mov	r3, r0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e059      	b.n	8002ad2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <HAL_DMA_Init+0xd4>)
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d80f      	bhi.n	8002a4a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <HAL_DMA_Init+0xd8>)
 8002a32:	4413      	add	r3, r2
 8002a34:	4a2b      	ldr	r2, [pc, #172]	; (8002ae4 <HAL_DMA_Init+0xdc>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	009a      	lsls	r2, r3, #2
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <HAL_DMA_Init+0xe0>)
 8002a46:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a48:	e00e      	b.n	8002a68 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	4b26      	ldr	r3, [pc, #152]	; (8002aec <HAL_DMA_Init+0xe4>)
 8002a52:	4413      	add	r3, r2
 8002a54:	4a23      	ldr	r2, [pc, #140]	; (8002ae4 <HAL_DMA_Init+0xdc>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	091b      	lsrs	r3, r3, #4
 8002a5c:	009a      	lsls	r2, r3, #2
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <HAL_DMA_Init+0xe8>)
 8002a66:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a7e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	40020407 	.word	0x40020407
 8002ae0:	bffdfff8 	.word	0xbffdfff8
 8002ae4:	cccccccd 	.word	0xcccccccd
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	bffdfbf8 	.word	0xbffdfbf8
 8002af0:	40020400 	.word	0x40020400

08002af4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_DMA_Start_IT+0x20>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e04b      	b.n	8002bac <HAL_DMA_Start_IT+0xb8>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d13a      	bne.n	8002b9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 fa6d 	bl	800302c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 020e 	orr.w	r2, r2, #14
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e00f      	b.n	8002b8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0204 	bic.w	r2, r2, #4
 8002b7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 020a 	orr.w	r2, r2, #10
 8002b8a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	e005      	b.n	8002baa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80f1 	beq.w	8002dc0 <HAL_DMA_IRQHandler+0x20c>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80eb 	beq.w	8002dc0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d107      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0204 	bic.w	r2, r2, #4
 8002c06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b5f      	ldr	r3, [pc, #380]	; (8002d8c <HAL_DMA_IRQHandler+0x1d8>)
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d958      	bls.n	8002cc6 <HAL_DMA_IRQHandler+0x112>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a5d      	ldr	r2, [pc, #372]	; (8002d90 <HAL_DMA_IRQHandler+0x1dc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d04f      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x10a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a5c      	ldr	r2, [pc, #368]	; (8002d94 <HAL_DMA_IRQHandler+0x1e0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d048      	beq.n	8002cba <HAL_DMA_IRQHandler+0x106>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a5a      	ldr	r2, [pc, #360]	; (8002d98 <HAL_DMA_IRQHandler+0x1e4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d040      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x100>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a59      	ldr	r2, [pc, #356]	; (8002d9c <HAL_DMA_IRQHandler+0x1e8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d038      	beq.n	8002cae <HAL_DMA_IRQHandler+0xfa>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a57      	ldr	r2, [pc, #348]	; (8002da0 <HAL_DMA_IRQHandler+0x1ec>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d030      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0xf4>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a56      	ldr	r2, [pc, #344]	; (8002da4 <HAL_DMA_IRQHandler+0x1f0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d028      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0xee>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a4d      	ldr	r2, [pc, #308]	; (8002d8c <HAL_DMA_IRQHandler+0x1d8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d020      	beq.n	8002c9c <HAL_DMA_IRQHandler+0xe8>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a52      	ldr	r2, [pc, #328]	; (8002da8 <HAL_DMA_IRQHandler+0x1f4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d019      	beq.n	8002c98 <HAL_DMA_IRQHandler+0xe4>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a50      	ldr	r2, [pc, #320]	; (8002dac <HAL_DMA_IRQHandler+0x1f8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d012      	beq.n	8002c94 <HAL_DMA_IRQHandler+0xe0>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a4f      	ldr	r2, [pc, #316]	; (8002db0 <HAL_DMA_IRQHandler+0x1fc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d00a      	beq.n	8002c8e <HAL_DMA_IRQHandler+0xda>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a4d      	ldr	r2, [pc, #308]	; (8002db4 <HAL_DMA_IRQHandler+0x200>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d102      	bne.n	8002c88 <HAL_DMA_IRQHandler+0xd4>
 8002c82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c86:	e01b      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x10c>
 8002c88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c8c:	e018      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x10c>
 8002c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c92:	e015      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x10c>
 8002c94:	2340      	movs	r3, #64	; 0x40
 8002c96:	e013      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x10c>
 8002c98:	2304      	movs	r3, #4
 8002c9a:	e011      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x10c>
 8002c9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ca0:	e00e      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x10c>
 8002ca2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ca6:	e00b      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x10c>
 8002ca8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cac:	e008      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x10c>
 8002cae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cb2:	e005      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x10c>
 8002cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb8:	e002      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x10c>
 8002cba:	2340      	movs	r3, #64	; 0x40
 8002cbc:	e000      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x10c>
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	4a3d      	ldr	r2, [pc, #244]	; (8002db8 <HAL_DMA_IRQHandler+0x204>)
 8002cc2:	6053      	str	r3, [r2, #4]
 8002cc4:	e057      	b.n	8002d76 <HAL_DMA_IRQHandler+0x1c2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a31      	ldr	r2, [pc, #196]	; (8002d90 <HAL_DMA_IRQHandler+0x1dc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d04f      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x1bc>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a2f      	ldr	r2, [pc, #188]	; (8002d94 <HAL_DMA_IRQHandler+0x1e0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d048      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x1b8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a2e      	ldr	r2, [pc, #184]	; (8002d98 <HAL_DMA_IRQHandler+0x1e4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d040      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x1b2>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a2c      	ldr	r2, [pc, #176]	; (8002d9c <HAL_DMA_IRQHandler+0x1e8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d038      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x1ac>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a2b      	ldr	r2, [pc, #172]	; (8002da0 <HAL_DMA_IRQHandler+0x1ec>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d030      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x1a6>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a29      	ldr	r2, [pc, #164]	; (8002da4 <HAL_DMA_IRQHandler+0x1f0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d028      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x1a0>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a21      	ldr	r2, [pc, #132]	; (8002d8c <HAL_DMA_IRQHandler+0x1d8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d020      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x19a>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a25      	ldr	r2, [pc, #148]	; (8002da8 <HAL_DMA_IRQHandler+0x1f4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d019      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x196>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a24      	ldr	r2, [pc, #144]	; (8002dac <HAL_DMA_IRQHandler+0x1f8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d012      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x192>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a22      	ldr	r2, [pc, #136]	; (8002db0 <HAL_DMA_IRQHandler+0x1fc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00a      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x18c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a21      	ldr	r2, [pc, #132]	; (8002db4 <HAL_DMA_IRQHandler+0x200>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d102      	bne.n	8002d3a <HAL_DMA_IRQHandler+0x186>
 8002d34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d38:	e01b      	b.n	8002d72 <HAL_DMA_IRQHandler+0x1be>
 8002d3a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d3e:	e018      	b.n	8002d72 <HAL_DMA_IRQHandler+0x1be>
 8002d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d44:	e015      	b.n	8002d72 <HAL_DMA_IRQHandler+0x1be>
 8002d46:	2340      	movs	r3, #64	; 0x40
 8002d48:	e013      	b.n	8002d72 <HAL_DMA_IRQHandler+0x1be>
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	e011      	b.n	8002d72 <HAL_DMA_IRQHandler+0x1be>
 8002d4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d52:	e00e      	b.n	8002d72 <HAL_DMA_IRQHandler+0x1be>
 8002d54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d58:	e00b      	b.n	8002d72 <HAL_DMA_IRQHandler+0x1be>
 8002d5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d5e:	e008      	b.n	8002d72 <HAL_DMA_IRQHandler+0x1be>
 8002d60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d64:	e005      	b.n	8002d72 <HAL_DMA_IRQHandler+0x1be>
 8002d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d6a:	e002      	b.n	8002d72 <HAL_DMA_IRQHandler+0x1be>
 8002d6c:	2340      	movs	r3, #64	; 0x40
 8002d6e:	e000      	b.n	8002d72 <HAL_DMA_IRQHandler+0x1be>
 8002d70:	2304      	movs	r3, #4
 8002d72:	4a12      	ldr	r2, [pc, #72]	; (8002dbc <HAL_DMA_IRQHandler+0x208>)
 8002d74:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8136 	beq.w	8002fec <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d88:	e130      	b.n	8002fec <HAL_DMA_IRQHandler+0x438>
 8002d8a:	bf00      	nop
 8002d8c:	40020080 	.word	0x40020080
 8002d90:	40020008 	.word	0x40020008
 8002d94:	4002001c 	.word	0x4002001c
 8002d98:	40020030 	.word	0x40020030
 8002d9c:	40020044 	.word	0x40020044
 8002da0:	40020058 	.word	0x40020058
 8002da4:	4002006c 	.word	0x4002006c
 8002da8:	40020408 	.word	0x40020408
 8002dac:	4002041c 	.word	0x4002041c
 8002db0:	40020430 	.word	0x40020430
 8002db4:	40020444 	.word	0x40020444
 8002db8:	40020400 	.word	0x40020400
 8002dbc:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80dd 	beq.w	8002f8c <HAL_DMA_IRQHandler+0x3d8>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80d7 	beq.w	8002f8c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 020a 	bic.w	r2, r2, #10
 8002dfa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b7b      	ldr	r3, [pc, #492]	; (8002ff8 <HAL_DMA_IRQHandler+0x444>)
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d958      	bls.n	8002ec2 <HAL_DMA_IRQHandler+0x30e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a79      	ldr	r2, [pc, #484]	; (8002ffc <HAL_DMA_IRQHandler+0x448>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d04f      	beq.n	8002eba <HAL_DMA_IRQHandler+0x306>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a78      	ldr	r2, [pc, #480]	; (8003000 <HAL_DMA_IRQHandler+0x44c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d048      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x302>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a76      	ldr	r2, [pc, #472]	; (8003004 <HAL_DMA_IRQHandler+0x450>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d040      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x2fc>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a75      	ldr	r2, [pc, #468]	; (8003008 <HAL_DMA_IRQHandler+0x454>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d038      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x2f6>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a73      	ldr	r2, [pc, #460]	; (800300c <HAL_DMA_IRQHandler+0x458>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d030      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x2f0>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a72      	ldr	r2, [pc, #456]	; (8003010 <HAL_DMA_IRQHandler+0x45c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d028      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x2ea>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a69      	ldr	r2, [pc, #420]	; (8002ff8 <HAL_DMA_IRQHandler+0x444>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d020      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x2e4>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a6e      	ldr	r2, [pc, #440]	; (8003014 <HAL_DMA_IRQHandler+0x460>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d019      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x2e0>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a6c      	ldr	r2, [pc, #432]	; (8003018 <HAL_DMA_IRQHandler+0x464>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d012      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x2dc>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a6b      	ldr	r2, [pc, #428]	; (800301c <HAL_DMA_IRQHandler+0x468>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00a      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x2d6>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a69      	ldr	r2, [pc, #420]	; (8003020 <HAL_DMA_IRQHandler+0x46c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d102      	bne.n	8002e84 <HAL_DMA_IRQHandler+0x2d0>
 8002e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e82:	e01b      	b.n	8002ebc <HAL_DMA_IRQHandler+0x308>
 8002e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e88:	e018      	b.n	8002ebc <HAL_DMA_IRQHandler+0x308>
 8002e8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e8e:	e015      	b.n	8002ebc <HAL_DMA_IRQHandler+0x308>
 8002e90:	2320      	movs	r3, #32
 8002e92:	e013      	b.n	8002ebc <HAL_DMA_IRQHandler+0x308>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e011      	b.n	8002ebc <HAL_DMA_IRQHandler+0x308>
 8002e98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e9c:	e00e      	b.n	8002ebc <HAL_DMA_IRQHandler+0x308>
 8002e9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ea2:	e00b      	b.n	8002ebc <HAL_DMA_IRQHandler+0x308>
 8002ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea8:	e008      	b.n	8002ebc <HAL_DMA_IRQHandler+0x308>
 8002eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eae:	e005      	b.n	8002ebc <HAL_DMA_IRQHandler+0x308>
 8002eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eb4:	e002      	b.n	8002ebc <HAL_DMA_IRQHandler+0x308>
 8002eb6:	2320      	movs	r3, #32
 8002eb8:	e000      	b.n	8002ebc <HAL_DMA_IRQHandler+0x308>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	4a59      	ldr	r2, [pc, #356]	; (8003024 <HAL_DMA_IRQHandler+0x470>)
 8002ebe:	6053      	str	r3, [r2, #4]
 8002ec0:	e057      	b.n	8002f72 <HAL_DMA_IRQHandler+0x3be>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a4d      	ldr	r2, [pc, #308]	; (8002ffc <HAL_DMA_IRQHandler+0x448>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d04f      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x3b8>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a4b      	ldr	r2, [pc, #300]	; (8003000 <HAL_DMA_IRQHandler+0x44c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d048      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x3b4>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a4a      	ldr	r2, [pc, #296]	; (8003004 <HAL_DMA_IRQHandler+0x450>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d040      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x3ae>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a48      	ldr	r2, [pc, #288]	; (8003008 <HAL_DMA_IRQHandler+0x454>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d038      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x3a8>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a47      	ldr	r2, [pc, #284]	; (800300c <HAL_DMA_IRQHandler+0x458>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d030      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x3a2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a45      	ldr	r2, [pc, #276]	; (8003010 <HAL_DMA_IRQHandler+0x45c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d028      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x39c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a3d      	ldr	r2, [pc, #244]	; (8002ff8 <HAL_DMA_IRQHandler+0x444>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d020      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x396>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a41      	ldr	r2, [pc, #260]	; (8003014 <HAL_DMA_IRQHandler+0x460>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d019      	beq.n	8002f46 <HAL_DMA_IRQHandler+0x392>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a40      	ldr	r2, [pc, #256]	; (8003018 <HAL_DMA_IRQHandler+0x464>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d012      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x38e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a3e      	ldr	r2, [pc, #248]	; (800301c <HAL_DMA_IRQHandler+0x468>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00a      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x388>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a3d      	ldr	r2, [pc, #244]	; (8003020 <HAL_DMA_IRQHandler+0x46c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d102      	bne.n	8002f36 <HAL_DMA_IRQHandler+0x382>
 8002f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f34:	e01b      	b.n	8002f6e <HAL_DMA_IRQHandler+0x3ba>
 8002f36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f3a:	e018      	b.n	8002f6e <HAL_DMA_IRQHandler+0x3ba>
 8002f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f40:	e015      	b.n	8002f6e <HAL_DMA_IRQHandler+0x3ba>
 8002f42:	2320      	movs	r3, #32
 8002f44:	e013      	b.n	8002f6e <HAL_DMA_IRQHandler+0x3ba>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e011      	b.n	8002f6e <HAL_DMA_IRQHandler+0x3ba>
 8002f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f4e:	e00e      	b.n	8002f6e <HAL_DMA_IRQHandler+0x3ba>
 8002f50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f54:	e00b      	b.n	8002f6e <HAL_DMA_IRQHandler+0x3ba>
 8002f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f5a:	e008      	b.n	8002f6e <HAL_DMA_IRQHandler+0x3ba>
 8002f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f60:	e005      	b.n	8002f6e <HAL_DMA_IRQHandler+0x3ba>
 8002f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f66:	e002      	b.n	8002f6e <HAL_DMA_IRQHandler+0x3ba>
 8002f68:	2320      	movs	r3, #32
 8002f6a:	e000      	b.n	8002f6e <HAL_DMA_IRQHandler+0x3ba>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	4a2e      	ldr	r2, [pc, #184]	; (8003028 <HAL_DMA_IRQHandler+0x474>)
 8002f70:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d034      	beq.n	8002fec <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f8a:	e02f      	b.n	8002fec <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	2208      	movs	r2, #8
 8002f92:	409a      	lsls	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d028      	beq.n	8002fee <HAL_DMA_IRQHandler+0x43a>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d023      	beq.n	8002fee <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 020e 	bic.w	r2, r2, #14
 8002fb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d004      	beq.n	8002fee <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
    }
  }
  return;
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
}
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40020080 	.word	0x40020080
 8002ffc:	40020008 	.word	0x40020008
 8003000:	4002001c 	.word	0x4002001c
 8003004:	40020030 	.word	0x40020030
 8003008:	40020044 	.word	0x40020044
 800300c:	40020058 	.word	0x40020058
 8003010:	4002006c 	.word	0x4002006c
 8003014:	40020408 	.word	0x40020408
 8003018:	4002041c 	.word	0x4002041c
 800301c:	40020430 	.word	0x40020430
 8003020:	40020444 	.word	0x40020444
 8003024:	40020400 	.word	0x40020400
 8003028:	40020000 	.word	0x40020000

0800302c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003042:	2101      	movs	r1, #1
 8003044:	fa01 f202 	lsl.w	r2, r1, r2
 8003048:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b10      	cmp	r3, #16
 8003058:	d108      	bne.n	800306c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800306a:	e007      	b.n	800307c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	60da      	str	r2, [r3, #12]
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr
	...

08003088 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003088:	b480      	push	{r7}
 800308a:	b08b      	sub	sp, #44	; 0x2c
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003096:	2300      	movs	r3, #0
 8003098:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800309a:	e179      	b.n	8003390 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800309c:	2201      	movs	r2, #1
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	f040 8168 	bne.w	800338a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4a96      	ldr	r2, [pc, #600]	; (8003318 <HAL_GPIO_Init+0x290>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d05e      	beq.n	8003182 <HAL_GPIO_Init+0xfa>
 80030c4:	4a94      	ldr	r2, [pc, #592]	; (8003318 <HAL_GPIO_Init+0x290>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d875      	bhi.n	80031b6 <HAL_GPIO_Init+0x12e>
 80030ca:	4a94      	ldr	r2, [pc, #592]	; (800331c <HAL_GPIO_Init+0x294>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d058      	beq.n	8003182 <HAL_GPIO_Init+0xfa>
 80030d0:	4a92      	ldr	r2, [pc, #584]	; (800331c <HAL_GPIO_Init+0x294>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d86f      	bhi.n	80031b6 <HAL_GPIO_Init+0x12e>
 80030d6:	4a92      	ldr	r2, [pc, #584]	; (8003320 <HAL_GPIO_Init+0x298>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d052      	beq.n	8003182 <HAL_GPIO_Init+0xfa>
 80030dc:	4a90      	ldr	r2, [pc, #576]	; (8003320 <HAL_GPIO_Init+0x298>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d869      	bhi.n	80031b6 <HAL_GPIO_Init+0x12e>
 80030e2:	4a90      	ldr	r2, [pc, #576]	; (8003324 <HAL_GPIO_Init+0x29c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d04c      	beq.n	8003182 <HAL_GPIO_Init+0xfa>
 80030e8:	4a8e      	ldr	r2, [pc, #568]	; (8003324 <HAL_GPIO_Init+0x29c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d863      	bhi.n	80031b6 <HAL_GPIO_Init+0x12e>
 80030ee:	4a8e      	ldr	r2, [pc, #568]	; (8003328 <HAL_GPIO_Init+0x2a0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d046      	beq.n	8003182 <HAL_GPIO_Init+0xfa>
 80030f4:	4a8c      	ldr	r2, [pc, #560]	; (8003328 <HAL_GPIO_Init+0x2a0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d85d      	bhi.n	80031b6 <HAL_GPIO_Init+0x12e>
 80030fa:	2b12      	cmp	r3, #18
 80030fc:	d82a      	bhi.n	8003154 <HAL_GPIO_Init+0xcc>
 80030fe:	2b12      	cmp	r3, #18
 8003100:	d859      	bhi.n	80031b6 <HAL_GPIO_Init+0x12e>
 8003102:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <HAL_GPIO_Init+0x80>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	08003183 	.word	0x08003183
 800310c:	0800315d 	.word	0x0800315d
 8003110:	0800316f 	.word	0x0800316f
 8003114:	080031b1 	.word	0x080031b1
 8003118:	080031b7 	.word	0x080031b7
 800311c:	080031b7 	.word	0x080031b7
 8003120:	080031b7 	.word	0x080031b7
 8003124:	080031b7 	.word	0x080031b7
 8003128:	080031b7 	.word	0x080031b7
 800312c:	080031b7 	.word	0x080031b7
 8003130:	080031b7 	.word	0x080031b7
 8003134:	080031b7 	.word	0x080031b7
 8003138:	080031b7 	.word	0x080031b7
 800313c:	080031b7 	.word	0x080031b7
 8003140:	080031b7 	.word	0x080031b7
 8003144:	080031b7 	.word	0x080031b7
 8003148:	080031b7 	.word	0x080031b7
 800314c:	08003165 	.word	0x08003165
 8003150:	08003179 	.word	0x08003179
 8003154:	4a75      	ldr	r2, [pc, #468]	; (800332c <HAL_GPIO_Init+0x2a4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800315a:	e02c      	b.n	80031b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	623b      	str	r3, [r7, #32]
          break;
 8003162:	e029      	b.n	80031b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	3304      	adds	r3, #4
 800316a:	623b      	str	r3, [r7, #32]
          break;
 800316c:	e024      	b.n	80031b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	3308      	adds	r3, #8
 8003174:	623b      	str	r3, [r7, #32]
          break;
 8003176:	e01f      	b.n	80031b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	330c      	adds	r3, #12
 800317e:	623b      	str	r3, [r7, #32]
          break;
 8003180:	e01a      	b.n	80031b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d102      	bne.n	8003190 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800318a:	2304      	movs	r3, #4
 800318c:	623b      	str	r3, [r7, #32]
          break;
 800318e:	e013      	b.n	80031b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003198:	2308      	movs	r3, #8
 800319a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	611a      	str	r2, [r3, #16]
          break;
 80031a2:	e009      	b.n	80031b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031a4:	2308      	movs	r3, #8
 80031a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	615a      	str	r2, [r3, #20]
          break;
 80031ae:	e003      	b.n	80031b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031b0:	2300      	movs	r3, #0
 80031b2:	623b      	str	r3, [r7, #32]
          break;
 80031b4:	e000      	b.n	80031b8 <HAL_GPIO_Init+0x130>
          break;
 80031b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2bff      	cmp	r3, #255	; 0xff
 80031bc:	d801      	bhi.n	80031c2 <HAL_GPIO_Init+0x13a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	e001      	b.n	80031c6 <HAL_GPIO_Init+0x13e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3304      	adds	r3, #4
 80031c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2bff      	cmp	r3, #255	; 0xff
 80031cc:	d802      	bhi.n	80031d4 <HAL_GPIO_Init+0x14c>
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	e002      	b.n	80031da <HAL_GPIO_Init+0x152>
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	3b08      	subs	r3, #8
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	210f      	movs	r1, #15
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	fa01 f303 	lsl.w	r3, r1, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	401a      	ands	r2, r3
 80031ec:	6a39      	ldr	r1, [r7, #32]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	fa01 f303 	lsl.w	r3, r1, r3
 80031f4:	431a      	orrs	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80c1 	beq.w	800338a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003208:	4b49      	ldr	r3, [pc, #292]	; (8003330 <HAL_GPIO_Init+0x2a8>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	4a48      	ldr	r2, [pc, #288]	; (8003330 <HAL_GPIO_Init+0x2a8>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6193      	str	r3, [r2, #24]
 8003214:	4b46      	ldr	r3, [pc, #280]	; (8003330 <HAL_GPIO_Init+0x2a8>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003220:	4a44      	ldr	r2, [pc, #272]	; (8003334 <HAL_GPIO_Init+0x2ac>)
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	089b      	lsrs	r3, r3, #2
 8003226:	3302      	adds	r3, #2
 8003228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	220f      	movs	r2, #15
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4013      	ands	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a3c      	ldr	r2, [pc, #240]	; (8003338 <HAL_GPIO_Init+0x2b0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d01f      	beq.n	800328c <HAL_GPIO_Init+0x204>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a3b      	ldr	r2, [pc, #236]	; (800333c <HAL_GPIO_Init+0x2b4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d019      	beq.n	8003288 <HAL_GPIO_Init+0x200>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a3a      	ldr	r2, [pc, #232]	; (8003340 <HAL_GPIO_Init+0x2b8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d013      	beq.n	8003284 <HAL_GPIO_Init+0x1fc>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a39      	ldr	r2, [pc, #228]	; (8003344 <HAL_GPIO_Init+0x2bc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d00d      	beq.n	8003280 <HAL_GPIO_Init+0x1f8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a38      	ldr	r2, [pc, #224]	; (8003348 <HAL_GPIO_Init+0x2c0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d007      	beq.n	800327c <HAL_GPIO_Init+0x1f4>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a37      	ldr	r2, [pc, #220]	; (800334c <HAL_GPIO_Init+0x2c4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d101      	bne.n	8003278 <HAL_GPIO_Init+0x1f0>
 8003274:	2305      	movs	r3, #5
 8003276:	e00a      	b.n	800328e <HAL_GPIO_Init+0x206>
 8003278:	2306      	movs	r3, #6
 800327a:	e008      	b.n	800328e <HAL_GPIO_Init+0x206>
 800327c:	2304      	movs	r3, #4
 800327e:	e006      	b.n	800328e <HAL_GPIO_Init+0x206>
 8003280:	2303      	movs	r3, #3
 8003282:	e004      	b.n	800328e <HAL_GPIO_Init+0x206>
 8003284:	2302      	movs	r3, #2
 8003286:	e002      	b.n	800328e <HAL_GPIO_Init+0x206>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <HAL_GPIO_Init+0x206>
 800328c:	2300      	movs	r3, #0
 800328e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003290:	f002 0203 	and.w	r2, r2, #3
 8003294:	0092      	lsls	r2, r2, #2
 8003296:	4093      	lsls	r3, r2
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800329e:	4925      	ldr	r1, [pc, #148]	; (8003334 <HAL_GPIO_Init+0x2ac>)
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	089b      	lsrs	r3, r3, #2
 80032a4:	3302      	adds	r3, #2
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d006      	beq.n	80032c6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032b8:	4b25      	ldr	r3, [pc, #148]	; (8003350 <HAL_GPIO_Init+0x2c8>)
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	4924      	ldr	r1, [pc, #144]	; (8003350 <HAL_GPIO_Init+0x2c8>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	608b      	str	r3, [r1, #8]
 80032c4:	e006      	b.n	80032d4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032c6:	4b22      	ldr	r3, [pc, #136]	; (8003350 <HAL_GPIO_Init+0x2c8>)
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	4920      	ldr	r1, [pc, #128]	; (8003350 <HAL_GPIO_Init+0x2c8>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d006      	beq.n	80032ee <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032e0:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_GPIO_Init+0x2c8>)
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	491a      	ldr	r1, [pc, #104]	; (8003350 <HAL_GPIO_Init+0x2c8>)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60cb      	str	r3, [r1, #12]
 80032ec:	e006      	b.n	80032fc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032ee:	4b18      	ldr	r3, [pc, #96]	; (8003350 <HAL_GPIO_Init+0x2c8>)
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	4916      	ldr	r1, [pc, #88]	; (8003350 <HAL_GPIO_Init+0x2c8>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d025      	beq.n	8003354 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003308:	4b11      	ldr	r3, [pc, #68]	; (8003350 <HAL_GPIO_Init+0x2c8>)
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	4910      	ldr	r1, [pc, #64]	; (8003350 <HAL_GPIO_Init+0x2c8>)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]
 8003314:	e025      	b.n	8003362 <HAL_GPIO_Init+0x2da>
 8003316:	bf00      	nop
 8003318:	10320000 	.word	0x10320000
 800331c:	10310000 	.word	0x10310000
 8003320:	10220000 	.word	0x10220000
 8003324:	10210000 	.word	0x10210000
 8003328:	10120000 	.word	0x10120000
 800332c:	10110000 	.word	0x10110000
 8003330:	40021000 	.word	0x40021000
 8003334:	40010000 	.word	0x40010000
 8003338:	40010800 	.word	0x40010800
 800333c:	40010c00 	.word	0x40010c00
 8003340:	40011000 	.word	0x40011000
 8003344:	40011400 	.word	0x40011400
 8003348:	40011800 	.word	0x40011800
 800334c:	40011c00 	.word	0x40011c00
 8003350:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003354:	4b15      	ldr	r3, [pc, #84]	; (80033ac <HAL_GPIO_Init+0x324>)
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	43db      	mvns	r3, r3
 800335c:	4913      	ldr	r1, [pc, #76]	; (80033ac <HAL_GPIO_Init+0x324>)
 800335e:	4013      	ands	r3, r2
 8003360:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d006      	beq.n	800337c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <HAL_GPIO_Init+0x324>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	490e      	ldr	r1, [pc, #56]	; (80033ac <HAL_GPIO_Init+0x324>)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]
 800337a:	e006      	b.n	800338a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_GPIO_Init+0x324>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	43db      	mvns	r3, r3
 8003384:	4909      	ldr	r1, [pc, #36]	; (80033ac <HAL_GPIO_Init+0x324>)
 8003386:	4013      	ands	r3, r2
 8003388:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	3301      	adds	r3, #1
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	fa22 f303 	lsr.w	r3, r2, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	f47f ae7e 	bne.w	800309c <HAL_GPIO_Init+0x14>
  }
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	372c      	adds	r7, #44	; 0x2c
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	40010400 	.word	0x40010400

080033b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	807b      	strh	r3, [r7, #2]
 80033bc:	4613      	mov	r3, r2
 80033be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033c0:	787b      	ldrb	r3, [r7, #1]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033c6:	887a      	ldrh	r2, [r7, #2]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033cc:	e003      	b.n	80033d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033ce:	887b      	ldrh	r3, [r7, #2]
 80033d0:	041a      	lsls	r2, r3, #16
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	611a      	str	r2, [r3, #16]
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e272      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 8087 	beq.w	800350e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003400:	4b92      	ldr	r3, [pc, #584]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 030c 	and.w	r3, r3, #12
 8003408:	2b04      	cmp	r3, #4
 800340a:	d00c      	beq.n	8003426 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800340c:	4b8f      	ldr	r3, [pc, #572]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d112      	bne.n	800343e <HAL_RCC_OscConfig+0x5e>
 8003418:	4b8c      	ldr	r3, [pc, #560]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003424:	d10b      	bne.n	800343e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003426:	4b89      	ldr	r3, [pc, #548]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d06c      	beq.n	800350c <HAL_RCC_OscConfig+0x12c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d168      	bne.n	800350c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e24c      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003446:	d106      	bne.n	8003456 <HAL_RCC_OscConfig+0x76>
 8003448:	4b80      	ldr	r3, [pc, #512]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a7f      	ldr	r2, [pc, #508]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800344e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	e02e      	b.n	80034b4 <HAL_RCC_OscConfig+0xd4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x98>
 800345e:	4b7b      	ldr	r3, [pc, #492]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a7a      	ldr	r2, [pc, #488]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	4b78      	ldr	r3, [pc, #480]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a77      	ldr	r2, [pc, #476]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	e01d      	b.n	80034b4 <HAL_RCC_OscConfig+0xd4>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0xbc>
 8003482:	4b72      	ldr	r3, [pc, #456]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a71      	ldr	r2, [pc, #452]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	4b6f      	ldr	r3, [pc, #444]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a6e      	ldr	r2, [pc, #440]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e00b      	b.n	80034b4 <HAL_RCC_OscConfig+0xd4>
 800349c:	4b6b      	ldr	r3, [pc, #428]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a6a      	ldr	r2, [pc, #424]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80034a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	4b68      	ldr	r3, [pc, #416]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a67      	ldr	r2, [pc, #412]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80034ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d013      	beq.n	80034e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fe fc14 	bl	8001ce8 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c4:	f7fe fc10 	bl	8001ce8 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e200      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	4b5d      	ldr	r3, [pc, #372]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0xe4>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fe fc00 	bl	8001ce8 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fe fbfc 	bl	8001ce8 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e1ec      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fe:	4b53      	ldr	r3, [pc, #332]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x10c>
 800350a:	e000      	b.n	800350e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d063      	beq.n	80035e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800351a:	4b4c      	ldr	r3, [pc, #304]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003526:	4b49      	ldr	r3, [pc, #292]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b08      	cmp	r3, #8
 8003530:	d11c      	bne.n	800356c <HAL_RCC_OscConfig+0x18c>
 8003532:	4b46      	ldr	r3, [pc, #280]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d116      	bne.n	800356c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353e:	4b43      	ldr	r3, [pc, #268]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_RCC_OscConfig+0x176>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d001      	beq.n	8003556 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e1c0      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003556:	4b3d      	ldr	r3, [pc, #244]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4939      	ldr	r1, [pc, #228]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356a:	e03a      	b.n	80035e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d020      	beq.n	80035b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003574:	4b36      	ldr	r3, [pc, #216]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fe fbb5 	bl	8001ce8 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003582:	f7fe fbb1 	bl	8001ce8 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e1a1      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003594:	4b2d      	ldr	r3, [pc, #180]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a0:	4b2a      	ldr	r3, [pc, #168]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4927      	ldr	r1, [pc, #156]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	600b      	str	r3, [r1, #0]
 80035b4:	e015      	b.n	80035e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b6:	4b26      	ldr	r3, [pc, #152]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fe fb94 	bl	8001ce8 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c4:	f7fe fb90 	bl	8001ce8 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e180      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d6:	4b1d      	ldr	r3, [pc, #116]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d03a      	beq.n	8003664 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d019      	beq.n	800362a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f6:	4b17      	ldr	r3, [pc, #92]	; (8003654 <HAL_RCC_OscConfig+0x274>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fc:	f7fe fb74 	bl	8001ce8 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003604:	f7fe fb70 	bl	8001ce8 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e160      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003622:	2001      	movs	r0, #1
 8003624:	f000 face 	bl	8003bc4 <RCC_Delay>
 8003628:	e01c      	b.n	8003664 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800362a:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <HAL_RCC_OscConfig+0x274>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003630:	f7fe fb5a 	bl	8001ce8 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003636:	e00f      	b.n	8003658 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003638:	f7fe fb56 	bl	8001ce8 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d908      	bls.n	8003658 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e146      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000
 8003650:	42420000 	.word	0x42420000
 8003654:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003658:	4b92      	ldr	r3, [pc, #584]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e9      	bne.n	8003638 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80a6 	beq.w	80037be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003676:	4b8b      	ldr	r3, [pc, #556]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10d      	bne.n	800369e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003682:	4b88      	ldr	r3, [pc, #544]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4a87      	ldr	r2, [pc, #540]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368c:	61d3      	str	r3, [r2, #28]
 800368e:	4b85      	ldr	r3, [pc, #532]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800369a:	2301      	movs	r3, #1
 800369c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369e:	4b82      	ldr	r3, [pc, #520]	; (80038a8 <HAL_RCC_OscConfig+0x4c8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d118      	bne.n	80036dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036aa:	4b7f      	ldr	r3, [pc, #508]	; (80038a8 <HAL_RCC_OscConfig+0x4c8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a7e      	ldr	r2, [pc, #504]	; (80038a8 <HAL_RCC_OscConfig+0x4c8>)
 80036b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b6:	f7fe fb17 	bl	8001ce8 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036be:	f7fe fb13 	bl	8001ce8 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b64      	cmp	r3, #100	; 0x64
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e103      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d0:	4b75      	ldr	r3, [pc, #468]	; (80038a8 <HAL_RCC_OscConfig+0x4c8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d106      	bne.n	80036f2 <HAL_RCC_OscConfig+0x312>
 80036e4:	4b6f      	ldr	r3, [pc, #444]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	4a6e      	ldr	r2, [pc, #440]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6213      	str	r3, [r2, #32]
 80036f0:	e02d      	b.n	800374e <HAL_RCC_OscConfig+0x36e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x334>
 80036fa:	4b6a      	ldr	r3, [pc, #424]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	4a69      	ldr	r2, [pc, #420]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	6213      	str	r3, [r2, #32]
 8003706:	4b67      	ldr	r3, [pc, #412]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	4a66      	ldr	r2, [pc, #408]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 800370c:	f023 0304 	bic.w	r3, r3, #4
 8003710:	6213      	str	r3, [r2, #32]
 8003712:	e01c      	b.n	800374e <HAL_RCC_OscConfig+0x36e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	2b05      	cmp	r3, #5
 800371a:	d10c      	bne.n	8003736 <HAL_RCC_OscConfig+0x356>
 800371c:	4b61      	ldr	r3, [pc, #388]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	4a60      	ldr	r2, [pc, #384]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 8003722:	f043 0304 	orr.w	r3, r3, #4
 8003726:	6213      	str	r3, [r2, #32]
 8003728:	4b5e      	ldr	r3, [pc, #376]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	4a5d      	ldr	r2, [pc, #372]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	6213      	str	r3, [r2, #32]
 8003734:	e00b      	b.n	800374e <HAL_RCC_OscConfig+0x36e>
 8003736:	4b5b      	ldr	r3, [pc, #364]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	4a5a      	ldr	r2, [pc, #360]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	6213      	str	r3, [r2, #32]
 8003742:	4b58      	ldr	r3, [pc, #352]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	4a57      	ldr	r2, [pc, #348]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 8003748:	f023 0304 	bic.w	r3, r3, #4
 800374c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d015      	beq.n	8003782 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003756:	f7fe fac7 	bl	8001ce8 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375c:	e00a      	b.n	8003774 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7fe fac3 	bl	8001ce8 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f241 3288 	movw	r2, #5000	; 0x1388
 800376c:	4293      	cmp	r3, r2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e0b1      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003774:	4b4b      	ldr	r3, [pc, #300]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0ee      	beq.n	800375e <HAL_RCC_OscConfig+0x37e>
 8003780:	e014      	b.n	80037ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7fe fab1 	bl	8001ce8 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fe faad 	bl	8001ce8 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e09b      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a0:	4b40      	ldr	r3, [pc, #256]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ee      	bne.n	800378a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d105      	bne.n	80037be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b2:	4b3c      	ldr	r3, [pc, #240]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	4a3b      	ldr	r2, [pc, #236]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 80037b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 8087 	beq.w	80038d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c8:	4b36      	ldr	r3, [pc, #216]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d061      	beq.n	8003898 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d146      	bne.n	800386a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037dc:	4b33      	ldr	r3, [pc, #204]	; (80038ac <HAL_RCC_OscConfig+0x4cc>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7fe fa81 	bl	8001ce8 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ea:	f7fe fa7d 	bl	8001ce8 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e06d      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fc:	4b29      	ldr	r3, [pc, #164]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f0      	bne.n	80037ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003810:	d108      	bne.n	8003824 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003812:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	4921      	ldr	r1, [pc, #132]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003824:	4b1f      	ldr	r3, [pc, #124]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a19      	ldr	r1, [r3, #32]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	430b      	orrs	r3, r1
 8003836:	491b      	ldr	r1, [pc, #108]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800383c:	4b1b      	ldr	r3, [pc, #108]	; (80038ac <HAL_RCC_OscConfig+0x4cc>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7fe fa51 	bl	8001ce8 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384a:	f7fe fa4d 	bl	8001ce8 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e03d      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x46a>
 8003868:	e035      	b.n	80038d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <HAL_RCC_OscConfig+0x4cc>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fe fa3a 	bl	8001ce8 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7fe fa36 	bl	8001ce8 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e026      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x498>
 8003896:	e01e      	b.n	80038d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d107      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e019      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40007000 	.word	0x40007000
 80038ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_OscConfig+0x500>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d106      	bne.n	80038d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d001      	beq.n	80038d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000

080038e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0d0      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b6a      	ldr	r3, [pc, #424]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c0>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d910      	bls.n	8003928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b67      	ldr	r3, [pc, #412]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 0207 	bic.w	r2, r3, #7
 800390e:	4965      	ldr	r1, [pc, #404]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b63      	ldr	r3, [pc, #396]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0b8      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d020      	beq.n	8003976 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003940:	4b59      	ldr	r3, [pc, #356]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	4a58      	ldr	r2, [pc, #352]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003946:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800394a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003958:	4b53      	ldr	r3, [pc, #332]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4a52      	ldr	r2, [pc, #328]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800395e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003962:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003964:	4b50      	ldr	r3, [pc, #320]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	494d      	ldr	r1, [pc, #308]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d040      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d107      	bne.n	800399a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d115      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e07f      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d107      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a2:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e073      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b2:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e06b      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c2:	4b39      	ldr	r3, [pc, #228]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f023 0203 	bic.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4936      	ldr	r1, [pc, #216]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d4:	f7fe f988 	bl	8001ce8 <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039dc:	f7fe f984 	bl	8001ce8 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e053      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f2:	4b2d      	ldr	r3, [pc, #180]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 020c 	and.w	r2, r3, #12
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d1eb      	bne.n	80039dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a04:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d210      	bcs.n	8003a34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 0207 	bic.w	r2, r3, #7
 8003a1a:	4922      	ldr	r1, [pc, #136]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b20      	ldr	r3, [pc, #128]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e032      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a40:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4916      	ldr	r1, [pc, #88]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	490e      	ldr	r1, [pc, #56]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a72:	f000 f821 	bl	8003ab8 <HAL_RCC_GetSysClockFreq>
 8003a76:	4602      	mov	r2, r0
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	490a      	ldr	r1, [pc, #40]	; (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 8003a84:	5ccb      	ldrb	r3, [r1, r3]
 8003a86:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8a:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <HAL_RCC_ClockConfig+0x1cc>)
 8003a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a8e:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <HAL_RCC_ClockConfig+0x1d0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe f8e6 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40022000 	.word	0x40022000
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	08007a10 	.word	0x08007a10
 8003ab0:	20000000 	.word	0x20000000
 8003ab4:	20000004 	.word	0x20000004

08003ab8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	2300      	movs	r3, #0
 8003acc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d002      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d003      	beq.n	8003aee <HAL_RCC_GetSysClockFreq+0x36>
 8003ae6:	e027      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ae8:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aea:	613b      	str	r3, [r7, #16]
      break;
 8003aec:	e027      	b.n	8003b3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	0c9b      	lsrs	r3, r3, #18
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	4a17      	ldr	r2, [pc, #92]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003af8:	5cd3      	ldrb	r3, [r2, r3]
 8003afa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d010      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b06:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x94>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	0c5b      	lsrs	r3, r3, #17
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	4a11      	ldr	r2, [pc, #68]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b12:	5cd3      	ldrb	r3, [r2, r3]
 8003b14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a0d      	ldr	r2, [pc, #52]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b1a:	fb03 f202 	mul.w	r2, r3, r2
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	e004      	b.n	8003b32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a0c      	ldr	r2, [pc, #48]	; (8003b5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b2c:	fb02 f303 	mul.w	r3, r2, r3
 8003b30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	613b      	str	r3, [r7, #16]
      break;
 8003b36:	e002      	b.n	8003b3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b3a:	613b      	str	r3, [r7, #16]
      break;
 8003b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b3e:	693b      	ldr	r3, [r7, #16]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	007a1200 	.word	0x007a1200
 8003b54:	08007a28 	.word	0x08007a28
 8003b58:	08007a38 	.word	0x08007a38
 8003b5c:	003d0900 	.word	0x003d0900

08003b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b64:	4b02      	ldr	r3, [pc, #8]	; (8003b70 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b66:	681b      	ldr	r3, [r3, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr
 8003b70:	20000000 	.word	0x20000000

08003b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b78:	f7ff fff2 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	4903      	ldr	r1, [pc, #12]	; (8003b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b8a:	5ccb      	ldrb	r3, [r1, r3]
 8003b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021000 	.word	0x40021000
 8003b98:	08007a20 	.word	0x08007a20

08003b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ba0:	f7ff ffde 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	0adb      	lsrs	r3, r3, #11
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	4903      	ldr	r1, [pc, #12]	; (8003bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bb2:	5ccb      	ldrb	r3, [r1, r3]
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	08007a20 	.word	0x08007a20

08003bc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bcc:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <RCC_Delay+0x34>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <RCC_Delay+0x38>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	0a5b      	lsrs	r3, r3, #9
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	fb02 f303 	mul.w	r3, r2, r3
 8003bde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003be0:	bf00      	nop
  }
  while (Delay --);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1e5a      	subs	r2, r3, #1
 8003be6:	60fa      	str	r2, [r7, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f9      	bne.n	8003be0 <RCC_Delay+0x1c>
}
 8003bec:	bf00      	nop
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	20000000 	.word	0x20000000
 8003bfc:	10624dd3 	.word	0x10624dd3

08003c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d07d      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c20:	4b4f      	ldr	r3, [pc, #316]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10d      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2c:	4b4c      	ldr	r3, [pc, #304]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	4a4b      	ldr	r2, [pc, #300]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c36:	61d3      	str	r3, [r2, #28]
 8003c38:	4b49      	ldr	r3, [pc, #292]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c44:	2301      	movs	r3, #1
 8003c46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c48:	4b46      	ldr	r3, [pc, #280]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d118      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c54:	4b43      	ldr	r3, [pc, #268]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a42      	ldr	r2, [pc, #264]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c60:	f7fe f842 	bl	8001ce8 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c66:	e008      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c68:	f7fe f83e 	bl	8001ce8 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b64      	cmp	r3, #100	; 0x64
 8003c74:	d901      	bls.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e06d      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7a:	4b3a      	ldr	r3, [pc, #232]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c86:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d02e      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d027      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ca4:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cae:	4b2e      	ldr	r3, [pc, #184]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cb4:	4b2c      	ldr	r3, [pc, #176]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cba:	4a29      	ldr	r2, [pc, #164]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d014      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cca:	f7fe f80d 	bl	8001ce8 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd0:	e00a      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd2:	f7fe f809 	bl	8001ce8 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e036      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0ee      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf4:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4917      	ldr	r1, [pc, #92]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d0c:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	4a13      	ldr	r2, [pc, #76]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d24:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	490b      	ldr	r1, [pc, #44]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d42:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	4904      	ldr	r1, [pc, #16]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40007000 	.word	0x40007000
 8003d68:	42420440 	.word	0x42420440

08003d6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	2300      	movs	r3, #0
 8003d86:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	2b0f      	cmp	r3, #15
 8003d8e:	f200 80af 	bhi.w	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8003d92:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8003d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d98:	08003e6f 	.word	0x08003e6f
 8003d9c:	08003ed5 	.word	0x08003ed5
 8003da0:	08003ef1 	.word	0x08003ef1
 8003da4:	08003e5f 	.word	0x08003e5f
 8003da8:	08003ef1 	.word	0x08003ef1
 8003dac:	08003ef1 	.word	0x08003ef1
 8003db0:	08003ef1 	.word	0x08003ef1
 8003db4:	08003e67 	.word	0x08003e67
 8003db8:	08003ef1 	.word	0x08003ef1
 8003dbc:	08003ef1 	.word	0x08003ef1
 8003dc0:	08003ef1 	.word	0x08003ef1
 8003dc4:	08003ef1 	.word	0x08003ef1
 8003dc8:	08003ef1 	.word	0x08003ef1
 8003dcc:	08003ef1 	.word	0x08003ef1
 8003dd0:	08003ef1 	.word	0x08003ef1
 8003dd4:	08003dd9 	.word	0x08003dd9
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003dd8:	4b4a      	ldr	r3, [pc, #296]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003dde:	4b49      	ldr	r3, [pc, #292]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 8084 	beq.w	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	0c9b      	lsrs	r3, r3, #18
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	4a44      	ldr	r2, [pc, #272]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8003df6:	5cd3      	ldrb	r3, [r2, r3]
 8003df8:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d015      	beq.n	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e04:	4b3f      	ldr	r3, [pc, #252]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	0c5b      	lsrs	r3, r3, #17
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	4a3f      	ldr	r2, [pc, #252]	; (8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8003e10:	5cd3      	ldrb	r3, [r2, r3]
 8003e12:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003e1e:	4a3c      	ldr	r2, [pc, #240]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	fb02 f303 	mul.w	r3, r2, r3
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e004      	b.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4a38      	ldr	r2, [pc, #224]	; (8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8003e34:	fb02 f303 	mul.w	r3, r2, r3
 8003e38:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003e3a:	4b32      	ldr	r3, [pc, #200]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e46:	d102      	bne.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003e4c:	e052      	b.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	4a31      	ldr	r2, [pc, #196]	; (8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	61bb      	str	r3, [r7, #24]
      break;
 8003e5c:	e04a      	b.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003e5e:	f7ff fe2b 	bl	8003ab8 <HAL_RCC_GetSysClockFreq>
 8003e62:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003e64:	e049      	b.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003e66:	f7ff fe27 	bl	8003ab8 <HAL_RCC_GetSysClockFreq>
 8003e6a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003e6c:	e045      	b.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003e6e:	4b25      	ldr	r3, [pc, #148]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e7e:	d108      	bne.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8003e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	e01f      	b.n	8003ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e9c:	d109      	bne.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003e9e:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8003eaa:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	e00f      	b.n	8003ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ebc:	d11c      	bne.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8003ebe:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d016      	beq.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8003eca:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003ece:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003ed0:	e012      	b.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8003ed2:	e011      	b.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003ed4:	f7ff fe62 	bl	8003b9c <HAL_RCC_GetPCLK2Freq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	0b9b      	lsrs	r3, r3, #14
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eec:	61bb      	str	r3, [r7, #24]
      break;
 8003eee:	e004      	b.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8003ef0:	bf00      	nop
 8003ef2:	e002      	b.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8003ef4:	bf00      	nop
 8003ef6:	e000      	b.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8003ef8:	bf00      	nop
    }
  }
  return (frequency);
 8003efa:	69bb      	ldr	r3, [r7, #24]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40021000 	.word	0x40021000
 8003f08:	08007a3c 	.word	0x08007a3c
 8003f0c:	08007a4c 	.word	0x08007a4c
 8003f10:	007a1200 	.word	0x007a1200
 8003f14:	003d0900 	.word	0x003d0900
 8003f18:	aaaaaaab 	.word	0xaaaaaaab

08003f1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d001      	beq.n	8003f34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e03c      	b.n	8003fae <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <HAL_TIM_Base_Start+0x9c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d018      	beq.n	8003f78 <HAL_TIM_Base_Start+0x5c>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <HAL_TIM_Base_Start+0xa0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d013      	beq.n	8003f78 <HAL_TIM_Base_Start+0x5c>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f58:	d00e      	beq.n	8003f78 <HAL_TIM_Base_Start+0x5c>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <HAL_TIM_Base_Start+0xa4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d009      	beq.n	8003f78 <HAL_TIM_Base_Start+0x5c>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <HAL_TIM_Base_Start+0xa8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_TIM_Base_Start+0x5c>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a15      	ldr	r2, [pc, #84]	; (8003fc8 <HAL_TIM_Base_Start+0xac>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d111      	bne.n	8003f9c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b06      	cmp	r3, #6
 8003f88:	d010      	beq.n	8003fac <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9a:	e007      	b.n	8003fac <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	40012c00 	.word	0x40012c00
 8003fbc:	40013400 	.word	0x40013400
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800
 8003fc8:	40000c00 	.word	0x40000c00

08003fcc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d109      	bne.n	8003ff0 <HAL_TIM_OC_Start+0x24>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	bf14      	ite	ne
 8003fe8:	2301      	movne	r3, #1
 8003fea:	2300      	moveq	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e022      	b.n	8004036 <HAL_TIM_OC_Start+0x6a>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d109      	bne.n	800400a <HAL_TIM_OC_Start+0x3e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	bf14      	ite	ne
 8004002:	2301      	movne	r3, #1
 8004004:	2300      	moveq	r3, #0
 8004006:	b2db      	uxtb	r3, r3
 8004008:	e015      	b.n	8004036 <HAL_TIM_OC_Start+0x6a>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b08      	cmp	r3, #8
 800400e:	d109      	bne.n	8004024 <HAL_TIM_OC_Start+0x58>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	bf14      	ite	ne
 800401c:	2301      	movne	r3, #1
 800401e:	2300      	moveq	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	e008      	b.n	8004036 <HAL_TIM_OC_Start+0x6a>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	bf14      	ite	ne
 8004030:	2301      	movne	r3, #1
 8004032:	2300      	moveq	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e072      	b.n	8004124 <HAL_TIM_OC_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d104      	bne.n	800404e <HAL_TIM_OC_Start+0x82>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800404c:	e013      	b.n	8004076 <HAL_TIM_OC_Start+0xaa>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b04      	cmp	r3, #4
 8004052:	d104      	bne.n	800405e <HAL_TIM_OC_Start+0x92>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800405c:	e00b      	b.n	8004076 <HAL_TIM_OC_Start+0xaa>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d104      	bne.n	800406e <HAL_TIM_OC_Start+0xa2>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800406c:	e003      	b.n	8004076 <HAL_TIM_OC_Start+0xaa>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2202      	movs	r2, #2
 8004072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2201      	movs	r2, #1
 800407c:	6839      	ldr	r1, [r7, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fbfe 	bl	8004880 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a28      	ldr	r2, [pc, #160]	; (800412c <HAL_TIM_OC_Start+0x160>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d004      	beq.n	8004098 <HAL_TIM_OC_Start+0xcc>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a27      	ldr	r2, [pc, #156]	; (8004130 <HAL_TIM_OC_Start+0x164>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d101      	bne.n	800409c <HAL_TIM_OC_Start+0xd0>
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <HAL_TIM_OC_Start+0xd2>
 800409c:	2300      	movs	r3, #0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1d      	ldr	r2, [pc, #116]	; (800412c <HAL_TIM_OC_Start+0x160>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d018      	beq.n	80040ee <HAL_TIM_OC_Start+0x122>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <HAL_TIM_OC_Start+0x164>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_TIM_OC_Start+0x122>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ce:	d00e      	beq.n	80040ee <HAL_TIM_OC_Start+0x122>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a17      	ldr	r2, [pc, #92]	; (8004134 <HAL_TIM_OC_Start+0x168>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_TIM_OC_Start+0x122>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a16      	ldr	r2, [pc, #88]	; (8004138 <HAL_TIM_OC_Start+0x16c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_TIM_OC_Start+0x122>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a14      	ldr	r2, [pc, #80]	; (800413c <HAL_TIM_OC_Start+0x170>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d111      	bne.n	8004112 <HAL_TIM_OC_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b06      	cmp	r3, #6
 80040fe:	d010      	beq.n	8004122 <HAL_TIM_OC_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004110:	e007      	b.n	8004122 <HAL_TIM_OC_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f042 0201 	orr.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40012c00 	.word	0x40012c00
 8004130:	40013400 	.word	0x40013400
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	40000c00 	.word	0x40000c00

08004140 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e041      	b.n	80041d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7fd fbaa 	bl	80018c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f000 f94c 	bl	800441c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e048      	b.n	8004290 <HAL_TIM_OC_ConfigChannel+0xb0>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b0c      	cmp	r3, #12
 800420a:	d839      	bhi.n	8004280 <HAL_TIM_OC_ConfigChannel+0xa0>
 800420c:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <HAL_TIM_OC_ConfigChannel+0x34>)
 800420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004212:	bf00      	nop
 8004214:	08004249 	.word	0x08004249
 8004218:	08004281 	.word	0x08004281
 800421c:	08004281 	.word	0x08004281
 8004220:	08004281 	.word	0x08004281
 8004224:	08004257 	.word	0x08004257
 8004228:	08004281 	.word	0x08004281
 800422c:	08004281 	.word	0x08004281
 8004230:	08004281 	.word	0x08004281
 8004234:	08004265 	.word	0x08004265
 8004238:	08004281 	.word	0x08004281
 800423c:	08004281 	.word	0x08004281
 8004240:	08004281 	.word	0x08004281
 8004244:	08004273 	.word	0x08004273
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f96a 	bl	8004528 <TIM_OC1_SetConfig>
      break;
 8004254:	e017      	b.n	8004286 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	4618      	mov	r0, r3
 800425e:	f000 f9d3 	bl	8004608 <TIM_OC2_SetConfig>
      break;
 8004262:	e010      	b.n	8004286 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fa40 	bl	80046f0 <TIM_OC3_SetConfig>
      break;
 8004270:	e009      	b.n	8004286 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	4618      	mov	r0, r3
 800427a:	f000 faad 	bl	80047d8 <TIM_OC4_SetConfig>
      break;
 800427e:	e002      	b.n	8004286 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	75fb      	strb	r3, [r7, #23]
      break;
 8004284:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800428e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042b2:	2302      	movs	r3, #2
 80042b4:	e0ae      	b.n	8004414 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	f200 809f 	bhi.w	8004404 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80042c6:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	08004301 	.word	0x08004301
 80042d0:	08004405 	.word	0x08004405
 80042d4:	08004405 	.word	0x08004405
 80042d8:	08004405 	.word	0x08004405
 80042dc:	08004341 	.word	0x08004341
 80042e0:	08004405 	.word	0x08004405
 80042e4:	08004405 	.word	0x08004405
 80042e8:	08004405 	.word	0x08004405
 80042ec:	08004383 	.word	0x08004383
 80042f0:	08004405 	.word	0x08004405
 80042f4:	08004405 	.word	0x08004405
 80042f8:	08004405 	.word	0x08004405
 80042fc:	080043c3 	.word	0x080043c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68b9      	ldr	r1, [r7, #8]
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f90e 	bl	8004528 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0208 	orr.w	r2, r2, #8
 800431a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0204 	bic.w	r2, r2, #4
 800432a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6999      	ldr	r1, [r3, #24]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	619a      	str	r2, [r3, #24]
      break;
 800433e:	e064      	b.n	800440a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68b9      	ldr	r1, [r7, #8]
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f95e 	bl	8004608 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699a      	ldr	r2, [r3, #24]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800435a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6999      	ldr	r1, [r3, #24]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	021a      	lsls	r2, r3, #8
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	619a      	str	r2, [r3, #24]
      break;
 8004380:	e043      	b.n	800440a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68b9      	ldr	r1, [r7, #8]
 8004388:	4618      	mov	r0, r3
 800438a:	f000 f9b1 	bl	80046f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69da      	ldr	r2, [r3, #28]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0208 	orr.w	r2, r2, #8
 800439c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0204 	bic.w	r2, r2, #4
 80043ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69d9      	ldr	r1, [r3, #28]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	61da      	str	r2, [r3, #28]
      break;
 80043c0:	e023      	b.n	800440a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68b9      	ldr	r1, [r7, #8]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fa05 	bl	80047d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69da      	ldr	r2, [r3, #28]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69da      	ldr	r2, [r3, #28]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69d9      	ldr	r1, [r3, #28]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	021a      	lsls	r2, r3, #8
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	61da      	str	r2, [r3, #28]
      break;
 8004402:	e002      	b.n	800440a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	75fb      	strb	r3, [r7, #23]
      break;
 8004408:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004412:	7dfb      	ldrb	r3, [r7, #23]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a39      	ldr	r2, [pc, #228]	; (8004514 <TIM_Base_SetConfig+0xf8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d013      	beq.n	800445c <TIM_Base_SetConfig+0x40>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a38      	ldr	r2, [pc, #224]	; (8004518 <TIM_Base_SetConfig+0xfc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00f      	beq.n	800445c <TIM_Base_SetConfig+0x40>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004442:	d00b      	beq.n	800445c <TIM_Base_SetConfig+0x40>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a35      	ldr	r2, [pc, #212]	; (800451c <TIM_Base_SetConfig+0x100>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d007      	beq.n	800445c <TIM_Base_SetConfig+0x40>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a34      	ldr	r2, [pc, #208]	; (8004520 <TIM_Base_SetConfig+0x104>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d003      	beq.n	800445c <TIM_Base_SetConfig+0x40>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a33      	ldr	r2, [pc, #204]	; (8004524 <TIM_Base_SetConfig+0x108>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d108      	bne.n	800446e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a28      	ldr	r2, [pc, #160]	; (8004514 <TIM_Base_SetConfig+0xf8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <TIM_Base_SetConfig+0x82>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a27      	ldr	r2, [pc, #156]	; (8004518 <TIM_Base_SetConfig+0xfc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00f      	beq.n	800449e <TIM_Base_SetConfig+0x82>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004484:	d00b      	beq.n	800449e <TIM_Base_SetConfig+0x82>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a24      	ldr	r2, [pc, #144]	; (800451c <TIM_Base_SetConfig+0x100>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d007      	beq.n	800449e <TIM_Base_SetConfig+0x82>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a23      	ldr	r2, [pc, #140]	; (8004520 <TIM_Base_SetConfig+0x104>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d003      	beq.n	800449e <TIM_Base_SetConfig+0x82>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a22      	ldr	r2, [pc, #136]	; (8004524 <TIM_Base_SetConfig+0x108>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d108      	bne.n	80044b0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a0f      	ldr	r2, [pc, #60]	; (8004514 <TIM_Base_SetConfig+0xf8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_Base_SetConfig+0xc8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a0e      	ldr	r2, [pc, #56]	; (8004518 <TIM_Base_SetConfig+0xfc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d103      	bne.n	80044ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f023 0201 	bic.w	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	611a      	str	r2, [r3, #16]
  }
}
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr
 8004514:	40012c00 	.word	0x40012c00
 8004518:	40013400 	.word	0x40013400
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800
 8004524:	40000c00 	.word	0x40000c00

08004528 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	f023 0201 	bic.w	r2, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0303 	bic.w	r3, r3, #3
 800455e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f023 0302 	bic.w	r3, r3, #2
 8004570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a20      	ldr	r2, [pc, #128]	; (8004600 <TIM_OC1_SetConfig+0xd8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d003      	beq.n	800458c <TIM_OC1_SetConfig+0x64>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a1f      	ldr	r2, [pc, #124]	; (8004604 <TIM_OC1_SetConfig+0xdc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d10c      	bne.n	80045a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f023 0308 	bic.w	r3, r3, #8
 8004592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f023 0304 	bic.w	r3, r3, #4
 80045a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a15      	ldr	r2, [pc, #84]	; (8004600 <TIM_OC1_SetConfig+0xd8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d003      	beq.n	80045b6 <TIM_OC1_SetConfig+0x8e>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a14      	ldr	r2, [pc, #80]	; (8004604 <TIM_OC1_SetConfig+0xdc>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d111      	bne.n	80045da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	621a      	str	r2, [r3, #32]
}
 80045f4:	bf00      	nop
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40012c00 	.word	0x40012c00
 8004604:	40013400 	.word	0x40013400

08004608 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	f023 0210 	bic.w	r2, r3, #16
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	021b      	lsls	r3, r3, #8
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f023 0320 	bic.w	r3, r3, #32
 8004652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a21      	ldr	r2, [pc, #132]	; (80046e8 <TIM_OC2_SetConfig+0xe0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d003      	beq.n	8004670 <TIM_OC2_SetConfig+0x68>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a20      	ldr	r2, [pc, #128]	; (80046ec <TIM_OC2_SetConfig+0xe4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d10d      	bne.n	800468c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800468a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a16      	ldr	r2, [pc, #88]	; (80046e8 <TIM_OC2_SetConfig+0xe0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <TIM_OC2_SetConfig+0x94>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a15      	ldr	r2, [pc, #84]	; (80046ec <TIM_OC2_SetConfig+0xe4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d113      	bne.n	80046c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr
 80046e8:	40012c00 	.word	0x40012c00
 80046ec:	40013400 	.word	0x40013400

080046f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0303 	bic.w	r3, r3, #3
 8004726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a21      	ldr	r2, [pc, #132]	; (80047d0 <TIM_OC3_SetConfig+0xe0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d003      	beq.n	8004756 <TIM_OC3_SetConfig+0x66>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a20      	ldr	r2, [pc, #128]	; (80047d4 <TIM_OC3_SetConfig+0xe4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d10d      	bne.n	8004772 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800475c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <TIM_OC3_SetConfig+0xe0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d003      	beq.n	8004782 <TIM_OC3_SetConfig+0x92>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a15      	ldr	r2, [pc, #84]	; (80047d4 <TIM_OC3_SetConfig+0xe4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d113      	bne.n	80047aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	621a      	str	r2, [r3, #32]
}
 80047c4:	bf00      	nop
 80047c6:	371c      	adds	r7, #28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40012c00 	.word	0x40012c00
 80047d4:	40013400 	.word	0x40013400

080047d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	021b      	lsls	r3, r3, #8
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	031b      	lsls	r3, r3, #12
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a11      	ldr	r2, [pc, #68]	; (8004878 <TIM_OC4_SetConfig+0xa0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_OC4_SetConfig+0x68>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a10      	ldr	r2, [pc, #64]	; (800487c <TIM_OC4_SetConfig+0xa4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d109      	bne.n	8004854 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	019b      	lsls	r3, r3, #6
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	621a      	str	r2, [r3, #32]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr
 8004878:	40012c00 	.word	0x40012c00
 800487c:	40013400 	.word	0x40013400

08004880 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	2201      	movs	r2, #1
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a1a      	ldr	r2, [r3, #32]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	43db      	mvns	r3, r3
 80048a2:	401a      	ands	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a1a      	ldr	r2, [r3, #32]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	fa01 f303 	lsl.w	r3, r1, r3
 80048b8:	431a      	orrs	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	621a      	str	r2, [r3, #32]
}
 80048be:	bf00      	nop
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048dc:	2302      	movs	r3, #2
 80048de:	e050      	b.n	8004982 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1b      	ldr	r2, [pc, #108]	; (800498c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d018      	beq.n	8004956 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a19      	ldr	r2, [pc, #100]	; (8004990 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d013      	beq.n	8004956 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004936:	d00e      	beq.n	8004956 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a15      	ldr	r2, [pc, #84]	; (8004994 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d009      	beq.n	8004956 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a14      	ldr	r2, [pc, #80]	; (8004998 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d004      	beq.n	8004956 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a12      	ldr	r2, [pc, #72]	; (800499c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d10c      	bne.n	8004970 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800495c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	4313      	orrs	r3, r2
 8004966:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr
 800498c:	40012c00 	.word	0x40012c00
 8004990:	40013400 	.word	0x40013400
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	40000c00 	.word	0x40000c00

080049a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e03d      	b.n	8004a38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr

08004a42 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e042      	b.n	8004ada <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d106      	bne.n	8004a6e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7fc ff8f 	bl	800198c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2224      	movs	r2, #36	; 0x24
 8004a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a84:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f972 	bl	8004d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aaa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004aba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b08a      	sub	sp, #40	; 0x28
 8004ae6:	af02      	add	r7, sp, #8
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	603b      	str	r3, [r7, #0]
 8004aee:	4613      	mov	r3, r2
 8004af0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b20      	cmp	r3, #32
 8004b00:	d175      	bne.n	8004bee <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_UART_Transmit+0x2c>
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e06e      	b.n	8004bf0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2221      	movs	r2, #33	; 0x21
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b20:	f7fd f8e2 	bl	8001ce8 <HAL_GetTick>
 8004b24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	88fa      	ldrh	r2, [r7, #6]
 8004b2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	88fa      	ldrh	r2, [r7, #6]
 8004b30:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3a:	d108      	bne.n	8004b4e <HAL_UART_Transmit+0x6c>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d104      	bne.n	8004b4e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	61bb      	str	r3, [r7, #24]
 8004b4c:	e003      	b.n	8004b56 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b56:	e02e      	b.n	8004bb6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2180      	movs	r1, #128	; 0x80
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f848 	bl	8004bf8 <UART_WaitOnFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e03a      	b.n	8004bf0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10b      	bne.n	8004b98 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b8e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	3302      	adds	r3, #2
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	e007      	b.n	8004ba8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	781a      	ldrb	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1cb      	bne.n	8004b58 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2140      	movs	r1, #64	; 0x40
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f814 	bl	8004bf8 <UART_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d005      	beq.n	8004be2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e006      	b.n	8004bf0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	e000      	b.n	8004bf0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004bee:	2302      	movs	r3, #2
  }
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3720      	adds	r7, #32
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c08:	e03b      	b.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c10:	d037      	beq.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c12:	f7fd f869 	bl	8001ce8 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	6a3a      	ldr	r2, [r7, #32]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d302      	bcc.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e03a      	b.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d023      	beq.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b80      	cmp	r3, #128	; 0x80
 8004c3e:	d020      	beq.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b40      	cmp	r3, #64	; 0x40
 8004c44:	d01d      	beq.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0308 	and.w	r3, r3, #8
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d116      	bne.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f81d 	bl	8004caa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2208      	movs	r2, #8
 8004c74:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e00f      	b.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	bf0c      	ite	eq
 8004c92:	2301      	moveq	r3, #1
 8004c94:	2300      	movne	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d0b4      	beq.n	8004c0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b095      	sub	sp, #84	; 0x54
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	330c      	adds	r3, #12
 8004cd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cd2:	643a      	str	r2, [r7, #64]	; 0x40
 8004cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cda:	e841 2300 	strex	r3, r2, [r1]
 8004cde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1e5      	bne.n	8004cb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3314      	adds	r3, #20
 8004cec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	f023 0301 	bic.w	r3, r3, #1
 8004cfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3314      	adds	r3, #20
 8004d04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d0e:	e841 2300 	strex	r3, r2, [r1]
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1e5      	bne.n	8004ce6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d119      	bne.n	8004d56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	330c      	adds	r3, #12
 8004d28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f023 0310 	bic.w	r3, r3, #16
 8004d38:	647b      	str	r3, [r7, #68]	; 0x44
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	330c      	adds	r3, #12
 8004d40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d42:	61ba      	str	r2, [r7, #24]
 8004d44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6979      	ldr	r1, [r7, #20]
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e5      	bne.n	8004d22 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d64:	bf00      	nop
 8004d66:	3754      	adds	r7, #84	; 0x54
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr
	...

08004d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004daa:	f023 030c 	bic.w	r3, r3, #12
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	430b      	orrs	r3, r1
 8004db6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a2c      	ldr	r2, [pc, #176]	; (8004e84 <UART_SetConfig+0x114>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d103      	bne.n	8004de0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004dd8:	f7fe fee0 	bl	8003b9c <HAL_RCC_GetPCLK2Freq>
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	e002      	b.n	8004de6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004de0:	f7fe fec8 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 8004de4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	009a      	lsls	r2, r3, #2
 8004df0:	441a      	add	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfc:	4a22      	ldr	r2, [pc, #136]	; (8004e88 <UART_SetConfig+0x118>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	0119      	lsls	r1, r3, #4
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009a      	lsls	r2, r3, #2
 8004e10:	441a      	add	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e1c:	4b1a      	ldr	r3, [pc, #104]	; (8004e88 <UART_SetConfig+0x118>)
 8004e1e:	fba3 0302 	umull	r0, r3, r3, r2
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	2064      	movs	r0, #100	; 0x64
 8004e26:	fb00 f303 	mul.w	r3, r0, r3
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	3332      	adds	r3, #50	; 0x32
 8004e30:	4a15      	ldr	r2, [pc, #84]	; (8004e88 <UART_SetConfig+0x118>)
 8004e32:	fba2 2303 	umull	r2, r3, r2, r3
 8004e36:	095b      	lsrs	r3, r3, #5
 8004e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e3c:	4419      	add	r1, r3
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009a      	lsls	r2, r3, #2
 8004e48:	441a      	add	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e54:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <UART_SetConfig+0x118>)
 8004e56:	fba3 0302 	umull	r0, r3, r3, r2
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	2064      	movs	r0, #100	; 0x64
 8004e5e:	fb00 f303 	mul.w	r3, r0, r3
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	3332      	adds	r3, #50	; 0x32
 8004e68:	4a07      	ldr	r2, [pc, #28]	; (8004e88 <UART_SetConfig+0x118>)
 8004e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	f003 020f 	and.w	r2, r3, #15
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	440a      	add	r2, r1
 8004e7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40013800 	.word	0x40013800
 8004e88:	51eb851f 	.word	0x51eb851f

08004e8c <__cvt>:
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e92:	461f      	mov	r7, r3
 8004e94:	bfbb      	ittet	lt
 8004e96:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004e9a:	461f      	movlt	r7, r3
 8004e9c:	2300      	movge	r3, #0
 8004e9e:	232d      	movlt	r3, #45	; 0x2d
 8004ea0:	b088      	sub	sp, #32
 8004ea2:	4614      	mov	r4, r2
 8004ea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ea6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004ea8:	7013      	strb	r3, [r2, #0]
 8004eaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004eac:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004eb0:	f023 0820 	bic.w	r8, r3, #32
 8004eb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004eb8:	d005      	beq.n	8004ec6 <__cvt+0x3a>
 8004eba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ebe:	d100      	bne.n	8004ec2 <__cvt+0x36>
 8004ec0:	3501      	adds	r5, #1
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e000      	b.n	8004ec8 <__cvt+0x3c>
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	aa07      	add	r2, sp, #28
 8004eca:	9204      	str	r2, [sp, #16]
 8004ecc:	aa06      	add	r2, sp, #24
 8004ece:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004ed2:	e9cd 3500 	strd	r3, r5, [sp]
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	463b      	mov	r3, r7
 8004eda:	f000 ff55 	bl	8005d88 <_dtoa_r>
 8004ede:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ee2:	4606      	mov	r6, r0
 8004ee4:	d102      	bne.n	8004eec <__cvt+0x60>
 8004ee6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ee8:	07db      	lsls	r3, r3, #31
 8004eea:	d522      	bpl.n	8004f32 <__cvt+0xa6>
 8004eec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ef0:	eb06 0905 	add.w	r9, r6, r5
 8004ef4:	d110      	bne.n	8004f18 <__cvt+0x8c>
 8004ef6:	7833      	ldrb	r3, [r6, #0]
 8004ef8:	2b30      	cmp	r3, #48	; 0x30
 8004efa:	d10a      	bne.n	8004f12 <__cvt+0x86>
 8004efc:	2200      	movs	r2, #0
 8004efe:	2300      	movs	r3, #0
 8004f00:	4620      	mov	r0, r4
 8004f02:	4639      	mov	r1, r7
 8004f04:	f7fb fdbc 	bl	8000a80 <__aeabi_dcmpeq>
 8004f08:	b918      	cbnz	r0, 8004f12 <__cvt+0x86>
 8004f0a:	f1c5 0501 	rsb	r5, r5, #1
 8004f0e:	f8ca 5000 	str.w	r5, [sl]
 8004f12:	f8da 3000 	ldr.w	r3, [sl]
 8004f16:	4499      	add	r9, r3
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	4639      	mov	r1, r7
 8004f20:	f7fb fdae 	bl	8000a80 <__aeabi_dcmpeq>
 8004f24:	b108      	cbz	r0, 8004f2a <__cvt+0x9e>
 8004f26:	f8cd 901c 	str.w	r9, [sp, #28]
 8004f2a:	2230      	movs	r2, #48	; 0x30
 8004f2c:	9b07      	ldr	r3, [sp, #28]
 8004f2e:	454b      	cmp	r3, r9
 8004f30:	d307      	bcc.n	8004f42 <__cvt+0xb6>
 8004f32:	4630      	mov	r0, r6
 8004f34:	9b07      	ldr	r3, [sp, #28]
 8004f36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004f38:	1b9b      	subs	r3, r3, r6
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	b008      	add	sp, #32
 8004f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f42:	1c59      	adds	r1, r3, #1
 8004f44:	9107      	str	r1, [sp, #28]
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	e7f0      	b.n	8004f2c <__cvt+0xa0>

08004f4a <__exponent>:
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f4e:	2900      	cmp	r1, #0
 8004f50:	f803 2b02 	strb.w	r2, [r3], #2
 8004f54:	bfb6      	itet	lt
 8004f56:	222d      	movlt	r2, #45	; 0x2d
 8004f58:	222b      	movge	r2, #43	; 0x2b
 8004f5a:	4249      	neglt	r1, r1
 8004f5c:	2909      	cmp	r1, #9
 8004f5e:	7042      	strb	r2, [r0, #1]
 8004f60:	dd2a      	ble.n	8004fb8 <__exponent+0x6e>
 8004f62:	f10d 0207 	add.w	r2, sp, #7
 8004f66:	4617      	mov	r7, r2
 8004f68:	260a      	movs	r6, #10
 8004f6a:	fb91 f5f6 	sdiv	r5, r1, r6
 8004f6e:	4694      	mov	ip, r2
 8004f70:	fb06 1415 	mls	r4, r6, r5, r1
 8004f74:	3430      	adds	r4, #48	; 0x30
 8004f76:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	2c63      	cmp	r4, #99	; 0x63
 8004f7e:	4629      	mov	r1, r5
 8004f80:	f102 32ff 	add.w	r2, r2, #4294967295
 8004f84:	dcf1      	bgt.n	8004f6a <__exponent+0x20>
 8004f86:	3130      	adds	r1, #48	; 0x30
 8004f88:	f1ac 0402 	sub.w	r4, ip, #2
 8004f8c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f90:	4622      	mov	r2, r4
 8004f92:	1c41      	adds	r1, r0, #1
 8004f94:	42ba      	cmp	r2, r7
 8004f96:	d30a      	bcc.n	8004fae <__exponent+0x64>
 8004f98:	f10d 0209 	add.w	r2, sp, #9
 8004f9c:	eba2 020c 	sub.w	r2, r2, ip
 8004fa0:	42bc      	cmp	r4, r7
 8004fa2:	bf88      	it	hi
 8004fa4:	2200      	movhi	r2, #0
 8004fa6:	4413      	add	r3, r2
 8004fa8:	1a18      	subs	r0, r3, r0
 8004faa:	b003      	add	sp, #12
 8004fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fae:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004fb2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004fb6:	e7ed      	b.n	8004f94 <__exponent+0x4a>
 8004fb8:	2330      	movs	r3, #48	; 0x30
 8004fba:	3130      	adds	r1, #48	; 0x30
 8004fbc:	7083      	strb	r3, [r0, #2]
 8004fbe:	70c1      	strb	r1, [r0, #3]
 8004fc0:	1d03      	adds	r3, r0, #4
 8004fc2:	e7f1      	b.n	8004fa8 <__exponent+0x5e>

08004fc4 <_printf_float>:
 8004fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc8:	b091      	sub	sp, #68	; 0x44
 8004fca:	460c      	mov	r4, r1
 8004fcc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004fd0:	4616      	mov	r6, r2
 8004fd2:	461f      	mov	r7, r3
 8004fd4:	4605      	mov	r5, r0
 8004fd6:	f000 fdc7 	bl	8005b68 <_localeconv_r>
 8004fda:	6803      	ldr	r3, [r0, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	9309      	str	r3, [sp, #36]	; 0x24
 8004fe0:	f7fb f922 	bl	8000228 <strlen>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	930e      	str	r3, [sp, #56]	; 0x38
 8004fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8004fec:	900a      	str	r0, [sp, #40]	; 0x28
 8004fee:	3307      	adds	r3, #7
 8004ff0:	f023 0307 	bic.w	r3, r3, #7
 8004ff4:	f103 0208 	add.w	r2, r3, #8
 8004ff8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004ffc:	f8d4 b000 	ldr.w	fp, [r4]
 8005000:	f8c8 2000 	str.w	r2, [r8]
 8005004:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005008:	4652      	mov	r2, sl
 800500a:	4643      	mov	r3, r8
 800500c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005010:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005014:	930b      	str	r3, [sp, #44]	; 0x2c
 8005016:	f04f 32ff 	mov.w	r2, #4294967295
 800501a:	4650      	mov	r0, sl
 800501c:	4b9c      	ldr	r3, [pc, #624]	; (8005290 <_printf_float+0x2cc>)
 800501e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005020:	f7fb fd60 	bl	8000ae4 <__aeabi_dcmpun>
 8005024:	bb70      	cbnz	r0, 8005084 <_printf_float+0xc0>
 8005026:	f04f 32ff 	mov.w	r2, #4294967295
 800502a:	4650      	mov	r0, sl
 800502c:	4b98      	ldr	r3, [pc, #608]	; (8005290 <_printf_float+0x2cc>)
 800502e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005030:	f7fb fd3a 	bl	8000aa8 <__aeabi_dcmple>
 8005034:	bb30      	cbnz	r0, 8005084 <_printf_float+0xc0>
 8005036:	2200      	movs	r2, #0
 8005038:	2300      	movs	r3, #0
 800503a:	4650      	mov	r0, sl
 800503c:	4641      	mov	r1, r8
 800503e:	f7fb fd29 	bl	8000a94 <__aeabi_dcmplt>
 8005042:	b110      	cbz	r0, 800504a <_printf_float+0x86>
 8005044:	232d      	movs	r3, #45	; 0x2d
 8005046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800504a:	4a92      	ldr	r2, [pc, #584]	; (8005294 <_printf_float+0x2d0>)
 800504c:	4b92      	ldr	r3, [pc, #584]	; (8005298 <_printf_float+0x2d4>)
 800504e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005052:	bf94      	ite	ls
 8005054:	4690      	movls	r8, r2
 8005056:	4698      	movhi	r8, r3
 8005058:	2303      	movs	r3, #3
 800505a:	f04f 0a00 	mov.w	sl, #0
 800505e:	6123      	str	r3, [r4, #16]
 8005060:	f02b 0304 	bic.w	r3, fp, #4
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	4633      	mov	r3, r6
 8005068:	4621      	mov	r1, r4
 800506a:	4628      	mov	r0, r5
 800506c:	9700      	str	r7, [sp, #0]
 800506e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005070:	f000 f9d6 	bl	8005420 <_printf_common>
 8005074:	3001      	adds	r0, #1
 8005076:	f040 8090 	bne.w	800519a <_printf_float+0x1d6>
 800507a:	f04f 30ff 	mov.w	r0, #4294967295
 800507e:	b011      	add	sp, #68	; 0x44
 8005080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005084:	4652      	mov	r2, sl
 8005086:	4643      	mov	r3, r8
 8005088:	4650      	mov	r0, sl
 800508a:	4641      	mov	r1, r8
 800508c:	f7fb fd2a 	bl	8000ae4 <__aeabi_dcmpun>
 8005090:	b148      	cbz	r0, 80050a6 <_printf_float+0xe2>
 8005092:	f1b8 0f00 	cmp.w	r8, #0
 8005096:	bfb8      	it	lt
 8005098:	232d      	movlt	r3, #45	; 0x2d
 800509a:	4a80      	ldr	r2, [pc, #512]	; (800529c <_printf_float+0x2d8>)
 800509c:	bfb8      	it	lt
 800509e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80050a2:	4b7f      	ldr	r3, [pc, #508]	; (80052a0 <_printf_float+0x2dc>)
 80050a4:	e7d3      	b.n	800504e <_printf_float+0x8a>
 80050a6:	6863      	ldr	r3, [r4, #4]
 80050a8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	d142      	bne.n	8005136 <_printf_float+0x172>
 80050b0:	2306      	movs	r3, #6
 80050b2:	6063      	str	r3, [r4, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	9206      	str	r2, [sp, #24]
 80050b8:	aa0e      	add	r2, sp, #56	; 0x38
 80050ba:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80050be:	aa0d      	add	r2, sp, #52	; 0x34
 80050c0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80050c4:	9203      	str	r2, [sp, #12]
 80050c6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80050ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80050ce:	6023      	str	r3, [r4, #0]
 80050d0:	6863      	ldr	r3, [r4, #4]
 80050d2:	4652      	mov	r2, sl
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	4628      	mov	r0, r5
 80050d8:	4643      	mov	r3, r8
 80050da:	910b      	str	r1, [sp, #44]	; 0x2c
 80050dc:	f7ff fed6 	bl	8004e8c <__cvt>
 80050e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050e2:	4680      	mov	r8, r0
 80050e4:	2947      	cmp	r1, #71	; 0x47
 80050e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80050e8:	d108      	bne.n	80050fc <_printf_float+0x138>
 80050ea:	1cc8      	adds	r0, r1, #3
 80050ec:	db02      	blt.n	80050f4 <_printf_float+0x130>
 80050ee:	6863      	ldr	r3, [r4, #4]
 80050f0:	4299      	cmp	r1, r3
 80050f2:	dd40      	ble.n	8005176 <_printf_float+0x1b2>
 80050f4:	f1a9 0902 	sub.w	r9, r9, #2
 80050f8:	fa5f f989 	uxtb.w	r9, r9
 80050fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005100:	d81f      	bhi.n	8005142 <_printf_float+0x17e>
 8005102:	464a      	mov	r2, r9
 8005104:	3901      	subs	r1, #1
 8005106:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800510a:	910d      	str	r1, [sp, #52]	; 0x34
 800510c:	f7ff ff1d 	bl	8004f4a <__exponent>
 8005110:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005112:	4682      	mov	sl, r0
 8005114:	1813      	adds	r3, r2, r0
 8005116:	2a01      	cmp	r2, #1
 8005118:	6123      	str	r3, [r4, #16]
 800511a:	dc02      	bgt.n	8005122 <_printf_float+0x15e>
 800511c:	6822      	ldr	r2, [r4, #0]
 800511e:	07d2      	lsls	r2, r2, #31
 8005120:	d501      	bpl.n	8005126 <_printf_float+0x162>
 8005122:	3301      	adds	r3, #1
 8005124:	6123      	str	r3, [r4, #16]
 8005126:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800512a:	2b00      	cmp	r3, #0
 800512c:	d09b      	beq.n	8005066 <_printf_float+0xa2>
 800512e:	232d      	movs	r3, #45	; 0x2d
 8005130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005134:	e797      	b.n	8005066 <_printf_float+0xa2>
 8005136:	2947      	cmp	r1, #71	; 0x47
 8005138:	d1bc      	bne.n	80050b4 <_printf_float+0xf0>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1ba      	bne.n	80050b4 <_printf_float+0xf0>
 800513e:	2301      	movs	r3, #1
 8005140:	e7b7      	b.n	80050b2 <_printf_float+0xee>
 8005142:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005146:	d118      	bne.n	800517a <_printf_float+0x1b6>
 8005148:	2900      	cmp	r1, #0
 800514a:	6863      	ldr	r3, [r4, #4]
 800514c:	dd0b      	ble.n	8005166 <_printf_float+0x1a2>
 800514e:	6121      	str	r1, [r4, #16]
 8005150:	b913      	cbnz	r3, 8005158 <_printf_float+0x194>
 8005152:	6822      	ldr	r2, [r4, #0]
 8005154:	07d0      	lsls	r0, r2, #31
 8005156:	d502      	bpl.n	800515e <_printf_float+0x19a>
 8005158:	3301      	adds	r3, #1
 800515a:	440b      	add	r3, r1
 800515c:	6123      	str	r3, [r4, #16]
 800515e:	f04f 0a00 	mov.w	sl, #0
 8005162:	65a1      	str	r1, [r4, #88]	; 0x58
 8005164:	e7df      	b.n	8005126 <_printf_float+0x162>
 8005166:	b913      	cbnz	r3, 800516e <_printf_float+0x1aa>
 8005168:	6822      	ldr	r2, [r4, #0]
 800516a:	07d2      	lsls	r2, r2, #31
 800516c:	d501      	bpl.n	8005172 <_printf_float+0x1ae>
 800516e:	3302      	adds	r3, #2
 8005170:	e7f4      	b.n	800515c <_printf_float+0x198>
 8005172:	2301      	movs	r3, #1
 8005174:	e7f2      	b.n	800515c <_printf_float+0x198>
 8005176:	f04f 0967 	mov.w	r9, #103	; 0x67
 800517a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800517c:	4299      	cmp	r1, r3
 800517e:	db05      	blt.n	800518c <_printf_float+0x1c8>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	6121      	str	r1, [r4, #16]
 8005184:	07d8      	lsls	r0, r3, #31
 8005186:	d5ea      	bpl.n	800515e <_printf_float+0x19a>
 8005188:	1c4b      	adds	r3, r1, #1
 800518a:	e7e7      	b.n	800515c <_printf_float+0x198>
 800518c:	2900      	cmp	r1, #0
 800518e:	bfcc      	ite	gt
 8005190:	2201      	movgt	r2, #1
 8005192:	f1c1 0202 	rsble	r2, r1, #2
 8005196:	4413      	add	r3, r2
 8005198:	e7e0      	b.n	800515c <_printf_float+0x198>
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	055a      	lsls	r2, r3, #21
 800519e:	d407      	bmi.n	80051b0 <_printf_float+0x1ec>
 80051a0:	6923      	ldr	r3, [r4, #16]
 80051a2:	4642      	mov	r2, r8
 80051a4:	4631      	mov	r1, r6
 80051a6:	4628      	mov	r0, r5
 80051a8:	47b8      	blx	r7
 80051aa:	3001      	adds	r0, #1
 80051ac:	d12b      	bne.n	8005206 <_printf_float+0x242>
 80051ae:	e764      	b.n	800507a <_printf_float+0xb6>
 80051b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80051b4:	f240 80dd 	bls.w	8005372 <_printf_float+0x3ae>
 80051b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051bc:	2200      	movs	r2, #0
 80051be:	2300      	movs	r3, #0
 80051c0:	f7fb fc5e 	bl	8000a80 <__aeabi_dcmpeq>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d033      	beq.n	8005230 <_printf_float+0x26c>
 80051c8:	2301      	movs	r3, #1
 80051ca:	4631      	mov	r1, r6
 80051cc:	4628      	mov	r0, r5
 80051ce:	4a35      	ldr	r2, [pc, #212]	; (80052a4 <_printf_float+0x2e0>)
 80051d0:	47b8      	blx	r7
 80051d2:	3001      	adds	r0, #1
 80051d4:	f43f af51 	beq.w	800507a <_printf_float+0xb6>
 80051d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051dc:	429a      	cmp	r2, r3
 80051de:	db02      	blt.n	80051e6 <_printf_float+0x222>
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	07d8      	lsls	r0, r3, #31
 80051e4:	d50f      	bpl.n	8005206 <_printf_float+0x242>
 80051e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051ea:	4631      	mov	r1, r6
 80051ec:	4628      	mov	r0, r5
 80051ee:	47b8      	blx	r7
 80051f0:	3001      	adds	r0, #1
 80051f2:	f43f af42 	beq.w	800507a <_printf_float+0xb6>
 80051f6:	f04f 0800 	mov.w	r8, #0
 80051fa:	f104 091a 	add.w	r9, r4, #26
 80051fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005200:	3b01      	subs	r3, #1
 8005202:	4543      	cmp	r3, r8
 8005204:	dc09      	bgt.n	800521a <_printf_float+0x256>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	079b      	lsls	r3, r3, #30
 800520a:	f100 8104 	bmi.w	8005416 <_printf_float+0x452>
 800520e:	68e0      	ldr	r0, [r4, #12]
 8005210:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005212:	4298      	cmp	r0, r3
 8005214:	bfb8      	it	lt
 8005216:	4618      	movlt	r0, r3
 8005218:	e731      	b.n	800507e <_printf_float+0xba>
 800521a:	2301      	movs	r3, #1
 800521c:	464a      	mov	r2, r9
 800521e:	4631      	mov	r1, r6
 8005220:	4628      	mov	r0, r5
 8005222:	47b8      	blx	r7
 8005224:	3001      	adds	r0, #1
 8005226:	f43f af28 	beq.w	800507a <_printf_float+0xb6>
 800522a:	f108 0801 	add.w	r8, r8, #1
 800522e:	e7e6      	b.n	80051fe <_printf_float+0x23a>
 8005230:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005232:	2b00      	cmp	r3, #0
 8005234:	dc38      	bgt.n	80052a8 <_printf_float+0x2e4>
 8005236:	2301      	movs	r3, #1
 8005238:	4631      	mov	r1, r6
 800523a:	4628      	mov	r0, r5
 800523c:	4a19      	ldr	r2, [pc, #100]	; (80052a4 <_printf_float+0x2e0>)
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	f43f af1a 	beq.w	800507a <_printf_float+0xb6>
 8005246:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800524a:	4313      	orrs	r3, r2
 800524c:	d102      	bne.n	8005254 <_printf_float+0x290>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	07d9      	lsls	r1, r3, #31
 8005252:	d5d8      	bpl.n	8005206 <_printf_float+0x242>
 8005254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005258:	4631      	mov	r1, r6
 800525a:	4628      	mov	r0, r5
 800525c:	47b8      	blx	r7
 800525e:	3001      	adds	r0, #1
 8005260:	f43f af0b 	beq.w	800507a <_printf_float+0xb6>
 8005264:	f04f 0900 	mov.w	r9, #0
 8005268:	f104 0a1a 	add.w	sl, r4, #26
 800526c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800526e:	425b      	negs	r3, r3
 8005270:	454b      	cmp	r3, r9
 8005272:	dc01      	bgt.n	8005278 <_printf_float+0x2b4>
 8005274:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005276:	e794      	b.n	80051a2 <_printf_float+0x1de>
 8005278:	2301      	movs	r3, #1
 800527a:	4652      	mov	r2, sl
 800527c:	4631      	mov	r1, r6
 800527e:	4628      	mov	r0, r5
 8005280:	47b8      	blx	r7
 8005282:	3001      	adds	r0, #1
 8005284:	f43f aef9 	beq.w	800507a <_printf_float+0xb6>
 8005288:	f109 0901 	add.w	r9, r9, #1
 800528c:	e7ee      	b.n	800526c <_printf_float+0x2a8>
 800528e:	bf00      	nop
 8005290:	7fefffff 	.word	0x7fefffff
 8005294:	08007a4e 	.word	0x08007a4e
 8005298:	08007a52 	.word	0x08007a52
 800529c:	08007a56 	.word	0x08007a56
 80052a0:	08007a5a 	.word	0x08007a5a
 80052a4:	08007a5e 	.word	0x08007a5e
 80052a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052ac:	429a      	cmp	r2, r3
 80052ae:	bfa8      	it	ge
 80052b0:	461a      	movge	r2, r3
 80052b2:	2a00      	cmp	r2, #0
 80052b4:	4691      	mov	r9, r2
 80052b6:	dc37      	bgt.n	8005328 <_printf_float+0x364>
 80052b8:	f04f 0b00 	mov.w	fp, #0
 80052bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052c0:	f104 021a 	add.w	r2, r4, #26
 80052c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80052c8:	ebaa 0309 	sub.w	r3, sl, r9
 80052cc:	455b      	cmp	r3, fp
 80052ce:	dc33      	bgt.n	8005338 <_printf_float+0x374>
 80052d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80052d4:	429a      	cmp	r2, r3
 80052d6:	db3b      	blt.n	8005350 <_printf_float+0x38c>
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	07da      	lsls	r2, r3, #31
 80052dc:	d438      	bmi.n	8005350 <_printf_float+0x38c>
 80052de:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80052e2:	eba2 0903 	sub.w	r9, r2, r3
 80052e6:	eba2 020a 	sub.w	r2, r2, sl
 80052ea:	4591      	cmp	r9, r2
 80052ec:	bfa8      	it	ge
 80052ee:	4691      	movge	r9, r2
 80052f0:	f1b9 0f00 	cmp.w	r9, #0
 80052f4:	dc34      	bgt.n	8005360 <_printf_float+0x39c>
 80052f6:	f04f 0800 	mov.w	r8, #0
 80052fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052fe:	f104 0a1a 	add.w	sl, r4, #26
 8005302:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	eba3 0309 	sub.w	r3, r3, r9
 800530c:	4543      	cmp	r3, r8
 800530e:	f77f af7a 	ble.w	8005206 <_printf_float+0x242>
 8005312:	2301      	movs	r3, #1
 8005314:	4652      	mov	r2, sl
 8005316:	4631      	mov	r1, r6
 8005318:	4628      	mov	r0, r5
 800531a:	47b8      	blx	r7
 800531c:	3001      	adds	r0, #1
 800531e:	f43f aeac 	beq.w	800507a <_printf_float+0xb6>
 8005322:	f108 0801 	add.w	r8, r8, #1
 8005326:	e7ec      	b.n	8005302 <_printf_float+0x33e>
 8005328:	4613      	mov	r3, r2
 800532a:	4631      	mov	r1, r6
 800532c:	4642      	mov	r2, r8
 800532e:	4628      	mov	r0, r5
 8005330:	47b8      	blx	r7
 8005332:	3001      	adds	r0, #1
 8005334:	d1c0      	bne.n	80052b8 <_printf_float+0x2f4>
 8005336:	e6a0      	b.n	800507a <_printf_float+0xb6>
 8005338:	2301      	movs	r3, #1
 800533a:	4631      	mov	r1, r6
 800533c:	4628      	mov	r0, r5
 800533e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005340:	47b8      	blx	r7
 8005342:	3001      	adds	r0, #1
 8005344:	f43f ae99 	beq.w	800507a <_printf_float+0xb6>
 8005348:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800534a:	f10b 0b01 	add.w	fp, fp, #1
 800534e:	e7b9      	b.n	80052c4 <_printf_float+0x300>
 8005350:	4631      	mov	r1, r6
 8005352:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005356:	4628      	mov	r0, r5
 8005358:	47b8      	blx	r7
 800535a:	3001      	adds	r0, #1
 800535c:	d1bf      	bne.n	80052de <_printf_float+0x31a>
 800535e:	e68c      	b.n	800507a <_printf_float+0xb6>
 8005360:	464b      	mov	r3, r9
 8005362:	4631      	mov	r1, r6
 8005364:	4628      	mov	r0, r5
 8005366:	eb08 020a 	add.w	r2, r8, sl
 800536a:	47b8      	blx	r7
 800536c:	3001      	adds	r0, #1
 800536e:	d1c2      	bne.n	80052f6 <_printf_float+0x332>
 8005370:	e683      	b.n	800507a <_printf_float+0xb6>
 8005372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005374:	2a01      	cmp	r2, #1
 8005376:	dc01      	bgt.n	800537c <_printf_float+0x3b8>
 8005378:	07db      	lsls	r3, r3, #31
 800537a:	d539      	bpl.n	80053f0 <_printf_float+0x42c>
 800537c:	2301      	movs	r3, #1
 800537e:	4642      	mov	r2, r8
 8005380:	4631      	mov	r1, r6
 8005382:	4628      	mov	r0, r5
 8005384:	47b8      	blx	r7
 8005386:	3001      	adds	r0, #1
 8005388:	f43f ae77 	beq.w	800507a <_printf_float+0xb6>
 800538c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005390:	4631      	mov	r1, r6
 8005392:	4628      	mov	r0, r5
 8005394:	47b8      	blx	r7
 8005396:	3001      	adds	r0, #1
 8005398:	f43f ae6f 	beq.w	800507a <_printf_float+0xb6>
 800539c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053a0:	2200      	movs	r2, #0
 80053a2:	2300      	movs	r3, #0
 80053a4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80053a8:	f7fb fb6a 	bl	8000a80 <__aeabi_dcmpeq>
 80053ac:	b9d8      	cbnz	r0, 80053e6 <_printf_float+0x422>
 80053ae:	f109 33ff 	add.w	r3, r9, #4294967295
 80053b2:	f108 0201 	add.w	r2, r8, #1
 80053b6:	4631      	mov	r1, r6
 80053b8:	4628      	mov	r0, r5
 80053ba:	47b8      	blx	r7
 80053bc:	3001      	adds	r0, #1
 80053be:	d10e      	bne.n	80053de <_printf_float+0x41a>
 80053c0:	e65b      	b.n	800507a <_printf_float+0xb6>
 80053c2:	2301      	movs	r3, #1
 80053c4:	464a      	mov	r2, r9
 80053c6:	4631      	mov	r1, r6
 80053c8:	4628      	mov	r0, r5
 80053ca:	47b8      	blx	r7
 80053cc:	3001      	adds	r0, #1
 80053ce:	f43f ae54 	beq.w	800507a <_printf_float+0xb6>
 80053d2:	f108 0801 	add.w	r8, r8, #1
 80053d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053d8:	3b01      	subs	r3, #1
 80053da:	4543      	cmp	r3, r8
 80053dc:	dcf1      	bgt.n	80053c2 <_printf_float+0x3fe>
 80053de:	4653      	mov	r3, sl
 80053e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053e4:	e6de      	b.n	80051a4 <_printf_float+0x1e0>
 80053e6:	f04f 0800 	mov.w	r8, #0
 80053ea:	f104 091a 	add.w	r9, r4, #26
 80053ee:	e7f2      	b.n	80053d6 <_printf_float+0x412>
 80053f0:	2301      	movs	r3, #1
 80053f2:	4642      	mov	r2, r8
 80053f4:	e7df      	b.n	80053b6 <_printf_float+0x3f2>
 80053f6:	2301      	movs	r3, #1
 80053f8:	464a      	mov	r2, r9
 80053fa:	4631      	mov	r1, r6
 80053fc:	4628      	mov	r0, r5
 80053fe:	47b8      	blx	r7
 8005400:	3001      	adds	r0, #1
 8005402:	f43f ae3a 	beq.w	800507a <_printf_float+0xb6>
 8005406:	f108 0801 	add.w	r8, r8, #1
 800540a:	68e3      	ldr	r3, [r4, #12]
 800540c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800540e:	1a5b      	subs	r3, r3, r1
 8005410:	4543      	cmp	r3, r8
 8005412:	dcf0      	bgt.n	80053f6 <_printf_float+0x432>
 8005414:	e6fb      	b.n	800520e <_printf_float+0x24a>
 8005416:	f04f 0800 	mov.w	r8, #0
 800541a:	f104 0919 	add.w	r9, r4, #25
 800541e:	e7f4      	b.n	800540a <_printf_float+0x446>

08005420 <_printf_common>:
 8005420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005424:	4616      	mov	r6, r2
 8005426:	4699      	mov	r9, r3
 8005428:	688a      	ldr	r2, [r1, #8]
 800542a:	690b      	ldr	r3, [r1, #16]
 800542c:	4607      	mov	r7, r0
 800542e:	4293      	cmp	r3, r2
 8005430:	bfb8      	it	lt
 8005432:	4613      	movlt	r3, r2
 8005434:	6033      	str	r3, [r6, #0]
 8005436:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800543a:	460c      	mov	r4, r1
 800543c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005440:	b10a      	cbz	r2, 8005446 <_printf_common+0x26>
 8005442:	3301      	adds	r3, #1
 8005444:	6033      	str	r3, [r6, #0]
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	0699      	lsls	r1, r3, #26
 800544a:	bf42      	ittt	mi
 800544c:	6833      	ldrmi	r3, [r6, #0]
 800544e:	3302      	addmi	r3, #2
 8005450:	6033      	strmi	r3, [r6, #0]
 8005452:	6825      	ldr	r5, [r4, #0]
 8005454:	f015 0506 	ands.w	r5, r5, #6
 8005458:	d106      	bne.n	8005468 <_printf_common+0x48>
 800545a:	f104 0a19 	add.w	sl, r4, #25
 800545e:	68e3      	ldr	r3, [r4, #12]
 8005460:	6832      	ldr	r2, [r6, #0]
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	42ab      	cmp	r3, r5
 8005466:	dc2b      	bgt.n	80054c0 <_printf_common+0xa0>
 8005468:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800546c:	1e13      	subs	r3, r2, #0
 800546e:	6822      	ldr	r2, [r4, #0]
 8005470:	bf18      	it	ne
 8005472:	2301      	movne	r3, #1
 8005474:	0692      	lsls	r2, r2, #26
 8005476:	d430      	bmi.n	80054da <_printf_common+0xba>
 8005478:	4649      	mov	r1, r9
 800547a:	4638      	mov	r0, r7
 800547c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005480:	47c0      	blx	r8
 8005482:	3001      	adds	r0, #1
 8005484:	d023      	beq.n	80054ce <_printf_common+0xae>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	6922      	ldr	r2, [r4, #16]
 800548a:	f003 0306 	and.w	r3, r3, #6
 800548e:	2b04      	cmp	r3, #4
 8005490:	bf14      	ite	ne
 8005492:	2500      	movne	r5, #0
 8005494:	6833      	ldreq	r3, [r6, #0]
 8005496:	f04f 0600 	mov.w	r6, #0
 800549a:	bf08      	it	eq
 800549c:	68e5      	ldreq	r5, [r4, #12]
 800549e:	f104 041a 	add.w	r4, r4, #26
 80054a2:	bf08      	it	eq
 80054a4:	1aed      	subeq	r5, r5, r3
 80054a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80054aa:	bf08      	it	eq
 80054ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054b0:	4293      	cmp	r3, r2
 80054b2:	bfc4      	itt	gt
 80054b4:	1a9b      	subgt	r3, r3, r2
 80054b6:	18ed      	addgt	r5, r5, r3
 80054b8:	42b5      	cmp	r5, r6
 80054ba:	d11a      	bne.n	80054f2 <_printf_common+0xd2>
 80054bc:	2000      	movs	r0, #0
 80054be:	e008      	b.n	80054d2 <_printf_common+0xb2>
 80054c0:	2301      	movs	r3, #1
 80054c2:	4652      	mov	r2, sl
 80054c4:	4649      	mov	r1, r9
 80054c6:	4638      	mov	r0, r7
 80054c8:	47c0      	blx	r8
 80054ca:	3001      	adds	r0, #1
 80054cc:	d103      	bne.n	80054d6 <_printf_common+0xb6>
 80054ce:	f04f 30ff 	mov.w	r0, #4294967295
 80054d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d6:	3501      	adds	r5, #1
 80054d8:	e7c1      	b.n	800545e <_printf_common+0x3e>
 80054da:	2030      	movs	r0, #48	; 0x30
 80054dc:	18e1      	adds	r1, r4, r3
 80054de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054e8:	4422      	add	r2, r4
 80054ea:	3302      	adds	r3, #2
 80054ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054f0:	e7c2      	b.n	8005478 <_printf_common+0x58>
 80054f2:	2301      	movs	r3, #1
 80054f4:	4622      	mov	r2, r4
 80054f6:	4649      	mov	r1, r9
 80054f8:	4638      	mov	r0, r7
 80054fa:	47c0      	blx	r8
 80054fc:	3001      	adds	r0, #1
 80054fe:	d0e6      	beq.n	80054ce <_printf_common+0xae>
 8005500:	3601      	adds	r6, #1
 8005502:	e7d9      	b.n	80054b8 <_printf_common+0x98>

08005504 <_printf_i>:
 8005504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005508:	7e0f      	ldrb	r7, [r1, #24]
 800550a:	4691      	mov	r9, r2
 800550c:	2f78      	cmp	r7, #120	; 0x78
 800550e:	4680      	mov	r8, r0
 8005510:	460c      	mov	r4, r1
 8005512:	469a      	mov	sl, r3
 8005514:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005516:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800551a:	d807      	bhi.n	800552c <_printf_i+0x28>
 800551c:	2f62      	cmp	r7, #98	; 0x62
 800551e:	d80a      	bhi.n	8005536 <_printf_i+0x32>
 8005520:	2f00      	cmp	r7, #0
 8005522:	f000 80d5 	beq.w	80056d0 <_printf_i+0x1cc>
 8005526:	2f58      	cmp	r7, #88	; 0x58
 8005528:	f000 80c1 	beq.w	80056ae <_printf_i+0x1aa>
 800552c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005530:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005534:	e03a      	b.n	80055ac <_printf_i+0xa8>
 8005536:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800553a:	2b15      	cmp	r3, #21
 800553c:	d8f6      	bhi.n	800552c <_printf_i+0x28>
 800553e:	a101      	add	r1, pc, #4	; (adr r1, 8005544 <_printf_i+0x40>)
 8005540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005544:	0800559d 	.word	0x0800559d
 8005548:	080055b1 	.word	0x080055b1
 800554c:	0800552d 	.word	0x0800552d
 8005550:	0800552d 	.word	0x0800552d
 8005554:	0800552d 	.word	0x0800552d
 8005558:	0800552d 	.word	0x0800552d
 800555c:	080055b1 	.word	0x080055b1
 8005560:	0800552d 	.word	0x0800552d
 8005564:	0800552d 	.word	0x0800552d
 8005568:	0800552d 	.word	0x0800552d
 800556c:	0800552d 	.word	0x0800552d
 8005570:	080056b7 	.word	0x080056b7
 8005574:	080055dd 	.word	0x080055dd
 8005578:	08005671 	.word	0x08005671
 800557c:	0800552d 	.word	0x0800552d
 8005580:	0800552d 	.word	0x0800552d
 8005584:	080056d9 	.word	0x080056d9
 8005588:	0800552d 	.word	0x0800552d
 800558c:	080055dd 	.word	0x080055dd
 8005590:	0800552d 	.word	0x0800552d
 8005594:	0800552d 	.word	0x0800552d
 8005598:	08005679 	.word	0x08005679
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	1d1a      	adds	r2, r3, #4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	602a      	str	r2, [r5, #0]
 80055a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055ac:	2301      	movs	r3, #1
 80055ae:	e0a0      	b.n	80056f2 <_printf_i+0x1ee>
 80055b0:	6820      	ldr	r0, [r4, #0]
 80055b2:	682b      	ldr	r3, [r5, #0]
 80055b4:	0607      	lsls	r7, r0, #24
 80055b6:	f103 0104 	add.w	r1, r3, #4
 80055ba:	6029      	str	r1, [r5, #0]
 80055bc:	d501      	bpl.n	80055c2 <_printf_i+0xbe>
 80055be:	681e      	ldr	r6, [r3, #0]
 80055c0:	e003      	b.n	80055ca <_printf_i+0xc6>
 80055c2:	0646      	lsls	r6, r0, #25
 80055c4:	d5fb      	bpl.n	80055be <_printf_i+0xba>
 80055c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055ca:	2e00      	cmp	r6, #0
 80055cc:	da03      	bge.n	80055d6 <_printf_i+0xd2>
 80055ce:	232d      	movs	r3, #45	; 0x2d
 80055d0:	4276      	negs	r6, r6
 80055d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055d6:	230a      	movs	r3, #10
 80055d8:	4859      	ldr	r0, [pc, #356]	; (8005740 <_printf_i+0x23c>)
 80055da:	e012      	b.n	8005602 <_printf_i+0xfe>
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	6820      	ldr	r0, [r4, #0]
 80055e0:	1d19      	adds	r1, r3, #4
 80055e2:	6029      	str	r1, [r5, #0]
 80055e4:	0605      	lsls	r5, r0, #24
 80055e6:	d501      	bpl.n	80055ec <_printf_i+0xe8>
 80055e8:	681e      	ldr	r6, [r3, #0]
 80055ea:	e002      	b.n	80055f2 <_printf_i+0xee>
 80055ec:	0641      	lsls	r1, r0, #25
 80055ee:	d5fb      	bpl.n	80055e8 <_printf_i+0xe4>
 80055f0:	881e      	ldrh	r6, [r3, #0]
 80055f2:	2f6f      	cmp	r7, #111	; 0x6f
 80055f4:	bf0c      	ite	eq
 80055f6:	2308      	moveq	r3, #8
 80055f8:	230a      	movne	r3, #10
 80055fa:	4851      	ldr	r0, [pc, #324]	; (8005740 <_printf_i+0x23c>)
 80055fc:	2100      	movs	r1, #0
 80055fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005602:	6865      	ldr	r5, [r4, #4]
 8005604:	2d00      	cmp	r5, #0
 8005606:	bfa8      	it	ge
 8005608:	6821      	ldrge	r1, [r4, #0]
 800560a:	60a5      	str	r5, [r4, #8]
 800560c:	bfa4      	itt	ge
 800560e:	f021 0104 	bicge.w	r1, r1, #4
 8005612:	6021      	strge	r1, [r4, #0]
 8005614:	b90e      	cbnz	r6, 800561a <_printf_i+0x116>
 8005616:	2d00      	cmp	r5, #0
 8005618:	d04b      	beq.n	80056b2 <_printf_i+0x1ae>
 800561a:	4615      	mov	r5, r2
 800561c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005620:	fb03 6711 	mls	r7, r3, r1, r6
 8005624:	5dc7      	ldrb	r7, [r0, r7]
 8005626:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800562a:	4637      	mov	r7, r6
 800562c:	42bb      	cmp	r3, r7
 800562e:	460e      	mov	r6, r1
 8005630:	d9f4      	bls.n	800561c <_printf_i+0x118>
 8005632:	2b08      	cmp	r3, #8
 8005634:	d10b      	bne.n	800564e <_printf_i+0x14a>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	07de      	lsls	r6, r3, #31
 800563a:	d508      	bpl.n	800564e <_printf_i+0x14a>
 800563c:	6923      	ldr	r3, [r4, #16]
 800563e:	6861      	ldr	r1, [r4, #4]
 8005640:	4299      	cmp	r1, r3
 8005642:	bfde      	ittt	le
 8005644:	2330      	movle	r3, #48	; 0x30
 8005646:	f805 3c01 	strble.w	r3, [r5, #-1]
 800564a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800564e:	1b52      	subs	r2, r2, r5
 8005650:	6122      	str	r2, [r4, #16]
 8005652:	464b      	mov	r3, r9
 8005654:	4621      	mov	r1, r4
 8005656:	4640      	mov	r0, r8
 8005658:	f8cd a000 	str.w	sl, [sp]
 800565c:	aa03      	add	r2, sp, #12
 800565e:	f7ff fedf 	bl	8005420 <_printf_common>
 8005662:	3001      	adds	r0, #1
 8005664:	d14a      	bne.n	80056fc <_printf_i+0x1f8>
 8005666:	f04f 30ff 	mov.w	r0, #4294967295
 800566a:	b004      	add	sp, #16
 800566c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	f043 0320 	orr.w	r3, r3, #32
 8005676:	6023      	str	r3, [r4, #0]
 8005678:	2778      	movs	r7, #120	; 0x78
 800567a:	4832      	ldr	r0, [pc, #200]	; (8005744 <_printf_i+0x240>)
 800567c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	6829      	ldr	r1, [r5, #0]
 8005684:	061f      	lsls	r7, r3, #24
 8005686:	f851 6b04 	ldr.w	r6, [r1], #4
 800568a:	d402      	bmi.n	8005692 <_printf_i+0x18e>
 800568c:	065f      	lsls	r7, r3, #25
 800568e:	bf48      	it	mi
 8005690:	b2b6      	uxthmi	r6, r6
 8005692:	07df      	lsls	r7, r3, #31
 8005694:	bf48      	it	mi
 8005696:	f043 0320 	orrmi.w	r3, r3, #32
 800569a:	6029      	str	r1, [r5, #0]
 800569c:	bf48      	it	mi
 800569e:	6023      	strmi	r3, [r4, #0]
 80056a0:	b91e      	cbnz	r6, 80056aa <_printf_i+0x1a6>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	f023 0320 	bic.w	r3, r3, #32
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	2310      	movs	r3, #16
 80056ac:	e7a6      	b.n	80055fc <_printf_i+0xf8>
 80056ae:	4824      	ldr	r0, [pc, #144]	; (8005740 <_printf_i+0x23c>)
 80056b0:	e7e4      	b.n	800567c <_printf_i+0x178>
 80056b2:	4615      	mov	r5, r2
 80056b4:	e7bd      	b.n	8005632 <_printf_i+0x12e>
 80056b6:	682b      	ldr	r3, [r5, #0]
 80056b8:	6826      	ldr	r6, [r4, #0]
 80056ba:	1d18      	adds	r0, r3, #4
 80056bc:	6961      	ldr	r1, [r4, #20]
 80056be:	6028      	str	r0, [r5, #0]
 80056c0:	0635      	lsls	r5, r6, #24
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	d501      	bpl.n	80056ca <_printf_i+0x1c6>
 80056c6:	6019      	str	r1, [r3, #0]
 80056c8:	e002      	b.n	80056d0 <_printf_i+0x1cc>
 80056ca:	0670      	lsls	r0, r6, #25
 80056cc:	d5fb      	bpl.n	80056c6 <_printf_i+0x1c2>
 80056ce:	8019      	strh	r1, [r3, #0]
 80056d0:	2300      	movs	r3, #0
 80056d2:	4615      	mov	r5, r2
 80056d4:	6123      	str	r3, [r4, #16]
 80056d6:	e7bc      	b.n	8005652 <_printf_i+0x14e>
 80056d8:	682b      	ldr	r3, [r5, #0]
 80056da:	2100      	movs	r1, #0
 80056dc:	1d1a      	adds	r2, r3, #4
 80056de:	602a      	str	r2, [r5, #0]
 80056e0:	681d      	ldr	r5, [r3, #0]
 80056e2:	6862      	ldr	r2, [r4, #4]
 80056e4:	4628      	mov	r0, r5
 80056e6:	f000 fab6 	bl	8005c56 <memchr>
 80056ea:	b108      	cbz	r0, 80056f0 <_printf_i+0x1ec>
 80056ec:	1b40      	subs	r0, r0, r5
 80056ee:	6060      	str	r0, [r4, #4]
 80056f0:	6863      	ldr	r3, [r4, #4]
 80056f2:	6123      	str	r3, [r4, #16]
 80056f4:	2300      	movs	r3, #0
 80056f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056fa:	e7aa      	b.n	8005652 <_printf_i+0x14e>
 80056fc:	462a      	mov	r2, r5
 80056fe:	4649      	mov	r1, r9
 8005700:	4640      	mov	r0, r8
 8005702:	6923      	ldr	r3, [r4, #16]
 8005704:	47d0      	blx	sl
 8005706:	3001      	adds	r0, #1
 8005708:	d0ad      	beq.n	8005666 <_printf_i+0x162>
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	079b      	lsls	r3, r3, #30
 800570e:	d413      	bmi.n	8005738 <_printf_i+0x234>
 8005710:	68e0      	ldr	r0, [r4, #12]
 8005712:	9b03      	ldr	r3, [sp, #12]
 8005714:	4298      	cmp	r0, r3
 8005716:	bfb8      	it	lt
 8005718:	4618      	movlt	r0, r3
 800571a:	e7a6      	b.n	800566a <_printf_i+0x166>
 800571c:	2301      	movs	r3, #1
 800571e:	4632      	mov	r2, r6
 8005720:	4649      	mov	r1, r9
 8005722:	4640      	mov	r0, r8
 8005724:	47d0      	blx	sl
 8005726:	3001      	adds	r0, #1
 8005728:	d09d      	beq.n	8005666 <_printf_i+0x162>
 800572a:	3501      	adds	r5, #1
 800572c:	68e3      	ldr	r3, [r4, #12]
 800572e:	9903      	ldr	r1, [sp, #12]
 8005730:	1a5b      	subs	r3, r3, r1
 8005732:	42ab      	cmp	r3, r5
 8005734:	dcf2      	bgt.n	800571c <_printf_i+0x218>
 8005736:	e7eb      	b.n	8005710 <_printf_i+0x20c>
 8005738:	2500      	movs	r5, #0
 800573a:	f104 0619 	add.w	r6, r4, #25
 800573e:	e7f5      	b.n	800572c <_printf_i+0x228>
 8005740:	08007a60 	.word	0x08007a60
 8005744:	08007a71 	.word	0x08007a71

08005748 <std>:
 8005748:	2300      	movs	r3, #0
 800574a:	b510      	push	{r4, lr}
 800574c:	4604      	mov	r4, r0
 800574e:	e9c0 3300 	strd	r3, r3, [r0]
 8005752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005756:	6083      	str	r3, [r0, #8]
 8005758:	8181      	strh	r1, [r0, #12]
 800575a:	6643      	str	r3, [r0, #100]	; 0x64
 800575c:	81c2      	strh	r2, [r0, #14]
 800575e:	6183      	str	r3, [r0, #24]
 8005760:	4619      	mov	r1, r3
 8005762:	2208      	movs	r2, #8
 8005764:	305c      	adds	r0, #92	; 0x5c
 8005766:	f000 f9f7 	bl	8005b58 <memset>
 800576a:	4b0d      	ldr	r3, [pc, #52]	; (80057a0 <std+0x58>)
 800576c:	6224      	str	r4, [r4, #32]
 800576e:	6263      	str	r3, [r4, #36]	; 0x24
 8005770:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <std+0x5c>)
 8005772:	62a3      	str	r3, [r4, #40]	; 0x28
 8005774:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <std+0x60>)
 8005776:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005778:	4b0c      	ldr	r3, [pc, #48]	; (80057ac <std+0x64>)
 800577a:	6323      	str	r3, [r4, #48]	; 0x30
 800577c:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <std+0x68>)
 800577e:	429c      	cmp	r4, r3
 8005780:	d006      	beq.n	8005790 <std+0x48>
 8005782:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005786:	4294      	cmp	r4, r2
 8005788:	d002      	beq.n	8005790 <std+0x48>
 800578a:	33d0      	adds	r3, #208	; 0xd0
 800578c:	429c      	cmp	r4, r3
 800578e:	d105      	bne.n	800579c <std+0x54>
 8005790:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005798:	f000 ba5a 	b.w	8005c50 <__retarget_lock_init_recursive>
 800579c:	bd10      	pop	{r4, pc}
 800579e:	bf00      	nop
 80057a0:	080059a9 	.word	0x080059a9
 80057a4:	080059cb 	.word	0x080059cb
 80057a8:	08005a03 	.word	0x08005a03
 80057ac:	08005a27 	.word	0x08005a27
 80057b0:	20000310 	.word	0x20000310

080057b4 <stdio_exit_handler>:
 80057b4:	4a02      	ldr	r2, [pc, #8]	; (80057c0 <stdio_exit_handler+0xc>)
 80057b6:	4903      	ldr	r1, [pc, #12]	; (80057c4 <stdio_exit_handler+0x10>)
 80057b8:	4803      	ldr	r0, [pc, #12]	; (80057c8 <stdio_exit_handler+0x14>)
 80057ba:	f000 b869 	b.w	8005890 <_fwalk_sglue>
 80057be:	bf00      	nop
 80057c0:	2000000c 	.word	0x2000000c
 80057c4:	080075c1 	.word	0x080075c1
 80057c8:	20000018 	.word	0x20000018

080057cc <cleanup_stdio>:
 80057cc:	6841      	ldr	r1, [r0, #4]
 80057ce:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <cleanup_stdio+0x34>)
 80057d0:	b510      	push	{r4, lr}
 80057d2:	4299      	cmp	r1, r3
 80057d4:	4604      	mov	r4, r0
 80057d6:	d001      	beq.n	80057dc <cleanup_stdio+0x10>
 80057d8:	f001 fef2 	bl	80075c0 <_fflush_r>
 80057dc:	68a1      	ldr	r1, [r4, #8]
 80057de:	4b09      	ldr	r3, [pc, #36]	; (8005804 <cleanup_stdio+0x38>)
 80057e0:	4299      	cmp	r1, r3
 80057e2:	d002      	beq.n	80057ea <cleanup_stdio+0x1e>
 80057e4:	4620      	mov	r0, r4
 80057e6:	f001 feeb 	bl	80075c0 <_fflush_r>
 80057ea:	68e1      	ldr	r1, [r4, #12]
 80057ec:	4b06      	ldr	r3, [pc, #24]	; (8005808 <cleanup_stdio+0x3c>)
 80057ee:	4299      	cmp	r1, r3
 80057f0:	d004      	beq.n	80057fc <cleanup_stdio+0x30>
 80057f2:	4620      	mov	r0, r4
 80057f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057f8:	f001 bee2 	b.w	80075c0 <_fflush_r>
 80057fc:	bd10      	pop	{r4, pc}
 80057fe:	bf00      	nop
 8005800:	20000310 	.word	0x20000310
 8005804:	20000378 	.word	0x20000378
 8005808:	200003e0 	.word	0x200003e0

0800580c <global_stdio_init.part.0>:
 800580c:	b510      	push	{r4, lr}
 800580e:	4b0b      	ldr	r3, [pc, #44]	; (800583c <global_stdio_init.part.0+0x30>)
 8005810:	4c0b      	ldr	r4, [pc, #44]	; (8005840 <global_stdio_init.part.0+0x34>)
 8005812:	4a0c      	ldr	r2, [pc, #48]	; (8005844 <global_stdio_init.part.0+0x38>)
 8005814:	4620      	mov	r0, r4
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	2104      	movs	r1, #4
 800581a:	2200      	movs	r2, #0
 800581c:	f7ff ff94 	bl	8005748 <std>
 8005820:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005824:	2201      	movs	r2, #1
 8005826:	2109      	movs	r1, #9
 8005828:	f7ff ff8e 	bl	8005748 <std>
 800582c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005830:	2202      	movs	r2, #2
 8005832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005836:	2112      	movs	r1, #18
 8005838:	f7ff bf86 	b.w	8005748 <std>
 800583c:	20000448 	.word	0x20000448
 8005840:	20000310 	.word	0x20000310
 8005844:	080057b5 	.word	0x080057b5

08005848 <__sfp_lock_acquire>:
 8005848:	4801      	ldr	r0, [pc, #4]	; (8005850 <__sfp_lock_acquire+0x8>)
 800584a:	f000 ba02 	b.w	8005c52 <__retarget_lock_acquire_recursive>
 800584e:	bf00      	nop
 8005850:	20000451 	.word	0x20000451

08005854 <__sfp_lock_release>:
 8005854:	4801      	ldr	r0, [pc, #4]	; (800585c <__sfp_lock_release+0x8>)
 8005856:	f000 b9fd 	b.w	8005c54 <__retarget_lock_release_recursive>
 800585a:	bf00      	nop
 800585c:	20000451 	.word	0x20000451

08005860 <__sinit>:
 8005860:	b510      	push	{r4, lr}
 8005862:	4604      	mov	r4, r0
 8005864:	f7ff fff0 	bl	8005848 <__sfp_lock_acquire>
 8005868:	6a23      	ldr	r3, [r4, #32]
 800586a:	b11b      	cbz	r3, 8005874 <__sinit+0x14>
 800586c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005870:	f7ff bff0 	b.w	8005854 <__sfp_lock_release>
 8005874:	4b04      	ldr	r3, [pc, #16]	; (8005888 <__sinit+0x28>)
 8005876:	6223      	str	r3, [r4, #32]
 8005878:	4b04      	ldr	r3, [pc, #16]	; (800588c <__sinit+0x2c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f5      	bne.n	800586c <__sinit+0xc>
 8005880:	f7ff ffc4 	bl	800580c <global_stdio_init.part.0>
 8005884:	e7f2      	b.n	800586c <__sinit+0xc>
 8005886:	bf00      	nop
 8005888:	080057cd 	.word	0x080057cd
 800588c:	20000448 	.word	0x20000448

08005890 <_fwalk_sglue>:
 8005890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005894:	4607      	mov	r7, r0
 8005896:	4688      	mov	r8, r1
 8005898:	4614      	mov	r4, r2
 800589a:	2600      	movs	r6, #0
 800589c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058a0:	f1b9 0901 	subs.w	r9, r9, #1
 80058a4:	d505      	bpl.n	80058b2 <_fwalk_sglue+0x22>
 80058a6:	6824      	ldr	r4, [r4, #0]
 80058a8:	2c00      	cmp	r4, #0
 80058aa:	d1f7      	bne.n	800589c <_fwalk_sglue+0xc>
 80058ac:	4630      	mov	r0, r6
 80058ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058b2:	89ab      	ldrh	r3, [r5, #12]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d907      	bls.n	80058c8 <_fwalk_sglue+0x38>
 80058b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058bc:	3301      	adds	r3, #1
 80058be:	d003      	beq.n	80058c8 <_fwalk_sglue+0x38>
 80058c0:	4629      	mov	r1, r5
 80058c2:	4638      	mov	r0, r7
 80058c4:	47c0      	blx	r8
 80058c6:	4306      	orrs	r6, r0
 80058c8:	3568      	adds	r5, #104	; 0x68
 80058ca:	e7e9      	b.n	80058a0 <_fwalk_sglue+0x10>

080058cc <iprintf>:
 80058cc:	b40f      	push	{r0, r1, r2, r3}
 80058ce:	b507      	push	{r0, r1, r2, lr}
 80058d0:	4906      	ldr	r1, [pc, #24]	; (80058ec <iprintf+0x20>)
 80058d2:	ab04      	add	r3, sp, #16
 80058d4:	6808      	ldr	r0, [r1, #0]
 80058d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058da:	6881      	ldr	r1, [r0, #8]
 80058dc:	9301      	str	r3, [sp, #4]
 80058de:	f001 fcd3 	bl	8007288 <_vfiprintf_r>
 80058e2:	b003      	add	sp, #12
 80058e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058e8:	b004      	add	sp, #16
 80058ea:	4770      	bx	lr
 80058ec:	20000064 	.word	0x20000064

080058f0 <_puts_r>:
 80058f0:	6a03      	ldr	r3, [r0, #32]
 80058f2:	b570      	push	{r4, r5, r6, lr}
 80058f4:	4605      	mov	r5, r0
 80058f6:	460e      	mov	r6, r1
 80058f8:	6884      	ldr	r4, [r0, #8]
 80058fa:	b90b      	cbnz	r3, 8005900 <_puts_r+0x10>
 80058fc:	f7ff ffb0 	bl	8005860 <__sinit>
 8005900:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005902:	07db      	lsls	r3, r3, #31
 8005904:	d405      	bmi.n	8005912 <_puts_r+0x22>
 8005906:	89a3      	ldrh	r3, [r4, #12]
 8005908:	0598      	lsls	r0, r3, #22
 800590a:	d402      	bmi.n	8005912 <_puts_r+0x22>
 800590c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800590e:	f000 f9a0 	bl	8005c52 <__retarget_lock_acquire_recursive>
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	0719      	lsls	r1, r3, #28
 8005916:	d513      	bpl.n	8005940 <_puts_r+0x50>
 8005918:	6923      	ldr	r3, [r4, #16]
 800591a:	b18b      	cbz	r3, 8005940 <_puts_r+0x50>
 800591c:	3e01      	subs	r6, #1
 800591e:	68a3      	ldr	r3, [r4, #8]
 8005920:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005924:	3b01      	subs	r3, #1
 8005926:	60a3      	str	r3, [r4, #8]
 8005928:	b9e9      	cbnz	r1, 8005966 <_puts_r+0x76>
 800592a:	2b00      	cmp	r3, #0
 800592c:	da2e      	bge.n	800598c <_puts_r+0x9c>
 800592e:	4622      	mov	r2, r4
 8005930:	210a      	movs	r1, #10
 8005932:	4628      	mov	r0, r5
 8005934:	f000 f87b 	bl	8005a2e <__swbuf_r>
 8005938:	3001      	adds	r0, #1
 800593a:	d007      	beq.n	800594c <_puts_r+0x5c>
 800593c:	250a      	movs	r5, #10
 800593e:	e007      	b.n	8005950 <_puts_r+0x60>
 8005940:	4621      	mov	r1, r4
 8005942:	4628      	mov	r0, r5
 8005944:	f000 f8b0 	bl	8005aa8 <__swsetup_r>
 8005948:	2800      	cmp	r0, #0
 800594a:	d0e7      	beq.n	800591c <_puts_r+0x2c>
 800594c:	f04f 35ff 	mov.w	r5, #4294967295
 8005950:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005952:	07da      	lsls	r2, r3, #31
 8005954:	d405      	bmi.n	8005962 <_puts_r+0x72>
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	059b      	lsls	r3, r3, #22
 800595a:	d402      	bmi.n	8005962 <_puts_r+0x72>
 800595c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800595e:	f000 f979 	bl	8005c54 <__retarget_lock_release_recursive>
 8005962:	4628      	mov	r0, r5
 8005964:	bd70      	pop	{r4, r5, r6, pc}
 8005966:	2b00      	cmp	r3, #0
 8005968:	da04      	bge.n	8005974 <_puts_r+0x84>
 800596a:	69a2      	ldr	r2, [r4, #24]
 800596c:	429a      	cmp	r2, r3
 800596e:	dc06      	bgt.n	800597e <_puts_r+0x8e>
 8005970:	290a      	cmp	r1, #10
 8005972:	d004      	beq.n	800597e <_puts_r+0x8e>
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	6022      	str	r2, [r4, #0]
 800597a:	7019      	strb	r1, [r3, #0]
 800597c:	e7cf      	b.n	800591e <_puts_r+0x2e>
 800597e:	4622      	mov	r2, r4
 8005980:	4628      	mov	r0, r5
 8005982:	f000 f854 	bl	8005a2e <__swbuf_r>
 8005986:	3001      	adds	r0, #1
 8005988:	d1c9      	bne.n	800591e <_puts_r+0x2e>
 800598a:	e7df      	b.n	800594c <_puts_r+0x5c>
 800598c:	250a      	movs	r5, #10
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	6022      	str	r2, [r4, #0]
 8005994:	701d      	strb	r5, [r3, #0]
 8005996:	e7db      	b.n	8005950 <_puts_r+0x60>

08005998 <puts>:
 8005998:	4b02      	ldr	r3, [pc, #8]	; (80059a4 <puts+0xc>)
 800599a:	4601      	mov	r1, r0
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	f7ff bfa7 	b.w	80058f0 <_puts_r>
 80059a2:	bf00      	nop
 80059a4:	20000064 	.word	0x20000064

080059a8 <__sread>:
 80059a8:	b510      	push	{r4, lr}
 80059aa:	460c      	mov	r4, r1
 80059ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b0:	f000 f900 	bl	8005bb4 <_read_r>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	bfab      	itete	ge
 80059b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059ba:	89a3      	ldrhlt	r3, [r4, #12]
 80059bc:	181b      	addge	r3, r3, r0
 80059be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059c2:	bfac      	ite	ge
 80059c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80059c6:	81a3      	strhlt	r3, [r4, #12]
 80059c8:	bd10      	pop	{r4, pc}

080059ca <__swrite>:
 80059ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ce:	461f      	mov	r7, r3
 80059d0:	898b      	ldrh	r3, [r1, #12]
 80059d2:	4605      	mov	r5, r0
 80059d4:	05db      	lsls	r3, r3, #23
 80059d6:	460c      	mov	r4, r1
 80059d8:	4616      	mov	r6, r2
 80059da:	d505      	bpl.n	80059e8 <__swrite+0x1e>
 80059dc:	2302      	movs	r3, #2
 80059de:	2200      	movs	r2, #0
 80059e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e4:	f000 f8d4 	bl	8005b90 <_lseek_r>
 80059e8:	89a3      	ldrh	r3, [r4, #12]
 80059ea:	4632      	mov	r2, r6
 80059ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059f0:	81a3      	strh	r3, [r4, #12]
 80059f2:	4628      	mov	r0, r5
 80059f4:	463b      	mov	r3, r7
 80059f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059fe:	f000 b8eb 	b.w	8005bd8 <_write_r>

08005a02 <__sseek>:
 8005a02:	b510      	push	{r4, lr}
 8005a04:	460c      	mov	r4, r1
 8005a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a0a:	f000 f8c1 	bl	8005b90 <_lseek_r>
 8005a0e:	1c43      	adds	r3, r0, #1
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	bf15      	itete	ne
 8005a14:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a1e:	81a3      	strheq	r3, [r4, #12]
 8005a20:	bf18      	it	ne
 8005a22:	81a3      	strhne	r3, [r4, #12]
 8005a24:	bd10      	pop	{r4, pc}

08005a26 <__sclose>:
 8005a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a2a:	f000 b8a1 	b.w	8005b70 <_close_r>

08005a2e <__swbuf_r>:
 8005a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a30:	460e      	mov	r6, r1
 8005a32:	4614      	mov	r4, r2
 8005a34:	4605      	mov	r5, r0
 8005a36:	b118      	cbz	r0, 8005a40 <__swbuf_r+0x12>
 8005a38:	6a03      	ldr	r3, [r0, #32]
 8005a3a:	b90b      	cbnz	r3, 8005a40 <__swbuf_r+0x12>
 8005a3c:	f7ff ff10 	bl	8005860 <__sinit>
 8005a40:	69a3      	ldr	r3, [r4, #24]
 8005a42:	60a3      	str	r3, [r4, #8]
 8005a44:	89a3      	ldrh	r3, [r4, #12]
 8005a46:	071a      	lsls	r2, r3, #28
 8005a48:	d525      	bpl.n	8005a96 <__swbuf_r+0x68>
 8005a4a:	6923      	ldr	r3, [r4, #16]
 8005a4c:	b31b      	cbz	r3, 8005a96 <__swbuf_r+0x68>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	6922      	ldr	r2, [r4, #16]
 8005a52:	b2f6      	uxtb	r6, r6
 8005a54:	1a98      	subs	r0, r3, r2
 8005a56:	6963      	ldr	r3, [r4, #20]
 8005a58:	4637      	mov	r7, r6
 8005a5a:	4283      	cmp	r3, r0
 8005a5c:	dc04      	bgt.n	8005a68 <__swbuf_r+0x3a>
 8005a5e:	4621      	mov	r1, r4
 8005a60:	4628      	mov	r0, r5
 8005a62:	f001 fdad 	bl	80075c0 <_fflush_r>
 8005a66:	b9e0      	cbnz	r0, 8005aa2 <__swbuf_r+0x74>
 8005a68:	68a3      	ldr	r3, [r4, #8]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	60a3      	str	r3, [r4, #8]
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	6022      	str	r2, [r4, #0]
 8005a74:	701e      	strb	r6, [r3, #0]
 8005a76:	6962      	ldr	r2, [r4, #20]
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d004      	beq.n	8005a88 <__swbuf_r+0x5a>
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	07db      	lsls	r3, r3, #31
 8005a82:	d506      	bpl.n	8005a92 <__swbuf_r+0x64>
 8005a84:	2e0a      	cmp	r6, #10
 8005a86:	d104      	bne.n	8005a92 <__swbuf_r+0x64>
 8005a88:	4621      	mov	r1, r4
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	f001 fd98 	bl	80075c0 <_fflush_r>
 8005a90:	b938      	cbnz	r0, 8005aa2 <__swbuf_r+0x74>
 8005a92:	4638      	mov	r0, r7
 8005a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a96:	4621      	mov	r1, r4
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f000 f805 	bl	8005aa8 <__swsetup_r>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d0d5      	beq.n	8005a4e <__swbuf_r+0x20>
 8005aa2:	f04f 37ff 	mov.w	r7, #4294967295
 8005aa6:	e7f4      	b.n	8005a92 <__swbuf_r+0x64>

08005aa8 <__swsetup_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4b2a      	ldr	r3, [pc, #168]	; (8005b54 <__swsetup_r+0xac>)
 8005aac:	4605      	mov	r5, r0
 8005aae:	6818      	ldr	r0, [r3, #0]
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	b118      	cbz	r0, 8005abc <__swsetup_r+0x14>
 8005ab4:	6a03      	ldr	r3, [r0, #32]
 8005ab6:	b90b      	cbnz	r3, 8005abc <__swsetup_r+0x14>
 8005ab8:	f7ff fed2 	bl	8005860 <__sinit>
 8005abc:	89a3      	ldrh	r3, [r4, #12]
 8005abe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ac2:	0718      	lsls	r0, r3, #28
 8005ac4:	d422      	bmi.n	8005b0c <__swsetup_r+0x64>
 8005ac6:	06d9      	lsls	r1, r3, #27
 8005ac8:	d407      	bmi.n	8005ada <__swsetup_r+0x32>
 8005aca:	2309      	movs	r3, #9
 8005acc:	602b      	str	r3, [r5, #0]
 8005ace:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad6:	81a3      	strh	r3, [r4, #12]
 8005ad8:	e034      	b.n	8005b44 <__swsetup_r+0x9c>
 8005ada:	0758      	lsls	r0, r3, #29
 8005adc:	d512      	bpl.n	8005b04 <__swsetup_r+0x5c>
 8005ade:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ae0:	b141      	cbz	r1, 8005af4 <__swsetup_r+0x4c>
 8005ae2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ae6:	4299      	cmp	r1, r3
 8005ae8:	d002      	beq.n	8005af0 <__swsetup_r+0x48>
 8005aea:	4628      	mov	r0, r5
 8005aec:	f000 ff30 	bl	8006950 <_free_r>
 8005af0:	2300      	movs	r3, #0
 8005af2:	6363      	str	r3, [r4, #52]	; 0x34
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005afa:	81a3      	strh	r3, [r4, #12]
 8005afc:	2300      	movs	r3, #0
 8005afe:	6063      	str	r3, [r4, #4]
 8005b00:	6923      	ldr	r3, [r4, #16]
 8005b02:	6023      	str	r3, [r4, #0]
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	f043 0308 	orr.w	r3, r3, #8
 8005b0a:	81a3      	strh	r3, [r4, #12]
 8005b0c:	6923      	ldr	r3, [r4, #16]
 8005b0e:	b94b      	cbnz	r3, 8005b24 <__swsetup_r+0x7c>
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b1a:	d003      	beq.n	8005b24 <__swsetup_r+0x7c>
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	4628      	mov	r0, r5
 8005b20:	f001 fd9b 	bl	800765a <__smakebuf_r>
 8005b24:	89a0      	ldrh	r0, [r4, #12]
 8005b26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b2a:	f010 0301 	ands.w	r3, r0, #1
 8005b2e:	d00a      	beq.n	8005b46 <__swsetup_r+0x9e>
 8005b30:	2300      	movs	r3, #0
 8005b32:	60a3      	str	r3, [r4, #8]
 8005b34:	6963      	ldr	r3, [r4, #20]
 8005b36:	425b      	negs	r3, r3
 8005b38:	61a3      	str	r3, [r4, #24]
 8005b3a:	6923      	ldr	r3, [r4, #16]
 8005b3c:	b943      	cbnz	r3, 8005b50 <__swsetup_r+0xa8>
 8005b3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b42:	d1c4      	bne.n	8005ace <__swsetup_r+0x26>
 8005b44:	bd38      	pop	{r3, r4, r5, pc}
 8005b46:	0781      	lsls	r1, r0, #30
 8005b48:	bf58      	it	pl
 8005b4a:	6963      	ldrpl	r3, [r4, #20]
 8005b4c:	60a3      	str	r3, [r4, #8]
 8005b4e:	e7f4      	b.n	8005b3a <__swsetup_r+0x92>
 8005b50:	2000      	movs	r0, #0
 8005b52:	e7f7      	b.n	8005b44 <__swsetup_r+0x9c>
 8005b54:	20000064 	.word	0x20000064

08005b58 <memset>:
 8005b58:	4603      	mov	r3, r0
 8005b5a:	4402      	add	r2, r0
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d100      	bne.n	8005b62 <memset+0xa>
 8005b60:	4770      	bx	lr
 8005b62:	f803 1b01 	strb.w	r1, [r3], #1
 8005b66:	e7f9      	b.n	8005b5c <memset+0x4>

08005b68 <_localeconv_r>:
 8005b68:	4800      	ldr	r0, [pc, #0]	; (8005b6c <_localeconv_r+0x4>)
 8005b6a:	4770      	bx	lr
 8005b6c:	20000158 	.word	0x20000158

08005b70 <_close_r>:
 8005b70:	b538      	push	{r3, r4, r5, lr}
 8005b72:	2300      	movs	r3, #0
 8005b74:	4d05      	ldr	r5, [pc, #20]	; (8005b8c <_close_r+0x1c>)
 8005b76:	4604      	mov	r4, r0
 8005b78:	4608      	mov	r0, r1
 8005b7a:	602b      	str	r3, [r5, #0]
 8005b7c:	f7fb ffca 	bl	8001b14 <_close>
 8005b80:	1c43      	adds	r3, r0, #1
 8005b82:	d102      	bne.n	8005b8a <_close_r+0x1a>
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	b103      	cbz	r3, 8005b8a <_close_r+0x1a>
 8005b88:	6023      	str	r3, [r4, #0]
 8005b8a:	bd38      	pop	{r3, r4, r5, pc}
 8005b8c:	2000044c 	.word	0x2000044c

08005b90 <_lseek_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4604      	mov	r4, r0
 8005b94:	4608      	mov	r0, r1
 8005b96:	4611      	mov	r1, r2
 8005b98:	2200      	movs	r2, #0
 8005b9a:	4d05      	ldr	r5, [pc, #20]	; (8005bb0 <_lseek_r+0x20>)
 8005b9c:	602a      	str	r2, [r5, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	f7fb ffdc 	bl	8001b5c <_lseek>
 8005ba4:	1c43      	adds	r3, r0, #1
 8005ba6:	d102      	bne.n	8005bae <_lseek_r+0x1e>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	b103      	cbz	r3, 8005bae <_lseek_r+0x1e>
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	bd38      	pop	{r3, r4, r5, pc}
 8005bb0:	2000044c 	.word	0x2000044c

08005bb4 <_read_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	4608      	mov	r0, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	4d05      	ldr	r5, [pc, #20]	; (8005bd4 <_read_r+0x20>)
 8005bc0:	602a      	str	r2, [r5, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f7fb ff89 	bl	8001ada <_read>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_read_r+0x1e>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_read_r+0x1e>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	2000044c 	.word	0x2000044c

08005bd8 <_write_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4604      	mov	r4, r0
 8005bdc:	4608      	mov	r0, r1
 8005bde:	4611      	mov	r1, r2
 8005be0:	2200      	movs	r2, #0
 8005be2:	4d05      	ldr	r5, [pc, #20]	; (8005bf8 <_write_r+0x20>)
 8005be4:	602a      	str	r2, [r5, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f7fb fa18 	bl	800101c <_write>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_write_r+0x1e>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_write_r+0x1e>
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	2000044c 	.word	0x2000044c

08005bfc <__errno>:
 8005bfc:	4b01      	ldr	r3, [pc, #4]	; (8005c04 <__errno+0x8>)
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20000064 	.word	0x20000064

08005c08 <__libc_init_array>:
 8005c08:	b570      	push	{r4, r5, r6, lr}
 8005c0a:	2600      	movs	r6, #0
 8005c0c:	4d0c      	ldr	r5, [pc, #48]	; (8005c40 <__libc_init_array+0x38>)
 8005c0e:	4c0d      	ldr	r4, [pc, #52]	; (8005c44 <__libc_init_array+0x3c>)
 8005c10:	1b64      	subs	r4, r4, r5
 8005c12:	10a4      	asrs	r4, r4, #2
 8005c14:	42a6      	cmp	r6, r4
 8005c16:	d109      	bne.n	8005c2c <__libc_init_array+0x24>
 8005c18:	f001 fe4c 	bl	80078b4 <_init>
 8005c1c:	2600      	movs	r6, #0
 8005c1e:	4d0a      	ldr	r5, [pc, #40]	; (8005c48 <__libc_init_array+0x40>)
 8005c20:	4c0a      	ldr	r4, [pc, #40]	; (8005c4c <__libc_init_array+0x44>)
 8005c22:	1b64      	subs	r4, r4, r5
 8005c24:	10a4      	asrs	r4, r4, #2
 8005c26:	42a6      	cmp	r6, r4
 8005c28:	d105      	bne.n	8005c36 <__libc_init_array+0x2e>
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c30:	4798      	blx	r3
 8005c32:	3601      	adds	r6, #1
 8005c34:	e7ee      	b.n	8005c14 <__libc_init_array+0xc>
 8005c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c3a:	4798      	blx	r3
 8005c3c:	3601      	adds	r6, #1
 8005c3e:	e7f2      	b.n	8005c26 <__libc_init_array+0x1e>
 8005c40:	08007dbc 	.word	0x08007dbc
 8005c44:	08007dbc 	.word	0x08007dbc
 8005c48:	08007dbc 	.word	0x08007dbc
 8005c4c:	08007dc0 	.word	0x08007dc0

08005c50 <__retarget_lock_init_recursive>:
 8005c50:	4770      	bx	lr

08005c52 <__retarget_lock_acquire_recursive>:
 8005c52:	4770      	bx	lr

08005c54 <__retarget_lock_release_recursive>:
 8005c54:	4770      	bx	lr

08005c56 <memchr>:
 8005c56:	4603      	mov	r3, r0
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	b2c9      	uxtb	r1, r1
 8005c5c:	4402      	add	r2, r0
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	4618      	mov	r0, r3
 8005c62:	d101      	bne.n	8005c68 <memchr+0x12>
 8005c64:	2000      	movs	r0, #0
 8005c66:	e003      	b.n	8005c70 <memchr+0x1a>
 8005c68:	7804      	ldrb	r4, [r0, #0]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	428c      	cmp	r4, r1
 8005c6e:	d1f6      	bne.n	8005c5e <memchr+0x8>
 8005c70:	bd10      	pop	{r4, pc}

08005c72 <quorem>:
 8005c72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c76:	6903      	ldr	r3, [r0, #16]
 8005c78:	690c      	ldr	r4, [r1, #16]
 8005c7a:	4607      	mov	r7, r0
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	db7f      	blt.n	8005d80 <quorem+0x10e>
 8005c80:	3c01      	subs	r4, #1
 8005c82:	f100 0514 	add.w	r5, r0, #20
 8005c86:	f101 0814 	add.w	r8, r1, #20
 8005c8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c8e:	9301      	str	r3, [sp, #4]
 8005c90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ca0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ca4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ca8:	d331      	bcc.n	8005d0e <quorem+0x9c>
 8005caa:	f04f 0e00 	mov.w	lr, #0
 8005cae:	4640      	mov	r0, r8
 8005cb0:	46ac      	mov	ip, r5
 8005cb2:	46f2      	mov	sl, lr
 8005cb4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cb8:	b293      	uxth	r3, r2
 8005cba:	fb06 e303 	mla	r3, r6, r3, lr
 8005cbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005cc2:	0c1a      	lsrs	r2, r3, #16
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	fb06 220e 	mla	r2, r6, lr, r2
 8005cca:	ebaa 0303 	sub.w	r3, sl, r3
 8005cce:	f8dc a000 	ldr.w	sl, [ip]
 8005cd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005cd6:	fa1f fa8a 	uxth.w	sl, sl
 8005cda:	4453      	add	r3, sl
 8005cdc:	f8dc a000 	ldr.w	sl, [ip]
 8005ce0:	b292      	uxth	r2, r2
 8005ce2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ce6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cf0:	4581      	cmp	r9, r0
 8005cf2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005cf6:	f84c 3b04 	str.w	r3, [ip], #4
 8005cfa:	d2db      	bcs.n	8005cb4 <quorem+0x42>
 8005cfc:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d00:	b92b      	cbnz	r3, 8005d0e <quorem+0x9c>
 8005d02:	9b01      	ldr	r3, [sp, #4]
 8005d04:	3b04      	subs	r3, #4
 8005d06:	429d      	cmp	r5, r3
 8005d08:	461a      	mov	r2, r3
 8005d0a:	d32d      	bcc.n	8005d68 <quorem+0xf6>
 8005d0c:	613c      	str	r4, [r7, #16]
 8005d0e:	4638      	mov	r0, r7
 8005d10:	f001 f994 	bl	800703c <__mcmp>
 8005d14:	2800      	cmp	r0, #0
 8005d16:	db23      	blt.n	8005d60 <quorem+0xee>
 8005d18:	4629      	mov	r1, r5
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	3601      	adds	r6, #1
 8005d1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d22:	f8d1 c000 	ldr.w	ip, [r1]
 8005d26:	b293      	uxth	r3, r2
 8005d28:	1ac3      	subs	r3, r0, r3
 8005d2a:	0c12      	lsrs	r2, r2, #16
 8005d2c:	fa1f f08c 	uxth.w	r0, ip
 8005d30:	4403      	add	r3, r0
 8005d32:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005d36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d40:	45c1      	cmp	r9, r8
 8005d42:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d46:	f841 3b04 	str.w	r3, [r1], #4
 8005d4a:	d2e8      	bcs.n	8005d1e <quorem+0xac>
 8005d4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d54:	b922      	cbnz	r2, 8005d60 <quorem+0xee>
 8005d56:	3b04      	subs	r3, #4
 8005d58:	429d      	cmp	r5, r3
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	d30a      	bcc.n	8005d74 <quorem+0x102>
 8005d5e:	613c      	str	r4, [r7, #16]
 8005d60:	4630      	mov	r0, r6
 8005d62:	b003      	add	sp, #12
 8005d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	3b04      	subs	r3, #4
 8005d6c:	2a00      	cmp	r2, #0
 8005d6e:	d1cd      	bne.n	8005d0c <quorem+0x9a>
 8005d70:	3c01      	subs	r4, #1
 8005d72:	e7c8      	b.n	8005d06 <quorem+0x94>
 8005d74:	6812      	ldr	r2, [r2, #0]
 8005d76:	3b04      	subs	r3, #4
 8005d78:	2a00      	cmp	r2, #0
 8005d7a:	d1f0      	bne.n	8005d5e <quorem+0xec>
 8005d7c:	3c01      	subs	r4, #1
 8005d7e:	e7eb      	b.n	8005d58 <quorem+0xe6>
 8005d80:	2000      	movs	r0, #0
 8005d82:	e7ee      	b.n	8005d62 <quorem+0xf0>
 8005d84:	0000      	movs	r0, r0
	...

08005d88 <_dtoa_r>:
 8005d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d8c:	4616      	mov	r6, r2
 8005d8e:	461f      	mov	r7, r3
 8005d90:	69c4      	ldr	r4, [r0, #28]
 8005d92:	b099      	sub	sp, #100	; 0x64
 8005d94:	4605      	mov	r5, r0
 8005d96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005d9a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005d9e:	b974      	cbnz	r4, 8005dbe <_dtoa_r+0x36>
 8005da0:	2010      	movs	r0, #16
 8005da2:	f000 fe1d 	bl	80069e0 <malloc>
 8005da6:	4602      	mov	r2, r0
 8005da8:	61e8      	str	r0, [r5, #28]
 8005daa:	b920      	cbnz	r0, 8005db6 <_dtoa_r+0x2e>
 8005dac:	21ef      	movs	r1, #239	; 0xef
 8005dae:	4bac      	ldr	r3, [pc, #688]	; (8006060 <_dtoa_r+0x2d8>)
 8005db0:	48ac      	ldr	r0, [pc, #688]	; (8006064 <_dtoa_r+0x2dc>)
 8005db2:	f001 fccf 	bl	8007754 <__assert_func>
 8005db6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005dba:	6004      	str	r4, [r0, #0]
 8005dbc:	60c4      	str	r4, [r0, #12]
 8005dbe:	69eb      	ldr	r3, [r5, #28]
 8005dc0:	6819      	ldr	r1, [r3, #0]
 8005dc2:	b151      	cbz	r1, 8005dda <_dtoa_r+0x52>
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	4093      	lsls	r3, r2
 8005dca:	604a      	str	r2, [r1, #4]
 8005dcc:	608b      	str	r3, [r1, #8]
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f000 fefa 	bl	8006bc8 <_Bfree>
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	69eb      	ldr	r3, [r5, #28]
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	1e3b      	subs	r3, r7, #0
 8005ddc:	bfaf      	iteee	ge
 8005dde:	2300      	movge	r3, #0
 8005de0:	2201      	movlt	r2, #1
 8005de2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005de6:	9305      	strlt	r3, [sp, #20]
 8005de8:	bfa8      	it	ge
 8005dea:	f8c8 3000 	strge.w	r3, [r8]
 8005dee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005df2:	4b9d      	ldr	r3, [pc, #628]	; (8006068 <_dtoa_r+0x2e0>)
 8005df4:	bfb8      	it	lt
 8005df6:	f8c8 2000 	strlt.w	r2, [r8]
 8005dfa:	ea33 0309 	bics.w	r3, r3, r9
 8005dfe:	d119      	bne.n	8005e34 <_dtoa_r+0xac>
 8005e00:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e04:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e0c:	4333      	orrs	r3, r6
 8005e0e:	f000 8589 	beq.w	8006924 <_dtoa_r+0xb9c>
 8005e12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e14:	b953      	cbnz	r3, 8005e2c <_dtoa_r+0xa4>
 8005e16:	4b95      	ldr	r3, [pc, #596]	; (800606c <_dtoa_r+0x2e4>)
 8005e18:	e023      	b.n	8005e62 <_dtoa_r+0xda>
 8005e1a:	4b95      	ldr	r3, [pc, #596]	; (8006070 <_dtoa_r+0x2e8>)
 8005e1c:	9303      	str	r3, [sp, #12]
 8005e1e:	3308      	adds	r3, #8
 8005e20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	9803      	ldr	r0, [sp, #12]
 8005e26:	b019      	add	sp, #100	; 0x64
 8005e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2c:	4b8f      	ldr	r3, [pc, #572]	; (800606c <_dtoa_r+0x2e4>)
 8005e2e:	9303      	str	r3, [sp, #12]
 8005e30:	3303      	adds	r3, #3
 8005e32:	e7f5      	b.n	8005e20 <_dtoa_r+0x98>
 8005e34:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e38:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005e3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e40:	2200      	movs	r2, #0
 8005e42:	2300      	movs	r3, #0
 8005e44:	f7fa fe1c 	bl	8000a80 <__aeabi_dcmpeq>
 8005e48:	4680      	mov	r8, r0
 8005e4a:	b160      	cbz	r0, 8005e66 <_dtoa_r+0xde>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8562 	beq.w	800691e <_dtoa_r+0xb96>
 8005e5a:	4b86      	ldr	r3, [pc, #536]	; (8006074 <_dtoa_r+0x2ec>)
 8005e5c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	9303      	str	r3, [sp, #12]
 8005e64:	e7de      	b.n	8005e24 <_dtoa_r+0x9c>
 8005e66:	ab16      	add	r3, sp, #88	; 0x58
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	ab17      	add	r3, sp, #92	; 0x5c
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	4628      	mov	r0, r5
 8005e70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005e74:	f001 f98a 	bl	800718c <__d2b>
 8005e78:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005e7c:	4682      	mov	sl, r0
 8005e7e:	2c00      	cmp	r4, #0
 8005e80:	d07e      	beq.n	8005f80 <_dtoa_r+0x1f8>
 8005e82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e88:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e90:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005e94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005e98:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	4b75      	ldr	r3, [pc, #468]	; (8006078 <_dtoa_r+0x2f0>)
 8005ea2:	f7fa f9cd 	bl	8000240 <__aeabi_dsub>
 8005ea6:	a368      	add	r3, pc, #416	; (adr r3, 8006048 <_dtoa_r+0x2c0>)
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f7fa fb80 	bl	80005b0 <__aeabi_dmul>
 8005eb0:	a367      	add	r3, pc, #412	; (adr r3, 8006050 <_dtoa_r+0x2c8>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	f7fa f9c5 	bl	8000244 <__adddf3>
 8005eba:	4606      	mov	r6, r0
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	460f      	mov	r7, r1
 8005ec0:	f7fa fb0c 	bl	80004dc <__aeabi_i2d>
 8005ec4:	a364      	add	r3, pc, #400	; (adr r3, 8006058 <_dtoa_r+0x2d0>)
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa fb71 	bl	80005b0 <__aeabi_dmul>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	4639      	mov	r1, r7
 8005ed6:	f7fa f9b5 	bl	8000244 <__adddf3>
 8005eda:	4606      	mov	r6, r0
 8005edc:	460f      	mov	r7, r1
 8005ede:	f7fa fe17 	bl	8000b10 <__aeabi_d2iz>
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	4683      	mov	fp, r0
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	4630      	mov	r0, r6
 8005eea:	4639      	mov	r1, r7
 8005eec:	f7fa fdd2 	bl	8000a94 <__aeabi_dcmplt>
 8005ef0:	b148      	cbz	r0, 8005f06 <_dtoa_r+0x17e>
 8005ef2:	4658      	mov	r0, fp
 8005ef4:	f7fa faf2 	bl	80004dc <__aeabi_i2d>
 8005ef8:	4632      	mov	r2, r6
 8005efa:	463b      	mov	r3, r7
 8005efc:	f7fa fdc0 	bl	8000a80 <__aeabi_dcmpeq>
 8005f00:	b908      	cbnz	r0, 8005f06 <_dtoa_r+0x17e>
 8005f02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f06:	f1bb 0f16 	cmp.w	fp, #22
 8005f0a:	d857      	bhi.n	8005fbc <_dtoa_r+0x234>
 8005f0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f10:	4b5a      	ldr	r3, [pc, #360]	; (800607c <_dtoa_r+0x2f4>)
 8005f12:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f7fa fdbb 	bl	8000a94 <__aeabi_dcmplt>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d04e      	beq.n	8005fc0 <_dtoa_r+0x238>
 8005f22:	2300      	movs	r3, #0
 8005f24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f28:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005f2c:	1b1b      	subs	r3, r3, r4
 8005f2e:	1e5a      	subs	r2, r3, #1
 8005f30:	bf46      	itte	mi
 8005f32:	f1c3 0901 	rsbmi	r9, r3, #1
 8005f36:	2300      	movmi	r3, #0
 8005f38:	f04f 0900 	movpl.w	r9, #0
 8005f3c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f3e:	bf48      	it	mi
 8005f40:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005f42:	f1bb 0f00 	cmp.w	fp, #0
 8005f46:	db3d      	blt.n	8005fc4 <_dtoa_r+0x23c>
 8005f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f4a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005f4e:	445b      	add	r3, fp
 8005f50:	9309      	str	r3, [sp, #36]	; 0x24
 8005f52:	2300      	movs	r3, #0
 8005f54:	930a      	str	r3, [sp, #40]	; 0x28
 8005f56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f58:	2b09      	cmp	r3, #9
 8005f5a:	d867      	bhi.n	800602c <_dtoa_r+0x2a4>
 8005f5c:	2b05      	cmp	r3, #5
 8005f5e:	bfc4      	itt	gt
 8005f60:	3b04      	subgt	r3, #4
 8005f62:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005f64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f66:	bfc8      	it	gt
 8005f68:	2400      	movgt	r4, #0
 8005f6a:	f1a3 0302 	sub.w	r3, r3, #2
 8005f6e:	bfd8      	it	le
 8005f70:	2401      	movle	r4, #1
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	f200 8086 	bhi.w	8006084 <_dtoa_r+0x2fc>
 8005f78:	e8df f003 	tbb	[pc, r3]
 8005f7c:	5637392c 	.word	0x5637392c
 8005f80:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005f84:	441c      	add	r4, r3
 8005f86:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005f8a:	2b20      	cmp	r3, #32
 8005f8c:	bfc1      	itttt	gt
 8005f8e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f92:	fa09 f903 	lslgt.w	r9, r9, r3
 8005f96:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005f9a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005f9e:	bfd6      	itet	le
 8005fa0:	f1c3 0320 	rsble	r3, r3, #32
 8005fa4:	ea49 0003 	orrgt.w	r0, r9, r3
 8005fa8:	fa06 f003 	lslle.w	r0, r6, r3
 8005fac:	f7fa fa86 	bl	80004bc <__aeabi_ui2d>
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005fb6:	3c01      	subs	r4, #1
 8005fb8:	9213      	str	r2, [sp, #76]	; 0x4c
 8005fba:	e76f      	b.n	8005e9c <_dtoa_r+0x114>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e7b3      	b.n	8005f28 <_dtoa_r+0x1a0>
 8005fc0:	900f      	str	r0, [sp, #60]	; 0x3c
 8005fc2:	e7b2      	b.n	8005f2a <_dtoa_r+0x1a2>
 8005fc4:	f1cb 0300 	rsb	r3, fp, #0
 8005fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8005fca:	2300      	movs	r3, #0
 8005fcc:	eba9 090b 	sub.w	r9, r9, fp
 8005fd0:	930e      	str	r3, [sp, #56]	; 0x38
 8005fd2:	e7c0      	b.n	8005f56 <_dtoa_r+0x1ce>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	dc55      	bgt.n	800608a <_dtoa_r+0x302>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	9306      	str	r3, [sp, #24]
 8005fe4:	9308      	str	r3, [sp, #32]
 8005fe6:	9223      	str	r2, [sp, #140]	; 0x8c
 8005fe8:	e00b      	b.n	8006002 <_dtoa_r+0x27a>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e7f3      	b.n	8005fd6 <_dtoa_r+0x24e>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ff2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ff4:	445b      	add	r3, fp
 8005ff6:	9306      	str	r3, [sp, #24]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	9308      	str	r3, [sp, #32]
 8005ffe:	bfb8      	it	lt
 8006000:	2301      	movlt	r3, #1
 8006002:	2100      	movs	r1, #0
 8006004:	2204      	movs	r2, #4
 8006006:	69e8      	ldr	r0, [r5, #28]
 8006008:	f102 0614 	add.w	r6, r2, #20
 800600c:	429e      	cmp	r6, r3
 800600e:	d940      	bls.n	8006092 <_dtoa_r+0x30a>
 8006010:	6041      	str	r1, [r0, #4]
 8006012:	4628      	mov	r0, r5
 8006014:	f000 fd98 	bl	8006b48 <_Balloc>
 8006018:	9003      	str	r0, [sp, #12]
 800601a:	2800      	cmp	r0, #0
 800601c:	d13c      	bne.n	8006098 <_dtoa_r+0x310>
 800601e:	4602      	mov	r2, r0
 8006020:	f240 11af 	movw	r1, #431	; 0x1af
 8006024:	4b16      	ldr	r3, [pc, #88]	; (8006080 <_dtoa_r+0x2f8>)
 8006026:	e6c3      	b.n	8005db0 <_dtoa_r+0x28>
 8006028:	2301      	movs	r3, #1
 800602a:	e7e1      	b.n	8005ff0 <_dtoa_r+0x268>
 800602c:	2401      	movs	r4, #1
 800602e:	2300      	movs	r3, #0
 8006030:	940b      	str	r4, [sp, #44]	; 0x2c
 8006032:	9322      	str	r3, [sp, #136]	; 0x88
 8006034:	f04f 33ff 	mov.w	r3, #4294967295
 8006038:	2200      	movs	r2, #0
 800603a:	9306      	str	r3, [sp, #24]
 800603c:	9308      	str	r3, [sp, #32]
 800603e:	2312      	movs	r3, #18
 8006040:	e7d1      	b.n	8005fe6 <_dtoa_r+0x25e>
 8006042:	bf00      	nop
 8006044:	f3af 8000 	nop.w
 8006048:	636f4361 	.word	0x636f4361
 800604c:	3fd287a7 	.word	0x3fd287a7
 8006050:	8b60c8b3 	.word	0x8b60c8b3
 8006054:	3fc68a28 	.word	0x3fc68a28
 8006058:	509f79fb 	.word	0x509f79fb
 800605c:	3fd34413 	.word	0x3fd34413
 8006060:	08007a8f 	.word	0x08007a8f
 8006064:	08007aa6 	.word	0x08007aa6
 8006068:	7ff00000 	.word	0x7ff00000
 800606c:	08007a8b 	.word	0x08007a8b
 8006070:	08007a82 	.word	0x08007a82
 8006074:	08007a5f 	.word	0x08007a5f
 8006078:	3ff80000 	.word	0x3ff80000
 800607c:	08007b90 	.word	0x08007b90
 8006080:	08007afe 	.word	0x08007afe
 8006084:	2301      	movs	r3, #1
 8006086:	930b      	str	r3, [sp, #44]	; 0x2c
 8006088:	e7d4      	b.n	8006034 <_dtoa_r+0x2ac>
 800608a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800608c:	9306      	str	r3, [sp, #24]
 800608e:	9308      	str	r3, [sp, #32]
 8006090:	e7b7      	b.n	8006002 <_dtoa_r+0x27a>
 8006092:	3101      	adds	r1, #1
 8006094:	0052      	lsls	r2, r2, #1
 8006096:	e7b7      	b.n	8006008 <_dtoa_r+0x280>
 8006098:	69eb      	ldr	r3, [r5, #28]
 800609a:	9a03      	ldr	r2, [sp, #12]
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	9b08      	ldr	r3, [sp, #32]
 80060a0:	2b0e      	cmp	r3, #14
 80060a2:	f200 80a8 	bhi.w	80061f6 <_dtoa_r+0x46e>
 80060a6:	2c00      	cmp	r4, #0
 80060a8:	f000 80a5 	beq.w	80061f6 <_dtoa_r+0x46e>
 80060ac:	f1bb 0f00 	cmp.w	fp, #0
 80060b0:	dd34      	ble.n	800611c <_dtoa_r+0x394>
 80060b2:	4b9a      	ldr	r3, [pc, #616]	; (800631c <_dtoa_r+0x594>)
 80060b4:	f00b 020f 	and.w	r2, fp, #15
 80060b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80060c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80060c8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80060cc:	d016      	beq.n	80060fc <_dtoa_r+0x374>
 80060ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060d2:	4b93      	ldr	r3, [pc, #588]	; (8006320 <_dtoa_r+0x598>)
 80060d4:	2703      	movs	r7, #3
 80060d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060da:	f7fa fb93 	bl	8000804 <__aeabi_ddiv>
 80060de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060e2:	f004 040f 	and.w	r4, r4, #15
 80060e6:	4e8e      	ldr	r6, [pc, #568]	; (8006320 <_dtoa_r+0x598>)
 80060e8:	b954      	cbnz	r4, 8006100 <_dtoa_r+0x378>
 80060ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060f2:	f7fa fb87 	bl	8000804 <__aeabi_ddiv>
 80060f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060fa:	e029      	b.n	8006150 <_dtoa_r+0x3c8>
 80060fc:	2702      	movs	r7, #2
 80060fe:	e7f2      	b.n	80060e6 <_dtoa_r+0x35e>
 8006100:	07e1      	lsls	r1, r4, #31
 8006102:	d508      	bpl.n	8006116 <_dtoa_r+0x38e>
 8006104:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006108:	e9d6 2300 	ldrd	r2, r3, [r6]
 800610c:	f7fa fa50 	bl	80005b0 <__aeabi_dmul>
 8006110:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006114:	3701      	adds	r7, #1
 8006116:	1064      	asrs	r4, r4, #1
 8006118:	3608      	adds	r6, #8
 800611a:	e7e5      	b.n	80060e8 <_dtoa_r+0x360>
 800611c:	f000 80a5 	beq.w	800626a <_dtoa_r+0x4e2>
 8006120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006124:	f1cb 0400 	rsb	r4, fp, #0
 8006128:	4b7c      	ldr	r3, [pc, #496]	; (800631c <_dtoa_r+0x594>)
 800612a:	f004 020f 	and.w	r2, r4, #15
 800612e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	f7fa fa3b 	bl	80005b0 <__aeabi_dmul>
 800613a:	2702      	movs	r7, #2
 800613c:	2300      	movs	r3, #0
 800613e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006142:	4e77      	ldr	r6, [pc, #476]	; (8006320 <_dtoa_r+0x598>)
 8006144:	1124      	asrs	r4, r4, #4
 8006146:	2c00      	cmp	r4, #0
 8006148:	f040 8084 	bne.w	8006254 <_dtoa_r+0x4cc>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1d2      	bne.n	80060f6 <_dtoa_r+0x36e>
 8006150:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006154:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006158:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 8087 	beq.w	800626e <_dtoa_r+0x4e6>
 8006160:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006164:	2200      	movs	r2, #0
 8006166:	4b6f      	ldr	r3, [pc, #444]	; (8006324 <_dtoa_r+0x59c>)
 8006168:	f7fa fc94 	bl	8000a94 <__aeabi_dcmplt>
 800616c:	2800      	cmp	r0, #0
 800616e:	d07e      	beq.n	800626e <_dtoa_r+0x4e6>
 8006170:	9b08      	ldr	r3, [sp, #32]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d07b      	beq.n	800626e <_dtoa_r+0x4e6>
 8006176:	9b06      	ldr	r3, [sp, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	dd38      	ble.n	80061ee <_dtoa_r+0x466>
 800617c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006180:	2200      	movs	r2, #0
 8006182:	4b69      	ldr	r3, [pc, #420]	; (8006328 <_dtoa_r+0x5a0>)
 8006184:	f7fa fa14 	bl	80005b0 <__aeabi_dmul>
 8006188:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800618c:	9c06      	ldr	r4, [sp, #24]
 800618e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006192:	3701      	adds	r7, #1
 8006194:	4638      	mov	r0, r7
 8006196:	f7fa f9a1 	bl	80004dc <__aeabi_i2d>
 800619a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800619e:	f7fa fa07 	bl	80005b0 <__aeabi_dmul>
 80061a2:	2200      	movs	r2, #0
 80061a4:	4b61      	ldr	r3, [pc, #388]	; (800632c <_dtoa_r+0x5a4>)
 80061a6:	f7fa f84d 	bl	8000244 <__adddf3>
 80061aa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80061ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80061b2:	9611      	str	r6, [sp, #68]	; 0x44
 80061b4:	2c00      	cmp	r4, #0
 80061b6:	d15d      	bne.n	8006274 <_dtoa_r+0x4ec>
 80061b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061bc:	2200      	movs	r2, #0
 80061be:	4b5c      	ldr	r3, [pc, #368]	; (8006330 <_dtoa_r+0x5a8>)
 80061c0:	f7fa f83e 	bl	8000240 <__aeabi_dsub>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80061cc:	4633      	mov	r3, r6
 80061ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061d0:	f7fa fc7e 	bl	8000ad0 <__aeabi_dcmpgt>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	f040 8295 	bne.w	8006704 <_dtoa_r+0x97c>
 80061da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80061e4:	f7fa fc56 	bl	8000a94 <__aeabi_dcmplt>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	f040 8289 	bne.w	8006700 <_dtoa_r+0x978>
 80061ee:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80061f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80061f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f2c0 8151 	blt.w	80064a0 <_dtoa_r+0x718>
 80061fe:	f1bb 0f0e 	cmp.w	fp, #14
 8006202:	f300 814d 	bgt.w	80064a0 <_dtoa_r+0x718>
 8006206:	4b45      	ldr	r3, [pc, #276]	; (800631c <_dtoa_r+0x594>)
 8006208:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800620c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006210:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006214:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006216:	2b00      	cmp	r3, #0
 8006218:	f280 80da 	bge.w	80063d0 <_dtoa_r+0x648>
 800621c:	9b08      	ldr	r3, [sp, #32]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f300 80d6 	bgt.w	80063d0 <_dtoa_r+0x648>
 8006224:	f040 826b 	bne.w	80066fe <_dtoa_r+0x976>
 8006228:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800622c:	2200      	movs	r2, #0
 800622e:	4b40      	ldr	r3, [pc, #256]	; (8006330 <_dtoa_r+0x5a8>)
 8006230:	f7fa f9be 	bl	80005b0 <__aeabi_dmul>
 8006234:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006238:	f7fa fc40 	bl	8000abc <__aeabi_dcmpge>
 800623c:	9c08      	ldr	r4, [sp, #32]
 800623e:	4626      	mov	r6, r4
 8006240:	2800      	cmp	r0, #0
 8006242:	f040 8241 	bne.w	80066c8 <_dtoa_r+0x940>
 8006246:	2331      	movs	r3, #49	; 0x31
 8006248:	9f03      	ldr	r7, [sp, #12]
 800624a:	f10b 0b01 	add.w	fp, fp, #1
 800624e:	f807 3b01 	strb.w	r3, [r7], #1
 8006252:	e23d      	b.n	80066d0 <_dtoa_r+0x948>
 8006254:	07e2      	lsls	r2, r4, #31
 8006256:	d505      	bpl.n	8006264 <_dtoa_r+0x4dc>
 8006258:	e9d6 2300 	ldrd	r2, r3, [r6]
 800625c:	f7fa f9a8 	bl	80005b0 <__aeabi_dmul>
 8006260:	2301      	movs	r3, #1
 8006262:	3701      	adds	r7, #1
 8006264:	1064      	asrs	r4, r4, #1
 8006266:	3608      	adds	r6, #8
 8006268:	e76d      	b.n	8006146 <_dtoa_r+0x3be>
 800626a:	2702      	movs	r7, #2
 800626c:	e770      	b.n	8006150 <_dtoa_r+0x3c8>
 800626e:	46d8      	mov	r8, fp
 8006270:	9c08      	ldr	r4, [sp, #32]
 8006272:	e78f      	b.n	8006194 <_dtoa_r+0x40c>
 8006274:	9903      	ldr	r1, [sp, #12]
 8006276:	4b29      	ldr	r3, [pc, #164]	; (800631c <_dtoa_r+0x594>)
 8006278:	4421      	add	r1, r4
 800627a:	9112      	str	r1, [sp, #72]	; 0x48
 800627c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800627e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006282:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006286:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800628a:	2900      	cmp	r1, #0
 800628c:	d054      	beq.n	8006338 <_dtoa_r+0x5b0>
 800628e:	2000      	movs	r0, #0
 8006290:	4928      	ldr	r1, [pc, #160]	; (8006334 <_dtoa_r+0x5ac>)
 8006292:	f7fa fab7 	bl	8000804 <__aeabi_ddiv>
 8006296:	463b      	mov	r3, r7
 8006298:	4632      	mov	r2, r6
 800629a:	f7f9 ffd1 	bl	8000240 <__aeabi_dsub>
 800629e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062a2:	9f03      	ldr	r7, [sp, #12]
 80062a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062a8:	f7fa fc32 	bl	8000b10 <__aeabi_d2iz>
 80062ac:	4604      	mov	r4, r0
 80062ae:	f7fa f915 	bl	80004dc <__aeabi_i2d>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062ba:	f7f9 ffc1 	bl	8000240 <__aeabi_dsub>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	3430      	adds	r4, #48	; 0x30
 80062c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062cc:	f807 4b01 	strb.w	r4, [r7], #1
 80062d0:	f7fa fbe0 	bl	8000a94 <__aeabi_dcmplt>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d173      	bne.n	80063c0 <_dtoa_r+0x638>
 80062d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062dc:	2000      	movs	r0, #0
 80062de:	4911      	ldr	r1, [pc, #68]	; (8006324 <_dtoa_r+0x59c>)
 80062e0:	f7f9 ffae 	bl	8000240 <__aeabi_dsub>
 80062e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062e8:	f7fa fbd4 	bl	8000a94 <__aeabi_dcmplt>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	f040 80b6 	bne.w	800645e <_dtoa_r+0x6d6>
 80062f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062f4:	429f      	cmp	r7, r3
 80062f6:	f43f af7a 	beq.w	80061ee <_dtoa_r+0x466>
 80062fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062fe:	2200      	movs	r2, #0
 8006300:	4b09      	ldr	r3, [pc, #36]	; (8006328 <_dtoa_r+0x5a0>)
 8006302:	f7fa f955 	bl	80005b0 <__aeabi_dmul>
 8006306:	2200      	movs	r2, #0
 8006308:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800630c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006310:	4b05      	ldr	r3, [pc, #20]	; (8006328 <_dtoa_r+0x5a0>)
 8006312:	f7fa f94d 	bl	80005b0 <__aeabi_dmul>
 8006316:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800631a:	e7c3      	b.n	80062a4 <_dtoa_r+0x51c>
 800631c:	08007b90 	.word	0x08007b90
 8006320:	08007b68 	.word	0x08007b68
 8006324:	3ff00000 	.word	0x3ff00000
 8006328:	40240000 	.word	0x40240000
 800632c:	401c0000 	.word	0x401c0000
 8006330:	40140000 	.word	0x40140000
 8006334:	3fe00000 	.word	0x3fe00000
 8006338:	4630      	mov	r0, r6
 800633a:	4639      	mov	r1, r7
 800633c:	f7fa f938 	bl	80005b0 <__aeabi_dmul>
 8006340:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006342:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006346:	9c03      	ldr	r4, [sp, #12]
 8006348:	9314      	str	r3, [sp, #80]	; 0x50
 800634a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800634e:	f7fa fbdf 	bl	8000b10 <__aeabi_d2iz>
 8006352:	9015      	str	r0, [sp, #84]	; 0x54
 8006354:	f7fa f8c2 	bl	80004dc <__aeabi_i2d>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006360:	f7f9 ff6e 	bl	8000240 <__aeabi_dsub>
 8006364:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006366:	4606      	mov	r6, r0
 8006368:	3330      	adds	r3, #48	; 0x30
 800636a:	f804 3b01 	strb.w	r3, [r4], #1
 800636e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006370:	460f      	mov	r7, r1
 8006372:	429c      	cmp	r4, r3
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	d124      	bne.n	80063c4 <_dtoa_r+0x63c>
 800637a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800637e:	4baf      	ldr	r3, [pc, #700]	; (800663c <_dtoa_r+0x8b4>)
 8006380:	f7f9 ff60 	bl	8000244 <__adddf3>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4630      	mov	r0, r6
 800638a:	4639      	mov	r1, r7
 800638c:	f7fa fba0 	bl	8000ad0 <__aeabi_dcmpgt>
 8006390:	2800      	cmp	r0, #0
 8006392:	d163      	bne.n	800645c <_dtoa_r+0x6d4>
 8006394:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006398:	2000      	movs	r0, #0
 800639a:	49a8      	ldr	r1, [pc, #672]	; (800663c <_dtoa_r+0x8b4>)
 800639c:	f7f9 ff50 	bl	8000240 <__aeabi_dsub>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4630      	mov	r0, r6
 80063a6:	4639      	mov	r1, r7
 80063a8:	f7fa fb74 	bl	8000a94 <__aeabi_dcmplt>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	f43f af1e 	beq.w	80061ee <_dtoa_r+0x466>
 80063b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80063b4:	1e7b      	subs	r3, r7, #1
 80063b6:	9314      	str	r3, [sp, #80]	; 0x50
 80063b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80063bc:	2b30      	cmp	r3, #48	; 0x30
 80063be:	d0f8      	beq.n	80063b2 <_dtoa_r+0x62a>
 80063c0:	46c3      	mov	fp, r8
 80063c2:	e03b      	b.n	800643c <_dtoa_r+0x6b4>
 80063c4:	4b9e      	ldr	r3, [pc, #632]	; (8006640 <_dtoa_r+0x8b8>)
 80063c6:	f7fa f8f3 	bl	80005b0 <__aeabi_dmul>
 80063ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063ce:	e7bc      	b.n	800634a <_dtoa_r+0x5c2>
 80063d0:	9f03      	ldr	r7, [sp, #12]
 80063d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80063d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063da:	4640      	mov	r0, r8
 80063dc:	4649      	mov	r1, r9
 80063de:	f7fa fa11 	bl	8000804 <__aeabi_ddiv>
 80063e2:	f7fa fb95 	bl	8000b10 <__aeabi_d2iz>
 80063e6:	4604      	mov	r4, r0
 80063e8:	f7fa f878 	bl	80004dc <__aeabi_i2d>
 80063ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063f0:	f7fa f8de 	bl	80005b0 <__aeabi_dmul>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4640      	mov	r0, r8
 80063fa:	4649      	mov	r1, r9
 80063fc:	f7f9 ff20 	bl	8000240 <__aeabi_dsub>
 8006400:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006404:	f807 6b01 	strb.w	r6, [r7], #1
 8006408:	9e03      	ldr	r6, [sp, #12]
 800640a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800640e:	1bbe      	subs	r6, r7, r6
 8006410:	45b4      	cmp	ip, r6
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	d136      	bne.n	8006486 <_dtoa_r+0x6fe>
 8006418:	f7f9 ff14 	bl	8000244 <__adddf3>
 800641c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006420:	4680      	mov	r8, r0
 8006422:	4689      	mov	r9, r1
 8006424:	f7fa fb54 	bl	8000ad0 <__aeabi_dcmpgt>
 8006428:	bb58      	cbnz	r0, 8006482 <_dtoa_r+0x6fa>
 800642a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800642e:	4640      	mov	r0, r8
 8006430:	4649      	mov	r1, r9
 8006432:	f7fa fb25 	bl	8000a80 <__aeabi_dcmpeq>
 8006436:	b108      	cbz	r0, 800643c <_dtoa_r+0x6b4>
 8006438:	07e3      	lsls	r3, r4, #31
 800643a:	d422      	bmi.n	8006482 <_dtoa_r+0x6fa>
 800643c:	4651      	mov	r1, sl
 800643e:	4628      	mov	r0, r5
 8006440:	f000 fbc2 	bl	8006bc8 <_Bfree>
 8006444:	2300      	movs	r3, #0
 8006446:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006448:	703b      	strb	r3, [r7, #0]
 800644a:	f10b 0301 	add.w	r3, fp, #1
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006452:	2b00      	cmp	r3, #0
 8006454:	f43f ace6 	beq.w	8005e24 <_dtoa_r+0x9c>
 8006458:	601f      	str	r7, [r3, #0]
 800645a:	e4e3      	b.n	8005e24 <_dtoa_r+0x9c>
 800645c:	4627      	mov	r7, r4
 800645e:	463b      	mov	r3, r7
 8006460:	461f      	mov	r7, r3
 8006462:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006466:	2a39      	cmp	r2, #57	; 0x39
 8006468:	d107      	bne.n	800647a <_dtoa_r+0x6f2>
 800646a:	9a03      	ldr	r2, [sp, #12]
 800646c:	429a      	cmp	r2, r3
 800646e:	d1f7      	bne.n	8006460 <_dtoa_r+0x6d8>
 8006470:	2230      	movs	r2, #48	; 0x30
 8006472:	9903      	ldr	r1, [sp, #12]
 8006474:	f108 0801 	add.w	r8, r8, #1
 8006478:	700a      	strb	r2, [r1, #0]
 800647a:	781a      	ldrb	r2, [r3, #0]
 800647c:	3201      	adds	r2, #1
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	e79e      	b.n	80063c0 <_dtoa_r+0x638>
 8006482:	46d8      	mov	r8, fp
 8006484:	e7eb      	b.n	800645e <_dtoa_r+0x6d6>
 8006486:	2200      	movs	r2, #0
 8006488:	4b6d      	ldr	r3, [pc, #436]	; (8006640 <_dtoa_r+0x8b8>)
 800648a:	f7fa f891 	bl	80005b0 <__aeabi_dmul>
 800648e:	2200      	movs	r2, #0
 8006490:	2300      	movs	r3, #0
 8006492:	4680      	mov	r8, r0
 8006494:	4689      	mov	r9, r1
 8006496:	f7fa faf3 	bl	8000a80 <__aeabi_dcmpeq>
 800649a:	2800      	cmp	r0, #0
 800649c:	d09b      	beq.n	80063d6 <_dtoa_r+0x64e>
 800649e:	e7cd      	b.n	800643c <_dtoa_r+0x6b4>
 80064a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064a2:	2a00      	cmp	r2, #0
 80064a4:	f000 80c4 	beq.w	8006630 <_dtoa_r+0x8a8>
 80064a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80064aa:	2a01      	cmp	r2, #1
 80064ac:	f300 80a8 	bgt.w	8006600 <_dtoa_r+0x878>
 80064b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80064b2:	2a00      	cmp	r2, #0
 80064b4:	f000 80a0 	beq.w	80065f8 <_dtoa_r+0x870>
 80064b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064bc:	464f      	mov	r7, r9
 80064be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80064c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064c2:	2101      	movs	r1, #1
 80064c4:	441a      	add	r2, r3
 80064c6:	4628      	mov	r0, r5
 80064c8:	4499      	add	r9, r3
 80064ca:	9209      	str	r2, [sp, #36]	; 0x24
 80064cc:	f000 fc32 	bl	8006d34 <__i2b>
 80064d0:	4606      	mov	r6, r0
 80064d2:	b15f      	cbz	r7, 80064ec <_dtoa_r+0x764>
 80064d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	dd08      	ble.n	80064ec <_dtoa_r+0x764>
 80064da:	42bb      	cmp	r3, r7
 80064dc:	bfa8      	it	ge
 80064de:	463b      	movge	r3, r7
 80064e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064e2:	eba9 0903 	sub.w	r9, r9, r3
 80064e6:	1aff      	subs	r7, r7, r3
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	9309      	str	r3, [sp, #36]	; 0x24
 80064ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ee:	b1f3      	cbz	r3, 800652e <_dtoa_r+0x7a6>
 80064f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 80a0 	beq.w	8006638 <_dtoa_r+0x8b0>
 80064f8:	2c00      	cmp	r4, #0
 80064fa:	dd10      	ble.n	800651e <_dtoa_r+0x796>
 80064fc:	4631      	mov	r1, r6
 80064fe:	4622      	mov	r2, r4
 8006500:	4628      	mov	r0, r5
 8006502:	f000 fcd5 	bl	8006eb0 <__pow5mult>
 8006506:	4652      	mov	r2, sl
 8006508:	4601      	mov	r1, r0
 800650a:	4606      	mov	r6, r0
 800650c:	4628      	mov	r0, r5
 800650e:	f000 fc27 	bl	8006d60 <__multiply>
 8006512:	4680      	mov	r8, r0
 8006514:	4651      	mov	r1, sl
 8006516:	4628      	mov	r0, r5
 8006518:	f000 fb56 	bl	8006bc8 <_Bfree>
 800651c:	46c2      	mov	sl, r8
 800651e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006520:	1b1a      	subs	r2, r3, r4
 8006522:	d004      	beq.n	800652e <_dtoa_r+0x7a6>
 8006524:	4651      	mov	r1, sl
 8006526:	4628      	mov	r0, r5
 8006528:	f000 fcc2 	bl	8006eb0 <__pow5mult>
 800652c:	4682      	mov	sl, r0
 800652e:	2101      	movs	r1, #1
 8006530:	4628      	mov	r0, r5
 8006532:	f000 fbff 	bl	8006d34 <__i2b>
 8006536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006538:	4604      	mov	r4, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	f340 8082 	ble.w	8006644 <_dtoa_r+0x8bc>
 8006540:	461a      	mov	r2, r3
 8006542:	4601      	mov	r1, r0
 8006544:	4628      	mov	r0, r5
 8006546:	f000 fcb3 	bl	8006eb0 <__pow5mult>
 800654a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800654c:	4604      	mov	r4, r0
 800654e:	2b01      	cmp	r3, #1
 8006550:	dd7b      	ble.n	800664a <_dtoa_r+0x8c2>
 8006552:	f04f 0800 	mov.w	r8, #0
 8006556:	6923      	ldr	r3, [r4, #16]
 8006558:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800655c:	6918      	ldr	r0, [r3, #16]
 800655e:	f000 fb9b 	bl	8006c98 <__hi0bits>
 8006562:	f1c0 0020 	rsb	r0, r0, #32
 8006566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006568:	4418      	add	r0, r3
 800656a:	f010 001f 	ands.w	r0, r0, #31
 800656e:	f000 8092 	beq.w	8006696 <_dtoa_r+0x90e>
 8006572:	f1c0 0320 	rsb	r3, r0, #32
 8006576:	2b04      	cmp	r3, #4
 8006578:	f340 8085 	ble.w	8006686 <_dtoa_r+0x8fe>
 800657c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800657e:	f1c0 001c 	rsb	r0, r0, #28
 8006582:	4403      	add	r3, r0
 8006584:	4481      	add	r9, r0
 8006586:	4407      	add	r7, r0
 8006588:	9309      	str	r3, [sp, #36]	; 0x24
 800658a:	f1b9 0f00 	cmp.w	r9, #0
 800658e:	dd05      	ble.n	800659c <_dtoa_r+0x814>
 8006590:	4651      	mov	r1, sl
 8006592:	464a      	mov	r2, r9
 8006594:	4628      	mov	r0, r5
 8006596:	f000 fce5 	bl	8006f64 <__lshift>
 800659a:	4682      	mov	sl, r0
 800659c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659e:	2b00      	cmp	r3, #0
 80065a0:	dd05      	ble.n	80065ae <_dtoa_r+0x826>
 80065a2:	4621      	mov	r1, r4
 80065a4:	461a      	mov	r2, r3
 80065a6:	4628      	mov	r0, r5
 80065a8:	f000 fcdc 	bl	8006f64 <__lshift>
 80065ac:	4604      	mov	r4, r0
 80065ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d072      	beq.n	800669a <_dtoa_r+0x912>
 80065b4:	4621      	mov	r1, r4
 80065b6:	4650      	mov	r0, sl
 80065b8:	f000 fd40 	bl	800703c <__mcmp>
 80065bc:	2800      	cmp	r0, #0
 80065be:	da6c      	bge.n	800669a <_dtoa_r+0x912>
 80065c0:	2300      	movs	r3, #0
 80065c2:	4651      	mov	r1, sl
 80065c4:	220a      	movs	r2, #10
 80065c6:	4628      	mov	r0, r5
 80065c8:	f000 fb20 	bl	8006c0c <__multadd>
 80065cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065ce:	4682      	mov	sl, r0
 80065d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 81ac 	beq.w	8006932 <_dtoa_r+0xbaa>
 80065da:	2300      	movs	r3, #0
 80065dc:	4631      	mov	r1, r6
 80065de:	220a      	movs	r2, #10
 80065e0:	4628      	mov	r0, r5
 80065e2:	f000 fb13 	bl	8006c0c <__multadd>
 80065e6:	9b06      	ldr	r3, [sp, #24]
 80065e8:	4606      	mov	r6, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f300 8093 	bgt.w	8006716 <_dtoa_r+0x98e>
 80065f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	dc59      	bgt.n	80066aa <_dtoa_r+0x922>
 80065f6:	e08e      	b.n	8006716 <_dtoa_r+0x98e>
 80065f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80065fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065fe:	e75d      	b.n	80064bc <_dtoa_r+0x734>
 8006600:	9b08      	ldr	r3, [sp, #32]
 8006602:	1e5c      	subs	r4, r3, #1
 8006604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006606:	42a3      	cmp	r3, r4
 8006608:	bfbf      	itttt	lt
 800660a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800660c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800660e:	1ae3      	sublt	r3, r4, r3
 8006610:	18d2      	addlt	r2, r2, r3
 8006612:	bfa8      	it	ge
 8006614:	1b1c      	subge	r4, r3, r4
 8006616:	9b08      	ldr	r3, [sp, #32]
 8006618:	bfbe      	ittt	lt
 800661a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800661c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800661e:	2400      	movlt	r4, #0
 8006620:	2b00      	cmp	r3, #0
 8006622:	bfb5      	itete	lt
 8006624:	eba9 0703 	sublt.w	r7, r9, r3
 8006628:	464f      	movge	r7, r9
 800662a:	2300      	movlt	r3, #0
 800662c:	9b08      	ldrge	r3, [sp, #32]
 800662e:	e747      	b.n	80064c0 <_dtoa_r+0x738>
 8006630:	464f      	mov	r7, r9
 8006632:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006634:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006636:	e74c      	b.n	80064d2 <_dtoa_r+0x74a>
 8006638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800663a:	e773      	b.n	8006524 <_dtoa_r+0x79c>
 800663c:	3fe00000 	.word	0x3fe00000
 8006640:	40240000 	.word	0x40240000
 8006644:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006646:	2b01      	cmp	r3, #1
 8006648:	dc18      	bgt.n	800667c <_dtoa_r+0x8f4>
 800664a:	9b04      	ldr	r3, [sp, #16]
 800664c:	b9b3      	cbnz	r3, 800667c <_dtoa_r+0x8f4>
 800664e:	9b05      	ldr	r3, [sp, #20]
 8006650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006654:	b993      	cbnz	r3, 800667c <_dtoa_r+0x8f4>
 8006656:	9b05      	ldr	r3, [sp, #20]
 8006658:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800665c:	0d1b      	lsrs	r3, r3, #20
 800665e:	051b      	lsls	r3, r3, #20
 8006660:	b17b      	cbz	r3, 8006682 <_dtoa_r+0x8fa>
 8006662:	f04f 0801 	mov.w	r8, #1
 8006666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006668:	f109 0901 	add.w	r9, r9, #1
 800666c:	3301      	adds	r3, #1
 800666e:	9309      	str	r3, [sp, #36]	; 0x24
 8006670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006672:	2b00      	cmp	r3, #0
 8006674:	f47f af6f 	bne.w	8006556 <_dtoa_r+0x7ce>
 8006678:	2001      	movs	r0, #1
 800667a:	e774      	b.n	8006566 <_dtoa_r+0x7de>
 800667c:	f04f 0800 	mov.w	r8, #0
 8006680:	e7f6      	b.n	8006670 <_dtoa_r+0x8e8>
 8006682:	4698      	mov	r8, r3
 8006684:	e7f4      	b.n	8006670 <_dtoa_r+0x8e8>
 8006686:	d080      	beq.n	800658a <_dtoa_r+0x802>
 8006688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800668a:	331c      	adds	r3, #28
 800668c:	441a      	add	r2, r3
 800668e:	4499      	add	r9, r3
 8006690:	441f      	add	r7, r3
 8006692:	9209      	str	r2, [sp, #36]	; 0x24
 8006694:	e779      	b.n	800658a <_dtoa_r+0x802>
 8006696:	4603      	mov	r3, r0
 8006698:	e7f6      	b.n	8006688 <_dtoa_r+0x900>
 800669a:	9b08      	ldr	r3, [sp, #32]
 800669c:	2b00      	cmp	r3, #0
 800669e:	dc34      	bgt.n	800670a <_dtoa_r+0x982>
 80066a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	dd31      	ble.n	800670a <_dtoa_r+0x982>
 80066a6:	9b08      	ldr	r3, [sp, #32]
 80066a8:	9306      	str	r3, [sp, #24]
 80066aa:	9b06      	ldr	r3, [sp, #24]
 80066ac:	b963      	cbnz	r3, 80066c8 <_dtoa_r+0x940>
 80066ae:	4621      	mov	r1, r4
 80066b0:	2205      	movs	r2, #5
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 faaa 	bl	8006c0c <__multadd>
 80066b8:	4601      	mov	r1, r0
 80066ba:	4604      	mov	r4, r0
 80066bc:	4650      	mov	r0, sl
 80066be:	f000 fcbd 	bl	800703c <__mcmp>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	f73f adbf 	bgt.w	8006246 <_dtoa_r+0x4be>
 80066c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066ca:	9f03      	ldr	r7, [sp, #12]
 80066cc:	ea6f 0b03 	mvn.w	fp, r3
 80066d0:	f04f 0800 	mov.w	r8, #0
 80066d4:	4621      	mov	r1, r4
 80066d6:	4628      	mov	r0, r5
 80066d8:	f000 fa76 	bl	8006bc8 <_Bfree>
 80066dc:	2e00      	cmp	r6, #0
 80066de:	f43f aead 	beq.w	800643c <_dtoa_r+0x6b4>
 80066e2:	f1b8 0f00 	cmp.w	r8, #0
 80066e6:	d005      	beq.n	80066f4 <_dtoa_r+0x96c>
 80066e8:	45b0      	cmp	r8, r6
 80066ea:	d003      	beq.n	80066f4 <_dtoa_r+0x96c>
 80066ec:	4641      	mov	r1, r8
 80066ee:	4628      	mov	r0, r5
 80066f0:	f000 fa6a 	bl	8006bc8 <_Bfree>
 80066f4:	4631      	mov	r1, r6
 80066f6:	4628      	mov	r0, r5
 80066f8:	f000 fa66 	bl	8006bc8 <_Bfree>
 80066fc:	e69e      	b.n	800643c <_dtoa_r+0x6b4>
 80066fe:	2400      	movs	r4, #0
 8006700:	4626      	mov	r6, r4
 8006702:	e7e1      	b.n	80066c8 <_dtoa_r+0x940>
 8006704:	46c3      	mov	fp, r8
 8006706:	4626      	mov	r6, r4
 8006708:	e59d      	b.n	8006246 <_dtoa_r+0x4be>
 800670a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 80c8 	beq.w	80068a2 <_dtoa_r+0xb1a>
 8006712:	9b08      	ldr	r3, [sp, #32]
 8006714:	9306      	str	r3, [sp, #24]
 8006716:	2f00      	cmp	r7, #0
 8006718:	dd05      	ble.n	8006726 <_dtoa_r+0x99e>
 800671a:	4631      	mov	r1, r6
 800671c:	463a      	mov	r2, r7
 800671e:	4628      	mov	r0, r5
 8006720:	f000 fc20 	bl	8006f64 <__lshift>
 8006724:	4606      	mov	r6, r0
 8006726:	f1b8 0f00 	cmp.w	r8, #0
 800672a:	d05b      	beq.n	80067e4 <_dtoa_r+0xa5c>
 800672c:	4628      	mov	r0, r5
 800672e:	6871      	ldr	r1, [r6, #4]
 8006730:	f000 fa0a 	bl	8006b48 <_Balloc>
 8006734:	4607      	mov	r7, r0
 8006736:	b928      	cbnz	r0, 8006744 <_dtoa_r+0x9bc>
 8006738:	4602      	mov	r2, r0
 800673a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800673e:	4b81      	ldr	r3, [pc, #516]	; (8006944 <_dtoa_r+0xbbc>)
 8006740:	f7ff bb36 	b.w	8005db0 <_dtoa_r+0x28>
 8006744:	6932      	ldr	r2, [r6, #16]
 8006746:	f106 010c 	add.w	r1, r6, #12
 800674a:	3202      	adds	r2, #2
 800674c:	0092      	lsls	r2, r2, #2
 800674e:	300c      	adds	r0, #12
 8006750:	f000 fff2 	bl	8007738 <memcpy>
 8006754:	2201      	movs	r2, #1
 8006756:	4639      	mov	r1, r7
 8006758:	4628      	mov	r0, r5
 800675a:	f000 fc03 	bl	8006f64 <__lshift>
 800675e:	46b0      	mov	r8, r6
 8006760:	4606      	mov	r6, r0
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	9a03      	ldr	r2, [sp, #12]
 8006766:	3301      	adds	r3, #1
 8006768:	9308      	str	r3, [sp, #32]
 800676a:	9b06      	ldr	r3, [sp, #24]
 800676c:	4413      	add	r3, r2
 800676e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006770:	9b04      	ldr	r3, [sp, #16]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	930a      	str	r3, [sp, #40]	; 0x28
 8006778:	9b08      	ldr	r3, [sp, #32]
 800677a:	4621      	mov	r1, r4
 800677c:	3b01      	subs	r3, #1
 800677e:	4650      	mov	r0, sl
 8006780:	9304      	str	r3, [sp, #16]
 8006782:	f7ff fa76 	bl	8005c72 <quorem>
 8006786:	4641      	mov	r1, r8
 8006788:	9006      	str	r0, [sp, #24]
 800678a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800678e:	4650      	mov	r0, sl
 8006790:	f000 fc54 	bl	800703c <__mcmp>
 8006794:	4632      	mov	r2, r6
 8006796:	9009      	str	r0, [sp, #36]	; 0x24
 8006798:	4621      	mov	r1, r4
 800679a:	4628      	mov	r0, r5
 800679c:	f000 fc6a 	bl	8007074 <__mdiff>
 80067a0:	68c2      	ldr	r2, [r0, #12]
 80067a2:	4607      	mov	r7, r0
 80067a4:	bb02      	cbnz	r2, 80067e8 <_dtoa_r+0xa60>
 80067a6:	4601      	mov	r1, r0
 80067a8:	4650      	mov	r0, sl
 80067aa:	f000 fc47 	bl	800703c <__mcmp>
 80067ae:	4602      	mov	r2, r0
 80067b0:	4639      	mov	r1, r7
 80067b2:	4628      	mov	r0, r5
 80067b4:	920c      	str	r2, [sp, #48]	; 0x30
 80067b6:	f000 fa07 	bl	8006bc8 <_Bfree>
 80067ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067be:	9f08      	ldr	r7, [sp, #32]
 80067c0:	ea43 0102 	orr.w	r1, r3, r2
 80067c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067c6:	4319      	orrs	r1, r3
 80067c8:	d110      	bne.n	80067ec <_dtoa_r+0xa64>
 80067ca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80067ce:	d029      	beq.n	8006824 <_dtoa_r+0xa9c>
 80067d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	dd02      	ble.n	80067dc <_dtoa_r+0xa54>
 80067d6:	9b06      	ldr	r3, [sp, #24]
 80067d8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80067dc:	9b04      	ldr	r3, [sp, #16]
 80067de:	f883 9000 	strb.w	r9, [r3]
 80067e2:	e777      	b.n	80066d4 <_dtoa_r+0x94c>
 80067e4:	4630      	mov	r0, r6
 80067e6:	e7ba      	b.n	800675e <_dtoa_r+0x9d6>
 80067e8:	2201      	movs	r2, #1
 80067ea:	e7e1      	b.n	80067b0 <_dtoa_r+0xa28>
 80067ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	db04      	blt.n	80067fc <_dtoa_r+0xa74>
 80067f2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80067f4:	430b      	orrs	r3, r1
 80067f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067f8:	430b      	orrs	r3, r1
 80067fa:	d120      	bne.n	800683e <_dtoa_r+0xab6>
 80067fc:	2a00      	cmp	r2, #0
 80067fe:	dded      	ble.n	80067dc <_dtoa_r+0xa54>
 8006800:	4651      	mov	r1, sl
 8006802:	2201      	movs	r2, #1
 8006804:	4628      	mov	r0, r5
 8006806:	f000 fbad 	bl	8006f64 <__lshift>
 800680a:	4621      	mov	r1, r4
 800680c:	4682      	mov	sl, r0
 800680e:	f000 fc15 	bl	800703c <__mcmp>
 8006812:	2800      	cmp	r0, #0
 8006814:	dc03      	bgt.n	800681e <_dtoa_r+0xa96>
 8006816:	d1e1      	bne.n	80067dc <_dtoa_r+0xa54>
 8006818:	f019 0f01 	tst.w	r9, #1
 800681c:	d0de      	beq.n	80067dc <_dtoa_r+0xa54>
 800681e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006822:	d1d8      	bne.n	80067d6 <_dtoa_r+0xa4e>
 8006824:	2339      	movs	r3, #57	; 0x39
 8006826:	9a04      	ldr	r2, [sp, #16]
 8006828:	7013      	strb	r3, [r2, #0]
 800682a:	463b      	mov	r3, r7
 800682c:	461f      	mov	r7, r3
 800682e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006832:	3b01      	subs	r3, #1
 8006834:	2a39      	cmp	r2, #57	; 0x39
 8006836:	d06b      	beq.n	8006910 <_dtoa_r+0xb88>
 8006838:	3201      	adds	r2, #1
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	e74a      	b.n	80066d4 <_dtoa_r+0x94c>
 800683e:	2a00      	cmp	r2, #0
 8006840:	dd07      	ble.n	8006852 <_dtoa_r+0xaca>
 8006842:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006846:	d0ed      	beq.n	8006824 <_dtoa_r+0xa9c>
 8006848:	9a04      	ldr	r2, [sp, #16]
 800684a:	f109 0301 	add.w	r3, r9, #1
 800684e:	7013      	strb	r3, [r2, #0]
 8006850:	e740      	b.n	80066d4 <_dtoa_r+0x94c>
 8006852:	9b08      	ldr	r3, [sp, #32]
 8006854:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006856:	f803 9c01 	strb.w	r9, [r3, #-1]
 800685a:	4293      	cmp	r3, r2
 800685c:	d042      	beq.n	80068e4 <_dtoa_r+0xb5c>
 800685e:	4651      	mov	r1, sl
 8006860:	2300      	movs	r3, #0
 8006862:	220a      	movs	r2, #10
 8006864:	4628      	mov	r0, r5
 8006866:	f000 f9d1 	bl	8006c0c <__multadd>
 800686a:	45b0      	cmp	r8, r6
 800686c:	4682      	mov	sl, r0
 800686e:	f04f 0300 	mov.w	r3, #0
 8006872:	f04f 020a 	mov.w	r2, #10
 8006876:	4641      	mov	r1, r8
 8006878:	4628      	mov	r0, r5
 800687a:	d107      	bne.n	800688c <_dtoa_r+0xb04>
 800687c:	f000 f9c6 	bl	8006c0c <__multadd>
 8006880:	4680      	mov	r8, r0
 8006882:	4606      	mov	r6, r0
 8006884:	9b08      	ldr	r3, [sp, #32]
 8006886:	3301      	adds	r3, #1
 8006888:	9308      	str	r3, [sp, #32]
 800688a:	e775      	b.n	8006778 <_dtoa_r+0x9f0>
 800688c:	f000 f9be 	bl	8006c0c <__multadd>
 8006890:	4631      	mov	r1, r6
 8006892:	4680      	mov	r8, r0
 8006894:	2300      	movs	r3, #0
 8006896:	220a      	movs	r2, #10
 8006898:	4628      	mov	r0, r5
 800689a:	f000 f9b7 	bl	8006c0c <__multadd>
 800689e:	4606      	mov	r6, r0
 80068a0:	e7f0      	b.n	8006884 <_dtoa_r+0xafc>
 80068a2:	9b08      	ldr	r3, [sp, #32]
 80068a4:	9306      	str	r3, [sp, #24]
 80068a6:	9f03      	ldr	r7, [sp, #12]
 80068a8:	4621      	mov	r1, r4
 80068aa:	4650      	mov	r0, sl
 80068ac:	f7ff f9e1 	bl	8005c72 <quorem>
 80068b0:	9b03      	ldr	r3, [sp, #12]
 80068b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80068b6:	f807 9b01 	strb.w	r9, [r7], #1
 80068ba:	1afa      	subs	r2, r7, r3
 80068bc:	9b06      	ldr	r3, [sp, #24]
 80068be:	4293      	cmp	r3, r2
 80068c0:	dd07      	ble.n	80068d2 <_dtoa_r+0xb4a>
 80068c2:	4651      	mov	r1, sl
 80068c4:	2300      	movs	r3, #0
 80068c6:	220a      	movs	r2, #10
 80068c8:	4628      	mov	r0, r5
 80068ca:	f000 f99f 	bl	8006c0c <__multadd>
 80068ce:	4682      	mov	sl, r0
 80068d0:	e7ea      	b.n	80068a8 <_dtoa_r+0xb20>
 80068d2:	9b06      	ldr	r3, [sp, #24]
 80068d4:	f04f 0800 	mov.w	r8, #0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bfcc      	ite	gt
 80068dc:	461f      	movgt	r7, r3
 80068de:	2701      	movle	r7, #1
 80068e0:	9b03      	ldr	r3, [sp, #12]
 80068e2:	441f      	add	r7, r3
 80068e4:	4651      	mov	r1, sl
 80068e6:	2201      	movs	r2, #1
 80068e8:	4628      	mov	r0, r5
 80068ea:	f000 fb3b 	bl	8006f64 <__lshift>
 80068ee:	4621      	mov	r1, r4
 80068f0:	4682      	mov	sl, r0
 80068f2:	f000 fba3 	bl	800703c <__mcmp>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	dc97      	bgt.n	800682a <_dtoa_r+0xaa2>
 80068fa:	d102      	bne.n	8006902 <_dtoa_r+0xb7a>
 80068fc:	f019 0f01 	tst.w	r9, #1
 8006900:	d193      	bne.n	800682a <_dtoa_r+0xaa2>
 8006902:	463b      	mov	r3, r7
 8006904:	461f      	mov	r7, r3
 8006906:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800690a:	2a30      	cmp	r2, #48	; 0x30
 800690c:	d0fa      	beq.n	8006904 <_dtoa_r+0xb7c>
 800690e:	e6e1      	b.n	80066d4 <_dtoa_r+0x94c>
 8006910:	9a03      	ldr	r2, [sp, #12]
 8006912:	429a      	cmp	r2, r3
 8006914:	d18a      	bne.n	800682c <_dtoa_r+0xaa4>
 8006916:	2331      	movs	r3, #49	; 0x31
 8006918:	f10b 0b01 	add.w	fp, fp, #1
 800691c:	e797      	b.n	800684e <_dtoa_r+0xac6>
 800691e:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <_dtoa_r+0xbc0>)
 8006920:	f7ff ba9f 	b.w	8005e62 <_dtoa_r+0xda>
 8006924:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006926:	2b00      	cmp	r3, #0
 8006928:	f47f aa77 	bne.w	8005e1a <_dtoa_r+0x92>
 800692c:	4b07      	ldr	r3, [pc, #28]	; (800694c <_dtoa_r+0xbc4>)
 800692e:	f7ff ba98 	b.w	8005e62 <_dtoa_r+0xda>
 8006932:	9b06      	ldr	r3, [sp, #24]
 8006934:	2b00      	cmp	r3, #0
 8006936:	dcb6      	bgt.n	80068a6 <_dtoa_r+0xb1e>
 8006938:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800693a:	2b02      	cmp	r3, #2
 800693c:	f73f aeb5 	bgt.w	80066aa <_dtoa_r+0x922>
 8006940:	e7b1      	b.n	80068a6 <_dtoa_r+0xb1e>
 8006942:	bf00      	nop
 8006944:	08007afe 	.word	0x08007afe
 8006948:	08007a5e 	.word	0x08007a5e
 800694c:	08007a82 	.word	0x08007a82

08006950 <_free_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4605      	mov	r5, r0
 8006954:	2900      	cmp	r1, #0
 8006956:	d040      	beq.n	80069da <_free_r+0x8a>
 8006958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800695c:	1f0c      	subs	r4, r1, #4
 800695e:	2b00      	cmp	r3, #0
 8006960:	bfb8      	it	lt
 8006962:	18e4      	addlt	r4, r4, r3
 8006964:	f000 f8e4 	bl	8006b30 <__malloc_lock>
 8006968:	4a1c      	ldr	r2, [pc, #112]	; (80069dc <_free_r+0x8c>)
 800696a:	6813      	ldr	r3, [r2, #0]
 800696c:	b933      	cbnz	r3, 800697c <_free_r+0x2c>
 800696e:	6063      	str	r3, [r4, #4]
 8006970:	6014      	str	r4, [r2, #0]
 8006972:	4628      	mov	r0, r5
 8006974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006978:	f000 b8e0 	b.w	8006b3c <__malloc_unlock>
 800697c:	42a3      	cmp	r3, r4
 800697e:	d908      	bls.n	8006992 <_free_r+0x42>
 8006980:	6820      	ldr	r0, [r4, #0]
 8006982:	1821      	adds	r1, r4, r0
 8006984:	428b      	cmp	r3, r1
 8006986:	bf01      	itttt	eq
 8006988:	6819      	ldreq	r1, [r3, #0]
 800698a:	685b      	ldreq	r3, [r3, #4]
 800698c:	1809      	addeq	r1, r1, r0
 800698e:	6021      	streq	r1, [r4, #0]
 8006990:	e7ed      	b.n	800696e <_free_r+0x1e>
 8006992:	461a      	mov	r2, r3
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	b10b      	cbz	r3, 800699c <_free_r+0x4c>
 8006998:	42a3      	cmp	r3, r4
 800699a:	d9fa      	bls.n	8006992 <_free_r+0x42>
 800699c:	6811      	ldr	r1, [r2, #0]
 800699e:	1850      	adds	r0, r2, r1
 80069a0:	42a0      	cmp	r0, r4
 80069a2:	d10b      	bne.n	80069bc <_free_r+0x6c>
 80069a4:	6820      	ldr	r0, [r4, #0]
 80069a6:	4401      	add	r1, r0
 80069a8:	1850      	adds	r0, r2, r1
 80069aa:	4283      	cmp	r3, r0
 80069ac:	6011      	str	r1, [r2, #0]
 80069ae:	d1e0      	bne.n	8006972 <_free_r+0x22>
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	4408      	add	r0, r1
 80069b6:	6010      	str	r0, [r2, #0]
 80069b8:	6053      	str	r3, [r2, #4]
 80069ba:	e7da      	b.n	8006972 <_free_r+0x22>
 80069bc:	d902      	bls.n	80069c4 <_free_r+0x74>
 80069be:	230c      	movs	r3, #12
 80069c0:	602b      	str	r3, [r5, #0]
 80069c2:	e7d6      	b.n	8006972 <_free_r+0x22>
 80069c4:	6820      	ldr	r0, [r4, #0]
 80069c6:	1821      	adds	r1, r4, r0
 80069c8:	428b      	cmp	r3, r1
 80069ca:	bf01      	itttt	eq
 80069cc:	6819      	ldreq	r1, [r3, #0]
 80069ce:	685b      	ldreq	r3, [r3, #4]
 80069d0:	1809      	addeq	r1, r1, r0
 80069d2:	6021      	streq	r1, [r4, #0]
 80069d4:	6063      	str	r3, [r4, #4]
 80069d6:	6054      	str	r4, [r2, #4]
 80069d8:	e7cb      	b.n	8006972 <_free_r+0x22>
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	20000454 	.word	0x20000454

080069e0 <malloc>:
 80069e0:	4b02      	ldr	r3, [pc, #8]	; (80069ec <malloc+0xc>)
 80069e2:	4601      	mov	r1, r0
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	f000 b823 	b.w	8006a30 <_malloc_r>
 80069ea:	bf00      	nop
 80069ec:	20000064 	.word	0x20000064

080069f0 <sbrk_aligned>:
 80069f0:	b570      	push	{r4, r5, r6, lr}
 80069f2:	4e0e      	ldr	r6, [pc, #56]	; (8006a2c <sbrk_aligned+0x3c>)
 80069f4:	460c      	mov	r4, r1
 80069f6:	6831      	ldr	r1, [r6, #0]
 80069f8:	4605      	mov	r5, r0
 80069fa:	b911      	cbnz	r1, 8006a02 <sbrk_aligned+0x12>
 80069fc:	f000 fe8c 	bl	8007718 <_sbrk_r>
 8006a00:	6030      	str	r0, [r6, #0]
 8006a02:	4621      	mov	r1, r4
 8006a04:	4628      	mov	r0, r5
 8006a06:	f000 fe87 	bl	8007718 <_sbrk_r>
 8006a0a:	1c43      	adds	r3, r0, #1
 8006a0c:	d00a      	beq.n	8006a24 <sbrk_aligned+0x34>
 8006a0e:	1cc4      	adds	r4, r0, #3
 8006a10:	f024 0403 	bic.w	r4, r4, #3
 8006a14:	42a0      	cmp	r0, r4
 8006a16:	d007      	beq.n	8006a28 <sbrk_aligned+0x38>
 8006a18:	1a21      	subs	r1, r4, r0
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f000 fe7c 	bl	8007718 <_sbrk_r>
 8006a20:	3001      	adds	r0, #1
 8006a22:	d101      	bne.n	8006a28 <sbrk_aligned+0x38>
 8006a24:	f04f 34ff 	mov.w	r4, #4294967295
 8006a28:	4620      	mov	r0, r4
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	20000458 	.word	0x20000458

08006a30 <_malloc_r>:
 8006a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a34:	1ccd      	adds	r5, r1, #3
 8006a36:	f025 0503 	bic.w	r5, r5, #3
 8006a3a:	3508      	adds	r5, #8
 8006a3c:	2d0c      	cmp	r5, #12
 8006a3e:	bf38      	it	cc
 8006a40:	250c      	movcc	r5, #12
 8006a42:	2d00      	cmp	r5, #0
 8006a44:	4607      	mov	r7, r0
 8006a46:	db01      	blt.n	8006a4c <_malloc_r+0x1c>
 8006a48:	42a9      	cmp	r1, r5
 8006a4a:	d905      	bls.n	8006a58 <_malloc_r+0x28>
 8006a4c:	230c      	movs	r3, #12
 8006a4e:	2600      	movs	r6, #0
 8006a50:	603b      	str	r3, [r7, #0]
 8006a52:	4630      	mov	r0, r6
 8006a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006b2c <_malloc_r+0xfc>
 8006a5c:	f000 f868 	bl	8006b30 <__malloc_lock>
 8006a60:	f8d8 3000 	ldr.w	r3, [r8]
 8006a64:	461c      	mov	r4, r3
 8006a66:	bb5c      	cbnz	r4, 8006ac0 <_malloc_r+0x90>
 8006a68:	4629      	mov	r1, r5
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	f7ff ffc0 	bl	80069f0 <sbrk_aligned>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	4604      	mov	r4, r0
 8006a74:	d155      	bne.n	8006b22 <_malloc_r+0xf2>
 8006a76:	f8d8 4000 	ldr.w	r4, [r8]
 8006a7a:	4626      	mov	r6, r4
 8006a7c:	2e00      	cmp	r6, #0
 8006a7e:	d145      	bne.n	8006b0c <_malloc_r+0xdc>
 8006a80:	2c00      	cmp	r4, #0
 8006a82:	d048      	beq.n	8006b16 <_malloc_r+0xe6>
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	4631      	mov	r1, r6
 8006a88:	4638      	mov	r0, r7
 8006a8a:	eb04 0903 	add.w	r9, r4, r3
 8006a8e:	f000 fe43 	bl	8007718 <_sbrk_r>
 8006a92:	4581      	cmp	r9, r0
 8006a94:	d13f      	bne.n	8006b16 <_malloc_r+0xe6>
 8006a96:	6821      	ldr	r1, [r4, #0]
 8006a98:	4638      	mov	r0, r7
 8006a9a:	1a6d      	subs	r5, r5, r1
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	f7ff ffa7 	bl	80069f0 <sbrk_aligned>
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d037      	beq.n	8006b16 <_malloc_r+0xe6>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	442b      	add	r3, r5
 8006aaa:	6023      	str	r3, [r4, #0]
 8006aac:	f8d8 3000 	ldr.w	r3, [r8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d038      	beq.n	8006b26 <_malloc_r+0xf6>
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	42a2      	cmp	r2, r4
 8006ab8:	d12b      	bne.n	8006b12 <_malloc_r+0xe2>
 8006aba:	2200      	movs	r2, #0
 8006abc:	605a      	str	r2, [r3, #4]
 8006abe:	e00f      	b.n	8006ae0 <_malloc_r+0xb0>
 8006ac0:	6822      	ldr	r2, [r4, #0]
 8006ac2:	1b52      	subs	r2, r2, r5
 8006ac4:	d41f      	bmi.n	8006b06 <_malloc_r+0xd6>
 8006ac6:	2a0b      	cmp	r2, #11
 8006ac8:	d917      	bls.n	8006afa <_malloc_r+0xca>
 8006aca:	1961      	adds	r1, r4, r5
 8006acc:	42a3      	cmp	r3, r4
 8006ace:	6025      	str	r5, [r4, #0]
 8006ad0:	bf18      	it	ne
 8006ad2:	6059      	strne	r1, [r3, #4]
 8006ad4:	6863      	ldr	r3, [r4, #4]
 8006ad6:	bf08      	it	eq
 8006ad8:	f8c8 1000 	streq.w	r1, [r8]
 8006adc:	5162      	str	r2, [r4, r5]
 8006ade:	604b      	str	r3, [r1, #4]
 8006ae0:	4638      	mov	r0, r7
 8006ae2:	f104 060b 	add.w	r6, r4, #11
 8006ae6:	f000 f829 	bl	8006b3c <__malloc_unlock>
 8006aea:	f026 0607 	bic.w	r6, r6, #7
 8006aee:	1d23      	adds	r3, r4, #4
 8006af0:	1af2      	subs	r2, r6, r3
 8006af2:	d0ae      	beq.n	8006a52 <_malloc_r+0x22>
 8006af4:	1b9b      	subs	r3, r3, r6
 8006af6:	50a3      	str	r3, [r4, r2]
 8006af8:	e7ab      	b.n	8006a52 <_malloc_r+0x22>
 8006afa:	42a3      	cmp	r3, r4
 8006afc:	6862      	ldr	r2, [r4, #4]
 8006afe:	d1dd      	bne.n	8006abc <_malloc_r+0x8c>
 8006b00:	f8c8 2000 	str.w	r2, [r8]
 8006b04:	e7ec      	b.n	8006ae0 <_malloc_r+0xb0>
 8006b06:	4623      	mov	r3, r4
 8006b08:	6864      	ldr	r4, [r4, #4]
 8006b0a:	e7ac      	b.n	8006a66 <_malloc_r+0x36>
 8006b0c:	4634      	mov	r4, r6
 8006b0e:	6876      	ldr	r6, [r6, #4]
 8006b10:	e7b4      	b.n	8006a7c <_malloc_r+0x4c>
 8006b12:	4613      	mov	r3, r2
 8006b14:	e7cc      	b.n	8006ab0 <_malloc_r+0x80>
 8006b16:	230c      	movs	r3, #12
 8006b18:	4638      	mov	r0, r7
 8006b1a:	603b      	str	r3, [r7, #0]
 8006b1c:	f000 f80e 	bl	8006b3c <__malloc_unlock>
 8006b20:	e797      	b.n	8006a52 <_malloc_r+0x22>
 8006b22:	6025      	str	r5, [r4, #0]
 8006b24:	e7dc      	b.n	8006ae0 <_malloc_r+0xb0>
 8006b26:	605b      	str	r3, [r3, #4]
 8006b28:	deff      	udf	#255	; 0xff
 8006b2a:	bf00      	nop
 8006b2c:	20000454 	.word	0x20000454

08006b30 <__malloc_lock>:
 8006b30:	4801      	ldr	r0, [pc, #4]	; (8006b38 <__malloc_lock+0x8>)
 8006b32:	f7ff b88e 	b.w	8005c52 <__retarget_lock_acquire_recursive>
 8006b36:	bf00      	nop
 8006b38:	20000450 	.word	0x20000450

08006b3c <__malloc_unlock>:
 8006b3c:	4801      	ldr	r0, [pc, #4]	; (8006b44 <__malloc_unlock+0x8>)
 8006b3e:	f7ff b889 	b.w	8005c54 <__retarget_lock_release_recursive>
 8006b42:	bf00      	nop
 8006b44:	20000450 	.word	0x20000450

08006b48 <_Balloc>:
 8006b48:	b570      	push	{r4, r5, r6, lr}
 8006b4a:	69c6      	ldr	r6, [r0, #28]
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	460d      	mov	r5, r1
 8006b50:	b976      	cbnz	r6, 8006b70 <_Balloc+0x28>
 8006b52:	2010      	movs	r0, #16
 8006b54:	f7ff ff44 	bl	80069e0 <malloc>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	61e0      	str	r0, [r4, #28]
 8006b5c:	b920      	cbnz	r0, 8006b68 <_Balloc+0x20>
 8006b5e:	216b      	movs	r1, #107	; 0x6b
 8006b60:	4b17      	ldr	r3, [pc, #92]	; (8006bc0 <_Balloc+0x78>)
 8006b62:	4818      	ldr	r0, [pc, #96]	; (8006bc4 <_Balloc+0x7c>)
 8006b64:	f000 fdf6 	bl	8007754 <__assert_func>
 8006b68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b6c:	6006      	str	r6, [r0, #0]
 8006b6e:	60c6      	str	r6, [r0, #12]
 8006b70:	69e6      	ldr	r6, [r4, #28]
 8006b72:	68f3      	ldr	r3, [r6, #12]
 8006b74:	b183      	cbz	r3, 8006b98 <_Balloc+0x50>
 8006b76:	69e3      	ldr	r3, [r4, #28]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b7e:	b9b8      	cbnz	r0, 8006bb0 <_Balloc+0x68>
 8006b80:	2101      	movs	r1, #1
 8006b82:	fa01 f605 	lsl.w	r6, r1, r5
 8006b86:	1d72      	adds	r2, r6, #5
 8006b88:	4620      	mov	r0, r4
 8006b8a:	0092      	lsls	r2, r2, #2
 8006b8c:	f000 fe00 	bl	8007790 <_calloc_r>
 8006b90:	b160      	cbz	r0, 8006bac <_Balloc+0x64>
 8006b92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b96:	e00e      	b.n	8006bb6 <_Balloc+0x6e>
 8006b98:	2221      	movs	r2, #33	; 0x21
 8006b9a:	2104      	movs	r1, #4
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 fdf7 	bl	8007790 <_calloc_r>
 8006ba2:	69e3      	ldr	r3, [r4, #28]
 8006ba4:	60f0      	str	r0, [r6, #12]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e4      	bne.n	8006b76 <_Balloc+0x2e>
 8006bac:	2000      	movs	r0, #0
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	6802      	ldr	r2, [r0, #0]
 8006bb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bbc:	e7f7      	b.n	8006bae <_Balloc+0x66>
 8006bbe:	bf00      	nop
 8006bc0:	08007a8f 	.word	0x08007a8f
 8006bc4:	08007b0f 	.word	0x08007b0f

08006bc8 <_Bfree>:
 8006bc8:	b570      	push	{r4, r5, r6, lr}
 8006bca:	69c6      	ldr	r6, [r0, #28]
 8006bcc:	4605      	mov	r5, r0
 8006bce:	460c      	mov	r4, r1
 8006bd0:	b976      	cbnz	r6, 8006bf0 <_Bfree+0x28>
 8006bd2:	2010      	movs	r0, #16
 8006bd4:	f7ff ff04 	bl	80069e0 <malloc>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	61e8      	str	r0, [r5, #28]
 8006bdc:	b920      	cbnz	r0, 8006be8 <_Bfree+0x20>
 8006bde:	218f      	movs	r1, #143	; 0x8f
 8006be0:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <_Bfree+0x3c>)
 8006be2:	4809      	ldr	r0, [pc, #36]	; (8006c08 <_Bfree+0x40>)
 8006be4:	f000 fdb6 	bl	8007754 <__assert_func>
 8006be8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bec:	6006      	str	r6, [r0, #0]
 8006bee:	60c6      	str	r6, [r0, #12]
 8006bf0:	b13c      	cbz	r4, 8006c02 <_Bfree+0x3a>
 8006bf2:	69eb      	ldr	r3, [r5, #28]
 8006bf4:	6862      	ldr	r2, [r4, #4]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bfc:	6021      	str	r1, [r4, #0]
 8006bfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c02:	bd70      	pop	{r4, r5, r6, pc}
 8006c04:	08007a8f 	.word	0x08007a8f
 8006c08:	08007b0f 	.word	0x08007b0f

08006c0c <__multadd>:
 8006c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c10:	4607      	mov	r7, r0
 8006c12:	460c      	mov	r4, r1
 8006c14:	461e      	mov	r6, r3
 8006c16:	2000      	movs	r0, #0
 8006c18:	690d      	ldr	r5, [r1, #16]
 8006c1a:	f101 0c14 	add.w	ip, r1, #20
 8006c1e:	f8dc 3000 	ldr.w	r3, [ip]
 8006c22:	3001      	adds	r0, #1
 8006c24:	b299      	uxth	r1, r3
 8006c26:	fb02 6101 	mla	r1, r2, r1, r6
 8006c2a:	0c1e      	lsrs	r6, r3, #16
 8006c2c:	0c0b      	lsrs	r3, r1, #16
 8006c2e:	fb02 3306 	mla	r3, r2, r6, r3
 8006c32:	b289      	uxth	r1, r1
 8006c34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c38:	4285      	cmp	r5, r0
 8006c3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c3e:	f84c 1b04 	str.w	r1, [ip], #4
 8006c42:	dcec      	bgt.n	8006c1e <__multadd+0x12>
 8006c44:	b30e      	cbz	r6, 8006c8a <__multadd+0x7e>
 8006c46:	68a3      	ldr	r3, [r4, #8]
 8006c48:	42ab      	cmp	r3, r5
 8006c4a:	dc19      	bgt.n	8006c80 <__multadd+0x74>
 8006c4c:	6861      	ldr	r1, [r4, #4]
 8006c4e:	4638      	mov	r0, r7
 8006c50:	3101      	adds	r1, #1
 8006c52:	f7ff ff79 	bl	8006b48 <_Balloc>
 8006c56:	4680      	mov	r8, r0
 8006c58:	b928      	cbnz	r0, 8006c66 <__multadd+0x5a>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	21ba      	movs	r1, #186	; 0xba
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <__multadd+0x84>)
 8006c60:	480c      	ldr	r0, [pc, #48]	; (8006c94 <__multadd+0x88>)
 8006c62:	f000 fd77 	bl	8007754 <__assert_func>
 8006c66:	6922      	ldr	r2, [r4, #16]
 8006c68:	f104 010c 	add.w	r1, r4, #12
 8006c6c:	3202      	adds	r2, #2
 8006c6e:	0092      	lsls	r2, r2, #2
 8006c70:	300c      	adds	r0, #12
 8006c72:	f000 fd61 	bl	8007738 <memcpy>
 8006c76:	4621      	mov	r1, r4
 8006c78:	4638      	mov	r0, r7
 8006c7a:	f7ff ffa5 	bl	8006bc8 <_Bfree>
 8006c7e:	4644      	mov	r4, r8
 8006c80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c84:	3501      	adds	r5, #1
 8006c86:	615e      	str	r6, [r3, #20]
 8006c88:	6125      	str	r5, [r4, #16]
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c90:	08007afe 	.word	0x08007afe
 8006c94:	08007b0f 	.word	0x08007b0f

08006c98 <__hi0bits>:
 8006c98:	0c02      	lsrs	r2, r0, #16
 8006c9a:	0412      	lsls	r2, r2, #16
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	b9ca      	cbnz	r2, 8006cd4 <__hi0bits+0x3c>
 8006ca0:	0403      	lsls	r3, r0, #16
 8006ca2:	2010      	movs	r0, #16
 8006ca4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006ca8:	bf04      	itt	eq
 8006caa:	021b      	lsleq	r3, r3, #8
 8006cac:	3008      	addeq	r0, #8
 8006cae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006cb2:	bf04      	itt	eq
 8006cb4:	011b      	lsleq	r3, r3, #4
 8006cb6:	3004      	addeq	r0, #4
 8006cb8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006cbc:	bf04      	itt	eq
 8006cbe:	009b      	lsleq	r3, r3, #2
 8006cc0:	3002      	addeq	r0, #2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	db05      	blt.n	8006cd2 <__hi0bits+0x3a>
 8006cc6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006cca:	f100 0001 	add.w	r0, r0, #1
 8006cce:	bf08      	it	eq
 8006cd0:	2020      	moveq	r0, #32
 8006cd2:	4770      	bx	lr
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	e7e5      	b.n	8006ca4 <__hi0bits+0xc>

08006cd8 <__lo0bits>:
 8006cd8:	6803      	ldr	r3, [r0, #0]
 8006cda:	4602      	mov	r2, r0
 8006cdc:	f013 0007 	ands.w	r0, r3, #7
 8006ce0:	d00b      	beq.n	8006cfa <__lo0bits+0x22>
 8006ce2:	07d9      	lsls	r1, r3, #31
 8006ce4:	d421      	bmi.n	8006d2a <__lo0bits+0x52>
 8006ce6:	0798      	lsls	r0, r3, #30
 8006ce8:	bf49      	itett	mi
 8006cea:	085b      	lsrmi	r3, r3, #1
 8006cec:	089b      	lsrpl	r3, r3, #2
 8006cee:	2001      	movmi	r0, #1
 8006cf0:	6013      	strmi	r3, [r2, #0]
 8006cf2:	bf5c      	itt	pl
 8006cf4:	2002      	movpl	r0, #2
 8006cf6:	6013      	strpl	r3, [r2, #0]
 8006cf8:	4770      	bx	lr
 8006cfa:	b299      	uxth	r1, r3
 8006cfc:	b909      	cbnz	r1, 8006d02 <__lo0bits+0x2a>
 8006cfe:	2010      	movs	r0, #16
 8006d00:	0c1b      	lsrs	r3, r3, #16
 8006d02:	b2d9      	uxtb	r1, r3
 8006d04:	b909      	cbnz	r1, 8006d0a <__lo0bits+0x32>
 8006d06:	3008      	adds	r0, #8
 8006d08:	0a1b      	lsrs	r3, r3, #8
 8006d0a:	0719      	lsls	r1, r3, #28
 8006d0c:	bf04      	itt	eq
 8006d0e:	091b      	lsreq	r3, r3, #4
 8006d10:	3004      	addeq	r0, #4
 8006d12:	0799      	lsls	r1, r3, #30
 8006d14:	bf04      	itt	eq
 8006d16:	089b      	lsreq	r3, r3, #2
 8006d18:	3002      	addeq	r0, #2
 8006d1a:	07d9      	lsls	r1, r3, #31
 8006d1c:	d403      	bmi.n	8006d26 <__lo0bits+0x4e>
 8006d1e:	085b      	lsrs	r3, r3, #1
 8006d20:	f100 0001 	add.w	r0, r0, #1
 8006d24:	d003      	beq.n	8006d2e <__lo0bits+0x56>
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	4770      	bx	lr
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	4770      	bx	lr
 8006d2e:	2020      	movs	r0, #32
 8006d30:	4770      	bx	lr
	...

08006d34 <__i2b>:
 8006d34:	b510      	push	{r4, lr}
 8006d36:	460c      	mov	r4, r1
 8006d38:	2101      	movs	r1, #1
 8006d3a:	f7ff ff05 	bl	8006b48 <_Balloc>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	b928      	cbnz	r0, 8006d4e <__i2b+0x1a>
 8006d42:	f240 1145 	movw	r1, #325	; 0x145
 8006d46:	4b04      	ldr	r3, [pc, #16]	; (8006d58 <__i2b+0x24>)
 8006d48:	4804      	ldr	r0, [pc, #16]	; (8006d5c <__i2b+0x28>)
 8006d4a:	f000 fd03 	bl	8007754 <__assert_func>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	6144      	str	r4, [r0, #20]
 8006d52:	6103      	str	r3, [r0, #16]
 8006d54:	bd10      	pop	{r4, pc}
 8006d56:	bf00      	nop
 8006d58:	08007afe 	.word	0x08007afe
 8006d5c:	08007b0f 	.word	0x08007b0f

08006d60 <__multiply>:
 8006d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	4691      	mov	r9, r2
 8006d66:	690a      	ldr	r2, [r1, #16]
 8006d68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d6c:	460c      	mov	r4, r1
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	bfbe      	ittt	lt
 8006d72:	460b      	movlt	r3, r1
 8006d74:	464c      	movlt	r4, r9
 8006d76:	4699      	movlt	r9, r3
 8006d78:	6927      	ldr	r7, [r4, #16]
 8006d7a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d7e:	68a3      	ldr	r3, [r4, #8]
 8006d80:	6861      	ldr	r1, [r4, #4]
 8006d82:	eb07 060a 	add.w	r6, r7, sl
 8006d86:	42b3      	cmp	r3, r6
 8006d88:	b085      	sub	sp, #20
 8006d8a:	bfb8      	it	lt
 8006d8c:	3101      	addlt	r1, #1
 8006d8e:	f7ff fedb 	bl	8006b48 <_Balloc>
 8006d92:	b930      	cbnz	r0, 8006da2 <__multiply+0x42>
 8006d94:	4602      	mov	r2, r0
 8006d96:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006d9a:	4b43      	ldr	r3, [pc, #268]	; (8006ea8 <__multiply+0x148>)
 8006d9c:	4843      	ldr	r0, [pc, #268]	; (8006eac <__multiply+0x14c>)
 8006d9e:	f000 fcd9 	bl	8007754 <__assert_func>
 8006da2:	f100 0514 	add.w	r5, r0, #20
 8006da6:	462b      	mov	r3, r5
 8006da8:	2200      	movs	r2, #0
 8006daa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006dae:	4543      	cmp	r3, r8
 8006db0:	d321      	bcc.n	8006df6 <__multiply+0x96>
 8006db2:	f104 0314 	add.w	r3, r4, #20
 8006db6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006dba:	f109 0314 	add.w	r3, r9, #20
 8006dbe:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006dc2:	9202      	str	r2, [sp, #8]
 8006dc4:	1b3a      	subs	r2, r7, r4
 8006dc6:	3a15      	subs	r2, #21
 8006dc8:	f022 0203 	bic.w	r2, r2, #3
 8006dcc:	3204      	adds	r2, #4
 8006dce:	f104 0115 	add.w	r1, r4, #21
 8006dd2:	428f      	cmp	r7, r1
 8006dd4:	bf38      	it	cc
 8006dd6:	2204      	movcc	r2, #4
 8006dd8:	9201      	str	r2, [sp, #4]
 8006dda:	9a02      	ldr	r2, [sp, #8]
 8006ddc:	9303      	str	r3, [sp, #12]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d80c      	bhi.n	8006dfc <__multiply+0x9c>
 8006de2:	2e00      	cmp	r6, #0
 8006de4:	dd03      	ble.n	8006dee <__multiply+0x8e>
 8006de6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d05a      	beq.n	8006ea4 <__multiply+0x144>
 8006dee:	6106      	str	r6, [r0, #16]
 8006df0:	b005      	add	sp, #20
 8006df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df6:	f843 2b04 	str.w	r2, [r3], #4
 8006dfa:	e7d8      	b.n	8006dae <__multiply+0x4e>
 8006dfc:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e00:	f1ba 0f00 	cmp.w	sl, #0
 8006e04:	d023      	beq.n	8006e4e <__multiply+0xee>
 8006e06:	46a9      	mov	r9, r5
 8006e08:	f04f 0c00 	mov.w	ip, #0
 8006e0c:	f104 0e14 	add.w	lr, r4, #20
 8006e10:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e14:	f8d9 1000 	ldr.w	r1, [r9]
 8006e18:	fa1f fb82 	uxth.w	fp, r2
 8006e1c:	b289      	uxth	r1, r1
 8006e1e:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e22:	4461      	add	r1, ip
 8006e24:	f8d9 c000 	ldr.w	ip, [r9]
 8006e28:	0c12      	lsrs	r2, r2, #16
 8006e2a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006e2e:	fb0a c202 	mla	r2, sl, r2, ip
 8006e32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e36:	b289      	uxth	r1, r1
 8006e38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e3c:	4577      	cmp	r7, lr
 8006e3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e42:	f849 1b04 	str.w	r1, [r9], #4
 8006e46:	d8e3      	bhi.n	8006e10 <__multiply+0xb0>
 8006e48:	9a01      	ldr	r2, [sp, #4]
 8006e4a:	f845 c002 	str.w	ip, [r5, r2]
 8006e4e:	9a03      	ldr	r2, [sp, #12]
 8006e50:	3304      	adds	r3, #4
 8006e52:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e56:	f1b9 0f00 	cmp.w	r9, #0
 8006e5a:	d021      	beq.n	8006ea0 <__multiply+0x140>
 8006e5c:	46ae      	mov	lr, r5
 8006e5e:	f04f 0a00 	mov.w	sl, #0
 8006e62:	6829      	ldr	r1, [r5, #0]
 8006e64:	f104 0c14 	add.w	ip, r4, #20
 8006e68:	f8bc b000 	ldrh.w	fp, [ip]
 8006e6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006e70:	b289      	uxth	r1, r1
 8006e72:	fb09 220b 	mla	r2, r9, fp, r2
 8006e76:	4452      	add	r2, sl
 8006e78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e7c:	f84e 1b04 	str.w	r1, [lr], #4
 8006e80:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006e84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e88:	f8be 1000 	ldrh.w	r1, [lr]
 8006e8c:	4567      	cmp	r7, ip
 8006e8e:	fb09 110a 	mla	r1, r9, sl, r1
 8006e92:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006e96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e9a:	d8e5      	bhi.n	8006e68 <__multiply+0x108>
 8006e9c:	9a01      	ldr	r2, [sp, #4]
 8006e9e:	50a9      	str	r1, [r5, r2]
 8006ea0:	3504      	adds	r5, #4
 8006ea2:	e79a      	b.n	8006dda <__multiply+0x7a>
 8006ea4:	3e01      	subs	r6, #1
 8006ea6:	e79c      	b.n	8006de2 <__multiply+0x82>
 8006ea8:	08007afe 	.word	0x08007afe
 8006eac:	08007b0f 	.word	0x08007b0f

08006eb0 <__pow5mult>:
 8006eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb4:	4615      	mov	r5, r2
 8006eb6:	f012 0203 	ands.w	r2, r2, #3
 8006eba:	4606      	mov	r6, r0
 8006ebc:	460f      	mov	r7, r1
 8006ebe:	d007      	beq.n	8006ed0 <__pow5mult+0x20>
 8006ec0:	4c25      	ldr	r4, [pc, #148]	; (8006f58 <__pow5mult+0xa8>)
 8006ec2:	3a01      	subs	r2, #1
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006eca:	f7ff fe9f 	bl	8006c0c <__multadd>
 8006ece:	4607      	mov	r7, r0
 8006ed0:	10ad      	asrs	r5, r5, #2
 8006ed2:	d03d      	beq.n	8006f50 <__pow5mult+0xa0>
 8006ed4:	69f4      	ldr	r4, [r6, #28]
 8006ed6:	b97c      	cbnz	r4, 8006ef8 <__pow5mult+0x48>
 8006ed8:	2010      	movs	r0, #16
 8006eda:	f7ff fd81 	bl	80069e0 <malloc>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	61f0      	str	r0, [r6, #28]
 8006ee2:	b928      	cbnz	r0, 8006ef0 <__pow5mult+0x40>
 8006ee4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006ee8:	4b1c      	ldr	r3, [pc, #112]	; (8006f5c <__pow5mult+0xac>)
 8006eea:	481d      	ldr	r0, [pc, #116]	; (8006f60 <__pow5mult+0xb0>)
 8006eec:	f000 fc32 	bl	8007754 <__assert_func>
 8006ef0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ef4:	6004      	str	r4, [r0, #0]
 8006ef6:	60c4      	str	r4, [r0, #12]
 8006ef8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006efc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f00:	b94c      	cbnz	r4, 8006f16 <__pow5mult+0x66>
 8006f02:	f240 2171 	movw	r1, #625	; 0x271
 8006f06:	4630      	mov	r0, r6
 8006f08:	f7ff ff14 	bl	8006d34 <__i2b>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	4604      	mov	r4, r0
 8006f10:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f14:	6003      	str	r3, [r0, #0]
 8006f16:	f04f 0900 	mov.w	r9, #0
 8006f1a:	07eb      	lsls	r3, r5, #31
 8006f1c:	d50a      	bpl.n	8006f34 <__pow5mult+0x84>
 8006f1e:	4639      	mov	r1, r7
 8006f20:	4622      	mov	r2, r4
 8006f22:	4630      	mov	r0, r6
 8006f24:	f7ff ff1c 	bl	8006d60 <__multiply>
 8006f28:	4680      	mov	r8, r0
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f7ff fe4b 	bl	8006bc8 <_Bfree>
 8006f32:	4647      	mov	r7, r8
 8006f34:	106d      	asrs	r5, r5, #1
 8006f36:	d00b      	beq.n	8006f50 <__pow5mult+0xa0>
 8006f38:	6820      	ldr	r0, [r4, #0]
 8006f3a:	b938      	cbnz	r0, 8006f4c <__pow5mult+0x9c>
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	4621      	mov	r1, r4
 8006f40:	4630      	mov	r0, r6
 8006f42:	f7ff ff0d 	bl	8006d60 <__multiply>
 8006f46:	6020      	str	r0, [r4, #0]
 8006f48:	f8c0 9000 	str.w	r9, [r0]
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	e7e4      	b.n	8006f1a <__pow5mult+0x6a>
 8006f50:	4638      	mov	r0, r7
 8006f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f56:	bf00      	nop
 8006f58:	08007c58 	.word	0x08007c58
 8006f5c:	08007a8f 	.word	0x08007a8f
 8006f60:	08007b0f 	.word	0x08007b0f

08006f64 <__lshift>:
 8006f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f68:	460c      	mov	r4, r1
 8006f6a:	4607      	mov	r7, r0
 8006f6c:	4691      	mov	r9, r2
 8006f6e:	6923      	ldr	r3, [r4, #16]
 8006f70:	6849      	ldr	r1, [r1, #4]
 8006f72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f76:	68a3      	ldr	r3, [r4, #8]
 8006f78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f7c:	f108 0601 	add.w	r6, r8, #1
 8006f80:	42b3      	cmp	r3, r6
 8006f82:	db0b      	blt.n	8006f9c <__lshift+0x38>
 8006f84:	4638      	mov	r0, r7
 8006f86:	f7ff fddf 	bl	8006b48 <_Balloc>
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	b948      	cbnz	r0, 8006fa2 <__lshift+0x3e>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006f94:	4b27      	ldr	r3, [pc, #156]	; (8007034 <__lshift+0xd0>)
 8006f96:	4828      	ldr	r0, [pc, #160]	; (8007038 <__lshift+0xd4>)
 8006f98:	f000 fbdc 	bl	8007754 <__assert_func>
 8006f9c:	3101      	adds	r1, #1
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	e7ee      	b.n	8006f80 <__lshift+0x1c>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f100 0114 	add.w	r1, r0, #20
 8006fa8:	f100 0210 	add.w	r2, r0, #16
 8006fac:	4618      	mov	r0, r3
 8006fae:	4553      	cmp	r3, sl
 8006fb0:	db33      	blt.n	800701a <__lshift+0xb6>
 8006fb2:	6920      	ldr	r0, [r4, #16]
 8006fb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fb8:	f104 0314 	add.w	r3, r4, #20
 8006fbc:	f019 091f 	ands.w	r9, r9, #31
 8006fc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fc8:	d02b      	beq.n	8007022 <__lshift+0xbe>
 8006fca:	468a      	mov	sl, r1
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f1c9 0e20 	rsb	lr, r9, #32
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	fa00 f009 	lsl.w	r0, r0, r9
 8006fd8:	4310      	orrs	r0, r2
 8006fda:	f84a 0b04 	str.w	r0, [sl], #4
 8006fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe2:	459c      	cmp	ip, r3
 8006fe4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006fe8:	d8f3      	bhi.n	8006fd2 <__lshift+0x6e>
 8006fea:	ebac 0304 	sub.w	r3, ip, r4
 8006fee:	3b15      	subs	r3, #21
 8006ff0:	f023 0303 	bic.w	r3, r3, #3
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	f104 0015 	add.w	r0, r4, #21
 8006ffa:	4584      	cmp	ip, r0
 8006ffc:	bf38      	it	cc
 8006ffe:	2304      	movcc	r3, #4
 8007000:	50ca      	str	r2, [r1, r3]
 8007002:	b10a      	cbz	r2, 8007008 <__lshift+0xa4>
 8007004:	f108 0602 	add.w	r6, r8, #2
 8007008:	3e01      	subs	r6, #1
 800700a:	4638      	mov	r0, r7
 800700c:	4621      	mov	r1, r4
 800700e:	612e      	str	r6, [r5, #16]
 8007010:	f7ff fdda 	bl	8006bc8 <_Bfree>
 8007014:	4628      	mov	r0, r5
 8007016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800701a:	f842 0f04 	str.w	r0, [r2, #4]!
 800701e:	3301      	adds	r3, #1
 8007020:	e7c5      	b.n	8006fae <__lshift+0x4a>
 8007022:	3904      	subs	r1, #4
 8007024:	f853 2b04 	ldr.w	r2, [r3], #4
 8007028:	459c      	cmp	ip, r3
 800702a:	f841 2f04 	str.w	r2, [r1, #4]!
 800702e:	d8f9      	bhi.n	8007024 <__lshift+0xc0>
 8007030:	e7ea      	b.n	8007008 <__lshift+0xa4>
 8007032:	bf00      	nop
 8007034:	08007afe 	.word	0x08007afe
 8007038:	08007b0f 	.word	0x08007b0f

0800703c <__mcmp>:
 800703c:	4603      	mov	r3, r0
 800703e:	690a      	ldr	r2, [r1, #16]
 8007040:	6900      	ldr	r0, [r0, #16]
 8007042:	b530      	push	{r4, r5, lr}
 8007044:	1a80      	subs	r0, r0, r2
 8007046:	d10d      	bne.n	8007064 <__mcmp+0x28>
 8007048:	3314      	adds	r3, #20
 800704a:	3114      	adds	r1, #20
 800704c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007050:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007054:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007058:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800705c:	4295      	cmp	r5, r2
 800705e:	d002      	beq.n	8007066 <__mcmp+0x2a>
 8007060:	d304      	bcc.n	800706c <__mcmp+0x30>
 8007062:	2001      	movs	r0, #1
 8007064:	bd30      	pop	{r4, r5, pc}
 8007066:	42a3      	cmp	r3, r4
 8007068:	d3f4      	bcc.n	8007054 <__mcmp+0x18>
 800706a:	e7fb      	b.n	8007064 <__mcmp+0x28>
 800706c:	f04f 30ff 	mov.w	r0, #4294967295
 8007070:	e7f8      	b.n	8007064 <__mcmp+0x28>
	...

08007074 <__mdiff>:
 8007074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	460d      	mov	r5, r1
 800707a:	4607      	mov	r7, r0
 800707c:	4611      	mov	r1, r2
 800707e:	4628      	mov	r0, r5
 8007080:	4614      	mov	r4, r2
 8007082:	f7ff ffdb 	bl	800703c <__mcmp>
 8007086:	1e06      	subs	r6, r0, #0
 8007088:	d111      	bne.n	80070ae <__mdiff+0x3a>
 800708a:	4631      	mov	r1, r6
 800708c:	4638      	mov	r0, r7
 800708e:	f7ff fd5b 	bl	8006b48 <_Balloc>
 8007092:	4602      	mov	r2, r0
 8007094:	b928      	cbnz	r0, 80070a2 <__mdiff+0x2e>
 8007096:	f240 2137 	movw	r1, #567	; 0x237
 800709a:	4b3a      	ldr	r3, [pc, #232]	; (8007184 <__mdiff+0x110>)
 800709c:	483a      	ldr	r0, [pc, #232]	; (8007188 <__mdiff+0x114>)
 800709e:	f000 fb59 	bl	8007754 <__assert_func>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80070a8:	4610      	mov	r0, r2
 80070aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ae:	bfa4      	itt	ge
 80070b0:	4623      	movge	r3, r4
 80070b2:	462c      	movge	r4, r5
 80070b4:	4638      	mov	r0, r7
 80070b6:	6861      	ldr	r1, [r4, #4]
 80070b8:	bfa6      	itte	ge
 80070ba:	461d      	movge	r5, r3
 80070bc:	2600      	movge	r6, #0
 80070be:	2601      	movlt	r6, #1
 80070c0:	f7ff fd42 	bl	8006b48 <_Balloc>
 80070c4:	4602      	mov	r2, r0
 80070c6:	b918      	cbnz	r0, 80070d0 <__mdiff+0x5c>
 80070c8:	f240 2145 	movw	r1, #581	; 0x245
 80070cc:	4b2d      	ldr	r3, [pc, #180]	; (8007184 <__mdiff+0x110>)
 80070ce:	e7e5      	b.n	800709c <__mdiff+0x28>
 80070d0:	f102 0814 	add.w	r8, r2, #20
 80070d4:	46c2      	mov	sl, r8
 80070d6:	f04f 0c00 	mov.w	ip, #0
 80070da:	6927      	ldr	r7, [r4, #16]
 80070dc:	60c6      	str	r6, [r0, #12]
 80070de:	692e      	ldr	r6, [r5, #16]
 80070e0:	f104 0014 	add.w	r0, r4, #20
 80070e4:	f105 0914 	add.w	r9, r5, #20
 80070e8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80070ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80070f0:	3410      	adds	r4, #16
 80070f2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80070f6:	f859 3b04 	ldr.w	r3, [r9], #4
 80070fa:	fa1f f18b 	uxth.w	r1, fp
 80070fe:	4461      	add	r1, ip
 8007100:	fa1f fc83 	uxth.w	ip, r3
 8007104:	0c1b      	lsrs	r3, r3, #16
 8007106:	eba1 010c 	sub.w	r1, r1, ip
 800710a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800710e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007112:	b289      	uxth	r1, r1
 8007114:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007118:	454e      	cmp	r6, r9
 800711a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800711e:	f84a 1b04 	str.w	r1, [sl], #4
 8007122:	d8e6      	bhi.n	80070f2 <__mdiff+0x7e>
 8007124:	1b73      	subs	r3, r6, r5
 8007126:	3b15      	subs	r3, #21
 8007128:	f023 0303 	bic.w	r3, r3, #3
 800712c:	3515      	adds	r5, #21
 800712e:	3304      	adds	r3, #4
 8007130:	42ae      	cmp	r6, r5
 8007132:	bf38      	it	cc
 8007134:	2304      	movcc	r3, #4
 8007136:	4418      	add	r0, r3
 8007138:	4443      	add	r3, r8
 800713a:	461e      	mov	r6, r3
 800713c:	4605      	mov	r5, r0
 800713e:	4575      	cmp	r5, lr
 8007140:	d30e      	bcc.n	8007160 <__mdiff+0xec>
 8007142:	f10e 0103 	add.w	r1, lr, #3
 8007146:	1a09      	subs	r1, r1, r0
 8007148:	f021 0103 	bic.w	r1, r1, #3
 800714c:	3803      	subs	r0, #3
 800714e:	4586      	cmp	lr, r0
 8007150:	bf38      	it	cc
 8007152:	2100      	movcc	r1, #0
 8007154:	440b      	add	r3, r1
 8007156:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800715a:	b189      	cbz	r1, 8007180 <__mdiff+0x10c>
 800715c:	6117      	str	r7, [r2, #16]
 800715e:	e7a3      	b.n	80070a8 <__mdiff+0x34>
 8007160:	f855 8b04 	ldr.w	r8, [r5], #4
 8007164:	fa1f f188 	uxth.w	r1, r8
 8007168:	4461      	add	r1, ip
 800716a:	140c      	asrs	r4, r1, #16
 800716c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007170:	b289      	uxth	r1, r1
 8007172:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007176:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800717a:	f846 1b04 	str.w	r1, [r6], #4
 800717e:	e7de      	b.n	800713e <__mdiff+0xca>
 8007180:	3f01      	subs	r7, #1
 8007182:	e7e8      	b.n	8007156 <__mdiff+0xe2>
 8007184:	08007afe 	.word	0x08007afe
 8007188:	08007b0f 	.word	0x08007b0f

0800718c <__d2b>:
 800718c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800718e:	2101      	movs	r1, #1
 8007190:	4617      	mov	r7, r2
 8007192:	461c      	mov	r4, r3
 8007194:	9e08      	ldr	r6, [sp, #32]
 8007196:	f7ff fcd7 	bl	8006b48 <_Balloc>
 800719a:	4605      	mov	r5, r0
 800719c:	b930      	cbnz	r0, 80071ac <__d2b+0x20>
 800719e:	4602      	mov	r2, r0
 80071a0:	f240 310f 	movw	r1, #783	; 0x30f
 80071a4:	4b22      	ldr	r3, [pc, #136]	; (8007230 <__d2b+0xa4>)
 80071a6:	4823      	ldr	r0, [pc, #140]	; (8007234 <__d2b+0xa8>)
 80071a8:	f000 fad4 	bl	8007754 <__assert_func>
 80071ac:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80071b0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80071b4:	bb24      	cbnz	r4, 8007200 <__d2b+0x74>
 80071b6:	2f00      	cmp	r7, #0
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	d026      	beq.n	800720a <__d2b+0x7e>
 80071bc:	4668      	mov	r0, sp
 80071be:	9700      	str	r7, [sp, #0]
 80071c0:	f7ff fd8a 	bl	8006cd8 <__lo0bits>
 80071c4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071c8:	b1e8      	cbz	r0, 8007206 <__d2b+0x7a>
 80071ca:	f1c0 0320 	rsb	r3, r0, #32
 80071ce:	fa02 f303 	lsl.w	r3, r2, r3
 80071d2:	430b      	orrs	r3, r1
 80071d4:	40c2      	lsrs	r2, r0
 80071d6:	616b      	str	r3, [r5, #20]
 80071d8:	9201      	str	r2, [sp, #4]
 80071da:	9b01      	ldr	r3, [sp, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	bf14      	ite	ne
 80071e0:	2102      	movne	r1, #2
 80071e2:	2101      	moveq	r1, #1
 80071e4:	61ab      	str	r3, [r5, #24]
 80071e6:	6129      	str	r1, [r5, #16]
 80071e8:	b1bc      	cbz	r4, 800721a <__d2b+0x8e>
 80071ea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80071ee:	4404      	add	r4, r0
 80071f0:	6034      	str	r4, [r6, #0]
 80071f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f8:	6018      	str	r0, [r3, #0]
 80071fa:	4628      	mov	r0, r5
 80071fc:	b003      	add	sp, #12
 80071fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007204:	e7d7      	b.n	80071b6 <__d2b+0x2a>
 8007206:	6169      	str	r1, [r5, #20]
 8007208:	e7e7      	b.n	80071da <__d2b+0x4e>
 800720a:	a801      	add	r0, sp, #4
 800720c:	f7ff fd64 	bl	8006cd8 <__lo0bits>
 8007210:	9b01      	ldr	r3, [sp, #4]
 8007212:	2101      	movs	r1, #1
 8007214:	616b      	str	r3, [r5, #20]
 8007216:	3020      	adds	r0, #32
 8007218:	e7e5      	b.n	80071e6 <__d2b+0x5a>
 800721a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800721e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007222:	6030      	str	r0, [r6, #0]
 8007224:	6918      	ldr	r0, [r3, #16]
 8007226:	f7ff fd37 	bl	8006c98 <__hi0bits>
 800722a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800722e:	e7e2      	b.n	80071f6 <__d2b+0x6a>
 8007230:	08007afe 	.word	0x08007afe
 8007234:	08007b0f 	.word	0x08007b0f

08007238 <__sfputc_r>:
 8007238:	6893      	ldr	r3, [r2, #8]
 800723a:	b410      	push	{r4}
 800723c:	3b01      	subs	r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	6093      	str	r3, [r2, #8]
 8007242:	da07      	bge.n	8007254 <__sfputc_r+0x1c>
 8007244:	6994      	ldr	r4, [r2, #24]
 8007246:	42a3      	cmp	r3, r4
 8007248:	db01      	blt.n	800724e <__sfputc_r+0x16>
 800724a:	290a      	cmp	r1, #10
 800724c:	d102      	bne.n	8007254 <__sfputc_r+0x1c>
 800724e:	bc10      	pop	{r4}
 8007250:	f7fe bbed 	b.w	8005a2e <__swbuf_r>
 8007254:	6813      	ldr	r3, [r2, #0]
 8007256:	1c58      	adds	r0, r3, #1
 8007258:	6010      	str	r0, [r2, #0]
 800725a:	7019      	strb	r1, [r3, #0]
 800725c:	4608      	mov	r0, r1
 800725e:	bc10      	pop	{r4}
 8007260:	4770      	bx	lr

08007262 <__sfputs_r>:
 8007262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007264:	4606      	mov	r6, r0
 8007266:	460f      	mov	r7, r1
 8007268:	4614      	mov	r4, r2
 800726a:	18d5      	adds	r5, r2, r3
 800726c:	42ac      	cmp	r4, r5
 800726e:	d101      	bne.n	8007274 <__sfputs_r+0x12>
 8007270:	2000      	movs	r0, #0
 8007272:	e007      	b.n	8007284 <__sfputs_r+0x22>
 8007274:	463a      	mov	r2, r7
 8007276:	4630      	mov	r0, r6
 8007278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727c:	f7ff ffdc 	bl	8007238 <__sfputc_r>
 8007280:	1c43      	adds	r3, r0, #1
 8007282:	d1f3      	bne.n	800726c <__sfputs_r+0xa>
 8007284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007288 <_vfiprintf_r>:
 8007288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728c:	460d      	mov	r5, r1
 800728e:	4614      	mov	r4, r2
 8007290:	4698      	mov	r8, r3
 8007292:	4606      	mov	r6, r0
 8007294:	b09d      	sub	sp, #116	; 0x74
 8007296:	b118      	cbz	r0, 80072a0 <_vfiprintf_r+0x18>
 8007298:	6a03      	ldr	r3, [r0, #32]
 800729a:	b90b      	cbnz	r3, 80072a0 <_vfiprintf_r+0x18>
 800729c:	f7fe fae0 	bl	8005860 <__sinit>
 80072a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072a2:	07d9      	lsls	r1, r3, #31
 80072a4:	d405      	bmi.n	80072b2 <_vfiprintf_r+0x2a>
 80072a6:	89ab      	ldrh	r3, [r5, #12]
 80072a8:	059a      	lsls	r2, r3, #22
 80072aa:	d402      	bmi.n	80072b2 <_vfiprintf_r+0x2a>
 80072ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072ae:	f7fe fcd0 	bl	8005c52 <__retarget_lock_acquire_recursive>
 80072b2:	89ab      	ldrh	r3, [r5, #12]
 80072b4:	071b      	lsls	r3, r3, #28
 80072b6:	d501      	bpl.n	80072bc <_vfiprintf_r+0x34>
 80072b8:	692b      	ldr	r3, [r5, #16]
 80072ba:	b99b      	cbnz	r3, 80072e4 <_vfiprintf_r+0x5c>
 80072bc:	4629      	mov	r1, r5
 80072be:	4630      	mov	r0, r6
 80072c0:	f7fe fbf2 	bl	8005aa8 <__swsetup_r>
 80072c4:	b170      	cbz	r0, 80072e4 <_vfiprintf_r+0x5c>
 80072c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072c8:	07dc      	lsls	r4, r3, #31
 80072ca:	d504      	bpl.n	80072d6 <_vfiprintf_r+0x4e>
 80072cc:	f04f 30ff 	mov.w	r0, #4294967295
 80072d0:	b01d      	add	sp, #116	; 0x74
 80072d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d6:	89ab      	ldrh	r3, [r5, #12]
 80072d8:	0598      	lsls	r0, r3, #22
 80072da:	d4f7      	bmi.n	80072cc <_vfiprintf_r+0x44>
 80072dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072de:	f7fe fcb9 	bl	8005c54 <__retarget_lock_release_recursive>
 80072e2:	e7f3      	b.n	80072cc <_vfiprintf_r+0x44>
 80072e4:	2300      	movs	r3, #0
 80072e6:	9309      	str	r3, [sp, #36]	; 0x24
 80072e8:	2320      	movs	r3, #32
 80072ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072ee:	2330      	movs	r3, #48	; 0x30
 80072f0:	f04f 0901 	mov.w	r9, #1
 80072f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80072f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80074a8 <_vfiprintf_r+0x220>
 80072fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007300:	4623      	mov	r3, r4
 8007302:	469a      	mov	sl, r3
 8007304:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007308:	b10a      	cbz	r2, 800730e <_vfiprintf_r+0x86>
 800730a:	2a25      	cmp	r2, #37	; 0x25
 800730c:	d1f9      	bne.n	8007302 <_vfiprintf_r+0x7a>
 800730e:	ebba 0b04 	subs.w	fp, sl, r4
 8007312:	d00b      	beq.n	800732c <_vfiprintf_r+0xa4>
 8007314:	465b      	mov	r3, fp
 8007316:	4622      	mov	r2, r4
 8007318:	4629      	mov	r1, r5
 800731a:	4630      	mov	r0, r6
 800731c:	f7ff ffa1 	bl	8007262 <__sfputs_r>
 8007320:	3001      	adds	r0, #1
 8007322:	f000 80a9 	beq.w	8007478 <_vfiprintf_r+0x1f0>
 8007326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007328:	445a      	add	r2, fp
 800732a:	9209      	str	r2, [sp, #36]	; 0x24
 800732c:	f89a 3000 	ldrb.w	r3, [sl]
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 80a1 	beq.w	8007478 <_vfiprintf_r+0x1f0>
 8007336:	2300      	movs	r3, #0
 8007338:	f04f 32ff 	mov.w	r2, #4294967295
 800733c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007340:	f10a 0a01 	add.w	sl, sl, #1
 8007344:	9304      	str	r3, [sp, #16]
 8007346:	9307      	str	r3, [sp, #28]
 8007348:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800734c:	931a      	str	r3, [sp, #104]	; 0x68
 800734e:	4654      	mov	r4, sl
 8007350:	2205      	movs	r2, #5
 8007352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007356:	4854      	ldr	r0, [pc, #336]	; (80074a8 <_vfiprintf_r+0x220>)
 8007358:	f7fe fc7d 	bl	8005c56 <memchr>
 800735c:	9a04      	ldr	r2, [sp, #16]
 800735e:	b9d8      	cbnz	r0, 8007398 <_vfiprintf_r+0x110>
 8007360:	06d1      	lsls	r1, r2, #27
 8007362:	bf44      	itt	mi
 8007364:	2320      	movmi	r3, #32
 8007366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800736a:	0713      	lsls	r3, r2, #28
 800736c:	bf44      	itt	mi
 800736e:	232b      	movmi	r3, #43	; 0x2b
 8007370:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007374:	f89a 3000 	ldrb.w	r3, [sl]
 8007378:	2b2a      	cmp	r3, #42	; 0x2a
 800737a:	d015      	beq.n	80073a8 <_vfiprintf_r+0x120>
 800737c:	4654      	mov	r4, sl
 800737e:	2000      	movs	r0, #0
 8007380:	f04f 0c0a 	mov.w	ip, #10
 8007384:	9a07      	ldr	r2, [sp, #28]
 8007386:	4621      	mov	r1, r4
 8007388:	f811 3b01 	ldrb.w	r3, [r1], #1
 800738c:	3b30      	subs	r3, #48	; 0x30
 800738e:	2b09      	cmp	r3, #9
 8007390:	d94d      	bls.n	800742e <_vfiprintf_r+0x1a6>
 8007392:	b1b0      	cbz	r0, 80073c2 <_vfiprintf_r+0x13a>
 8007394:	9207      	str	r2, [sp, #28]
 8007396:	e014      	b.n	80073c2 <_vfiprintf_r+0x13a>
 8007398:	eba0 0308 	sub.w	r3, r0, r8
 800739c:	fa09 f303 	lsl.w	r3, r9, r3
 80073a0:	4313      	orrs	r3, r2
 80073a2:	46a2      	mov	sl, r4
 80073a4:	9304      	str	r3, [sp, #16]
 80073a6:	e7d2      	b.n	800734e <_vfiprintf_r+0xc6>
 80073a8:	9b03      	ldr	r3, [sp, #12]
 80073aa:	1d19      	adds	r1, r3, #4
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	9103      	str	r1, [sp, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	bfbb      	ittet	lt
 80073b4:	425b      	neglt	r3, r3
 80073b6:	f042 0202 	orrlt.w	r2, r2, #2
 80073ba:	9307      	strge	r3, [sp, #28]
 80073bc:	9307      	strlt	r3, [sp, #28]
 80073be:	bfb8      	it	lt
 80073c0:	9204      	strlt	r2, [sp, #16]
 80073c2:	7823      	ldrb	r3, [r4, #0]
 80073c4:	2b2e      	cmp	r3, #46	; 0x2e
 80073c6:	d10c      	bne.n	80073e2 <_vfiprintf_r+0x15a>
 80073c8:	7863      	ldrb	r3, [r4, #1]
 80073ca:	2b2a      	cmp	r3, #42	; 0x2a
 80073cc:	d134      	bne.n	8007438 <_vfiprintf_r+0x1b0>
 80073ce:	9b03      	ldr	r3, [sp, #12]
 80073d0:	3402      	adds	r4, #2
 80073d2:	1d1a      	adds	r2, r3, #4
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	9203      	str	r2, [sp, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bfb8      	it	lt
 80073dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80073e0:	9305      	str	r3, [sp, #20]
 80073e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80074ac <_vfiprintf_r+0x224>
 80073e6:	2203      	movs	r2, #3
 80073e8:	4650      	mov	r0, sl
 80073ea:	7821      	ldrb	r1, [r4, #0]
 80073ec:	f7fe fc33 	bl	8005c56 <memchr>
 80073f0:	b138      	cbz	r0, 8007402 <_vfiprintf_r+0x17a>
 80073f2:	2240      	movs	r2, #64	; 0x40
 80073f4:	9b04      	ldr	r3, [sp, #16]
 80073f6:	eba0 000a 	sub.w	r0, r0, sl
 80073fa:	4082      	lsls	r2, r0
 80073fc:	4313      	orrs	r3, r2
 80073fe:	3401      	adds	r4, #1
 8007400:	9304      	str	r3, [sp, #16]
 8007402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007406:	2206      	movs	r2, #6
 8007408:	4829      	ldr	r0, [pc, #164]	; (80074b0 <_vfiprintf_r+0x228>)
 800740a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800740e:	f7fe fc22 	bl	8005c56 <memchr>
 8007412:	2800      	cmp	r0, #0
 8007414:	d03f      	beq.n	8007496 <_vfiprintf_r+0x20e>
 8007416:	4b27      	ldr	r3, [pc, #156]	; (80074b4 <_vfiprintf_r+0x22c>)
 8007418:	bb1b      	cbnz	r3, 8007462 <_vfiprintf_r+0x1da>
 800741a:	9b03      	ldr	r3, [sp, #12]
 800741c:	3307      	adds	r3, #7
 800741e:	f023 0307 	bic.w	r3, r3, #7
 8007422:	3308      	adds	r3, #8
 8007424:	9303      	str	r3, [sp, #12]
 8007426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007428:	443b      	add	r3, r7
 800742a:	9309      	str	r3, [sp, #36]	; 0x24
 800742c:	e768      	b.n	8007300 <_vfiprintf_r+0x78>
 800742e:	460c      	mov	r4, r1
 8007430:	2001      	movs	r0, #1
 8007432:	fb0c 3202 	mla	r2, ip, r2, r3
 8007436:	e7a6      	b.n	8007386 <_vfiprintf_r+0xfe>
 8007438:	2300      	movs	r3, #0
 800743a:	f04f 0c0a 	mov.w	ip, #10
 800743e:	4619      	mov	r1, r3
 8007440:	3401      	adds	r4, #1
 8007442:	9305      	str	r3, [sp, #20]
 8007444:	4620      	mov	r0, r4
 8007446:	f810 2b01 	ldrb.w	r2, [r0], #1
 800744a:	3a30      	subs	r2, #48	; 0x30
 800744c:	2a09      	cmp	r2, #9
 800744e:	d903      	bls.n	8007458 <_vfiprintf_r+0x1d0>
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0c6      	beq.n	80073e2 <_vfiprintf_r+0x15a>
 8007454:	9105      	str	r1, [sp, #20]
 8007456:	e7c4      	b.n	80073e2 <_vfiprintf_r+0x15a>
 8007458:	4604      	mov	r4, r0
 800745a:	2301      	movs	r3, #1
 800745c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007460:	e7f0      	b.n	8007444 <_vfiprintf_r+0x1bc>
 8007462:	ab03      	add	r3, sp, #12
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	462a      	mov	r2, r5
 8007468:	4630      	mov	r0, r6
 800746a:	4b13      	ldr	r3, [pc, #76]	; (80074b8 <_vfiprintf_r+0x230>)
 800746c:	a904      	add	r1, sp, #16
 800746e:	f7fd fda9 	bl	8004fc4 <_printf_float>
 8007472:	4607      	mov	r7, r0
 8007474:	1c78      	adds	r0, r7, #1
 8007476:	d1d6      	bne.n	8007426 <_vfiprintf_r+0x19e>
 8007478:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800747a:	07d9      	lsls	r1, r3, #31
 800747c:	d405      	bmi.n	800748a <_vfiprintf_r+0x202>
 800747e:	89ab      	ldrh	r3, [r5, #12]
 8007480:	059a      	lsls	r2, r3, #22
 8007482:	d402      	bmi.n	800748a <_vfiprintf_r+0x202>
 8007484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007486:	f7fe fbe5 	bl	8005c54 <__retarget_lock_release_recursive>
 800748a:	89ab      	ldrh	r3, [r5, #12]
 800748c:	065b      	lsls	r3, r3, #25
 800748e:	f53f af1d 	bmi.w	80072cc <_vfiprintf_r+0x44>
 8007492:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007494:	e71c      	b.n	80072d0 <_vfiprintf_r+0x48>
 8007496:	ab03      	add	r3, sp, #12
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	462a      	mov	r2, r5
 800749c:	4630      	mov	r0, r6
 800749e:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <_vfiprintf_r+0x230>)
 80074a0:	a904      	add	r1, sp, #16
 80074a2:	f7fe f82f 	bl	8005504 <_printf_i>
 80074a6:	e7e4      	b.n	8007472 <_vfiprintf_r+0x1ea>
 80074a8:	08007c64 	.word	0x08007c64
 80074ac:	08007c6a 	.word	0x08007c6a
 80074b0:	08007c6e 	.word	0x08007c6e
 80074b4:	08004fc5 	.word	0x08004fc5
 80074b8:	08007263 	.word	0x08007263

080074bc <__sflush_r>:
 80074bc:	898a      	ldrh	r2, [r1, #12]
 80074be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c0:	4605      	mov	r5, r0
 80074c2:	0710      	lsls	r0, r2, #28
 80074c4:	460c      	mov	r4, r1
 80074c6:	d457      	bmi.n	8007578 <__sflush_r+0xbc>
 80074c8:	684b      	ldr	r3, [r1, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	dc04      	bgt.n	80074d8 <__sflush_r+0x1c>
 80074ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	dc01      	bgt.n	80074d8 <__sflush_r+0x1c>
 80074d4:	2000      	movs	r0, #0
 80074d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074da:	2e00      	cmp	r6, #0
 80074dc:	d0fa      	beq.n	80074d4 <__sflush_r+0x18>
 80074de:	2300      	movs	r3, #0
 80074e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074e4:	682f      	ldr	r7, [r5, #0]
 80074e6:	6a21      	ldr	r1, [r4, #32]
 80074e8:	602b      	str	r3, [r5, #0]
 80074ea:	d032      	beq.n	8007552 <__sflush_r+0x96>
 80074ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074ee:	89a3      	ldrh	r3, [r4, #12]
 80074f0:	075a      	lsls	r2, r3, #29
 80074f2:	d505      	bpl.n	8007500 <__sflush_r+0x44>
 80074f4:	6863      	ldr	r3, [r4, #4]
 80074f6:	1ac0      	subs	r0, r0, r3
 80074f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074fa:	b10b      	cbz	r3, 8007500 <__sflush_r+0x44>
 80074fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074fe:	1ac0      	subs	r0, r0, r3
 8007500:	2300      	movs	r3, #0
 8007502:	4602      	mov	r2, r0
 8007504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007506:	4628      	mov	r0, r5
 8007508:	6a21      	ldr	r1, [r4, #32]
 800750a:	47b0      	blx	r6
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	89a3      	ldrh	r3, [r4, #12]
 8007510:	d106      	bne.n	8007520 <__sflush_r+0x64>
 8007512:	6829      	ldr	r1, [r5, #0]
 8007514:	291d      	cmp	r1, #29
 8007516:	d82b      	bhi.n	8007570 <__sflush_r+0xb4>
 8007518:	4a28      	ldr	r2, [pc, #160]	; (80075bc <__sflush_r+0x100>)
 800751a:	410a      	asrs	r2, r1
 800751c:	07d6      	lsls	r6, r2, #31
 800751e:	d427      	bmi.n	8007570 <__sflush_r+0xb4>
 8007520:	2200      	movs	r2, #0
 8007522:	6062      	str	r2, [r4, #4]
 8007524:	6922      	ldr	r2, [r4, #16]
 8007526:	04d9      	lsls	r1, r3, #19
 8007528:	6022      	str	r2, [r4, #0]
 800752a:	d504      	bpl.n	8007536 <__sflush_r+0x7a>
 800752c:	1c42      	adds	r2, r0, #1
 800752e:	d101      	bne.n	8007534 <__sflush_r+0x78>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b903      	cbnz	r3, 8007536 <__sflush_r+0x7a>
 8007534:	6560      	str	r0, [r4, #84]	; 0x54
 8007536:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007538:	602f      	str	r7, [r5, #0]
 800753a:	2900      	cmp	r1, #0
 800753c:	d0ca      	beq.n	80074d4 <__sflush_r+0x18>
 800753e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007542:	4299      	cmp	r1, r3
 8007544:	d002      	beq.n	800754c <__sflush_r+0x90>
 8007546:	4628      	mov	r0, r5
 8007548:	f7ff fa02 	bl	8006950 <_free_r>
 800754c:	2000      	movs	r0, #0
 800754e:	6360      	str	r0, [r4, #52]	; 0x34
 8007550:	e7c1      	b.n	80074d6 <__sflush_r+0x1a>
 8007552:	2301      	movs	r3, #1
 8007554:	4628      	mov	r0, r5
 8007556:	47b0      	blx	r6
 8007558:	1c41      	adds	r1, r0, #1
 800755a:	d1c8      	bne.n	80074ee <__sflush_r+0x32>
 800755c:	682b      	ldr	r3, [r5, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0c5      	beq.n	80074ee <__sflush_r+0x32>
 8007562:	2b1d      	cmp	r3, #29
 8007564:	d001      	beq.n	800756a <__sflush_r+0xae>
 8007566:	2b16      	cmp	r3, #22
 8007568:	d101      	bne.n	800756e <__sflush_r+0xb2>
 800756a:	602f      	str	r7, [r5, #0]
 800756c:	e7b2      	b.n	80074d4 <__sflush_r+0x18>
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007574:	81a3      	strh	r3, [r4, #12]
 8007576:	e7ae      	b.n	80074d6 <__sflush_r+0x1a>
 8007578:	690f      	ldr	r7, [r1, #16]
 800757a:	2f00      	cmp	r7, #0
 800757c:	d0aa      	beq.n	80074d4 <__sflush_r+0x18>
 800757e:	0793      	lsls	r3, r2, #30
 8007580:	bf18      	it	ne
 8007582:	2300      	movne	r3, #0
 8007584:	680e      	ldr	r6, [r1, #0]
 8007586:	bf08      	it	eq
 8007588:	694b      	ldreq	r3, [r1, #20]
 800758a:	1bf6      	subs	r6, r6, r7
 800758c:	600f      	str	r7, [r1, #0]
 800758e:	608b      	str	r3, [r1, #8]
 8007590:	2e00      	cmp	r6, #0
 8007592:	dd9f      	ble.n	80074d4 <__sflush_r+0x18>
 8007594:	4633      	mov	r3, r6
 8007596:	463a      	mov	r2, r7
 8007598:	4628      	mov	r0, r5
 800759a:	6a21      	ldr	r1, [r4, #32]
 800759c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80075a0:	47e0      	blx	ip
 80075a2:	2800      	cmp	r0, #0
 80075a4:	dc06      	bgt.n	80075b4 <__sflush_r+0xf8>
 80075a6:	89a3      	ldrh	r3, [r4, #12]
 80075a8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075b0:	81a3      	strh	r3, [r4, #12]
 80075b2:	e790      	b.n	80074d6 <__sflush_r+0x1a>
 80075b4:	4407      	add	r7, r0
 80075b6:	1a36      	subs	r6, r6, r0
 80075b8:	e7ea      	b.n	8007590 <__sflush_r+0xd4>
 80075ba:	bf00      	nop
 80075bc:	dfbffffe 	.word	0xdfbffffe

080075c0 <_fflush_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	690b      	ldr	r3, [r1, #16]
 80075c4:	4605      	mov	r5, r0
 80075c6:	460c      	mov	r4, r1
 80075c8:	b913      	cbnz	r3, 80075d0 <_fflush_r+0x10>
 80075ca:	2500      	movs	r5, #0
 80075cc:	4628      	mov	r0, r5
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	b118      	cbz	r0, 80075da <_fflush_r+0x1a>
 80075d2:	6a03      	ldr	r3, [r0, #32]
 80075d4:	b90b      	cbnz	r3, 80075da <_fflush_r+0x1a>
 80075d6:	f7fe f943 	bl	8005860 <__sinit>
 80075da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0f3      	beq.n	80075ca <_fflush_r+0xa>
 80075e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075e4:	07d0      	lsls	r0, r2, #31
 80075e6:	d404      	bmi.n	80075f2 <_fflush_r+0x32>
 80075e8:	0599      	lsls	r1, r3, #22
 80075ea:	d402      	bmi.n	80075f2 <_fflush_r+0x32>
 80075ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ee:	f7fe fb30 	bl	8005c52 <__retarget_lock_acquire_recursive>
 80075f2:	4628      	mov	r0, r5
 80075f4:	4621      	mov	r1, r4
 80075f6:	f7ff ff61 	bl	80074bc <__sflush_r>
 80075fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075fc:	4605      	mov	r5, r0
 80075fe:	07da      	lsls	r2, r3, #31
 8007600:	d4e4      	bmi.n	80075cc <_fflush_r+0xc>
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	059b      	lsls	r3, r3, #22
 8007606:	d4e1      	bmi.n	80075cc <_fflush_r+0xc>
 8007608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800760a:	f7fe fb23 	bl	8005c54 <__retarget_lock_release_recursive>
 800760e:	e7dd      	b.n	80075cc <_fflush_r+0xc>

08007610 <__swhatbuf_r>:
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	460c      	mov	r4, r1
 8007614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007618:	4615      	mov	r5, r2
 800761a:	2900      	cmp	r1, #0
 800761c:	461e      	mov	r6, r3
 800761e:	b096      	sub	sp, #88	; 0x58
 8007620:	da0c      	bge.n	800763c <__swhatbuf_r+0x2c>
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	2100      	movs	r1, #0
 8007626:	f013 0f80 	tst.w	r3, #128	; 0x80
 800762a:	bf0c      	ite	eq
 800762c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007630:	2340      	movne	r3, #64	; 0x40
 8007632:	2000      	movs	r0, #0
 8007634:	6031      	str	r1, [r6, #0]
 8007636:	602b      	str	r3, [r5, #0]
 8007638:	b016      	add	sp, #88	; 0x58
 800763a:	bd70      	pop	{r4, r5, r6, pc}
 800763c:	466a      	mov	r2, sp
 800763e:	f000 f849 	bl	80076d4 <_fstat_r>
 8007642:	2800      	cmp	r0, #0
 8007644:	dbed      	blt.n	8007622 <__swhatbuf_r+0x12>
 8007646:	9901      	ldr	r1, [sp, #4]
 8007648:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800764c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007650:	4259      	negs	r1, r3
 8007652:	4159      	adcs	r1, r3
 8007654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007658:	e7eb      	b.n	8007632 <__swhatbuf_r+0x22>

0800765a <__smakebuf_r>:
 800765a:	898b      	ldrh	r3, [r1, #12]
 800765c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800765e:	079d      	lsls	r5, r3, #30
 8007660:	4606      	mov	r6, r0
 8007662:	460c      	mov	r4, r1
 8007664:	d507      	bpl.n	8007676 <__smakebuf_r+0x1c>
 8007666:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800766a:	6023      	str	r3, [r4, #0]
 800766c:	6123      	str	r3, [r4, #16]
 800766e:	2301      	movs	r3, #1
 8007670:	6163      	str	r3, [r4, #20]
 8007672:	b002      	add	sp, #8
 8007674:	bd70      	pop	{r4, r5, r6, pc}
 8007676:	466a      	mov	r2, sp
 8007678:	ab01      	add	r3, sp, #4
 800767a:	f7ff ffc9 	bl	8007610 <__swhatbuf_r>
 800767e:	9900      	ldr	r1, [sp, #0]
 8007680:	4605      	mov	r5, r0
 8007682:	4630      	mov	r0, r6
 8007684:	f7ff f9d4 	bl	8006a30 <_malloc_r>
 8007688:	b948      	cbnz	r0, 800769e <__smakebuf_r+0x44>
 800768a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800768e:	059a      	lsls	r2, r3, #22
 8007690:	d4ef      	bmi.n	8007672 <__smakebuf_r+0x18>
 8007692:	f023 0303 	bic.w	r3, r3, #3
 8007696:	f043 0302 	orr.w	r3, r3, #2
 800769a:	81a3      	strh	r3, [r4, #12]
 800769c:	e7e3      	b.n	8007666 <__smakebuf_r+0xc>
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	6020      	str	r0, [r4, #0]
 80076a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a6:	81a3      	strh	r3, [r4, #12]
 80076a8:	9b00      	ldr	r3, [sp, #0]
 80076aa:	6120      	str	r0, [r4, #16]
 80076ac:	6163      	str	r3, [r4, #20]
 80076ae:	9b01      	ldr	r3, [sp, #4]
 80076b0:	b15b      	cbz	r3, 80076ca <__smakebuf_r+0x70>
 80076b2:	4630      	mov	r0, r6
 80076b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076b8:	f000 f81e 	bl	80076f8 <_isatty_r>
 80076bc:	b128      	cbz	r0, 80076ca <__smakebuf_r+0x70>
 80076be:	89a3      	ldrh	r3, [r4, #12]
 80076c0:	f023 0303 	bic.w	r3, r3, #3
 80076c4:	f043 0301 	orr.w	r3, r3, #1
 80076c8:	81a3      	strh	r3, [r4, #12]
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	431d      	orrs	r5, r3
 80076ce:	81a5      	strh	r5, [r4, #12]
 80076d0:	e7cf      	b.n	8007672 <__smakebuf_r+0x18>
	...

080076d4 <_fstat_r>:
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	2300      	movs	r3, #0
 80076d8:	4d06      	ldr	r5, [pc, #24]	; (80076f4 <_fstat_r+0x20>)
 80076da:	4604      	mov	r4, r0
 80076dc:	4608      	mov	r0, r1
 80076de:	4611      	mov	r1, r2
 80076e0:	602b      	str	r3, [r5, #0]
 80076e2:	f7fa fa22 	bl	8001b2a <_fstat>
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	d102      	bne.n	80076f0 <_fstat_r+0x1c>
 80076ea:	682b      	ldr	r3, [r5, #0]
 80076ec:	b103      	cbz	r3, 80076f0 <_fstat_r+0x1c>
 80076ee:	6023      	str	r3, [r4, #0]
 80076f0:	bd38      	pop	{r3, r4, r5, pc}
 80076f2:	bf00      	nop
 80076f4:	2000044c 	.word	0x2000044c

080076f8 <_isatty_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	2300      	movs	r3, #0
 80076fc:	4d05      	ldr	r5, [pc, #20]	; (8007714 <_isatty_r+0x1c>)
 80076fe:	4604      	mov	r4, r0
 8007700:	4608      	mov	r0, r1
 8007702:	602b      	str	r3, [r5, #0]
 8007704:	f7fa fa20 	bl	8001b48 <_isatty>
 8007708:	1c43      	adds	r3, r0, #1
 800770a:	d102      	bne.n	8007712 <_isatty_r+0x1a>
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	b103      	cbz	r3, 8007712 <_isatty_r+0x1a>
 8007710:	6023      	str	r3, [r4, #0]
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	2000044c 	.word	0x2000044c

08007718 <_sbrk_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	2300      	movs	r3, #0
 800771c:	4d05      	ldr	r5, [pc, #20]	; (8007734 <_sbrk_r+0x1c>)
 800771e:	4604      	mov	r4, r0
 8007720:	4608      	mov	r0, r1
 8007722:	602b      	str	r3, [r5, #0]
 8007724:	f7fa fa26 	bl	8001b74 <_sbrk>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d102      	bne.n	8007732 <_sbrk_r+0x1a>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	b103      	cbz	r3, 8007732 <_sbrk_r+0x1a>
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	bd38      	pop	{r3, r4, r5, pc}
 8007734:	2000044c 	.word	0x2000044c

08007738 <memcpy>:
 8007738:	440a      	add	r2, r1
 800773a:	4291      	cmp	r1, r2
 800773c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007740:	d100      	bne.n	8007744 <memcpy+0xc>
 8007742:	4770      	bx	lr
 8007744:	b510      	push	{r4, lr}
 8007746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800774a:	4291      	cmp	r1, r2
 800774c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007750:	d1f9      	bne.n	8007746 <memcpy+0xe>
 8007752:	bd10      	pop	{r4, pc}

08007754 <__assert_func>:
 8007754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007756:	4614      	mov	r4, r2
 8007758:	461a      	mov	r2, r3
 800775a:	4b09      	ldr	r3, [pc, #36]	; (8007780 <__assert_func+0x2c>)
 800775c:	4605      	mov	r5, r0
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68d8      	ldr	r0, [r3, #12]
 8007762:	b14c      	cbz	r4, 8007778 <__assert_func+0x24>
 8007764:	4b07      	ldr	r3, [pc, #28]	; (8007784 <__assert_func+0x30>)
 8007766:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800776a:	9100      	str	r1, [sp, #0]
 800776c:	462b      	mov	r3, r5
 800776e:	4906      	ldr	r1, [pc, #24]	; (8007788 <__assert_func+0x34>)
 8007770:	f000 f842 	bl	80077f8 <fiprintf>
 8007774:	f000 f852 	bl	800781c <abort>
 8007778:	4b04      	ldr	r3, [pc, #16]	; (800778c <__assert_func+0x38>)
 800777a:	461c      	mov	r4, r3
 800777c:	e7f3      	b.n	8007766 <__assert_func+0x12>
 800777e:	bf00      	nop
 8007780:	20000064 	.word	0x20000064
 8007784:	08007c7f 	.word	0x08007c7f
 8007788:	08007c8c 	.word	0x08007c8c
 800778c:	08007cba 	.word	0x08007cba

08007790 <_calloc_r>:
 8007790:	b570      	push	{r4, r5, r6, lr}
 8007792:	fba1 5402 	umull	r5, r4, r1, r2
 8007796:	b934      	cbnz	r4, 80077a6 <_calloc_r+0x16>
 8007798:	4629      	mov	r1, r5
 800779a:	f7ff f949 	bl	8006a30 <_malloc_r>
 800779e:	4606      	mov	r6, r0
 80077a0:	b928      	cbnz	r0, 80077ae <_calloc_r+0x1e>
 80077a2:	4630      	mov	r0, r6
 80077a4:	bd70      	pop	{r4, r5, r6, pc}
 80077a6:	220c      	movs	r2, #12
 80077a8:	2600      	movs	r6, #0
 80077aa:	6002      	str	r2, [r0, #0]
 80077ac:	e7f9      	b.n	80077a2 <_calloc_r+0x12>
 80077ae:	462a      	mov	r2, r5
 80077b0:	4621      	mov	r1, r4
 80077b2:	f7fe f9d1 	bl	8005b58 <memset>
 80077b6:	e7f4      	b.n	80077a2 <_calloc_r+0x12>

080077b8 <__ascii_mbtowc>:
 80077b8:	b082      	sub	sp, #8
 80077ba:	b901      	cbnz	r1, 80077be <__ascii_mbtowc+0x6>
 80077bc:	a901      	add	r1, sp, #4
 80077be:	b142      	cbz	r2, 80077d2 <__ascii_mbtowc+0x1a>
 80077c0:	b14b      	cbz	r3, 80077d6 <__ascii_mbtowc+0x1e>
 80077c2:	7813      	ldrb	r3, [r2, #0]
 80077c4:	600b      	str	r3, [r1, #0]
 80077c6:	7812      	ldrb	r2, [r2, #0]
 80077c8:	1e10      	subs	r0, r2, #0
 80077ca:	bf18      	it	ne
 80077cc:	2001      	movne	r0, #1
 80077ce:	b002      	add	sp, #8
 80077d0:	4770      	bx	lr
 80077d2:	4610      	mov	r0, r2
 80077d4:	e7fb      	b.n	80077ce <__ascii_mbtowc+0x16>
 80077d6:	f06f 0001 	mvn.w	r0, #1
 80077da:	e7f8      	b.n	80077ce <__ascii_mbtowc+0x16>

080077dc <__ascii_wctomb>:
 80077dc:	4603      	mov	r3, r0
 80077de:	4608      	mov	r0, r1
 80077e0:	b141      	cbz	r1, 80077f4 <__ascii_wctomb+0x18>
 80077e2:	2aff      	cmp	r2, #255	; 0xff
 80077e4:	d904      	bls.n	80077f0 <__ascii_wctomb+0x14>
 80077e6:	228a      	movs	r2, #138	; 0x8a
 80077e8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	4770      	bx	lr
 80077f0:	2001      	movs	r0, #1
 80077f2:	700a      	strb	r2, [r1, #0]
 80077f4:	4770      	bx	lr
	...

080077f8 <fiprintf>:
 80077f8:	b40e      	push	{r1, r2, r3}
 80077fa:	b503      	push	{r0, r1, lr}
 80077fc:	4601      	mov	r1, r0
 80077fe:	ab03      	add	r3, sp, #12
 8007800:	4805      	ldr	r0, [pc, #20]	; (8007818 <fiprintf+0x20>)
 8007802:	f853 2b04 	ldr.w	r2, [r3], #4
 8007806:	6800      	ldr	r0, [r0, #0]
 8007808:	9301      	str	r3, [sp, #4]
 800780a:	f7ff fd3d 	bl	8007288 <_vfiprintf_r>
 800780e:	b002      	add	sp, #8
 8007810:	f85d eb04 	ldr.w	lr, [sp], #4
 8007814:	b003      	add	sp, #12
 8007816:	4770      	bx	lr
 8007818:	20000064 	.word	0x20000064

0800781c <abort>:
 800781c:	2006      	movs	r0, #6
 800781e:	b508      	push	{r3, lr}
 8007820:	f000 f82c 	bl	800787c <raise>
 8007824:	2001      	movs	r0, #1
 8007826:	f7fa f94e 	bl	8001ac6 <_exit>

0800782a <_raise_r>:
 800782a:	291f      	cmp	r1, #31
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4604      	mov	r4, r0
 8007830:	460d      	mov	r5, r1
 8007832:	d904      	bls.n	800783e <_raise_r+0x14>
 8007834:	2316      	movs	r3, #22
 8007836:	6003      	str	r3, [r0, #0]
 8007838:	f04f 30ff 	mov.w	r0, #4294967295
 800783c:	bd38      	pop	{r3, r4, r5, pc}
 800783e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007840:	b112      	cbz	r2, 8007848 <_raise_r+0x1e>
 8007842:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007846:	b94b      	cbnz	r3, 800785c <_raise_r+0x32>
 8007848:	4620      	mov	r0, r4
 800784a:	f000 f831 	bl	80078b0 <_getpid_r>
 800784e:	462a      	mov	r2, r5
 8007850:	4601      	mov	r1, r0
 8007852:	4620      	mov	r0, r4
 8007854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007858:	f000 b818 	b.w	800788c <_kill_r>
 800785c:	2b01      	cmp	r3, #1
 800785e:	d00a      	beq.n	8007876 <_raise_r+0x4c>
 8007860:	1c59      	adds	r1, r3, #1
 8007862:	d103      	bne.n	800786c <_raise_r+0x42>
 8007864:	2316      	movs	r3, #22
 8007866:	6003      	str	r3, [r0, #0]
 8007868:	2001      	movs	r0, #1
 800786a:	e7e7      	b.n	800783c <_raise_r+0x12>
 800786c:	2400      	movs	r4, #0
 800786e:	4628      	mov	r0, r5
 8007870:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007874:	4798      	blx	r3
 8007876:	2000      	movs	r0, #0
 8007878:	e7e0      	b.n	800783c <_raise_r+0x12>
	...

0800787c <raise>:
 800787c:	4b02      	ldr	r3, [pc, #8]	; (8007888 <raise+0xc>)
 800787e:	4601      	mov	r1, r0
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	f7ff bfd2 	b.w	800782a <_raise_r>
 8007886:	bf00      	nop
 8007888:	20000064 	.word	0x20000064

0800788c <_kill_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	2300      	movs	r3, #0
 8007890:	4d06      	ldr	r5, [pc, #24]	; (80078ac <_kill_r+0x20>)
 8007892:	4604      	mov	r4, r0
 8007894:	4608      	mov	r0, r1
 8007896:	4611      	mov	r1, r2
 8007898:	602b      	str	r3, [r5, #0]
 800789a:	f7fa f904 	bl	8001aa6 <_kill>
 800789e:	1c43      	adds	r3, r0, #1
 80078a0:	d102      	bne.n	80078a8 <_kill_r+0x1c>
 80078a2:	682b      	ldr	r3, [r5, #0]
 80078a4:	b103      	cbz	r3, 80078a8 <_kill_r+0x1c>
 80078a6:	6023      	str	r3, [r4, #0]
 80078a8:	bd38      	pop	{r3, r4, r5, pc}
 80078aa:	bf00      	nop
 80078ac:	2000044c 	.word	0x2000044c

080078b0 <_getpid_r>:
 80078b0:	f7fa b8f2 	b.w	8001a98 <_getpid>

080078b4 <_init>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	bf00      	nop
 80078b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ba:	bc08      	pop	{r3}
 80078bc:	469e      	mov	lr, r3
 80078be:	4770      	bx	lr

080078c0 <_fini>:
 80078c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c2:	bf00      	nop
 80078c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c6:	bc08      	pop	{r3}
 80078c8:	469e      	mov	lr, r3
 80078ca:	4770      	bx	lr
