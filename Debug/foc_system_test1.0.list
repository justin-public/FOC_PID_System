
foc_system_test1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d08  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe4  08009ef0  08009ef0  00019ef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aed4  0800aed4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800aed4  0800aed4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aed4  0800aed4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aed4  0800aed4  0001aed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aed8  0800aed8  0001aed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800aedc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001dc  0800b0b8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  0800b0b8  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f5c8  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000272e  00000000  00000000  0002f810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00031f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c2c  00000000  00000000  00032eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b962  00000000  00000000  00033adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012743  00000000  00000000  0004f43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1240  00000000  00000000  00061b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000549c  00000000  00000000  00102dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00108260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08009ed8 	.word	0x08009ed8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08009ed8 	.word	0x08009ed8

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__gesf2>:
 800101c:	f04f 3cff 	mov.w	ip, #4294967295
 8001020:	e006      	b.n	8001030 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__lesf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	e002      	b.n	8001030 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__cmpsf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001034:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001038:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800103c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001040:	bf18      	it	ne
 8001042:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001046:	d011      	beq.n	800106c <__cmpsf2+0x40>
 8001048:	b001      	add	sp, #4
 800104a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800104e:	bf18      	it	ne
 8001050:	ea90 0f01 	teqne	r0, r1
 8001054:	bf58      	it	pl
 8001056:	ebb2 0003 	subspl.w	r0, r2, r3
 800105a:	bf88      	it	hi
 800105c:	17c8      	asrhi	r0, r1, #31
 800105e:	bf38      	it	cc
 8001060:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001064:	bf18      	it	ne
 8001066:	f040 0001 	orrne.w	r0, r0, #1
 800106a:	4770      	bx	lr
 800106c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001070:	d102      	bne.n	8001078 <__cmpsf2+0x4c>
 8001072:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001076:	d105      	bne.n	8001084 <__cmpsf2+0x58>
 8001078:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800107c:	d1e4      	bne.n	8001048 <__cmpsf2+0x1c>
 800107e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001082:	d0e1      	beq.n	8001048 <__cmpsf2+0x1c>
 8001084:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <__aeabi_cfrcmple>:
 800108c:	4684      	mov	ip, r0
 800108e:	4608      	mov	r0, r1
 8001090:	4661      	mov	r1, ip
 8001092:	e7ff      	b.n	8001094 <__aeabi_cfcmpeq>

08001094 <__aeabi_cfcmpeq>:
 8001094:	b50f      	push	{r0, r1, r2, r3, lr}
 8001096:	f7ff ffc9 	bl	800102c <__cmpsf2>
 800109a:	2800      	cmp	r0, #0
 800109c:	bf48      	it	mi
 800109e:	f110 0f00 	cmnmi.w	r0, #0
 80010a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a4 <__aeabi_fcmpeq>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff fff4 	bl	8001094 <__aeabi_cfcmpeq>
 80010ac:	bf0c      	ite	eq
 80010ae:	2001      	moveq	r0, #1
 80010b0:	2000      	movne	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmplt>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffea 	bl	8001094 <__aeabi_cfcmpeq>
 80010c0:	bf34      	ite	cc
 80010c2:	2001      	movcc	r0, #1
 80010c4:	2000      	movcs	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmple>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffe0 	bl	8001094 <__aeabi_cfcmpeq>
 80010d4:	bf94      	ite	ls
 80010d6:	2001      	movls	r0, #1
 80010d8:	2000      	movhi	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmpge>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffd2 	bl	800108c <__aeabi_cfrcmple>
 80010e8:	bf94      	ite	ls
 80010ea:	2001      	movls	r0, #1
 80010ec:	2000      	movhi	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmpgt>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffc8 	bl	800108c <__aeabi_cfrcmple>
 80010fc:	bf34      	ite	cc
 80010fe:	2001      	movcc	r0, #1
 8001100:	2000      	movcs	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmpun>:
 8001108:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800110c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001110:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001114:	d102      	bne.n	800111c <__aeabi_fcmpun+0x14>
 8001116:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800111a:	d108      	bne.n	800112e <__aeabi_fcmpun+0x26>
 800111c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001120:	d102      	bne.n	8001128 <__aeabi_fcmpun+0x20>
 8001122:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001126:	d102      	bne.n	800112e <__aeabi_fcmpun+0x26>
 8001128:	f04f 0000 	mov.w	r0, #0
 800112c:	4770      	bx	lr
 800112e:	f04f 0001 	mov.w	r0, #1
 8001132:	4770      	bx	lr

08001134 <__aeabi_f2iz>:
 8001134:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001138:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800113c:	d30f      	bcc.n	800115e <__aeabi_f2iz+0x2a>
 800113e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001142:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001146:	d90d      	bls.n	8001164 <__aeabi_f2iz+0x30>
 8001148:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800114c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001150:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001154:	fa23 f002 	lsr.w	r0, r3, r2
 8001158:	bf18      	it	ne
 800115a:	4240      	negne	r0, r0
 800115c:	4770      	bx	lr
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	4770      	bx	lr
 8001164:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001168:	d101      	bne.n	800116e <__aeabi_f2iz+0x3a>
 800116a:	0242      	lsls	r2, r0, #9
 800116c:	d105      	bne.n	800117a <__aeabi_f2iz+0x46>
 800116e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001172:	bf08      	it	eq
 8001174:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001178:	4770      	bx	lr
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	4770      	bx	lr

08001180 <__aeabi_f2uiz>:
 8001180:	0042      	lsls	r2, r0, #1
 8001182:	d20e      	bcs.n	80011a2 <__aeabi_f2uiz+0x22>
 8001184:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001188:	d30b      	bcc.n	80011a2 <__aeabi_f2uiz+0x22>
 800118a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800118e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001192:	d409      	bmi.n	80011a8 <__aeabi_f2uiz+0x28>
 8001194:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800119c:	fa23 f002 	lsr.w	r0, r3, r2
 80011a0:	4770      	bx	lr
 80011a2:	f04f 0000 	mov.w	r0, #0
 80011a6:	4770      	bx	lr
 80011a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011ac:	d101      	bne.n	80011b2 <__aeabi_f2uiz+0x32>
 80011ae:	0242      	lsls	r2, r0, #9
 80011b0:	d102      	bne.n	80011b8 <__aeabi_f2uiz+0x38>
 80011b2:	f04f 30ff 	mov.w	r0, #4294967295
 80011b6:	4770      	bx	lr
 80011b8:	f04f 0000 	mov.w	r0, #0
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <i2c_Delay>:
#define AS5600_STATUS       0x0B
#define AS5600_MAGNITUDE_H  0x1B
#define AS5600_MAGNITUDE_L  0x1C

void i2c_Delay(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 30; i++);
 80011c6:	2300      	movs	r3, #0
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	e002      	b.n	80011d2 <i2c_Delay+0x12>
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	3301      	adds	r3, #1
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b1d      	cmp	r3, #29
 80011d6:	d9f9      	bls.n	80011cc <i2c_Delay+0xc>
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <i2c_Start>:

void i2c_Start(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	I2C_SDA_1();
 80011e8:	2201      	movs	r2, #1
 80011ea:	2108      	movs	r1, #8
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <i2c_Start+0x3c>)
 80011ee:	f003 fc92 	bl	8004b16 <HAL_GPIO_WritePin>
	I2C_SCL_1();
 80011f2:	2201      	movs	r2, #1
 80011f4:	2102      	movs	r1, #2
 80011f6:	480a      	ldr	r0, [pc, #40]	; (8001220 <i2c_Start+0x3c>)
 80011f8:	f003 fc8d 	bl	8004b16 <HAL_GPIO_WritePin>
	i2c_Delay();
 80011fc:	f7ff ffe0 	bl	80011c0 <i2c_Delay>
	I2C_SDA_0();
 8001200:	2200      	movs	r2, #0
 8001202:	2108      	movs	r1, #8
 8001204:	4806      	ldr	r0, [pc, #24]	; (8001220 <i2c_Start+0x3c>)
 8001206:	f003 fc86 	bl	8004b16 <HAL_GPIO_WritePin>
	i2c_Delay();
 800120a:	f7ff ffd9 	bl	80011c0 <i2c_Delay>
	I2C_SCL_0();
 800120e:	2200      	movs	r2, #0
 8001210:	2102      	movs	r1, #2
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <i2c_Start+0x3c>)
 8001214:	f003 fc7f 	bl	8004b16 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001218:	f7ff ffd2 	bl	80011c0 <i2c_Delay>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40011c00 	.word	0x40011c00

08001224 <i2c_SendByte>:

void i2c_SendByte(uint8_t _ucByte)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 0; i < 8; i++)
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e02c      	b.n	800128e <i2c_SendByte+0x6a>
	{
		if (_ucByte & 0x80)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	da05      	bge.n	8001248 <i2c_SendByte+0x24>
		{
			I2C_SDA_1();
 800123c:	2201      	movs	r2, #1
 800123e:	2108      	movs	r1, #8
 8001240:	4817      	ldr	r0, [pc, #92]	; (80012a0 <i2c_SendByte+0x7c>)
 8001242:	f003 fc68 	bl	8004b16 <HAL_GPIO_WritePin>
 8001246:	e004      	b.n	8001252 <i2c_SendByte+0x2e>
		}
		else
		{
			I2C_SDA_0();
 8001248:	2200      	movs	r2, #0
 800124a:	2108      	movs	r1, #8
 800124c:	4814      	ldr	r0, [pc, #80]	; (80012a0 <i2c_SendByte+0x7c>)
 800124e:	f003 fc62 	bl	8004b16 <HAL_GPIO_WritePin>
		}
		i2c_Delay();
 8001252:	f7ff ffb5 	bl	80011c0 <i2c_Delay>
		I2C_SCL_1();
 8001256:	2201      	movs	r2, #1
 8001258:	2102      	movs	r1, #2
 800125a:	4811      	ldr	r0, [pc, #68]	; (80012a0 <i2c_SendByte+0x7c>)
 800125c:	f003 fc5b 	bl	8004b16 <HAL_GPIO_WritePin>
		i2c_Delay();
 8001260:	f7ff ffae 	bl	80011c0 <i2c_Delay>
		I2C_SCL_0();
 8001264:	2200      	movs	r2, #0
 8001266:	2102      	movs	r1, #2
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <i2c_SendByte+0x7c>)
 800126a:	f003 fc54 	bl	8004b16 <HAL_GPIO_WritePin>
		if (i == 7)
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	2b07      	cmp	r3, #7
 8001272:	d104      	bne.n	800127e <i2c_SendByte+0x5a>
		{
			 I2C_SDA_1();
 8001274:	2201      	movs	r2, #1
 8001276:	2108      	movs	r1, #8
 8001278:	4809      	ldr	r0, [pc, #36]	; (80012a0 <i2c_SendByte+0x7c>)
 800127a:	f003 fc4c 	bl	8004b16 <HAL_GPIO_WritePin>
		}
		_ucByte <<= 1;
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	71fb      	strb	r3, [r7, #7]
		i2c_Delay();
 8001284:	f7ff ff9c 	bl	80011c0 <i2c_Delay>
	for (i = 0; i < 8; i++)
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	3301      	adds	r3, #1
 800128c:	73fb      	strb	r3, [r7, #15]
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	2b07      	cmp	r3, #7
 8001292:	d9cf      	bls.n	8001234 <i2c_SendByte+0x10>
	}
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40011c00 	.word	0x40011c00

080012a4 <i2c_ReadByte>:

uint8_t i2c_ReadByte(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t value;

	value = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	71bb      	strb	r3, [r7, #6]

	for (i = 0; i < 8; i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	e01d      	b.n	80012f0 <i2c_ReadByte+0x4c>
	{
		value <<= 1;
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	71bb      	strb	r3, [r7, #6]
		I2C_SCL_1();
 80012ba:	2201      	movs	r2, #1
 80012bc:	2102      	movs	r1, #2
 80012be:	4810      	ldr	r0, [pc, #64]	; (8001300 <i2c_ReadByte+0x5c>)
 80012c0:	f003 fc29 	bl	8004b16 <HAL_GPIO_WritePin>
		i2c_Delay();
 80012c4:	f7ff ff7c 	bl	80011c0 <i2c_Delay>
		if (I2C_SDA_READ())
 80012c8:	2108      	movs	r1, #8
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <i2c_ReadByte+0x5c>)
 80012cc:	f003 fc0c 	bl	8004ae8 <HAL_GPIO_ReadPin>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d102      	bne.n	80012dc <i2c_ReadByte+0x38>
		{
			value++;
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	3301      	adds	r3, #1
 80012da:	71bb      	strb	r3, [r7, #6]
		}
		I2C_SCL_0();
 80012dc:	2200      	movs	r2, #0
 80012de:	2102      	movs	r1, #2
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <i2c_ReadByte+0x5c>)
 80012e2:	f003 fc18 	bl	8004b16 <HAL_GPIO_WritePin>
		i2c_Delay();
 80012e6:	f7ff ff6b 	bl	80011c0 <i2c_Delay>
	for (i = 0; i < 8; i++)
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	3301      	adds	r3, #1
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b07      	cmp	r3, #7
 80012f4:	d9de      	bls.n	80012b4 <i2c_ReadByte+0x10>
	}
	return value;
 80012f6:	79bb      	ldrb	r3, [r7, #6]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40011c00 	.word	0x40011c00

08001304 <i2c_WaitAck>:

uint8_t i2c_WaitAck(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
	uint8_t re;

	I2C_SDA_1();
 800130a:	2201      	movs	r2, #1
 800130c:	2108      	movs	r1, #8
 800130e:	4812      	ldr	r0, [pc, #72]	; (8001358 <i2c_WaitAck+0x54>)
 8001310:	f003 fc01 	bl	8004b16 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001314:	f7ff ff54 	bl	80011c0 <i2c_Delay>
	I2C_SCL_1();
 8001318:	2201      	movs	r2, #1
 800131a:	2102      	movs	r1, #2
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <i2c_WaitAck+0x54>)
 800131e:	f003 fbfa 	bl	8004b16 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001322:	f7ff ff4d 	bl	80011c0 <i2c_Delay>
	if (I2C_SDA_READ())
 8001326:	2108      	movs	r1, #8
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <i2c_WaitAck+0x54>)
 800132a:	f003 fbdd 	bl	8004ae8 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	2b01      	cmp	r3, #1
 8001332:	d102      	bne.n	800133a <i2c_WaitAck+0x36>
	{
		re = 1;
 8001334:	2301      	movs	r3, #1
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	e001      	b.n	800133e <i2c_WaitAck+0x3a>
	}
	else
	{
		re = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	71fb      	strb	r3, [r7, #7]
	}
	I2C_SCL_0();
 800133e:	2200      	movs	r2, #0
 8001340:	2102      	movs	r1, #2
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <i2c_WaitAck+0x54>)
 8001344:	f003 fbe7 	bl	8004b16 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001348:	f7ff ff3a 	bl	80011c0 <i2c_Delay>
	return re;
 800134c:	79fb      	ldrb	r3, [r7, #7]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40011c00 	.word	0x40011c00

0800135c <i2c_NAck>:
	i2c_Delay();
	I2C_SDA_1();
}

void i2c_NAck(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	I2C_SDA_1();
 8001360:	2201      	movs	r2, #1
 8001362:	2108      	movs	r1, #8
 8001364:	480a      	ldr	r0, [pc, #40]	; (8001390 <i2c_NAck+0x34>)
 8001366:	f003 fbd6 	bl	8004b16 <HAL_GPIO_WritePin>
	i2c_Delay();
 800136a:	f7ff ff29 	bl	80011c0 <i2c_Delay>
	I2C_SCL_1();
 800136e:	2201      	movs	r2, #1
 8001370:	2102      	movs	r1, #2
 8001372:	4807      	ldr	r0, [pc, #28]	; (8001390 <i2c_NAck+0x34>)
 8001374:	f003 fbcf 	bl	8004b16 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001378:	f7ff ff22 	bl	80011c0 <i2c_Delay>
	I2C_SCL_0();
 800137c:	2200      	movs	r2, #0
 800137e:	2102      	movs	r1, #2
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <i2c_NAck+0x34>)
 8001382:	f003 fbc8 	bl	8004b16 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001386:	f7ff ff1b 	bl	80011c0 <i2c_Delay>
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40011c00 	.word	0x40011c00

08001394 <i2c_Stop>:

void i2c_Stop(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	I2C_SDA_0();
 8001398:	2200      	movs	r2, #0
 800139a:	2108      	movs	r1, #8
 800139c:	4808      	ldr	r0, [pc, #32]	; (80013c0 <i2c_Stop+0x2c>)
 800139e:	f003 fbba 	bl	8004b16 <HAL_GPIO_WritePin>
	I2C_SCL_1();
 80013a2:	2201      	movs	r2, #1
 80013a4:	2102      	movs	r1, #2
 80013a6:	4806      	ldr	r0, [pc, #24]	; (80013c0 <i2c_Stop+0x2c>)
 80013a8:	f003 fbb5 	bl	8004b16 <HAL_GPIO_WritePin>
	i2c_Delay();
 80013ac:	f7ff ff08 	bl	80011c0 <i2c_Delay>
	I2C_SDA_1();
 80013b0:	2201      	movs	r2, #1
 80013b2:	2108      	movs	r1, #8
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <i2c_Stop+0x2c>)
 80013b6:	f003 fbae 	bl	8004b16 <HAL_GPIO_WritePin>
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40011c00 	.word	0x40011c00

080013c4 <bsp_InitI2C>:

void bsp_InitI2C(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_GPIOF_CLK_ENABLE();
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <bsp_InitI2C+0x48>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	4a0f      	ldr	r2, [pc, #60]	; (800140c <bsp_InitI2C+0x48>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d4:	6193      	str	r3, [r2, #24]
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <bsp_InitI2C+0x48>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80013e2:	2311      	movs	r3, #17
 80013e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pin = I2C_SCL_PIN | I2C_SDA_PIN;
 80013ee:	230a      	movs	r3, #10
 80013f0:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_Init(GPIO_PORT_I2C, &GPIO_InitStructure);
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <bsp_InitI2C+0x4c>)
 80013fa:	f003 f9e1 	bl	80047c0 <HAL_GPIO_Init>

	i2c_Stop();
 80013fe:	f7ff ffc9 	bl	8001394 <i2c_Stop>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	40011c00 	.word	0x40011c00

08001414 <i2c_CheckDevice>:

uint8_t i2c_CheckDevice(uint8_t _Address)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
    uint8_t ucAck;

    //printf("AS5600 디바이스 체크 중...\n");
    //printf("7비트 주소: 0x%02X\n", _Address);

    if (I2C_SDA_READ() && I2C_SCL_READ())
 800141e:	2108      	movs	r1, #8
 8001420:	4816      	ldr	r0, [pc, #88]	; (800147c <i2c_CheckDevice+0x68>)
 8001422:	f003 fb61 	bl	8004ae8 <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d121      	bne.n	8001470 <i2c_CheckDevice+0x5c>
 800142c:	2102      	movs	r1, #2
 800142e:	4813      	ldr	r0, [pc, #76]	; (800147c <i2c_CheckDevice+0x68>)
 8001430:	f003 fb5a 	bl	8004ae8 <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	2b01      	cmp	r3, #1
 8001438:	d11a      	bne.n	8001470 <i2c_CheckDevice+0x5c>
    {
        //printf("I2C 버스 상태 정상\n");

        i2c_Start();
 800143a:	f7ff fed3 	bl	80011e4 <i2c_Start>
        //printf("START 신호 전송\n");

        uint8_t write_addr = (_Address << 1) | I2C_WR;  // I2C 주소 체계는 7비트 , 8비트 주소 생성 필요
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
        i2c_SendByte(write_addr);
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff feec 	bl	8001224 <i2c_SendByte>
        //printf("8비트 주소 0x%02X 전송\n", write_addr);

        ucAck = i2c_WaitAck();
 800144c:	f7ff ff5a 	bl	8001304 <i2c_WaitAck>
 8001450:	4603      	mov	r3, r0
 8001452:	73bb      	strb	r3, [r7, #14]
        //printf("ACK 응답: %d\n", ucAck);

        if(ucAck == 0){
 8001454:	7bbb      	ldrb	r3, [r7, #14]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d103      	bne.n	8001462 <i2c_CheckDevice+0x4e>
            printf("AS5600 확인!\n");
 800145a:	4809      	ldr	r0, [pc, #36]	; (8001480 <i2c_CheckDevice+0x6c>)
 800145c:	f005 ff0a 	bl	8007274 <puts>
 8001460:	e002      	b.n	8001468 <i2c_CheckDevice+0x54>
        }
        else
        {
            printf("AS5600 확인 실패!\n");
 8001462:	4808      	ldr	r0, [pc, #32]	; (8001484 <i2c_CheckDevice+0x70>)
 8001464:	f005 ff06 	bl	8007274 <puts>
        }

        i2c_Stop();
 8001468:	f7ff ff94 	bl	8001394 <i2c_Stop>

        return ucAck;
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	e000      	b.n	8001472 <i2c_CheckDevice+0x5e>
    }
    return 1;
 8001470:	2301      	movs	r3, #1
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40011c00 	.word	0x40011c00
 8001480:	08009ef0 	.word	0x08009ef0
 8001484:	08009f00 	.word	0x08009f00

08001488 <AS5600_ReadRegister>:

uint8_t AS5600_ReadRegister(uint8_t reg_addr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0xFF;
 8001492:	23ff      	movs	r3, #255	; 0xff
 8001494:	73fb      	strb	r3, [r7, #15]
	uint8_t ack;

	i2c_Start();
 8001496:	f7ff fea5 	bl	80011e4 <i2c_Start>

	i2c_SendByte(AS5600_WRITE);
 800149a:	206c      	movs	r0, #108	; 0x6c
 800149c:	f7ff fec2 	bl	8001224 <i2c_SendByte>
	ack = i2c_WaitAck();
 80014a0:	f7ff ff30 	bl	8001304 <i2c_WaitAck>
 80014a4:	4603      	mov	r3, r0
 80014a6:	73bb      	strb	r3, [r7, #14]
	if(ack != 0){
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <AS5600_ReadRegister+0x2e>
		i2c_Stop();
 80014ae:	f7ff ff71 	bl	8001394 <i2c_Stop>
		return 0xFF;  // 오류
 80014b2:	23ff      	movs	r3, #255	; 0xff
 80014b4:	e027      	b.n	8001506 <AS5600_ReadRegister+0x7e>
	}

	i2c_SendByte(reg_addr);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff feb3 	bl	8001224 <i2c_SendByte>
	ack = i2c_WaitAck();
 80014be:	f7ff ff21 	bl	8001304 <i2c_WaitAck>
 80014c2:	4603      	mov	r3, r0
 80014c4:	73bb      	strb	r3, [r7, #14]
	if (ack != 0) {
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <AS5600_ReadRegister+0x4c>
		i2c_Stop();
 80014cc:	f7ff ff62 	bl	8001394 <i2c_Stop>
	    return 0xFF;  // 오류
 80014d0:	23ff      	movs	r3, #255	; 0xff
 80014d2:	e018      	b.n	8001506 <AS5600_ReadRegister+0x7e>
	}

	i2c_Start();
 80014d4:	f7ff fe86 	bl	80011e4 <i2c_Start>
	i2c_SendByte(AS5600_READ);
 80014d8:	206d      	movs	r0, #109	; 0x6d
 80014da:	f7ff fea3 	bl	8001224 <i2c_SendByte>
	ack = i2c_WaitAck();
 80014de:	f7ff ff11 	bl	8001304 <i2c_WaitAck>
 80014e2:	4603      	mov	r3, r0
 80014e4:	73bb      	strb	r3, [r7, #14]
	if (ack != 0) {
 80014e6:	7bbb      	ldrb	r3, [r7, #14]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <AS5600_ReadRegister+0x6c>
		i2c_Stop();
 80014ec:	f7ff ff52 	bl	8001394 <i2c_Stop>
	    return 0xFF;  // 오류
 80014f0:	23ff      	movs	r3, #255	; 0xff
 80014f2:	e008      	b.n	8001506 <AS5600_ReadRegister+0x7e>
	}

	data = i2c_ReadByte();
 80014f4:	f7ff fed6 	bl	80012a4 <i2c_ReadByte>
 80014f8:	4603      	mov	r3, r0
 80014fa:	73fb      	strb	r3, [r7, #15]
	i2c_NAck();  // 마지막 바이트이므로 NACK
 80014fc:	f7ff ff2e 	bl	800135c <i2c_NAck>
	i2c_Stop();
 8001500:	f7ff ff48 	bl	8001394 <i2c_Stop>

	return data;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <AS5600_ReadRawAngle>:

uint16_t AS5600_ReadRawAngle(void)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
    uint8_t high_byte, low_byte;
    uint16_t raw_angle;

    // 상위 바이트 읽기
    high_byte = AS5600_ReadRegister(AS5600_RAW_ANGLE_H);
 8001514:	200c      	movs	r0, #12
 8001516:	f7ff ffb7 	bl	8001488 <AS5600_ReadRegister>
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
    if (high_byte == 0xFF) {
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2bff      	cmp	r3, #255	; 0xff
 8001522:	d102      	bne.n	800152a <AS5600_ReadRawAngle+0x1c>
        return 0xFFFF;  // 오류
 8001524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001528:	e016      	b.n	8001558 <AS5600_ReadRawAngle+0x4a>
    }

    // 하위 바이트 읽기
    low_byte = AS5600_ReadRegister(AS5600_RAW_ANGLE_L);
 800152a:	200d      	movs	r0, #13
 800152c:	f7ff ffac 	bl	8001488 <AS5600_ReadRegister>
 8001530:	4603      	mov	r3, r0
 8001532:	71bb      	strb	r3, [r7, #6]
    if (low_byte == 0xFF) {
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	2bff      	cmp	r3, #255	; 0xff
 8001538:	d102      	bne.n	8001540 <AS5600_ReadRawAngle+0x32>
        return 0xFFFF;  // 오류
 800153a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800153e:	e00b      	b.n	8001558 <AS5600_ReadRawAngle+0x4a>
    }

    // 12비트 각도 조합 (상위 4비트 + 하위 8비트)
    raw_angle = ((uint16_t)(high_byte & 0x0F) << 8) | low_byte;
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b21b      	sxth	r3, r3
 8001546:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800154a:	b21a      	sxth	r2, r3
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	b21b      	sxth	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b21b      	sxth	r3, r3
 8001554:	80bb      	strh	r3, [r7, #4]

    return raw_angle;
 8001556:	88bb      	ldrh	r3, [r7, #4]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <AS5600_CheckStatus>:

/**
 * AS5600 상태 확인
 */
void AS5600_CheckStatus(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
    uint8_t status = AS5600_ReadRegister(AS5600_STATUS);
 8001566:	200b      	movs	r0, #11
 8001568:	f7ff ff8e 	bl	8001488 <AS5600_ReadRegister>
 800156c:	4603      	mov	r3, r0
 800156e:	71fb      	strb	r3, [r7, #7]

    printf("AS5600 상태 레지스터: 0x%02X\n", status);
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	4619      	mov	r1, r3
 8001574:	4818      	ldr	r0, [pc, #96]	; (80015d8 <AS5600_CheckStatus+0x78>)
 8001576:	f005 fe17 	bl	80071a8 <iprintf>

    if (status != 0xFF) {
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2bff      	cmp	r3, #255	; 0xff
 800157e:	d024      	beq.n	80015ca <AS5600_CheckStatus+0x6a>
        if (status & 0x20) {
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 0320 	and.w	r3, r3, #32
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <AS5600_CheckStatus+0x32>
            printf("✅ 자석 감지됨\n");
 800158a:	4814      	ldr	r0, [pc, #80]	; (80015dc <AS5600_CheckStatus+0x7c>)
 800158c:	f005 fe72 	bl	8007274 <puts>
 8001590:	e002      	b.n	8001598 <AS5600_CheckStatus+0x38>
        } else {
            printf("⚠️  자석 감지 안됨\n");
 8001592:	4813      	ldr	r0, [pc, #76]	; (80015e0 <AS5600_CheckStatus+0x80>)
 8001594:	f005 fe6e 	bl	8007274 <puts>
        }

        if (status & 0x10) {
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <AS5600_CheckStatus+0x48>
            printf("⚠️  자석이 너무 강함\n");
 80015a2:	4810      	ldr	r0, [pc, #64]	; (80015e4 <AS5600_CheckStatus+0x84>)
 80015a4:	f005 fe66 	bl	8007274 <puts>
        }

        if (status & 0x08) {
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <AS5600_CheckStatus+0x58>
            printf("⚠️  자석이 너무 약함\n");
 80015b2:	480d      	ldr	r0, [pc, #52]	; (80015e8 <AS5600_CheckStatus+0x88>)
 80015b4:	f005 fe5e 	bl	8007274 <puts>
        }

        if ((status & 0x18) == 0) {
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 0318 	and.w	r3, r3, #24
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <AS5600_CheckStatus+0x70>
            printf("✅ 자석 강도 적절함\n");
 80015c2:	480a      	ldr	r0, [pc, #40]	; (80015ec <AS5600_CheckStatus+0x8c>)
 80015c4:	f005 fe56 	bl	8007274 <puts>
        }
    } else {
        printf("❌ 상태 레지스터 읽기 실패\n");
    }
}
 80015c8:	e002      	b.n	80015d0 <AS5600_CheckStatus+0x70>
        printf("❌ 상태 레지스터 읽기 실패\n");
 80015ca:	4809      	ldr	r0, [pc, #36]	; (80015f0 <AS5600_CheckStatus+0x90>)
 80015cc:	f005 fe52 	bl	8007274 <puts>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	08009f18 	.word	0x08009f18
 80015dc:	08009f3c 	.word	0x08009f3c
 80015e0:	08009f54 	.word	0x08009f54
 80015e4:	08009f74 	.word	0x08009f74
 80015e8:	08009f94 	.word	0x08009f94
 80015ec:	08009fb4 	.word	0x08009fb4
 80015f0:	08009fd0 	.word	0x08009fd0

080015f4 <AS5600_CheckMagnitude>:

/**
 * AS5600 자기장 강도 확인
 */
void AS5600_CheckMagnitude(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
    uint8_t mag_h = AS5600_ReadRegister(AS5600_MAGNITUDE_H);
 80015fa:	201b      	movs	r0, #27
 80015fc:	f7ff ff44 	bl	8001488 <AS5600_ReadRegister>
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
    uint8_t mag_l = AS5600_ReadRegister(AS5600_MAGNITUDE_L);
 8001604:	201c      	movs	r0, #28
 8001606:	f7ff ff3f 	bl	8001488 <AS5600_ReadRegister>
 800160a:	4603      	mov	r3, r0
 800160c:	71bb      	strb	r3, [r7, #6]

    if (mag_h != 0xFF && mag_l != 0xFF) {
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	2bff      	cmp	r3, #255	; 0xff
 8001612:	d01e      	beq.n	8001652 <AS5600_CheckMagnitude+0x5e>
 8001614:	79bb      	ldrb	r3, [r7, #6]
 8001616:	2bff      	cmp	r3, #255	; 0xff
 8001618:	d01b      	beq.n	8001652 <AS5600_CheckMagnitude+0x5e>
        uint16_t magnitude = ((uint16_t)(mag_h & 0x0F) << 8) | mag_l;
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b21b      	sxth	r3, r3
 8001620:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001624:	b21a      	sxth	r2, r3
 8001626:	79bb      	ldrb	r3, [r7, #6]
 8001628:	b21b      	sxth	r3, r3
 800162a:	4313      	orrs	r3, r2
 800162c:	b21b      	sxth	r3, r3
 800162e:	80bb      	strh	r3, [r7, #4]
        printf("자기장 강도: %d\n", magnitude);
 8001630:	88bb      	ldrh	r3, [r7, #4]
 8001632:	4619      	mov	r1, r3
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <AS5600_CheckMagnitude+0x70>)
 8001636:	f005 fdb7 	bl	80071a8 <iprintf>

        if (magnitude > 2000) {
 800163a:	88bb      	ldrh	r3, [r7, #4]
 800163c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001640:	d903      	bls.n	800164a <AS5600_CheckMagnitude+0x56>
            printf("✅ 자기장 강도 양호\n");
 8001642:	4809      	ldr	r0, [pc, #36]	; (8001668 <AS5600_CheckMagnitude+0x74>)
 8001644:	f005 fe16 	bl	8007274 <puts>
    if (mag_h != 0xFF && mag_l != 0xFF) {
 8001648:	e007      	b.n	800165a <AS5600_CheckMagnitude+0x66>
        } else {
            printf("⚠️  자기장 강도 약함 - 자석을 가까이 가져다 대세요\n");
 800164a:	4808      	ldr	r0, [pc, #32]	; (800166c <AS5600_CheckMagnitude+0x78>)
 800164c:	f005 fe12 	bl	8007274 <puts>
    if (mag_h != 0xFF && mag_l != 0xFF) {
 8001650:	e003      	b.n	800165a <AS5600_CheckMagnitude+0x66>
        }
    } else {
        printf("❌ 자기장 강도 읽기 실패\n");
 8001652:	4807      	ldr	r0, [pc, #28]	; (8001670 <AS5600_CheckMagnitude+0x7c>)
 8001654:	f005 fe0e 	bl	8007274 <puts>
    }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	08009ff8 	.word	0x08009ff8
 8001668:	0800a010 	.word	0x0800a010
 800166c:	0800a02c 	.word	0x0800a02c
 8001670:	0800a078 	.word	0x0800a078

08001674 <AS5600_FullTest>:

/**
 * AS5600 전체 테스트
 */
void AS5600_FullTest(void)
{
 8001674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001678:	b088      	sub	sp, #32
 800167a:	af04      	add	r7, sp, #16
    printf("\n=== AS5600 전체 테스트 ===\n");
 800167c:	4836      	ldr	r0, [pc, #216]	; (8001758 <AS5600_FullTest+0xe4>)
 800167e:	f005 fdf9 	bl	8007274 <puts>
        //printf("AS5600 연결 실패 - 테스트 중단\n");
        //return;
    //}

    // 2. 상태 확인
    AS5600_CheckStatus();
 8001682:	f7ff ff6d 	bl	8001560 <AS5600_CheckStatus>

    // 3. 자기장 강도 확인
    AS5600_CheckMagnitude();
 8001686:	f7ff ffb5 	bl	80015f4 <AS5600_CheckMagnitude>

    // 4. 각도 읽기 테스트 (10회)
    printf("\n--- 각도 읽기 테스트 ---\n");
 800168a:	4834      	ldr	r0, [pc, #208]	; (800175c <AS5600_FullTest+0xe8>)
 800168c:	f005 fdf2 	bl	8007274 <puts>
    for (int i = 0; i < 10; i++) {
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	e054      	b.n	8001740 <AS5600_FullTest+0xcc>
        uint16_t raw_angle = AS5600_ReadRawAngle();
 8001696:	f7ff ff3a 	bl	800150e <AS5600_ReadRawAngle>
 800169a:	4603      	mov	r3, r0
 800169c:	817b      	strh	r3, [r7, #10]

        if (raw_angle != 0xFFFF) {
 800169e:	897b      	ldrh	r3, [r7, #10]
 80016a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d03e      	beq.n	8001726 <AS5600_FullTest+0xb2>
            float angle_deg = (raw_angle * 360.0f) / 4096.0f;
 80016a8:	897b      	ldrh	r3, [r7, #10]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fb12 	bl	8000cd4 <__aeabi_i2f>
 80016b0:	4603      	mov	r3, r0
 80016b2:	492b      	ldr	r1, [pc, #172]	; (8001760 <AS5600_FullTest+0xec>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fb61 	bl	8000d7c <__aeabi_fmul>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fc0f 	bl	8000ee4 <__aeabi_fdiv>
 80016c6:	4603      	mov	r3, r0
 80016c8:	607b      	str	r3, [r7, #4]
            float angle_rad = (raw_angle * 2.0f * 3.14159f) / 4096.0f;
 80016ca:	897b      	ldrh	r3, [r7, #10]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fb01 	bl	8000cd4 <__aeabi_i2f>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4619      	mov	r1, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fa48 	bl	8000b6c <__addsf3>
 80016dc:	4603      	mov	r3, r0
 80016de:	4921      	ldr	r1, [pc, #132]	; (8001764 <AS5600_FullTest+0xf0>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fb4b 	bl	8000d7c <__aeabi_fmul>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fbf9 	bl	8000ee4 <__aeabi_fdiv>
 80016f2:	4603      	mov	r3, r0
 80016f4:	603b      	str	r3, [r7, #0]

            printf("읽기 %d: Raw=%d, 각도=%.1f°, %.3f rad\n", i+1, raw_angle, angle_deg, angle_rad);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1c5e      	adds	r6, r3, #1
 80016fa:	f8b7 800a 	ldrh.w	r8, [r7, #10]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7fe fefe 	bl	8000500 <__aeabi_f2d>
 8001704:	4604      	mov	r4, r0
 8001706:	460d      	mov	r5, r1
 8001708:	6838      	ldr	r0, [r7, #0]
 800170a:	f7fe fef9 	bl	8000500 <__aeabi_f2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001716:	e9cd 4500 	strd	r4, r5, [sp]
 800171a:	4642      	mov	r2, r8
 800171c:	4631      	mov	r1, r6
 800171e:	4812      	ldr	r0, [pc, #72]	; (8001768 <AS5600_FullTest+0xf4>)
 8001720:	f005 fd42 	bl	80071a8 <iprintf>
 8001724:	e005      	b.n	8001732 <AS5600_FullTest+0xbe>
        } else {
            printf("읽기 %d: 실패\n", i+1);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3301      	adds	r3, #1
 800172a:	4619      	mov	r1, r3
 800172c:	480f      	ldr	r0, [pc, #60]	; (800176c <AS5600_FullTest+0xf8>)
 800172e:	f005 fd3b 	bl	80071a8 <iprintf>
        }

        HAL_Delay(500);  // 0.5초 간격
 8001732:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001736:	f001 fe7d 	bl	8003434 <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3301      	adds	r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b09      	cmp	r3, #9
 8001744:	dda7      	ble.n	8001696 <AS5600_FullTest+0x22>
    }

    printf("\n자석을 천천히 돌려보세요...\n");
 8001746:	480a      	ldr	r0, [pc, #40]	; (8001770 <AS5600_FullTest+0xfc>)
 8001748:	f005 fd94 	bl	8007274 <puts>
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001756:	bf00      	nop
 8001758:	0800a09c 	.word	0x0800a09c
 800175c:	0800a0c0 	.word	0x0800a0c0
 8001760:	43b40000 	.word	0x43b40000
 8001764:	40490fd0 	.word	0x40490fd0
 8001768:	0800a0e4 	.word	0x0800a0e4
 800176c:	0800a110 	.word	0x0800a110
 8001770:	0800a124 	.word	0x0800a124

08001774 <_write>:
float electrical_angle = 0.0f;			// 전기적 각도 변수
float mechanical_angle = 0.0f;			// 기계적 각도 변수
float current_velocity = 0.0f;
float target_velocity = 0.0f;			// 초기값을 0으로 설정

int _write(int fd, char *ptr, int len) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d002      	beq.n	800178c <_write+0x18>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d111      	bne.n	80017b0 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	b29a      	uxth	r2, r3
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	4809      	ldr	r0, [pc, #36]	; (80017bc <_write+0x48>)
 8001798:	f004 fe11 	bl	80063be <HAL_UART_Transmit>
 800179c:	4603      	mov	r3, r0
 800179e:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <_write+0x36>
            return len;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	e004      	b.n	80017b4 <_write+0x40>
        else
            return -1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e001      	b.n	80017b4 <_write+0x40>
    }
    return -1;
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200002b4 	.word	0x200002b4

080017c0 <main>:


int main(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
	HAL_Init();
 80017c6:	f001 fdd3 	bl	8003370 <HAL_Init>

	SystemClock_Config();
 80017ca:	f001 f929 	bl	8002a20 <SystemClock_Config>
	MX_GPIO_Init();
 80017ce:	f001 f985 	bl	8002adc <MX_GPIO_Init>
	MX_DMA_Init();
 80017d2:	f001 fa35 	bl	8002c40 <MX_DMA_Init>
	MX_ADC3_Init();
 80017d6:	f001 f9cd 	bl	8002b74 <MX_ADC3_Init>
	MX_TIM1_Init();
 80017da:	f001 fa7d 	bl	8002cd8 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 80017de:	f001 fb37 	bl	8002e50 <MX_USART2_UART_Init>
	bsp_InitI2C();
 80017e2:	f7ff fdef 	bl	80013c4 <bsp_InitI2C>

	motor_disable();
 80017e6:	f000 fa19 	bl	8001c1c <motor_disable>
	Current_Sensor_Init();
 80017ea:	f000 faf1 	bl	8001dd0 <Current_Sensor_Init>

	uint8_t result = i2c_CheckDevice(0x36);  // AS5600 주소
 80017ee:	2036      	movs	r0, #54	; 0x36
 80017f0:	f7ff fe10 	bl	8001414 <i2c_CheckDevice>
 80017f4:	4603      	mov	r3, r0
 80017f6:	72fb      	strb	r3, [r7, #11]
	if(result == 0){
 80017f8:	7afb      	ldrb	r3, [r7, #11]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d103      	bne.n	8001806 <main+0x46>
		printf("AS5600 detect! \r\n");
 80017fe:	4826      	ldr	r0, [pc, #152]	; (8001898 <main+0xd8>)
 8001800:	f005 fd38 	bl	8007274 <puts>
 8001804:	e002      	b.n	800180c <main+0x4c>
	}
	else{
		printf("AS5600 not detect! \r\n");
 8001806:	4825      	ldr	r0, [pc, #148]	; (800189c <main+0xdc>)
 8001808:	f005 fd34 	bl	8007274 <puts>
	}

	AS5600_FullTest();
 800180c:	f7ff ff32 	bl	8001674 <AS5600_FullTest>

	pwm_period = htim1.Init.Period;
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <main+0xe0>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <main+0xe4>)
 8001816:	6013      	str	r3, [r2, #0]

	//PWM 시작
	set_pwm_duty(0.5f, 0.5f, 0.5f);
 8001818:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800181c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001820:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001824:	f000 f95e 	bl	8001ae4 <set_pwm_duty>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001828:	2100      	movs	r1, #0
 800182a:	481d      	ldr	r0, [pc, #116]	; (80018a0 <main+0xe0>)
 800182c:	f004 f88c 	bl	8005948 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001830:	2104      	movs	r1, #4
 8001832:	481b      	ldr	r0, [pc, #108]	; (80018a0 <main+0xe0>)
 8001834:	f004 f888 	bl	8005948 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001838:	2108      	movs	r1, #8
 800183a:	4819      	ldr	r0, [pc, #100]	; (80018a0 <main+0xe0>)
 800183c:	f004 f884 	bl	8005948 <HAL_TIM_PWM_Start>

	motor_enable();
 8001840:	f000 f9da 	bl	8001bf8 <motor_enable>

	HAL_Delay(2000);
 8001844:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001848:	f001 fdf4 	bl	8003434 <HAL_Delay>
	electrical_offset = electrical_alignment_test();
 800184c:	f000 f834 	bl	80018b8 <electrical_alignment_test>
 8001850:	4603      	mov	r3, r0
 8001852:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <main+0xe8>)
 8001854:	6013      	str	r3, [r2, #0]
	printf("Initial electrical offset saved: %.3f rad\r\n", electrical_offset);
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <main+0xe8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fe50 	bl	8000500 <__aeabi_f2d>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4811      	ldr	r0, [pc, #68]	; (80018ac <main+0xec>)
 8001866:	f005 fc9f 	bl	80071a8 <iprintf>


	float desired_velocity = 5.0f;  // 최종 원하는 속도
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <main+0xf0>)
 800186c:	607b      	str	r3, [r7, #4]
	target_velocity = 0.0f;
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <main+0xf4>)
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	601a      	str	r2, [r3, #0]

	uint32_t foccontrol_time = HAL_GetTick();
 8001876:	f001 fdd3 	bl	8003420 <HAL_GetTick>
 800187a:	60f8      	str	r0, [r7, #12]
	//uint32_t velocity_change_time = HAL_GetTick();

	while(1)
	{
		// 5ms = 200Hz
		if(HAL_GetTick() - foccontrol_time >= 5) {
 800187c:	f001 fdd0 	bl	8003420 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b04      	cmp	r3, #4
 8001888:	d9f8      	bls.n	800187c <main+0xbc>
			FOC_control();
 800188a:	f000 fb17 	bl	8001ebc <FOC_control>
			foccontrol_time = HAL_GetTick();
 800188e:	f001 fdc7 	bl	8003420 <HAL_GetTick>
 8001892:	60f8      	str	r0, [r7, #12]
		if(HAL_GetTick() - foccontrol_time >= 5) {
 8001894:	e7f2      	b.n	800187c <main+0xbc>
 8001896:	bf00      	nop
 8001898:	0800a180 	.word	0x0800a180
 800189c:	0800a194 	.word	0x0800a194
 80018a0:	2000026c 	.word	0x2000026c
 80018a4:	20000310 	.word	0x20000310
 80018a8:	20000318 	.word	0x20000318
 80018ac:	0800a1ac 	.word	0x0800a1ac
 80018b0:	40a00000 	.word	0x40a00000
 80018b4:	20000324 	.word	0x20000324

080018b8 <electrical_alignment_test>:
#endif
	}

}

float electrical_alignment_test(void) {
 80018b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018bc:	b096      	sub	sp, #88	; 0x58
 80018be:	af04      	add	r7, sp, #16
    printf("Start electrical alignment test\r\n");
 80018c0:	487e      	ldr	r0, [pc, #504]	; (8001abc <electrical_alignment_test+0x204>)
 80018c2:	f005 fcd7 	bl	8007274 <puts>

    // 1. d축에 고정 전압 인가 (로터를 d축 방향으로 강제 정렬)
    float vd_align = 3.0f;  // d축 전압 (적당한 크기)
 80018c6:	4b7e      	ldr	r3, [pc, #504]	; (8001ac0 <electrical_alignment_test+0x208>)
 80018c8:	643b      	str	r3, [r7, #64]	; 0x40
    float vq_align = 0.0f;  // q축 전압 없음
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	63fb      	str	r3, [r7, #60]	; 0x3c

    // 2. 임의의 전기각도로 설정 (예: 0도)
    float test_electrical_angle = 0.0f;
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	63bb      	str	r3, [r7, #56]	; 0x38
    float cos_theta = cosf(test_electrical_angle);
 80018d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80018d8:	f007 fc74 	bl	80091c4 <cosf>
 80018dc:	6378      	str	r0, [r7, #52]	; 0x34
    float sin_theta = sinf(test_electrical_angle);
 80018de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80018e0:	f007 fca8 	bl	8009234 <sinf>
 80018e4:	6338      	str	r0, [r7, #48]	; 0x30

    // 3. 역 Park 변환
    float v_alpha = vd_align * cos_theta - vq_align * sin_theta;
 80018e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80018ea:	f7ff fa47 	bl	8000d7c <__aeabi_fmul>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461c      	mov	r4, r3
 80018f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018f6:	f7ff fa41 	bl	8000d7c <__aeabi_fmul>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4619      	mov	r1, r3
 80018fe:	4620      	mov	r0, r4
 8001900:	f7ff f932 	bl	8000b68 <__aeabi_fsub>
 8001904:	4603      	mov	r3, r0
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
    float v_beta = vd_align * sin_theta + vq_align * cos_theta;
 8001908:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800190a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800190c:	f7ff fa36 	bl	8000d7c <__aeabi_fmul>
 8001910:	4603      	mov	r3, r0
 8001912:	461c      	mov	r4, r3
 8001914:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001916:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001918:	f7ff fa30 	bl	8000d7c <__aeabi_fmul>
 800191c:	4603      	mov	r3, r0
 800191e:	4619      	mov	r1, r3
 8001920:	4620      	mov	r0, r4
 8001922:	f7ff f923 	bl	8000b6c <__addsf3>
 8001926:	4603      	mov	r3, r0
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28

    // 4. 역 Clarke 변환
    float va = v_alpha;
 800192a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
    float vb = -0.5f * v_alpha + 0.866f * v_beta;
 800192e:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8001932:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001934:	f7ff fa22 	bl	8000d7c <__aeabi_fmul>
 8001938:	4603      	mov	r3, r0
 800193a:	461c      	mov	r4, r3
 800193c:	4961      	ldr	r1, [pc, #388]	; (8001ac4 <electrical_alignment_test+0x20c>)
 800193e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001940:	f7ff fa1c 	bl	8000d7c <__aeabi_fmul>
 8001944:	4603      	mov	r3, r0
 8001946:	4619      	mov	r1, r3
 8001948:	4620      	mov	r0, r4
 800194a:	f7ff f90f 	bl	8000b6c <__addsf3>
 800194e:	4603      	mov	r3, r0
 8001950:	623b      	str	r3, [r7, #32]
    float vc = -0.5f * v_alpha - 0.866f * v_beta;
 8001952:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8001956:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001958:	f7ff fa10 	bl	8000d7c <__aeabi_fmul>
 800195c:	4603      	mov	r3, r0
 800195e:	461c      	mov	r4, r3
 8001960:	4958      	ldr	r1, [pc, #352]	; (8001ac4 <electrical_alignment_test+0x20c>)
 8001962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001964:	f7ff fa0a 	bl	8000d7c <__aeabi_fmul>
 8001968:	4603      	mov	r3, r0
 800196a:	4619      	mov	r1, r3
 800196c:	4620      	mov	r0, r4
 800196e:	f7ff f8fb 	bl	8000b68 <__aeabi_fsub>
 8001972:	4603      	mov	r3, r0
 8001974:	61fb      	str	r3, [r7, #28]

    // 5. PWM 듀티 계산
    float duty_a = 0.5f + va / 12.0f;
 8001976:	4954      	ldr	r1, [pc, #336]	; (8001ac8 <electrical_alignment_test+0x210>)
 8001978:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800197a:	f7ff fab3 	bl	8000ee4 <__aeabi_fdiv>
 800197e:	4603      	mov	r3, r0
 8001980:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f8f1 	bl	8000b6c <__addsf3>
 800198a:	4603      	mov	r3, r0
 800198c:	61bb      	str	r3, [r7, #24]
    float duty_b = 0.5f + vb / 12.0f;
 800198e:	494e      	ldr	r1, [pc, #312]	; (8001ac8 <electrical_alignment_test+0x210>)
 8001990:	6a38      	ldr	r0, [r7, #32]
 8001992:	f7ff faa7 	bl	8000ee4 <__aeabi_fdiv>
 8001996:	4603      	mov	r3, r0
 8001998:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff f8e5 	bl	8000b6c <__addsf3>
 80019a2:	4603      	mov	r3, r0
 80019a4:	617b      	str	r3, [r7, #20]
    float duty_c = 0.5f + vc / 12.0f;
 80019a6:	4948      	ldr	r1, [pc, #288]	; (8001ac8 <electrical_alignment_test+0x210>)
 80019a8:	69f8      	ldr	r0, [r7, #28]
 80019aa:	f7ff fa9b 	bl	8000ee4 <__aeabi_fdiv>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f8d9 	bl	8000b6c <__addsf3>
 80019ba:	4603      	mov	r3, r0
 80019bc:	613b      	str	r3, [r7, #16]

    // 6. PWM 출력 (2초간)
    printf("d축 전압 인가 중... 로터가 정렬됩니다.\r\n");
 80019be:	4843      	ldr	r0, [pc, #268]	; (8001acc <electrical_alignment_test+0x214>)
 80019c0:	f005 fc58 	bl	8007274 <puts>

    for(int i = 0; i < 400; i++) {  // 2초간 (5ms × 400회)
 80019c4:	2300      	movs	r3, #0
 80019c6:	647b      	str	r3, [r7, #68]	; 0x44
 80019c8:	e050      	b.n	8001a6c <electrical_alignment_test+0x1b4>
        set_pwm_duty(duty_a, duty_b, duty_c);
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	6979      	ldr	r1, [r7, #20]
 80019ce:	69b8      	ldr	r0, [r7, #24]
 80019d0:	f000 f888 	bl	8001ae4 <set_pwm_duty>
        HAL_Delay(5);
 80019d4:	2005      	movs	r0, #5
 80019d6:	f001 fd2d 	bl	8003434 <HAL_Delay>

        // 매 100ms마다 엔코더 값 출력
        if(i % 20 == 0) {
 80019da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80019dc:	4b3c      	ldr	r3, [pc, #240]	; (8001ad0 <electrical_alignment_test+0x218>)
 80019de:	fb83 2301 	smull	r2, r3, r3, r1
 80019e2:	10da      	asrs	r2, r3, #3
 80019e4:	17cb      	asrs	r3, r1, #31
 80019e6:	1ad2      	subs	r2, r2, r3
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	1aca      	subs	r2, r1, r3
 80019f2:	2a00      	cmp	r2, #0
 80019f4:	d137      	bne.n	8001a66 <electrical_alignment_test+0x1ae>
            uint16_t raw = AS5600_ReadRawAngle();
 80019f6:	f7ff fd8a 	bl	800150e <AS5600_ReadRawAngle>
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]
            //float angle = (4096.0f - (float)raw) * TWO_PI / 4096.0f;
            float angle = ((float)raw) * TWO_PI / 4096.0f;
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f963 	bl	8000ccc <__aeabi_ui2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4932      	ldr	r1, [pc, #200]	; (8001ad4 <electrical_alignment_test+0x21c>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f9b6 	bl	8000d7c <__aeabi_fmul>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fa64 	bl	8000ee4 <__aeabi_fdiv>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	603b      	str	r3, [r7, #0]
            printf("Time: %dms, Raw: %d, Angle: %.3f rad (%.1f deg)\r\n",
 8001a20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	189e      	adds	r6, r3, r2
 8001a28:	f8b7 8006 	ldrh.w	r8, [r7, #6]
 8001a2c:	6838      	ldr	r0, [r7, #0]
 8001a2e:	f7fe fd67 	bl	8000500 <__aeabi_f2d>
 8001a32:	4604      	mov	r4, r0
 8001a34:	460d      	mov	r5, r1
                   i*5, raw, angle, angle * 180.0f / PI);
 8001a36:	4928      	ldr	r1, [pc, #160]	; (8001ad8 <electrical_alignment_test+0x220>)
 8001a38:	6838      	ldr	r0, [r7, #0]
 8001a3a:	f7ff f99f 	bl	8000d7c <__aeabi_fmul>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4926      	ldr	r1, [pc, #152]	; (8001adc <electrical_alignment_test+0x224>)
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fa4e 	bl	8000ee4 <__aeabi_fdiv>
 8001a48:	4603      	mov	r3, r0
            printf("Time: %dms, Raw: %d, Angle: %.3f rad (%.1f deg)\r\n",
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fd58 	bl	8000500 <__aeabi_f2d>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a58:	e9cd 4500 	strd	r4, r5, [sp]
 8001a5c:	4642      	mov	r2, r8
 8001a5e:	4631      	mov	r1, r6
 8001a60:	481f      	ldr	r0, [pc, #124]	; (8001ae0 <electrical_alignment_test+0x228>)
 8001a62:	f005 fba1 	bl	80071a8 <iprintf>
    for(int i = 0; i < 400; i++) {  // 2초간 (5ms × 400회)
 8001a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a68:	3301      	adds	r3, #1
 8001a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a6e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001a72:	dbaa      	blt.n	80019ca <electrical_alignment_test+0x112>
        }
    }
#if 1
    // 7. 최종 측정
    uint16_t final_raw = AS5600_ReadRawAngle();
 8001a74:	f7ff fd4b 	bl	800150e <AS5600_ReadRawAngle>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	81fb      	strh	r3, [r7, #14]
    //float final_angle = (4096.0f - (float)final_raw) * TWO_PI / 4096.0f;
    float final_angle = ((float)final_raw) * TWO_PI / 4096.0f;
 8001a7c:	89fb      	ldrh	r3, [r7, #14]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff f924 	bl	8000ccc <__aeabi_ui2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4913      	ldr	r1, [pc, #76]	; (8001ad4 <electrical_alignment_test+0x21c>)
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff f977 	bl	8000d7c <__aeabi_fmul>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fa25 	bl	8000ee4 <__aeabi_fdiv>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	60bb      	str	r3, [r7, #8]
#endif
    // 8. PWM 정지
    set_pwm_duty(0.5f, 0.5f, 0.5f);
 8001a9e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001aa2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001aa6:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001aaa:	f000 f81b 	bl	8001ae4 <set_pwm_duty>
    return final_angle;
 8001aae:	68bb      	ldr	r3, [r7, #8]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3748      	adds	r7, #72	; 0x48
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aba:	bf00      	nop
 8001abc:	0800a1d8 	.word	0x0800a1d8
 8001ac0:	40400000 	.word	0x40400000
 8001ac4:	3f5db22d 	.word	0x3f5db22d
 8001ac8:	41400000 	.word	0x41400000
 8001acc:	0800a1fc 	.word	0x0800a1fc
 8001ad0:	66666667 	.word	0x66666667
 8001ad4:	40c90fdb 	.word	0x40c90fdb
 8001ad8:	43340000 	.word	0x43340000
 8001adc:	40490fdb 	.word	0x40490fdb
 8001ae0:	0800a234 	.word	0x0800a234

08001ae4 <set_pwm_duty>:

void set_pwm_duty(float a, float b, float c) {
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
    if (a < 0.0f) a = 0.0f; if (a > 1.0f) a = 1.0f;
 8001af0:	f04f 0100 	mov.w	r1, #0
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f7ff fadf 	bl	80010b8 <__aeabi_fcmplt>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <set_pwm_duty+0x22>
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff faf2 	bl	80010f4 <__aeabi_fcmpgt>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <set_pwm_duty+0x38>
 8001b16:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b1a:	60fb      	str	r3, [r7, #12]
    if (b < 0.0f) b = 0.0f; if (b > 1.0f) b = 1.0f;
 8001b1c:	f04f 0100 	mov.w	r1, #0
 8001b20:	68b8      	ldr	r0, [r7, #8]
 8001b22:	f7ff fac9 	bl	80010b8 <__aeabi_fcmplt>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <set_pwm_duty+0x4e>
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001b36:	68b8      	ldr	r0, [r7, #8]
 8001b38:	f7ff fadc 	bl	80010f4 <__aeabi_fcmpgt>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <set_pwm_duty+0x64>
 8001b42:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b46:	60bb      	str	r3, [r7, #8]
    if (c < 0.0f) c = 0.0f; if (c > 1.0f) c = 1.0f;
 8001b48:	f04f 0100 	mov.w	r1, #0
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff fab3 	bl	80010b8 <__aeabi_fcmplt>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <set_pwm_duty+0x7a>
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fac6 	bl	80010f4 <__aeabi_fcmpgt>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <set_pwm_duty+0x90>
 8001b6e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b72:	607b      	str	r3, [r7, #4]

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint32_t)(a * pwm_period));
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <set_pwm_duty+0x10c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff f8a7 	bl	8000ccc <__aeabi_ui2f>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	68f9      	ldr	r1, [r7, #12]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff f8fa 	bl	8000d7c <__aeabi_fmul>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <set_pwm_duty+0x110>)
 8001b8e:	681c      	ldr	r4, [r3, #0]
 8001b90:	4610      	mov	r0, r2
 8001b92:	f7ff faf5 	bl	8001180 <__aeabi_f2uiz>
 8001b96:	4603      	mov	r3, r0
 8001b98:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint32_t)(b * pwm_period));
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <set_pwm_duty+0x10c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f894 	bl	8000ccc <__aeabi_ui2f>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f8e7 	bl	8000d7c <__aeabi_fmul>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <set_pwm_duty+0x110>)
 8001bb4:	681c      	ldr	r4, [r3, #0]
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	f7ff fae2 	bl	8001180 <__aeabi_f2uiz>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, (uint32_t)(c * pwm_period));
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <set_pwm_duty+0x10c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff f881 	bl	8000ccc <__aeabi_ui2f>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f8d4 	bl	8000d7c <__aeabi_fmul>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <set_pwm_duty+0x110>)
 8001bda:	681c      	ldr	r4, [r3, #0]
 8001bdc:	4610      	mov	r0, r2
 8001bde:	f7ff facf 	bl	8001180 <__aeabi_f2uiz>
 8001be2:	4603      	mov	r3, r0
 8001be4:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd90      	pop	{r4, r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000310 	.word	0x20000310
 8001bf4:	2000026c 	.word	0x2000026c

08001bf8 <motor_enable>:

void motor_enable(void){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c02:	4804      	ldr	r0, [pc, #16]	; (8001c14 <motor_enable+0x1c>)
 8001c04:	f002 ff87 	bl	8004b16 <HAL_GPIO_WritePin>
	motor_enabled = 1;
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <motor_enable+0x20>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40011800 	.word	0x40011800
 8001c18:	20000314 	.word	0x20000314

08001c1c <motor_disable>:

void motor_disable(void){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c26:	4804      	ldr	r0, [pc, #16]	; (8001c38 <motor_disable+0x1c>)
 8001c28:	f002 ff75 	bl	8004b16 <HAL_GPIO_WritePin>
	motor_enabled = 0;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <motor_disable+0x20>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40011800 	.word	0x40011800
 8001c3c:	20000314 	.word	0x20000314

08001c40 <Read_Current_Sensors>:
    float duty_c = 0.5f + vc * 0.5f;

    set_pwm_duty(duty_a, duty_b, duty_c);
}

void Read_Current_Sensors(void){
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc_values, 2);
 8001c46:	2202      	movs	r2, #2
 8001c48:	4955      	ldr	r1, [pc, #340]	; (8001da0 <Read_Current_Sensors+0x160>)
 8001c4a:	4856      	ldr	r0, [pc, #344]	; (8001da4 <Read_Current_Sensors+0x164>)
 8001c4c:	f001 fd00 	bl	8003650 <HAL_ADC_Start_DMA>
	uint32_t timeout = HAL_GetTick() + 100;
 8001c50:	f001 fbe6 	bl	8003420 <HAL_GetTick>
 8001c54:	4603      	mov	r3, r0
 8001c56:	3364      	adds	r3, #100	; 0x64
 8001c58:	60fb      	str	r3, [r7, #12]
	while(!adc_conversion_complete && HAL_GetTick() < timeout) {
 8001c5a:	bf00      	nop
 8001c5c:	4b52      	ldr	r3, [pc, #328]	; (8001da8 <Read_Current_Sensors+0x168>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d105      	bne.n	8001c72 <Read_Current_Sensors+0x32>
 8001c66:	f001 fbdb 	bl	8003420 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d8f4      	bhi.n	8001c5c <Read_Current_Sensors+0x1c>
		// ADC 변환 완료 대기
	}
	if(adc_conversion_complete){
 8001c72:	4b4d      	ldr	r3, [pc, #308]	; (8001da8 <Read_Current_Sensors+0x168>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 808c 	beq.w	8001d96 <Read_Current_Sensors+0x156>
		adc_conversion_complete = 0;
 8001c7e:	4b4a      	ldr	r3, [pc, #296]	; (8001da8 <Read_Current_Sensors+0x168>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]

		float adc_voltage_a = (float)adc_values[0] * VREF / ADC_RESOLUTION;
 8001c84:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <Read_Current_Sensors+0x160>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f81e 	bl	8000ccc <__aeabi_ui2f>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4946      	ldr	r1, [pc, #280]	; (8001dac <Read_Current_Sensors+0x16c>)
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff f871 	bl	8000d7c <__aeabi_fmul>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff f91f 	bl	8000ee4 <__aeabi_fdiv>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	60bb      	str	r3, [r7, #8]
		float adc_voltage_b = (float)adc_values[1] * VREF / ADC_RESOLUTION;
 8001caa:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <Read_Current_Sensors+0x160>)
 8001cac:	885b      	ldrh	r3, [r3, #2]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f80b 	bl	8000ccc <__aeabi_ui2f>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	493c      	ldr	r1, [pc, #240]	; (8001dac <Read_Current_Sensors+0x16c>)
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff f85e 	bl	8000d7c <__aeabi_fmul>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f90c 	bl	8000ee4 <__aeabi_fdiv>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	607b      	str	r3, [r7, #4]
		float R_sense = 0.01f;
 8001cd0:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <Read_Current_Sensors+0x170>)
 8001cd2:	603b      	str	r3, [r7, #0]

		current_a = (adc_voltage_a - ACTUAL_ZERO_A) / (INA240_GAIN * R_sense);
 8001cd4:	4937      	ldr	r1, [pc, #220]	; (8001db4 <Read_Current_Sensors+0x174>)
 8001cd6:	68b8      	ldr	r0, [r7, #8]
 8001cd8:	f7fe ff46 	bl	8000b68 <__aeabi_fsub>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461c      	mov	r4, r3
 8001ce0:	4935      	ldr	r1, [pc, #212]	; (8001db8 <Read_Current_Sensors+0x178>)
 8001ce2:	6838      	ldr	r0, [r7, #0]
 8001ce4:	f7ff f84a 	bl	8000d7c <__aeabi_fmul>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4619      	mov	r1, r3
 8001cec:	4620      	mov	r0, r4
 8001cee:	f7ff f8f9 	bl	8000ee4 <__aeabi_fdiv>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <Read_Current_Sensors+0x17c>)
 8001cf8:	601a      	str	r2, [r3, #0]
		current_b = (adc_voltage_b - ACTUAL_ZERO_B) / (INA240_GAIN * R_sense);
 8001cfa:	4931      	ldr	r1, [pc, #196]	; (8001dc0 <Read_Current_Sensors+0x180>)
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7fe ff33 	bl	8000b68 <__aeabi_fsub>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461c      	mov	r4, r3
 8001d06:	492c      	ldr	r1, [pc, #176]	; (8001db8 <Read_Current_Sensors+0x178>)
 8001d08:	6838      	ldr	r0, [r7, #0]
 8001d0a:	f7ff f837 	bl	8000d7c <__aeabi_fmul>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4619      	mov	r1, r3
 8001d12:	4620      	mov	r0, r4
 8001d14:	f7ff f8e6 	bl	8000ee4 <__aeabi_fdiv>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <Read_Current_Sensors+0x184>)
 8001d1e:	601a      	str	r2, [r3, #0]
		current_c = -(current_a + current_b);
 8001d20:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <Read_Current_Sensors+0x17c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a27      	ldr	r2, [pc, #156]	; (8001dc4 <Read_Current_Sensors+0x184>)
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe ff1e 	bl	8000b6c <__addsf3>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d36:	4a24      	ldr	r2, [pc, #144]	; (8001dc8 <Read_Current_Sensors+0x188>)
 8001d38:	6013      	str	r3, [r2, #0]

		if(fabs(current_a) < 0.02f) current_a = 0.0f;
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <Read_Current_Sensors+0x17c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d42:	4922      	ldr	r1, [pc, #136]	; (8001dcc <Read_Current_Sensors+0x18c>)
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff f9b7 	bl	80010b8 <__aeabi_fcmplt>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <Read_Current_Sensors+0x118>
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <Read_Current_Sensors+0x17c>)
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
		if(fabs(current_b) < 0.02f) current_b = 0.0f;
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <Read_Current_Sensors+0x184>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d60:	491a      	ldr	r1, [pc, #104]	; (8001dcc <Read_Current_Sensors+0x18c>)
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff f9a8 	bl	80010b8 <__aeabi_fcmplt>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <Read_Current_Sensors+0x136>
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <Read_Current_Sensors+0x184>)
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
		if(fabs(current_c) < 0.02f) current_c = 0.0f;
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <Read_Current_Sensors+0x188>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d7e:	4913      	ldr	r1, [pc, #76]	; (8001dcc <Read_Current_Sensors+0x18c>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff f999 	bl	80010b8 <__aeabi_fcmplt>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d100      	bne.n	8001d8e <Read_Current_Sensors+0x14e>

		 //printf("Raw ADC: [%d, %d] | V: [%.3f, %.3f] | I_abc: [%.3f, %.3f, %.3f]A\r\n",
		               //adc_values[0], adc_values[1], adc_voltage_a, adc_voltage_b,
		               //current_a, current_b, current_c);
	}
}
 8001d8c:	e003      	b.n	8001d96 <Read_Current_Sensors+0x156>
		if(fabs(current_c) < 0.02f) current_c = 0.0f;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <Read_Current_Sensors+0x188>)
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd90      	pop	{r4, r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200002fc 	.word	0x200002fc
 8001da4:	200001f8 	.word	0x200001f8
 8001da8:	20000300 	.word	0x20000300
 8001dac:	40533333 	.word	0x40533333
 8001db0:	3c23d70a 	.word	0x3c23d70a
 8001db4:	3fd39581 	.word	0x3fd39581
 8001db8:	41a00000 	.word	0x41a00000
 8001dbc:	20000304 	.word	0x20000304
 8001dc0:	3fd3b646 	.word	0x3fd3b646
 8001dc4:	20000308 	.word	0x20000308
 8001dc8:	2000030c 	.word	0x2000030c
 8001dcc:	3ca3d70a 	.word	0x3ca3d70a

08001dd0 <Current_Sensor_Init>:

// 전류 센서 초기화
void Current_Sensor_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	if(HAL_ADCEx_Calibration_Start(&hadc3) != HAL_OK) {
 8001dd4:	481b      	ldr	r0, [pc, #108]	; (8001e44 <Current_Sensor_Init+0x74>)
 8001dd6:	f001 ffed 	bl	8003db4 <HAL_ADCEx_Calibration_Start>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <Current_Sensor_Init+0x1a>
		printf("ERROR: ADC Calibration Failed!\r\n");
 8001de0:	4819      	ldr	r0, [pc, #100]	; (8001e48 <Current_Sensor_Init+0x78>)
 8001de2:	f005 fa47 	bl	8007274 <puts>
		Error_Handler();
 8001de6:	f001 f85d 	bl	8002ea4 <Error_Handler>
	}
	if (HAL_TIM_Base_Start(&htim1) != HAL_OK) {
 8001dea:	4818      	ldr	r0, [pc, #96]	; (8001e4c <Current_Sensor_Init+0x7c>)
 8001dec:	f003 fc4a 	bl	8005684 <HAL_TIM_Base_Start>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d004      	beq.n	8001e00 <Current_Sensor_Init+0x30>
		printf("ERROR: Timer1 Start Failed!\r\n");
 8001df6:	4816      	ldr	r0, [pc, #88]	; (8001e50 <Current_Sensor_Init+0x80>)
 8001df8:	f005 fa3c 	bl	8007274 <puts>
		Error_Handler();
 8001dfc:	f001 f852 	bl	8002ea4 <Error_Handler>
	}
	// TIM1 CH3 Compare 이벤트 활성화
	if (HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) {
 8001e00:	2108      	movs	r1, #8
 8001e02:	4812      	ldr	r0, [pc, #72]	; (8001e4c <Current_Sensor_Init+0x7c>)
 8001e04:	f003 fc96 	bl	8005734 <HAL_TIM_OC_Start>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d004      	beq.n	8001e18 <Current_Sensor_Init+0x48>
		printf("ERROR: Timer1 CH3 OC Start Failed!\r\n");
 8001e0e:	4811      	ldr	r0, [pc, #68]	; (8001e54 <Current_Sensor_Init+0x84>)
 8001e10:	f005 fa30 	bl	8007274 <puts>
		Error_Handler();
 8001e14:	f001 f846 	bl	8002ea4 <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc_values, 2) != HAL_OK) {
 8001e18:	2202      	movs	r2, #2
 8001e1a:	490f      	ldr	r1, [pc, #60]	; (8001e58 <Current_Sensor_Init+0x88>)
 8001e1c:	4809      	ldr	r0, [pc, #36]	; (8001e44 <Current_Sensor_Init+0x74>)
 8001e1e:	f001 fc17 	bl	8003650 <HAL_ADC_Start_DMA>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d004      	beq.n	8001e32 <Current_Sensor_Init+0x62>
		printf("ERROR: ADC DMA Start Failed!\r\n");
 8001e28:	480c      	ldr	r0, [pc, #48]	; (8001e5c <Current_Sensor_Init+0x8c>)
 8001e2a:	f005 fa23 	bl	8007274 <puts>
		Error_Handler();
 8001e2e:	f001 f839 	bl	8002ea4 <Error_Handler>
	}
	printf("Current sensor hardware initialization complete\r\n");
 8001e32:	480b      	ldr	r0, [pc, #44]	; (8001e60 <Current_Sensor_Init+0x90>)
 8001e34:	f005 fa1e 	bl	8007274 <puts>
	HAL_Delay(1000);
 8001e38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e3c:	f001 fafa 	bl	8003434 <HAL_Delay>
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	200001f8 	.word	0x200001f8
 8001e48:	0800a268 	.word	0x0800a268
 8001e4c:	2000026c 	.word	0x2000026c
 8001e50:	0800a288 	.word	0x0800a288
 8001e54:	0800a2a8 	.word	0x0800a2a8
 8001e58:	200002fc 	.word	0x200002fc
 8001e5c:	0800a2cc 	.word	0x0800a2cc
 8001e60:	0800a2ec 	.word	0x0800a2ec

08001e64 <normalize_angle>:

float normalize_angle(float angle){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	while (angle > PI) angle -= TWO_PI;
 8001e6c:	e005      	b.n	8001e7a <normalize_angle+0x16>
 8001e6e:	4910      	ldr	r1, [pc, #64]	; (8001eb0 <normalize_angle+0x4c>)
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7fe fe79 	bl	8000b68 <__aeabi_fsub>
 8001e76:	4603      	mov	r3, r0
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	490e      	ldr	r1, [pc, #56]	; (8001eb4 <normalize_angle+0x50>)
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff f939 	bl	80010f4 <__aeabi_fcmpgt>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f2      	bne.n	8001e6e <normalize_angle+0xa>
	while (angle < -PI) angle += TWO_PI;
 8001e88:	e005      	b.n	8001e96 <normalize_angle+0x32>
 8001e8a:	4909      	ldr	r1, [pc, #36]	; (8001eb0 <normalize_angle+0x4c>)
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7fe fe6d 	bl	8000b6c <__addsf3>
 8001e92:	4603      	mov	r3, r0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	4908      	ldr	r1, [pc, #32]	; (8001eb8 <normalize_angle+0x54>)
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff f90d 	bl	80010b8 <__aeabi_fcmplt>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f2      	bne.n	8001e8a <normalize_angle+0x26>
	return angle;
 8001ea4:	687b      	ldr	r3, [r7, #4]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40c90fdb 	.word	0x40c90fdb
 8001eb4:	40490fdb 	.word	0x40490fdb
 8001eb8:	c0490fdb 	.word	0xc0490fdb

08001ebc <FOC_control>:
    }
}
#endif

// 극단적인 토크 차이로 명확한 가감속 구현
void FOC_control(void){
 8001ebc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ec0:	b0a8      	sub	sp, #160	; 0xa0
 8001ec2:	af04      	add	r7, sp, #16
    if(!motor_enabled){
 8001ec4:	4ba0      	ldr	r3, [pc, #640]	; (8002148 <FOC_control+0x28c>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d109      	bne.n	8001ee0 <FOC_control+0x24>
        set_pwm_duty(0.5f, 0.5f, 0.5f);
 8001ecc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001ed0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001ed4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001ed8:	f7ff fe04 	bl	8001ae4 <set_pwm_duty>
        return;
 8001edc:	f000 bd70 	b.w	80029c0 <FOC_control+0xb04>
    // 1. 빠른 캘리브레이션
    static float ia_offset = 0, ib_offset = 0;
    static uint8_t offset_calibrated = 0;
    static int offset_count = 0;

    if(!offset_calibrated && offset_count < 100) {
 8001ee0:	4b9a      	ldr	r3, [pc, #616]	; (800214c <FOC_control+0x290>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d14b      	bne.n	8001f80 <FOC_control+0xc4>
 8001ee8:	4b99      	ldr	r3, [pc, #612]	; (8002150 <FOC_control+0x294>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b63      	cmp	r3, #99	; 0x63
 8001eee:	dc47      	bgt.n	8001f80 <FOC_control+0xc4>
        Read_Current_Sensors();
 8001ef0:	f7ff fea6 	bl	8001c40 <Read_Current_Sensors>
        ia_offset += current_a;
 8001ef4:	4b97      	ldr	r3, [pc, #604]	; (8002154 <FOC_control+0x298>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a97      	ldr	r2, [pc, #604]	; (8002158 <FOC_control+0x29c>)
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fe34 	bl	8000b6c <__addsf3>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b92      	ldr	r3, [pc, #584]	; (8002154 <FOC_control+0x298>)
 8001f0a:	601a      	str	r2, [r3, #0]
        ib_offset += current_b;
 8001f0c:	4b93      	ldr	r3, [pc, #588]	; (800215c <FOC_control+0x2a0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a93      	ldr	r2, [pc, #588]	; (8002160 <FOC_control+0x2a4>)
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fe28 	bl	8000b6c <__addsf3>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b8e      	ldr	r3, [pc, #568]	; (800215c <FOC_control+0x2a0>)
 8001f22:	601a      	str	r2, [r3, #0]
        offset_count++;
 8001f24:	4b8a      	ldr	r3, [pc, #552]	; (8002150 <FOC_control+0x294>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	4a89      	ldr	r2, [pc, #548]	; (8002150 <FOC_control+0x294>)
 8001f2c:	6013      	str	r3, [r2, #0]

        if(offset_count >= 100) {
 8001f2e:	4b88      	ldr	r3, [pc, #544]	; (8002150 <FOC_control+0x294>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b63      	cmp	r3, #99	; 0x63
 8001f34:	dd1a      	ble.n	8001f6c <FOC_control+0xb0>
            ia_offset /= 100.0f;
 8001f36:	4b87      	ldr	r3, [pc, #540]	; (8002154 <FOC_control+0x298>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	498a      	ldr	r1, [pc, #552]	; (8002164 <FOC_control+0x2a8>)
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe ffd1 	bl	8000ee4 <__aeabi_fdiv>
 8001f42:	4603      	mov	r3, r0
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b83      	ldr	r3, [pc, #524]	; (8002154 <FOC_control+0x298>)
 8001f48:	601a      	str	r2, [r3, #0]
            ib_offset /= 100.0f;
 8001f4a:	4b84      	ldr	r3, [pc, #528]	; (800215c <FOC_control+0x2a0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4985      	ldr	r1, [pc, #532]	; (8002164 <FOC_control+0x2a8>)
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe ffc7 	bl	8000ee4 <__aeabi_fdiv>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b80      	ldr	r3, [pc, #512]	; (800215c <FOC_control+0x2a0>)
 8001f5c:	601a      	str	r2, [r3, #0]
            offset_calibrated = 1;
 8001f5e:	4b7b      	ldr	r3, [pc, #492]	; (800214c <FOC_control+0x290>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
            printf("🔧 극한 제어 준비 완료!\r\n");
 8001f64:	4880      	ldr	r0, [pc, #512]	; (8002168 <FOC_control+0x2ac>)
 8001f66:	f005 f985 	bl	8007274 <puts>
 8001f6a:	e009      	b.n	8001f80 <FOC_control+0xc4>
        } else {
            set_pwm_duty(0.5f, 0.5f, 0.5f);
 8001f6c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001f70:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001f74:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001f78:	f7ff fdb4 	bl	8001ae4 <set_pwm_duty>
            return;
 8001f7c:	f000 bd20 	b.w	80029c0 <FOC_control+0xb04>
        }
    }

    // 2. 각도 처리 (속도 측정 최적화)
    uint16_t raw_angle = AS5600_ReadRawAngle();
 8001f80:	f7ff fac5 	bl	800150e <AS5600_ReadRawAngle>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    float raw_mechanical_angle = ((float)raw_angle) * TWO_PI / 4096.0f;
 8001f8a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fe9c 	bl	8000ccc <__aeabi_ui2f>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4975      	ldr	r1, [pc, #468]	; (800216c <FOC_control+0x2b0>)
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe feef 	bl	8000d7c <__aeabi_fmul>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe ff9d 	bl	8000ee4 <__aeabi_fdiv>
 8001faa:	4603      	mov	r3, r0
 8001fac:	677b      	str	r3, [r7, #116]	; 0x74
    float raw_mechanical = normalize_angle(raw_mechanical_angle - electrical_offset);
 8001fae:	4b70      	ldr	r3, [pc, #448]	; (8002170 <FOC_control+0x2b4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001fb6:	f7fe fdd7 	bl	8000b68 <__aeabi_fsub>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff51 	bl	8001e64 <normalize_angle>
 8001fc2:	6738      	str	r0, [r7, #112]	; 0x70

    static float smooth_mechanical = 0;
    static uint8_t first_run = 1;

    if(first_run) {
 8001fc4:	4b6b      	ldr	r3, [pc, #428]	; (8002174 <FOC_control+0x2b8>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <FOC_control+0x11e>
        smooth_mechanical = raw_mechanical;
 8001fcc:	4a6a      	ldr	r2, [pc, #424]	; (8002178 <FOC_control+0x2bc>)
 8001fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd0:	6013      	str	r3, [r2, #0]
        first_run = 0;
 8001fd2:	4b68      	ldr	r3, [pc, #416]	; (8002174 <FOC_control+0x2b8>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	e04c      	b.n	8002074 <FOC_control+0x1b8>
    } else {
        float angle_diff = raw_mechanical - smooth_mechanical;
 8001fda:	4b67      	ldr	r3, [pc, #412]	; (8002178 <FOC_control+0x2bc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001fe2:	f7fe fdc1 	bl	8000b68 <__aeabi_fsub>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        while(angle_diff > PI) angle_diff -= TWO_PI;
 8001fec:	e007      	b.n	8001ffe <FOC_control+0x142>
 8001fee:	495f      	ldr	r1, [pc, #380]	; (800216c <FOC_control+0x2b0>)
 8001ff0:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001ff4:	f7fe fdb8 	bl	8000b68 <__aeabi_fsub>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001ffe:	495f      	ldr	r1, [pc, #380]	; (800217c <FOC_control+0x2c0>)
 8002000:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002004:	f7ff f876 	bl	80010f4 <__aeabi_fcmpgt>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1ef      	bne.n	8001fee <FOC_control+0x132>
        while(angle_diff < -PI) angle_diff += TWO_PI;
 800200e:	e007      	b.n	8002020 <FOC_control+0x164>
 8002010:	4956      	ldr	r1, [pc, #344]	; (800216c <FOC_control+0x2b0>)
 8002012:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002016:	f7fe fda9 	bl	8000b6c <__addsf3>
 800201a:	4603      	mov	r3, r0
 800201c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002020:	4957      	ldr	r1, [pc, #348]	; (8002180 <FOC_control+0x2c4>)
 8002022:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002026:	f7ff f847 	bl	80010b8 <__aeabi_fcmplt>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1ef      	bne.n	8002010 <FOC_control+0x154>

        if(angle_diff > 0.1f) angle_diff = 0.1f;  // 제한 대폭 완화
 8002030:	4954      	ldr	r1, [pc, #336]	; (8002184 <FOC_control+0x2c8>)
 8002032:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002036:	f7ff f85d 	bl	80010f4 <__aeabi_fcmpgt>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <FOC_control+0x18c>
 8002040:	4b50      	ldr	r3, [pc, #320]	; (8002184 <FOC_control+0x2c8>)
 8002042:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002046:	e00a      	b.n	800205e <FOC_control+0x1a2>
        else if(angle_diff < -0.1f) angle_diff = -0.1f;
 8002048:	494f      	ldr	r1, [pc, #316]	; (8002188 <FOC_control+0x2cc>)
 800204a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800204e:	f7ff f833 	bl	80010b8 <__aeabi_fcmplt>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <FOC_control+0x1a2>
 8002058:	4b4b      	ldr	r3, [pc, #300]	; (8002188 <FOC_control+0x2cc>)
 800205a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

        smooth_mechanical += angle_diff * 1.0f;  // 필터링 완전 제거
 800205e:	4b46      	ldr	r3, [pc, #280]	; (8002178 <FOC_control+0x2bc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fd80 	bl	8000b6c <__addsf3>
 800206c:	4603      	mov	r3, r0
 800206e:	461a      	mov	r2, r3
 8002070:	4b41      	ldr	r3, [pc, #260]	; (8002178 <FOC_control+0x2bc>)
 8002072:	601a      	str	r2, [r3, #0]
    }

    mechanical_angle = smooth_mechanical;
 8002074:	4b40      	ldr	r3, [pc, #256]	; (8002178 <FOC_control+0x2bc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a44      	ldr	r2, [pc, #272]	; (800218c <FOC_control+0x2d0>)
 800207a:	6013      	str	r3, [r2, #0]
    while(mechanical_angle > TWO_PI) mechanical_angle -= TWO_PI;
 800207c:	e009      	b.n	8002092 <FOC_control+0x1d6>
 800207e:	4b43      	ldr	r3, [pc, #268]	; (800218c <FOC_control+0x2d0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	493a      	ldr	r1, [pc, #232]	; (800216c <FOC_control+0x2b0>)
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fd6f 	bl	8000b68 <__aeabi_fsub>
 800208a:	4603      	mov	r3, r0
 800208c:	461a      	mov	r2, r3
 800208e:	4b3f      	ldr	r3, [pc, #252]	; (800218c <FOC_control+0x2d0>)
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	4b3e      	ldr	r3, [pc, #248]	; (800218c <FOC_control+0x2d0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4935      	ldr	r1, [pc, #212]	; (800216c <FOC_control+0x2b0>)
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f82b 	bl	80010f4 <__aeabi_fcmpgt>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1ec      	bne.n	800207e <FOC_control+0x1c2>
    while(mechanical_angle < 0) mechanical_angle += TWO_PI;
 80020a4:	e009      	b.n	80020ba <FOC_control+0x1fe>
 80020a6:	4b39      	ldr	r3, [pc, #228]	; (800218c <FOC_control+0x2d0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4930      	ldr	r1, [pc, #192]	; (800216c <FOC_control+0x2b0>)
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fd5d 	bl	8000b6c <__addsf3>
 80020b2:	4603      	mov	r3, r0
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b35      	ldr	r3, [pc, #212]	; (800218c <FOC_control+0x2d0>)
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	4b34      	ldr	r3, [pc, #208]	; (800218c <FOC_control+0x2d0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f04f 0100 	mov.w	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fff8 	bl	80010b8 <__aeabi_fcmplt>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1eb      	bne.n	80020a6 <FOC_control+0x1ea>

    electrical_angle = fmodf(mechanical_angle * POLE_PAIRS, TWO_PI);
 80020ce:	4b2f      	ldr	r3, [pc, #188]	; (800218c <FOC_control+0x2d0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	492f      	ldr	r1, [pc, #188]	; (8002190 <FOC_control+0x2d4>)
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fe51 	bl	8000d7c <__aeabi_fmul>
 80020da:	4603      	mov	r3, r0
 80020dc:	4923      	ldr	r1, [pc, #140]	; (800216c <FOC_control+0x2b0>)
 80020de:	4618      	mov	r0, r3
 80020e0:	f007 f854 	bl	800918c <fmodf>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4a2b      	ldr	r2, [pc, #172]	; (8002194 <FOC_control+0x2d8>)
 80020e8:	6013      	str	r3, [r2, #0]
    static uint32_t prev_speed_time = 0;
    static float current_speed = 0;
    static uint8_t speed_init = 0;
    static int32_t angle_accumulator = 0;  // Raw 단위로 누적

    uint32_t current_time = HAL_GetTick();
 80020ea:	f001 f999 	bl	8003420 <HAL_GetTick>
 80020ee:	66f8      	str	r0, [r7, #108]	; 0x6c

    if(!speed_init) {
 80020f0:	4b29      	ldr	r3, [pc, #164]	; (8002198 <FOC_control+0x2dc>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10d      	bne.n	8002114 <FOC_control+0x258>
        prev_raw_angle = raw_angle;
 80020f8:	4a28      	ldr	r2, [pc, #160]	; (800219c <FOC_control+0x2e0>)
 80020fa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80020fe:	8013      	strh	r3, [r2, #0]
        prev_speed_time = current_time;
 8002100:	4a27      	ldr	r2, [pc, #156]	; (80021a0 <FOC_control+0x2e4>)
 8002102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002104:	6013      	str	r3, [r2, #0]
        speed_init = 1;
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <FOC_control+0x2dc>)
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
        angle_accumulator = 0;
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <FOC_control+0x2e8>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e0e9      	b.n	80022e8 <FOC_control+0x42c>
    } else {
        // 100ms마다 속도 계산
        if(current_time - prev_speed_time >= 100) {
 8002114:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <FOC_control+0x2e4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b63      	cmp	r3, #99	; 0x63
 800211e:	f240 80a9 	bls.w	8002274 <FOC_control+0x3b8>
            int32_t raw_change = (int32_t)raw_angle - (int32_t)prev_raw_angle;
 8002122:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002126:	4a1d      	ldr	r2, [pc, #116]	; (800219c <FOC_control+0x2e0>)
 8002128:	8812      	ldrh	r2, [r2, #0]
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

            // 4096 경계 처리
            if(raw_change > 2048) raw_change -= 4096;
 8002130:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002138:	dd36      	ble.n	80021a8 <FOC_control+0x2ec>
 800213a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800213e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8002142:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002146:	e03a      	b.n	80021be <FOC_control+0x302>
 8002148:	20000314 	.word	0x20000314
 800214c:	20000328 	.word	0x20000328
 8002150:	2000032c 	.word	0x2000032c
 8002154:	20000330 	.word	0x20000330
 8002158:	20000304 	.word	0x20000304
 800215c:	20000334 	.word	0x20000334
 8002160:	20000308 	.word	0x20000308
 8002164:	42c80000 	.word	0x42c80000
 8002168:	0800a320 	.word	0x0800a320
 800216c:	40c90fdb 	.word	0x40c90fdb
 8002170:	20000318 	.word	0x20000318
 8002174:	20000000 	.word	0x20000000
 8002178:	20000338 	.word	0x20000338
 800217c:	40490fdb 	.word	0x40490fdb
 8002180:	c0490fdb 	.word	0xc0490fdb
 8002184:	3dcccccd 	.word	0x3dcccccd
 8002188:	bdcccccd 	.word	0xbdcccccd
 800218c:	20000320 	.word	0x20000320
 8002190:	40e00000 	.word	0x40e00000
 8002194:	2000031c 	.word	0x2000031c
 8002198:	2000033c 	.word	0x2000033c
 800219c:	2000033e 	.word	0x2000033e
 80021a0:	20000340 	.word	0x20000340
 80021a4:	20000344 	.word	0x20000344
            else if(raw_change < -2048) raw_change += 4096;
 80021a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021ac:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 80021b0:	da05      	bge.n	80021be <FOC_control+0x302>
 80021b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

            angle_accumulator += abs(raw_change);  // 절댓값으로 속도 크기만
 80021be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021c2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80021c6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80021ca:	4b34      	ldr	r3, [pc, #208]	; (800229c <FOC_control+0x3e0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	4a32      	ldr	r2, [pc, #200]	; (800229c <FOC_control+0x3e0>)
 80021d2:	6013      	str	r3, [r2, #0]

            float time_diff = (current_time - prev_speed_time) / 1000.0f;
 80021d4:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <FOC_control+0x3e4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fd75 	bl	8000ccc <__aeabi_ui2f>
 80021e2:	4603      	mov	r3, r0
 80021e4:	492f      	ldr	r1, [pc, #188]	; (80022a4 <FOC_control+0x3e8>)
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe fe7c 	bl	8000ee4 <__aeabi_fdiv>
 80021ec:	4603      	mov	r3, r0
 80021ee:	66bb      	str	r3, [r7, #104]	; 0x68
            if(time_diff > 0) {
 80021f0:	f04f 0100 	mov.w	r1, #0
 80021f4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80021f6:	f7fe ff7d 	bl	80010f4 <__aeabi_fcmpgt>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d02e      	beq.n	800225e <FOC_control+0x3a2>
                float raw_speed = angle_accumulator / time_diff;  // raw/s
 8002200:	4b26      	ldr	r3, [pc, #152]	; (800229c <FOC_control+0x3e0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fd65 	bl	8000cd4 <__aeabi_i2f>
 800220a:	4603      	mov	r3, r0
 800220c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fe68 	bl	8000ee4 <__aeabi_fdiv>
 8002214:	4603      	mov	r3, r0
 8002216:	667b      	str	r3, [r7, #100]	; 0x64
                float new_speed = raw_speed * TWO_PI / 4096.0f;  // rad/s 변환
 8002218:	4923      	ldr	r1, [pc, #140]	; (80022a8 <FOC_control+0x3ec>)
 800221a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800221c:	f7fe fdae 	bl	8000d7c <__aeabi_fmul>
 8002220:	4603      	mov	r3, r0
 8002222:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe fe5c 	bl	8000ee4 <__aeabi_fdiv>
 800222c:	4603      	mov	r3, r0
 800222e:	663b      	str	r3, [r7, #96]	; 0x60
                current_speed = 0.5f * current_speed + 0.5f * new_speed;  // 빠른 필터링
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <FOC_control+0x3f0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe fd9f 	bl	8000d7c <__aeabi_fmul>
 800223e:	4603      	mov	r3, r0
 8002240:	461c      	mov	r4, r3
 8002242:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002246:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002248:	f7fe fd98 	bl	8000d7c <__aeabi_fmul>
 800224c:	4603      	mov	r3, r0
 800224e:	4619      	mov	r1, r3
 8002250:	4620      	mov	r0, r4
 8002252:	f7fe fc8b 	bl	8000b6c <__addsf3>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	4b14      	ldr	r3, [pc, #80]	; (80022ac <FOC_control+0x3f0>)
 800225c:	601a      	str	r2, [r3, #0]
            }

            prev_raw_angle = raw_angle;
 800225e:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <FOC_control+0x3f4>)
 8002260:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002264:	8013      	strh	r3, [r2, #0]
            prev_speed_time = current_time;
 8002266:	4a0e      	ldr	r2, [pc, #56]	; (80022a0 <FOC_control+0x3e4>)
 8002268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226a:	6013      	str	r3, [r2, #0]
            angle_accumulator = 0;
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <FOC_control+0x3e0>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	e039      	b.n	80022e8 <FOC_control+0x42c>
        } else {
            int32_t raw_change = (int32_t)raw_angle - (int32_t)prev_raw_angle;
 8002274:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002278:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <FOC_control+0x3f4>)
 800227a:	8812      	ldrh	r2, [r2, #0]
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            if(raw_change > 2048) raw_change -= 4096;
 8002282:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800228a:	dd13      	ble.n	80022b4 <FOC_control+0x3f8>
 800228c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002290:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8002294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002298:	e017      	b.n	80022ca <FOC_control+0x40e>
 800229a:	bf00      	nop
 800229c:	20000344 	.word	0x20000344
 80022a0:	20000340 	.word	0x20000340
 80022a4:	447a0000 	.word	0x447a0000
 80022a8:	40c90fdb 	.word	0x40c90fdb
 80022ac:	20000348 	.word	0x20000348
 80022b0:	2000033e 	.word	0x2000033e
            else if(raw_change < -2048) raw_change += 4096;
 80022b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022b8:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 80022bc:	da05      	bge.n	80022ca <FOC_control+0x40e>
 80022be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

            angle_accumulator += abs(raw_change);
 80022ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022ce:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80022d2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80022d6:	4b8b      	ldr	r3, [pc, #556]	; (8002504 <FOC_control+0x648>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	4a89      	ldr	r2, [pc, #548]	; (8002504 <FOC_control+0x648>)
 80022de:	6013      	str	r3, [r2, #0]
            prev_raw_angle = raw_angle;
 80022e0:	4a89      	ldr	r2, [pc, #548]	; (8002508 <FOC_control+0x64c>)
 80022e2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80022e6:	8013      	strh	r3, [r2, #0]
        }
    }

    // 4. 전류 측정 (빠른 응답)
    Read_Current_Sensors();
 80022e8:	f7ff fcaa 	bl	8001c40 <Read_Current_Sensors>

    float ia_corrected = current_a - ia_offset;
 80022ec:	4b87      	ldr	r3, [pc, #540]	; (800250c <FOC_control+0x650>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a87      	ldr	r2, [pc, #540]	; (8002510 <FOC_control+0x654>)
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe fc36 	bl	8000b68 <__aeabi_fsub>
 80022fc:	4603      	mov	r3, r0
 80022fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    float ib_corrected = current_b - ib_offset;
 8002300:	4b84      	ldr	r3, [pc, #528]	; (8002514 <FOC_control+0x658>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a84      	ldr	r2, [pc, #528]	; (8002518 <FOC_control+0x65c>)
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fc2c 	bl	8000b68 <__aeabi_fsub>
 8002310:	4603      	mov	r3, r0
 8002312:	65bb      	str	r3, [r7, #88]	; 0x58

    static float ia_filtered = 0, ib_filtered = 0;
    ia_filtered = 0.5f * ia_filtered + 0.5f * ia_corrected;  // 빠른 필터링
 8002314:	4b81      	ldr	r3, [pc, #516]	; (800251c <FOC_control+0x660>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe fd2d 	bl	8000d7c <__aeabi_fmul>
 8002322:	4603      	mov	r3, r0
 8002324:	461c      	mov	r4, r3
 8002326:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800232a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800232c:	f7fe fd26 	bl	8000d7c <__aeabi_fmul>
 8002330:	4603      	mov	r3, r0
 8002332:	4619      	mov	r1, r3
 8002334:	4620      	mov	r0, r4
 8002336:	f7fe fc19 	bl	8000b6c <__addsf3>
 800233a:	4603      	mov	r3, r0
 800233c:	461a      	mov	r2, r3
 800233e:	4b77      	ldr	r3, [pc, #476]	; (800251c <FOC_control+0x660>)
 8002340:	601a      	str	r2, [r3, #0]
    ib_filtered = 0.5f * ib_filtered + 0.5f * ib_corrected;
 8002342:	4b77      	ldr	r3, [pc, #476]	; (8002520 <FOC_control+0x664>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fd16 	bl	8000d7c <__aeabi_fmul>
 8002350:	4603      	mov	r3, r0
 8002352:	461c      	mov	r4, r3
 8002354:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002358:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800235a:	f7fe fd0f 	bl	8000d7c <__aeabi_fmul>
 800235e:	4603      	mov	r3, r0
 8002360:	4619      	mov	r1, r3
 8002362:	4620      	mov	r0, r4
 8002364:	f7fe fc02 	bl	8000b6c <__addsf3>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	4b6c      	ldr	r3, [pc, #432]	; (8002520 <FOC_control+0x664>)
 800236e:	601a      	str	r2, [r3, #0]

    float i_alpha = ia_filtered;
 8002370:	4b6a      	ldr	r3, [pc, #424]	; (800251c <FOC_control+0x660>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	657b      	str	r3, [r7, #84]	; 0x54
    float i_beta = (ia_filtered + 2.0f * ib_filtered) / 1.732f;
 8002376:	4b6a      	ldr	r3, [pc, #424]	; (8002520 <FOC_control+0x664>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4619      	mov	r1, r3
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fbf5 	bl	8000b6c <__addsf3>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	4b65      	ldr	r3, [pc, #404]	; (800251c <FOC_control+0x660>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4619      	mov	r1, r3
 800238c:	4610      	mov	r0, r2
 800238e:	f7fe fbed 	bl	8000b6c <__addsf3>
 8002392:	4603      	mov	r3, r0
 8002394:	4963      	ldr	r1, [pc, #396]	; (8002524 <FOC_control+0x668>)
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fda4 	bl	8000ee4 <__aeabi_fdiv>
 800239c:	4603      	mov	r3, r0
 800239e:	653b      	str	r3, [r7, #80]	; 0x50

    float cos_theta = cosf(electrical_angle);
 80023a0:	4b61      	ldr	r3, [pc, #388]	; (8002528 <FOC_control+0x66c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f006 ff0d 	bl	80091c4 <cosf>
 80023aa:	64f8      	str	r0, [r7, #76]	; 0x4c
    float sin_theta = sinf(electrical_angle);
 80023ac:	4b5e      	ldr	r3, [pc, #376]	; (8002528 <FOC_control+0x66c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f006 ff3f 	bl	8009234 <sinf>
 80023b6:	64b8      	str	r0, [r7, #72]	; 0x48
    float id_measured = i_alpha * cos_theta + i_beta * sin_theta;
 80023b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80023ba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80023bc:	f7fe fcde 	bl	8000d7c <__aeabi_fmul>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461c      	mov	r4, r3
 80023c4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80023c6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80023c8:	f7fe fcd8 	bl	8000d7c <__aeabi_fmul>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4619      	mov	r1, r3
 80023d0:	4620      	mov	r0, r4
 80023d2:	f7fe fbcb 	bl	8000b6c <__addsf3>
 80023d6:	4603      	mov	r3, r0
 80023d8:	647b      	str	r3, [r7, #68]	; 0x44
    float iq_measured = -i_alpha * sin_theta + i_beta * cos_theta;
 80023da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fcca 	bl	8000d7c <__aeabi_fmul>
 80023e8:	4603      	mov	r3, r0
 80023ea:	461c      	mov	r4, r3
 80023ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80023ee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80023f0:	f7fe fcc4 	bl	8000d7c <__aeabi_fmul>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4619      	mov	r1, r3
 80023f8:	4620      	mov	r0, r4
 80023fa:	f7fe fbb7 	bl	8000b6c <__addsf3>
 80023fe:	4603      	mov	r3, r0
 8002400:	643b      	str	r3, [r7, #64]	; 0x40
    static uint32_t torque_change_time = 0;
    static uint8_t control_started = 0;
    static uint32_t start_time = 0;
    static int torque_step = 0;

    if(start_time == 0) start_time = HAL_GetTick();
 8002402:	4b4a      	ldr	r3, [pc, #296]	; (800252c <FOC_control+0x670>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d104      	bne.n	8002414 <FOC_control+0x558>
 800240a:	f001 f809 	bl	8003420 <HAL_GetTick>
 800240e:	4603      	mov	r3, r0
 8002410:	4a46      	ldr	r2, [pc, #280]	; (800252c <FOC_control+0x670>)
 8002412:	6013      	str	r3, [r2, #0]

    // 2초 후 극한 제어 시작
    if(!control_started && (HAL_GetTick() - start_time > 2000)) {
 8002414:	4b46      	ldr	r3, [pc, #280]	; (8002530 <FOC_control+0x674>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d113      	bne.n	8002444 <FOC_control+0x588>
 800241c:	f001 f800 	bl	8003420 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	4b42      	ldr	r3, [pc, #264]	; (800252c <FOC_control+0x670>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800242c:	d90a      	bls.n	8002444 <FOC_control+0x588>
        control_started = 1;
 800242e:	4b40      	ldr	r3, [pc, #256]	; (8002530 <FOC_control+0x674>)
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
        torque_change_time = HAL_GetTick();
 8002434:	f000 fff4 	bl	8003420 <HAL_GetTick>
 8002438:	4603      	mov	r3, r0
 800243a:	4a3e      	ldr	r2, [pc, #248]	; (8002534 <FOC_control+0x678>)
 800243c:	6013      	str	r3, [r2, #0]
        printf("\r\n💥💥 극한 토크 가감속 시작! 💥💥\r\n");
 800243e:	483e      	ldr	r0, [pc, #248]	; (8002538 <FOC_control+0x67c>)
 8002440:	f004 ff18 	bl	8007274 <puts>
    }

    // 4초마다 극단적인 토크 변경
    if(control_started && (HAL_GetTick() - torque_change_time > 4000)) {
 8002444:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <FOC_control+0x674>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d051      	beq.n	80024f0 <FOC_control+0x634>
 800244c:	f000 ffe8 	bl	8003420 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	4b38      	ldr	r3, [pc, #224]	; (8002534 <FOC_control+0x678>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800245c:	d948      	bls.n	80024f0 <FOC_control+0x634>
        switch(torque_step) {
 800245e:	4b37      	ldr	r3, [pc, #220]	; (800253c <FOC_control+0x680>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b04      	cmp	r3, #4
 8002464:	d830      	bhi.n	80024c8 <FOC_control+0x60c>
 8002466:	a201      	add	r2, pc, #4	; (adr r2, 800246c <FOC_control+0x5b0>)
 8002468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246c:	08002481 	.word	0x08002481
 8002470:	0800248f 	.word	0x0800248f
 8002474:	0800249d 	.word	0x0800249d
 8002478:	080024ad 	.word	0x080024ad
 800247c:	080024bb 	.word	0x080024bb
            case 0:
                target_torque = 10.0f;
 8002480:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <FOC_control+0x684>)
 8002482:	4a30      	ldr	r2, [pc, #192]	; (8002544 <FOC_control+0x688>)
 8002484:	601a      	str	r2, [r3, #0]
                printf("\r\n🚀🚀 최대 토크: 10.0A - 최고속! 🚀🚀\r\n");
 8002486:	4830      	ldr	r0, [pc, #192]	; (8002548 <FOC_control+0x68c>)
 8002488:	f004 fef4 	bl	8007274 <puts>
                break;
 800248c:	e01c      	b.n	80024c8 <FOC_control+0x60c>
            case 1:
                target_torque = 0.1f;
 800248e:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <FOC_control+0x684>)
 8002490:	4a2e      	ldr	r2, [pc, #184]	; (800254c <FOC_control+0x690>)
 8002492:	601a      	str	r2, [r3, #0]
                printf("\r\n🛑🛑 최소 토크: 0.1A - 거의 정지! 🛑🛑\r\n");
 8002494:	482e      	ldr	r0, [pc, #184]	; (8002550 <FOC_control+0x694>)
 8002496:	f004 feed 	bl	8007274 <puts>
                break;
 800249a:	e015      	b.n	80024c8 <FOC_control+0x60c>
            case 2:
                target_torque = 8.0f;
 800249c:	4b28      	ldr	r3, [pc, #160]	; (8002540 <FOC_control+0x684>)
 800249e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80024a2:	601a      	str	r2, [r3, #0]
                printf("\r\n⚡⚡ 고토크: 8.0A - 고속 회전! ⚡⚡\r\n");
 80024a4:	482b      	ldr	r0, [pc, #172]	; (8002554 <FOC_control+0x698>)
 80024a6:	f004 fee5 	bl	8007274 <puts>
                break;
 80024aa:	e00d      	b.n	80024c8 <FOC_control+0x60c>
            case 3:
                target_torque = 0.3f;
 80024ac:	4b24      	ldr	r3, [pc, #144]	; (8002540 <FOC_control+0x684>)
 80024ae:	4a2a      	ldr	r2, [pc, #168]	; (8002558 <FOC_control+0x69c>)
 80024b0:	601a      	str	r2, [r3, #0]
                printf("\r\n🐌🐌 저토크: 0.3A - 저속 회전! 🐌🐌\r\n");
 80024b2:	482a      	ldr	r0, [pc, #168]	; (800255c <FOC_control+0x6a0>)
 80024b4:	f004 fede 	bl	8007274 <puts>
                break;
 80024b8:	e006      	b.n	80024c8 <FOC_control+0x60c>
            case 4:
                target_torque = 12.0f;
 80024ba:	4b21      	ldr	r3, [pc, #132]	; (8002540 <FOC_control+0x684>)
 80024bc:	4a28      	ldr	r2, [pc, #160]	; (8002560 <FOC_control+0x6a4>)
 80024be:	601a      	str	r2, [r3, #0]
                printf("\r\n💥💥 극한토크: 12.0A - 극한속도! 💥💥\r\n");
 80024c0:	4828      	ldr	r0, [pc, #160]	; (8002564 <FOC_control+0x6a8>)
 80024c2:	f004 fed7 	bl	8007274 <puts>
                break;
 80024c6:	bf00      	nop
        }
        torque_step = (torque_step + 1) % 5;
 80024c8:	4b1c      	ldr	r3, [pc, #112]	; (800253c <FOC_control+0x680>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	1c59      	adds	r1, r3, #1
 80024ce:	4b26      	ldr	r3, [pc, #152]	; (8002568 <FOC_control+0x6ac>)
 80024d0:	fb83 2301 	smull	r2, r3, r3, r1
 80024d4:	105a      	asrs	r2, r3, #1
 80024d6:	17cb      	asrs	r3, r1, #31
 80024d8:	1ad2      	subs	r2, r2, r3
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	1aca      	subs	r2, r1, r3
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <FOC_control+0x680>)
 80024e4:	601a      	str	r2, [r3, #0]
        torque_change_time = HAL_GetTick();
 80024e6:	f000 ff9b 	bl	8003420 <HAL_GetTick>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4a11      	ldr	r2, [pc, #68]	; (8002534 <FOC_control+0x678>)
 80024ee:	6013      	str	r3, [r2, #0]
    }

    float id_ref = 0.0f;
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    float iq_ref = control_started ? target_torque : 1.0f;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <FOC_control+0x674>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d036      	beq.n	800256c <FOC_control+0x6b0>
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <FOC_control+0x684>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	e035      	b.n	8002570 <FOC_control+0x6b4>
 8002504:	20000344 	.word	0x20000344
 8002508:	2000033e 	.word	0x2000033e
 800250c:	20000304 	.word	0x20000304
 8002510:	20000330 	.word	0x20000330
 8002514:	20000308 	.word	0x20000308
 8002518:	20000334 	.word	0x20000334
 800251c:	2000034c 	.word	0x2000034c
 8002520:	20000350 	.word	0x20000350
 8002524:	3fddb22d 	.word	0x3fddb22d
 8002528:	2000031c 	.word	0x2000031c
 800252c:	20000354 	.word	0x20000354
 8002530:	20000358 	.word	0x20000358
 8002534:	2000035c 	.word	0x2000035c
 8002538:	0800a344 	.word	0x0800a344
 800253c:	20000360 	.word	0x20000360
 8002540:	20000004 	.word	0x20000004
 8002544:	41200000 	.word	0x41200000
 8002548:	0800a37c 	.word	0x0800a37c
 800254c:	3dcccccd 	.word	0x3dcccccd
 8002550:	0800a3b4 	.word	0x0800a3b4
 8002554:	0800a3f0 	.word	0x0800a3f0
 8002558:	3e99999a 	.word	0x3e99999a
 800255c:	0800a424 	.word	0x0800a424
 8002560:	41400000 	.word	0x41400000
 8002564:	0800a45c 	.word	0x0800a45c
 8002568:	66666667 	.word	0x66666667
 800256c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002570:	63bb      	str	r3, [r7, #56]	; 0x38

    // 6. ★★★ 강력한 전류 제어 ★★★
    static float id_integral = 0.0f;
    static float iq_integral = 0.0f;

    float id_error = id_ref - id_measured;
 8002572:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002574:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002576:	f7fe faf7 	bl	8000b68 <__aeabi_fsub>
 800257a:	4603      	mov	r3, r0
 800257c:	637b      	str	r3, [r7, #52]	; 0x34
    float iq_error = iq_ref - iq_measured;
 800257e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002580:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002582:	f7fe faf1 	bl	8000b68 <__aeabi_fsub>
 8002586:	4603      	mov	r3, r0
 8002588:	633b      	str	r3, [r7, #48]	; 0x30

    float dt = 0.005f;
 800258a:	4b9e      	ldr	r3, [pc, #632]	; (8002804 <FOC_control+0x948>)
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c

    // 적분 (큰 오차에서도 유지)
    if(fabsf(id_error) < 3.0f) {  // 0.5f → 3.0f (범위 확대)
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002594:	499c      	ldr	r1, [pc, #624]	; (8002808 <FOC_control+0x94c>)
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fd8e 	bl	80010b8 <__aeabi_fcmplt>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00f      	beq.n	80025c2 <FOC_control+0x706>
        id_integral += id_error * dt;
 80025a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80025a6:	f7fe fbe9 	bl	8000d7c <__aeabi_fmul>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b97      	ldr	r3, [pc, #604]	; (800280c <FOC_control+0x950>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4619      	mov	r1, r3
 80025b4:	4610      	mov	r0, r2
 80025b6:	f7fe fad9 	bl	8000b6c <__addsf3>
 80025ba:	4603      	mov	r3, r0
 80025bc:	461a      	mov	r2, r3
 80025be:	4b93      	ldr	r3, [pc, #588]	; (800280c <FOC_control+0x950>)
 80025c0:	601a      	str	r2, [r3, #0]
    }

    if(fabsf(iq_error) < 3.0f) {
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025c8:	498f      	ldr	r1, [pc, #572]	; (8002808 <FOC_control+0x94c>)
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fd74 	bl	80010b8 <__aeabi_fcmplt>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00f      	beq.n	80025f6 <FOC_control+0x73a>
        iq_integral += iq_error * dt;
 80025d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025da:	f7fe fbcf 	bl	8000d7c <__aeabi_fmul>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b8b      	ldr	r3, [pc, #556]	; (8002810 <FOC_control+0x954>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4619      	mov	r1, r3
 80025e8:	4610      	mov	r0, r2
 80025ea:	f7fe fabf 	bl	8000b6c <__addsf3>
 80025ee:	4603      	mov	r3, r0
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b87      	ldr	r3, [pc, #540]	; (8002810 <FOC_control+0x954>)
 80025f4:	601a      	str	r2, [r3, #0]
    }

    // 적분 제한 확대
    if(id_integral > 3.0f) id_integral = 3.0f;   // 1.0f → 3.0f
 80025f6:	4b85      	ldr	r3, [pc, #532]	; (800280c <FOC_control+0x950>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4983      	ldr	r1, [pc, #524]	; (8002808 <FOC_control+0x94c>)
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fd79 	bl	80010f4 <__aeabi_fcmpgt>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <FOC_control+0x752>
 8002608:	4b80      	ldr	r3, [pc, #512]	; (800280c <FOC_control+0x950>)
 800260a:	4a7f      	ldr	r2, [pc, #508]	; (8002808 <FOC_control+0x94c>)
 800260c:	601a      	str	r2, [r3, #0]
    if(id_integral < -3.0f) id_integral = -3.0f;
 800260e:	4b7f      	ldr	r3, [pc, #508]	; (800280c <FOC_control+0x950>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4980      	ldr	r1, [pc, #512]	; (8002814 <FOC_control+0x958>)
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe fd4f 	bl	80010b8 <__aeabi_fcmplt>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <FOC_control+0x76a>
 8002620:	4b7a      	ldr	r3, [pc, #488]	; (800280c <FOC_control+0x950>)
 8002622:	4a7c      	ldr	r2, [pc, #496]	; (8002814 <FOC_control+0x958>)
 8002624:	601a      	str	r2, [r3, #0]
    if(iq_integral > 3.0f) iq_integral = 3.0f;
 8002626:	4b7a      	ldr	r3, [pc, #488]	; (8002810 <FOC_control+0x954>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4977      	ldr	r1, [pc, #476]	; (8002808 <FOC_control+0x94c>)
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fd61 	bl	80010f4 <__aeabi_fcmpgt>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <FOC_control+0x782>
 8002638:	4b75      	ldr	r3, [pc, #468]	; (8002810 <FOC_control+0x954>)
 800263a:	4a73      	ldr	r2, [pc, #460]	; (8002808 <FOC_control+0x94c>)
 800263c:	601a      	str	r2, [r3, #0]
    if(iq_integral < -3.0f) iq_integral = -3.0f;
 800263e:	4b74      	ldr	r3, [pc, #464]	; (8002810 <FOC_control+0x954>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4974      	ldr	r1, [pc, #464]	; (8002814 <FOC_control+0x958>)
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fd37 	bl	80010b8 <__aeabi_fcmplt>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <FOC_control+0x79a>
 8002650:	4b6f      	ldr	r3, [pc, #444]	; (8002810 <FOC_control+0x954>)
 8002652:	4a70      	ldr	r2, [pc, #448]	; (8002814 <FOC_control+0x958>)
 8002654:	601a      	str	r2, [r3, #0]

    // 강력한 게인
    float kp = 1.5f;   // 1.0f → 1.5f
 8002656:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
    float ki = 3.0f;   // 2.0f → 3.0f
 800265c:	4b6a      	ldr	r3, [pc, #424]	; (8002808 <FOC_control+0x94c>)
 800265e:	627b      	str	r3, [r7, #36]	; 0x24

    float vd_command = kp * id_error + ki * id_integral;
 8002660:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002664:	f7fe fb8a 	bl	8000d7c <__aeabi_fmul>
 8002668:	4603      	mov	r3, r0
 800266a:	461c      	mov	r4, r3
 800266c:	4b67      	ldr	r3, [pc, #412]	; (800280c <FOC_control+0x950>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fb82 	bl	8000d7c <__aeabi_fmul>
 8002678:	4603      	mov	r3, r0
 800267a:	4619      	mov	r1, r3
 800267c:	4620      	mov	r0, r4
 800267e:	f7fe fa75 	bl	8000b6c <__addsf3>
 8002682:	4603      	mov	r3, r0
 8002684:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float vq_command = kp * iq_error + ki * iq_integral;
 8002688:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800268a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800268c:	f7fe fb76 	bl	8000d7c <__aeabi_fmul>
 8002690:	4603      	mov	r3, r0
 8002692:	461c      	mov	r4, r3
 8002694:	4b5e      	ldr	r3, [pc, #376]	; (8002810 <FOC_control+0x954>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fb6e 	bl	8000d7c <__aeabi_fmul>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4619      	mov	r1, r3
 80026a4:	4620      	mov	r0, r4
 80026a6:	f7fe fa61 	bl	8000b6c <__addsf3>
 80026aa:	4603      	mov	r3, r0
 80026ac:	67fb      	str	r3, [r7, #124]	; 0x7c

    // 최대 전압 제한
    if(vd_command > 10.0f) vd_command = 10.0f;   // 8.0f → 10.0f
 80026ae:	495a      	ldr	r1, [pc, #360]	; (8002818 <FOC_control+0x95c>)
 80026b0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80026b4:	f7fe fd1e 	bl	80010f4 <__aeabi_fcmpgt>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <FOC_control+0x808>
 80026be:	4b56      	ldr	r3, [pc, #344]	; (8002818 <FOC_control+0x95c>)
 80026c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if(vd_command < -10.0f) vd_command = -10.0f;
 80026c4:	4955      	ldr	r1, [pc, #340]	; (800281c <FOC_control+0x960>)
 80026c6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80026ca:	f7fe fcf5 	bl	80010b8 <__aeabi_fcmplt>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <FOC_control+0x81e>
 80026d4:	4b51      	ldr	r3, [pc, #324]	; (800281c <FOC_control+0x960>)
 80026d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if(vq_command > 10.0f) vq_command = 10.0f;
 80026da:	494f      	ldr	r1, [pc, #316]	; (8002818 <FOC_control+0x95c>)
 80026dc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80026de:	f7fe fd09 	bl	80010f4 <__aeabi_fcmpgt>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <FOC_control+0x830>
 80026e8:	4b4b      	ldr	r3, [pc, #300]	; (8002818 <FOC_control+0x95c>)
 80026ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    if(vq_command < -10.0f) vq_command = -10.0f;
 80026ec:	494b      	ldr	r1, [pc, #300]	; (800281c <FOC_control+0x960>)
 80026ee:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80026f0:	f7fe fce2 	bl	80010b8 <__aeabi_fcmplt>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <FOC_control+0x842>
 80026fa:	4b48      	ldr	r3, [pc, #288]	; (800281c <FOC_control+0x960>)
 80026fc:	67fb      	str	r3, [r7, #124]	; 0x7c

    // 7. 역변환 및 PWM
    float v_alpha = vd_command * cos_theta - vq_command * sin_theta;
 80026fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002700:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002704:	f7fe fb3a 	bl	8000d7c <__aeabi_fmul>
 8002708:	4603      	mov	r3, r0
 800270a:	461c      	mov	r4, r3
 800270c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800270e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002710:	f7fe fb34 	bl	8000d7c <__aeabi_fmul>
 8002714:	4603      	mov	r3, r0
 8002716:	4619      	mov	r1, r3
 8002718:	4620      	mov	r0, r4
 800271a:	f7fe fa25 	bl	8000b68 <__aeabi_fsub>
 800271e:	4603      	mov	r3, r0
 8002720:	623b      	str	r3, [r7, #32]
    float v_beta = vd_command * sin_theta + vq_command * cos_theta;
 8002722:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002724:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002728:	f7fe fb28 	bl	8000d7c <__aeabi_fmul>
 800272c:	4603      	mov	r3, r0
 800272e:	461c      	mov	r4, r3
 8002730:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002732:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002734:	f7fe fb22 	bl	8000d7c <__aeabi_fmul>
 8002738:	4603      	mov	r3, r0
 800273a:	4619      	mov	r1, r3
 800273c:	4620      	mov	r0, r4
 800273e:	f7fe fa15 	bl	8000b6c <__addsf3>
 8002742:	4603      	mov	r3, r0
 8002744:	61fb      	str	r3, [r7, #28]

    float va = v_alpha;
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	61bb      	str	r3, [r7, #24]
    float vb = -0.5f * v_alpha + 0.866f * v_beta;
 800274a:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800274e:	6a38      	ldr	r0, [r7, #32]
 8002750:	f7fe fb14 	bl	8000d7c <__aeabi_fmul>
 8002754:	4603      	mov	r3, r0
 8002756:	461c      	mov	r4, r3
 8002758:	4931      	ldr	r1, [pc, #196]	; (8002820 <FOC_control+0x964>)
 800275a:	69f8      	ldr	r0, [r7, #28]
 800275c:	f7fe fb0e 	bl	8000d7c <__aeabi_fmul>
 8002760:	4603      	mov	r3, r0
 8002762:	4619      	mov	r1, r3
 8002764:	4620      	mov	r0, r4
 8002766:	f7fe fa01 	bl	8000b6c <__addsf3>
 800276a:	4603      	mov	r3, r0
 800276c:	617b      	str	r3, [r7, #20]
    float vc = -0.5f * v_alpha - 0.866f * v_beta;
 800276e:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8002772:	6a38      	ldr	r0, [r7, #32]
 8002774:	f7fe fb02 	bl	8000d7c <__aeabi_fmul>
 8002778:	4603      	mov	r3, r0
 800277a:	461c      	mov	r4, r3
 800277c:	4928      	ldr	r1, [pc, #160]	; (8002820 <FOC_control+0x964>)
 800277e:	69f8      	ldr	r0, [r7, #28]
 8002780:	f7fe fafc 	bl	8000d7c <__aeabi_fmul>
 8002784:	4603      	mov	r3, r0
 8002786:	4619      	mov	r1, r3
 8002788:	4620      	mov	r0, r4
 800278a:	f7fe f9ed 	bl	8000b68 <__aeabi_fsub>
 800278e:	4603      	mov	r3, r0
 8002790:	613b      	str	r3, [r7, #16]

    float duty_a = 0.5f + va / 12.0f;
 8002792:	4924      	ldr	r1, [pc, #144]	; (8002824 <FOC_control+0x968>)
 8002794:	69b8      	ldr	r0, [r7, #24]
 8002796:	f7fe fba5 	bl	8000ee4 <__aeabi_fdiv>
 800279a:	4603      	mov	r3, r0
 800279c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe f9e3 	bl	8000b6c <__addsf3>
 80027a6:	4603      	mov	r3, r0
 80027a8:	60fb      	str	r3, [r7, #12]
    float duty_b = 0.5f + vb / 12.0f;
 80027aa:	491e      	ldr	r1, [pc, #120]	; (8002824 <FOC_control+0x968>)
 80027ac:	6978      	ldr	r0, [r7, #20]
 80027ae:	f7fe fb99 	bl	8000ee4 <__aeabi_fdiv>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe f9d7 	bl	8000b6c <__addsf3>
 80027be:	4603      	mov	r3, r0
 80027c0:	60bb      	str	r3, [r7, #8]
    float duty_c = 0.5f + vc / 12.0f;
 80027c2:	4918      	ldr	r1, [pc, #96]	; (8002824 <FOC_control+0x968>)
 80027c4:	6938      	ldr	r0, [r7, #16]
 80027c6:	f7fe fb8d 	bl	8000ee4 <__aeabi_fdiv>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe f9cb 	bl	8000b6c <__addsf3>
 80027d6:	4603      	mov	r3, r0
 80027d8:	607b      	str	r3, [r7, #4]

    set_pwm_duty(duty_b, duty_a, duty_c);
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68f9      	ldr	r1, [r7, #12]
 80027de:	68b8      	ldr	r0, [r7, #8]
 80027e0:	f7ff f980 	bl	8001ae4 <set_pwm_duty>

    // 8. ★★★ 극명한 변화 확인 출력 ★★★
    static uint32_t last_print = 0;
    if(HAL_GetTick() - last_print > 800) {
 80027e4:	f000 fe1c 	bl	8003420 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <FOC_control+0x96c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80027f4:	f240 80e4 	bls.w	80029c0 <FOC_control+0xb04>
        if(control_started) {
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <FOC_control+0x970>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80c1 	beq.w	8002984 <FOC_control+0xac8>
 8002802:	e015      	b.n	8002830 <FOC_control+0x974>
 8002804:	3ba3d70a 	.word	0x3ba3d70a
 8002808:	40400000 	.word	0x40400000
 800280c:	20000364 	.word	0x20000364
 8002810:	20000368 	.word	0x20000368
 8002814:	c0400000 	.word	0xc0400000
 8002818:	41200000 	.word	0x41200000
 800281c:	c1200000 	.word	0xc1200000
 8002820:	3f5db22d 	.word	0x3f5db22d
 8002824:	41400000 	.word	0x41400000
 8002828:	2000036c 	.word	0x2000036c
 800282c:	20000358 	.word	0x20000358
            printf("💥목표토크: %.1fA | 📊실제토크: %.2fA | 🏃속도: %.2f rad/s\r\n",
 8002830:	4b65      	ldr	r3, [pc, #404]	; (80029c8 <FOC_control+0xb0c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd fe63 	bl	8000500 <__aeabi_f2d>
 800283a:	4680      	mov	r8, r0
 800283c:	4689      	mov	r9, r1
 800283e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002840:	f7fd fe5e 	bl	8000500 <__aeabi_f2d>
 8002844:	4604      	mov	r4, r0
 8002846:	460d      	mov	r5, r1
 8002848:	4b60      	ldr	r3, [pc, #384]	; (80029cc <FOC_control+0xb10>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fe57 	bl	8000500 <__aeabi_f2d>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800285a:	e9cd 4500 	strd	r4, r5, [sp]
 800285e:	4642      	mov	r2, r8
 8002860:	464b      	mov	r3, r9
 8002862:	485b      	ldr	r0, [pc, #364]	; (80029d0 <FOC_control+0xb14>)
 8002864:	f004 fca0 	bl	80071a8 <iprintf>
                   target_torque, iq_measured, current_speed);
            printf("🔋전압: Vq=%.1fV | 📏각도변화: %d | Raw:%d\r\n",
 8002868:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800286a:	f7fd fe49 	bl	8000500 <__aeabi_f2d>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4958      	ldr	r1, [pc, #352]	; (80029d4 <FOC_control+0xb18>)
 8002874:	6809      	ldr	r1, [r1, #0]
 8002876:	2900      	cmp	r1, #0
 8002878:	bfb8      	it	lt
 800287a:	4249      	neglt	r1, r1
 800287c:	f8b7 007a 	ldrh.w	r0, [r7, #122]	; 0x7a
 8002880:	9001      	str	r0, [sp, #4]
 8002882:	9100      	str	r1, [sp, #0]
 8002884:	4854      	ldr	r0, [pc, #336]	; (80029d8 <FOC_control+0xb1c>)
 8002886:	f004 fc8f 	bl	80071a8 <iprintf>
                   vq_command, abs(angle_accumulator), raw_angle);

            // 극명한 상태 구분
            if(target_torque > 8.0f) {
 800288a:	4b4f      	ldr	r3, [pc, #316]	; (80029c8 <FOC_control+0xb0c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fc2e 	bl	80010f4 <__aeabi_fcmpgt>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01a      	beq.n	80028d4 <FOC_control+0xa18>
                printf("🚀🚀🚀 극한 고속 모드! 매우 빠른 회전이 보여야 함! 🚀🚀🚀\r\n");
 800289e:	484f      	ldr	r0, [pc, #316]	; (80029dc <FOC_control+0xb20>)
 80028a0:	f004 fce8 	bl	8007274 <puts>
                if(current_speed > 3.0f) {
 80028a4:	4b49      	ldr	r3, [pc, #292]	; (80029cc <FOC_control+0xb10>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	494d      	ldr	r1, [pc, #308]	; (80029e0 <FOC_control+0xb24>)
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fc22 	bl	80010f4 <__aeabi_fcmpgt>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <FOC_control+0xa10>
                    printf("✅ 고속 달성! (%.1f rad/s)\r\n", current_speed);
 80028b6:	4b45      	ldr	r3, [pc, #276]	; (80029cc <FOC_control+0xb10>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fd fe20 	bl	8000500 <__aeabi_f2d>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4847      	ldr	r0, [pc, #284]	; (80029e4 <FOC_control+0xb28>)
 80028c6:	f004 fc6f 	bl	80071a8 <iprintf>
 80028ca:	e02c      	b.n	8002926 <FOC_control+0xa6a>
                } else {
                    printf("⚙️ 고속 가속 중...\r\n");
 80028cc:	4846      	ldr	r0, [pc, #280]	; (80029e8 <FOC_control+0xb2c>)
 80028ce:	f004 fcd1 	bl	8007274 <puts>
 80028d2:	e028      	b.n	8002926 <FOC_control+0xa6a>
                }
            } else if(target_torque < 0.5f) {
 80028d4:	4b3c      	ldr	r3, [pc, #240]	; (80029c8 <FOC_control+0xb0c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe fbeb 	bl	80010b8 <__aeabi_fcmplt>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d01b      	beq.n	8002920 <FOC_control+0xa64>
                printf("🛑🛑🛑 극저속 모드! 거의 정지해야 함! 🛑🛑🛑\r\n");
 80028e8:	4840      	ldr	r0, [pc, #256]	; (80029ec <FOC_control+0xb30>)
 80028ea:	f004 fcc3 	bl	8007274 <puts>
                if(current_speed < 0.5f) {
 80028ee:	4b37      	ldr	r3, [pc, #220]	; (80029cc <FOC_control+0xb10>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fbde 	bl	80010b8 <__aeabi_fcmplt>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <FOC_control+0xa5c>
                    printf("✅ 저속/정지 달성! (%.2f rad/s)\r\n", current_speed);
 8002902:	4b32      	ldr	r3, [pc, #200]	; (80029cc <FOC_control+0xb10>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fdfa 	bl	8000500 <__aeabi_f2d>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4837      	ldr	r0, [pc, #220]	; (80029f0 <FOC_control+0xb34>)
 8002912:	f004 fc49 	bl	80071a8 <iprintf>
 8002916:	e006      	b.n	8002926 <FOC_control+0xa6a>
                } else {
                    printf("⚙️ 감속 중...\r\n");
 8002918:	4836      	ldr	r0, [pc, #216]	; (80029f4 <FOC_control+0xb38>)
 800291a:	f004 fcab 	bl	8007274 <puts>
 800291e:	e002      	b.n	8002926 <FOC_control+0xa6a>
                }
            } else {
                printf("🚶 중간 토크 모드\r\n");
 8002920:	4835      	ldr	r0, [pc, #212]	; (80029f8 <FOC_control+0xb3c>)
 8002922:	f004 fca7 	bl	8007274 <puts>
            }

            // 토크 추종 상태
            float torque_error_percent = fabsf(target_torque - iq_measured) / (target_torque + 0.1f) * 100.0f;
 8002926:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <FOC_control+0xb0c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe f91b 	bl	8000b68 <__aeabi_fsub>
 8002932:	4603      	mov	r3, r0
 8002934:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002938:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <FOC_control+0xb0c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	492f      	ldr	r1, [pc, #188]	; (80029fc <FOC_control+0xb40>)
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe f914 	bl	8000b6c <__addsf3>
 8002944:	4603      	mov	r3, r0
 8002946:	4619      	mov	r1, r3
 8002948:	4620      	mov	r0, r4
 800294a:	f7fe facb 	bl	8000ee4 <__aeabi_fdiv>
 800294e:	4603      	mov	r3, r0
 8002950:	492b      	ldr	r1, [pc, #172]	; (8002a00 <FOC_control+0xb44>)
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe fa12 	bl	8000d7c <__aeabi_fmul>
 8002958:	4603      	mov	r3, r0
 800295a:	603b      	str	r3, [r7, #0]
            if(torque_error_percent < 30.0f) {
 800295c:	4929      	ldr	r1, [pc, #164]	; (8002a04 <FOC_control+0xb48>)
 800295e:	6838      	ldr	r0, [r7, #0]
 8002960:	f7fe fbaa 	bl	80010b8 <__aeabi_fcmplt>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <FOC_control+0xab6>
                printf("✅ 토크 제어 성공! 가감속 효과 확인!\r\n");
 800296a:	4827      	ldr	r0, [pc, #156]	; (8002a08 <FOC_control+0xb4c>)
 800296c:	f004 fc82 	bl	8007274 <puts>
 8002970:	e021      	b.n	80029b6 <FOC_control+0xafa>
            } else {
                printf("⚙️ 토크 조정 중... (오차: %.1f%%)\r\n", torque_error_percent);
 8002972:	6838      	ldr	r0, [r7, #0]
 8002974:	f7fd fdc4 	bl	8000500 <__aeabi_f2d>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4823      	ldr	r0, [pc, #140]	; (8002a0c <FOC_control+0xb50>)
 800297e:	f004 fc13 	bl	80071a8 <iprintf>
 8002982:	e018      	b.n	80029b6 <FOC_control+0xafa>
            }

        } else {
            printf("⏳ 극한 제어 준비 중... %.1f초 후 시작\r\n",
                   (2000 - (HAL_GetTick() - start_time)) / 1000.0f);
 8002984:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <FOC_control+0xb54>)
 8002986:	681c      	ldr	r4, [r3, #0]
 8002988:	f000 fd4a 	bl	8003420 <HAL_GetTick>
 800298c:	4603      	mov	r3, r0
 800298e:	1ae3      	subs	r3, r4, r3
 8002990:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe f999 	bl	8000ccc <__aeabi_ui2f>
 800299a:	4603      	mov	r3, r0
 800299c:	491d      	ldr	r1, [pc, #116]	; (8002a14 <FOC_control+0xb58>)
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe faa0 	bl	8000ee4 <__aeabi_fdiv>
 80029a4:	4603      	mov	r3, r0
            printf("⏳ 극한 제어 준비 중... %.1f초 후 시작\r\n",
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd fdaa 	bl	8000500 <__aeabi_f2d>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4819      	ldr	r0, [pc, #100]	; (8002a18 <FOC_control+0xb5c>)
 80029b2:	f004 fbf9 	bl	80071a8 <iprintf>
        }
        last_print = HAL_GetTick();
 80029b6:	f000 fd33 	bl	8003420 <HAL_GetTick>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4a17      	ldr	r2, [pc, #92]	; (8002a1c <FOC_control+0xb60>)
 80029be:	6013      	str	r3, [r2, #0]
    }
}
 80029c0:	3790      	adds	r7, #144	; 0x90
 80029c2:	46bd      	mov	sp, r7
 80029c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029c8:	20000004 	.word	0x20000004
 80029cc:	20000348 	.word	0x20000348
 80029d0:	0800a498 	.word	0x0800a498
 80029d4:	20000344 	.word	0x20000344
 80029d8:	0800a4e8 	.word	0x0800a4e8
 80029dc:	0800a520 	.word	0x0800a520
 80029e0:	40400000 	.word	0x40400000
 80029e4:	0800a578 	.word	0x0800a578
 80029e8:	0800a59c 	.word	0x0800a59c
 80029ec:	0800a5bc 	.word	0x0800a5bc
 80029f0:	0800a604 	.word	0x0800a604
 80029f4:	0800a630 	.word	0x0800a630
 80029f8:	0800a648 	.word	0x0800a648
 80029fc:	3dcccccd 	.word	0x3dcccccd
 8002a00:	42c80000 	.word	0x42c80000
 8002a04:	41f00000 	.word	0x41f00000
 8002a08:	0800a664 	.word	0x0800a664
 8002a0c:	0800a698 	.word	0x0800a698
 8002a10:	20000354 	.word	0x20000354
 8002a14:	447a0000 	.word	0x447a0000
 8002a18:	0800a6c8 	.word	0x0800a6c8
 8002a1c:	2000036c 	.word	0x2000036c

08002a20 <SystemClock_Config>:
    result.q = -ab.alpha * sin_theta + ab.beta * cos_theta;
    return result;
}

void SystemClock_Config(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b096      	sub	sp, #88	; 0x58
 8002a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a2a:	2228      	movs	r2, #40	; 0x28
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f004 fd00 	bl	8007434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a34:	f107 031c 	add.w	r3, r7, #28
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	60da      	str	r2, [r3, #12]
 8002a50:	611a      	str	r2, [r3, #16]
 8002a52:	615a      	str	r2, [r3, #20]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a54:	2301      	movs	r3, #1
 8002a56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a62:	2301      	movs	r3, #1
 8002a64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a66:	2302      	movs	r3, #2
 8002a68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a6e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a70:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002a74:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f002 f864 	bl	8004b48 <HAL_RCC_OscConfig>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002a86:	f000 fa0d 	bl	8002ea4 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a8a:	230f      	movs	r3, #15
 8002a8c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a92:	2300      	movs	r3, #0
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002aa0:	f107 031c 	add.w	r3, r7, #28
 8002aa4:	2102      	movs	r1, #2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f002 fad0 	bl	800504c <HAL_RCC_ClockConfig>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002ab2:	f000 f9f7 	bl	8002ea4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002abe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f002 fc50 	bl	8005368 <HAL_RCCEx_PeriphCLKConfig>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002ace:	f000 f9e9 	bl	8002ea4 <Error_Handler>
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	3758      	adds	r7, #88	; 0x58
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae2:	f107 0310 	add.w	r3, r7, #16
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]
 8002aee:	60da      	str	r2, [r3, #12]

  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002af0:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <MX_GPIO_Init+0x90>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <MX_GPIO_Init+0x90>)
 8002af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afa:	6193      	str	r3, [r2, #24]
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <MX_GPIO_Init+0x90>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b08:	4b18      	ldr	r3, [pc, #96]	; (8002b6c <MX_GPIO_Init+0x90>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	4a17      	ldr	r2, [pc, #92]	; (8002b6c <MX_GPIO_Init+0x90>)
 8002b0e:	f043 0304 	orr.w	r3, r3, #4
 8002b12:	6193      	str	r3, [r2, #24]
 8002b14:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <MX_GPIO_Init+0x90>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <MX_GPIO_Init+0x90>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	4a11      	ldr	r2, [pc, #68]	; (8002b6c <MX_GPIO_Init+0x90>)
 8002b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b2a:	6193      	str	r3, [r2, #24]
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <MX_GPIO_Init+0x90>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, GPIO_PIN_RESET);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b3e:	480c      	ldr	r0, [pc, #48]	; (8002b70 <MX_GPIO_Init+0x94>)
 8002b40:	f001 ffe9 	bl	8004b16 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = Enable_Pin;
 8002b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b52:	2302      	movs	r3, #2
 8002b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Enable_GPIO_Port, &GPIO_InitStruct);
 8002b56:	f107 0310 	add.w	r3, r7, #16
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4804      	ldr	r0, [pc, #16]	; (8002b70 <MX_GPIO_Init+0x94>)
 8002b5e:	f001 fe2f 	bl	80047c0 <HAL_GPIO_Init>
}
 8002b62:	bf00      	nop
 8002b64:	3720      	adds	r7, #32
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40011800 	.word	0x40011800

08002b74 <MX_ADC3_Init>:

static void MX_ADC3_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]

	hadc3.Instance = ADC3;
 8002b84:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <MX_ADC3_Init+0x98>)
 8002b86:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <MX_ADC3_Init+0x9c>)
 8002b88:	601a      	str	r2, [r3, #0]
	hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <MX_ADC3_Init+0x98>)
 8002b8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b90:	609a      	str	r2, [r3, #8]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8002b92:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <MX_ADC3_Init+0x98>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	731a      	strb	r2, [r3, #12]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002b98:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <MX_ADC3_Init+0x98>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	751a      	strb	r2, [r3, #20]
	//hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <MX_ADC3_Init+0x98>)
 8002ba0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002ba4:	61da      	str	r2, [r3, #28]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <MX_ADC3_Init+0x98>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	605a      	str	r2, [r3, #4]
	hadc3.Init.NbrOfConversion = 2;
 8002bac:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <MX_ADC3_Init+0x98>)
 8002bae:	2202      	movs	r2, #2
 8002bb0:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002bb2:	4816      	ldr	r0, [pc, #88]	; (8002c0c <MX_ADC3_Init+0x98>)
 8002bb4:	f000 fc62 	bl	800347c <HAL_ADC_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_ADC3_Init+0x4e>
	{
		Error_Handler();
 8002bbe:	f000 f971 	bl	8002ea4 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_4;
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002bca:	2307      	movs	r3, #7
 8002bcc:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002bce:	1d3b      	adds	r3, r7, #4
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	480e      	ldr	r0, [pc, #56]	; (8002c0c <MX_ADC3_Init+0x98>)
 8002bd4:	f000 fef4 	bl	80039c0 <HAL_ADC_ConfigChannel>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_ADC3_Init+0x6e>
	{
		Error_Handler();
 8002bde:	f000 f961 	bl	8002ea4 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_5;
 8002be2:	2305      	movs	r3, #5
 8002be4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8002be6:	2302      	movs	r3, #2
 8002be8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002bea:	2307      	movs	r3, #7
 8002bec:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4806      	ldr	r0, [pc, #24]	; (8002c0c <MX_ADC3_Init+0x98>)
 8002bf4:	f000 fee4 	bl	80039c0 <HAL_ADC_ConfigChannel>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_ADC3_Init+0x8e>
	{
		Error_Handler();
 8002bfe:	f000 f951 	bl	8002ea4 <Error_Handler>
	}
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200001f8 	.word	0x200001f8
 8002c10:	40013c00 	.word	0x40013c00

08002c14 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC3){
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a05      	ldr	r2, [pc, #20]	; (8002c38 <HAL_ADC_ConvCpltCallback+0x24>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d102      	bne.n	8002c2c <HAL_ADC_ConvCpltCallback+0x18>
		adc_conversion_complete = 1;
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_ADC_ConvCpltCallback+0x28>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
	}
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40013c00 	.word	0x40013c00
 8002c3c:	20000300 	.word	0x20000300

08002c40 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
	//__HAL_RCC_DMA2_CLK_ENABLE();
	//HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002c46:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <MX_DMA_Init+0x88>)
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <MX_DMA_Init+0x88>)
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	6153      	str	r3, [r2, #20]
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <MX_DMA_Init+0x88>)
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
	// DMA 핸들 구성
	hdma_adc3.Instance = DMA2_Channel5;  // ADC3는 보통 DMA2_Channel5 사용
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <MX_DMA_Init+0x8c>)
 8002c60:	4a1b      	ldr	r2, [pc, #108]	; (8002cd0 <MX_DMA_Init+0x90>)
 8002c62:	601a      	str	r2, [r3, #0]
	hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <MX_DMA_Init+0x8c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	605a      	str	r2, [r3, #4]
	hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c6a:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <MX_DMA_Init+0x8c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
	hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002c70:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <MX_DMA_Init+0x8c>)
 8002c72:	2280      	movs	r2, #128	; 0x80
 8002c74:	60da      	str	r2, [r3, #12]
	hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <MX_DMA_Init+0x8c>)
 8002c78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c7c:	611a      	str	r2, [r3, #16]
	hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c7e:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <MX_DMA_Init+0x8c>)
 8002c80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c84:	615a      	str	r2, [r3, #20]
	hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <MX_DMA_Init+0x8c>)
 8002c88:	2220      	movs	r2, #32
 8002c8a:	619a      	str	r2, [r3, #24]
	hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <MX_DMA_Init+0x8c>)
 8002c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c92:	61da      	str	r2, [r3, #28]

	if (HAL_DMA_Init(&hdma_adc3) != HAL_OK) {
 8002c94:	480d      	ldr	r0, [pc, #52]	; (8002ccc <MX_DMA_Init+0x8c>)
 8002c96:	f001 fa53 	bl	8004140 <HAL_DMA_Init>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_DMA_Init+0x64>
		Error_Handler();
 8002ca0:	f000 f900 	bl	8002ea4 <Error_Handler>
	}
	// ADC와 DMA 연결
	__HAL_LINKDMA(&hadc3, DMA_Handle, hdma_adc3);
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <MX_DMA_Init+0x94>)
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <MX_DMA_Init+0x8c>)
 8002ca8:	621a      	str	r2, [r3, #32]
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <MX_DMA_Init+0x8c>)
 8002cac:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <MX_DMA_Init+0x94>)
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24
	// DMA 인터럽트 설정
	HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	203b      	movs	r0, #59	; 0x3b
 8002cb6:	f001 fa0c 	bl	80040d2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8002cba:	203b      	movs	r0, #59	; 0x3b
 8002cbc:	f001 fa25 	bl	800410a <HAL_NVIC_EnableIRQ>
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	20000228 	.word	0x20000228
 8002cd0:	40020458 	.word	0x40020458
 8002cd4:	200001f8 	.word	0x200001f8

08002cd8 <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b098      	sub	sp, #96	; 0x60
 8002cdc:	af00      	add	r7, sp, #0
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002ce8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
 8002cf8:	615a      	str	r2, [r3, #20]
 8002cfa:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cfc:	f107 031c 	add.w	r3, r7, #28
 8002d00:	2220      	movs	r2, #32
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f004 fb95 	bl	8007434 <memset>

	htim1.Instance = TIM1;
 8002d0a:	4b4f      	ldr	r3, [pc, #316]	; (8002e48 <MX_TIM1_Init+0x170>)
 8002d0c:	4a4f      	ldr	r2, [pc, #316]	; (8002e4c <MX_TIM1_Init+0x174>)
 8002d0e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8002d10:	4b4d      	ldr	r3, [pc, #308]	; (8002e48 <MX_TIM1_Init+0x170>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d16:	4b4c      	ldr	r3, [pc, #304]	; (8002e48 <MX_TIM1_Init+0x170>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 2000;
 8002d1c:	4b4a      	ldr	r3, [pc, #296]	; (8002e48 <MX_TIM1_Init+0x170>)
 8002d1e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002d22:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d24:	4b48      	ldr	r3, [pc, #288]	; (8002e48 <MX_TIM1_Init+0x170>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <MX_TIM1_Init+0x170>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d30:	4b45      	ldr	r3, [pc, #276]	; (8002e48 <MX_TIM1_Init+0x170>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d36:	4844      	ldr	r0, [pc, #272]	; (8002e48 <MX_TIM1_Init+0x170>)
 8002d38:	f002 fdb6 	bl	80058a8 <HAL_TIM_PWM_Init>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 8002d42:	f000 f8af 	bl	8002ea4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d46:	2300      	movs	r3, #0
 8002d48:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d52:	4619      	mov	r1, r3
 8002d54:	483c      	ldr	r0, [pc, #240]	; (8002e48 <MX_TIM1_Init+0x170>)
 8002d56:	f003 fa25 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_TIM1_Init+0x8c>
	{
		Error_Handler();
 8002d60:	f000 f8a0 	bl	8002ea4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d64:	2360      	movs	r3, #96	; 0x60
 8002d66:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.Pulse = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d70:	2300      	movs	r3, #0
 8002d72:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d84:	2200      	movs	r2, #0
 8002d86:	4619      	mov	r1, r3
 8002d88:	482f      	ldr	r0, [pc, #188]	; (8002e48 <MX_TIM1_Init+0x170>)
 8002d8a:	f002 fef3 	bl	8005b74 <HAL_TIM_PWM_ConfigChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM1_Init+0xc0>
	{
		Error_Handler();
 8002d94:	f000 f886 	bl	8002ea4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d9c:	2204      	movs	r2, #4
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4829      	ldr	r0, [pc, #164]	; (8002e48 <MX_TIM1_Init+0x170>)
 8002da2:	f002 fee7 	bl	8005b74 <HAL_TIM_PWM_ConfigChannel>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_TIM1_Init+0xd8>
	{
		Error_Handler();
 8002dac:	f000 f87a 	bl	8002ea4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002db0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002db4:	2208      	movs	r2, #8
 8002db6:	4619      	mov	r1, r3
 8002db8:	4823      	ldr	r0, [pc, #140]	; (8002e48 <MX_TIM1_Init+0x170>)
 8002dba:	f002 fedb 	bl	8005b74 <HAL_TIM_PWM_ConfigChannel>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM1_Init+0xf0>
	{
		Error_Handler();
 8002dc4:	f000 f86e 	bl	8002ea4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.DeadTime = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002de0:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002de6:	f107 031c 	add.w	r3, r7, #28
 8002dea:	4619      	mov	r1, r3
 8002dec:	4816      	ldr	r0, [pc, #88]	; (8002e48 <MX_TIM1_Init+0x170>)
 8002dee:	f003 fa45 	bl	800627c <HAL_TIMEx_ConfigBreakDeadTime>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_TIM1_Init+0x124>
	{
		Error_Handler();
 8002df8:	f000 f854 	bl	8002ea4 <Error_Handler>
	}
	TIM_OC_InitTypeDef sConfigOC_CH3 = {0};
 8002dfc:	463b      	mov	r3, r7
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	60da      	str	r2, [r3, #12]
 8002e08:	611a      	str	r2, [r3, #16]
 8002e0a:	615a      	str	r2, [r3, #20]
 8002e0c:	619a      	str	r2, [r3, #24]
	sConfigOC_CH3.OCMode = TIM_OCMODE_PWM1;
 8002e0e:	2360      	movs	r3, #96	; 0x60
 8002e10:	603b      	str	r3, [r7, #0]
	sConfigOC_CH3.Pulse = 1000;  // Period(2000)의 50% 지점
 8002e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e16:	607b      	str	r3, [r7, #4]
	sConfigOC_CH3.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]
	sConfigOC_CH3.OCFastMode = TIM_OCFAST_DISABLE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
	sConfigOC_CH3.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]

	if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC_CH3, TIM_CHANNEL_3) != HAL_OK)
 8002e24:	463b      	mov	r3, r7
 8002e26:	2208      	movs	r2, #8
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4807      	ldr	r0, [pc, #28]	; (8002e48 <MX_TIM1_Init+0x170>)
 8002e2c:	f002 fe46 	bl	8005abc <HAL_TIM_OC_ConfigChannel>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM1_Init+0x162>
	{
		Error_Handler();
 8002e36:	f000 f835 	bl	8002ea4 <Error_Handler>
	}
	HAL_TIM_MspPostInit(&htim1);
 8002e3a:	4803      	ldr	r0, [pc, #12]	; (8002e48 <MX_TIM1_Init+0x170>)
 8002e3c:	f000 f8fa 	bl	8003034 <HAL_TIM_MspPostInit>
}
 8002e40:	bf00      	nop
 8002e42:	3760      	adds	r7, #96	; 0x60
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	2000026c 	.word	0x2000026c
 8002e4c:	40012c00 	.word	0x40012c00

08002e50 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e56:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <MX_USART2_UART_Init+0x50>)
 8002e58:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e60:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e76:	220c      	movs	r2, #12
 8002e78:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e7a:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e86:	4805      	ldr	r0, [pc, #20]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e88:	f003 fa49 	bl	800631e <HAL_UART_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8002e92:	f000 f807 	bl	8002ea4 <Error_Handler>
	}
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200002b4 	.word	0x200002b4
 8002ea0:	40004400 	.word	0x40004400

08002ea4 <Error_Handler>:

void Error_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea8:	b672      	cpsid	i
}
 8002eaa:	bf00      	nop
  __disable_irq();
  while (1)
 8002eac:	e7fe      	b.n	8002eac <Error_Handler+0x8>
	...

08002eb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_MspInit+0x5c>)
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <HAL_MspInit+0x5c>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6193      	str	r3, [r2, #24]
 8002ec2:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <HAL_MspInit+0x5c>)
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_MspInit+0x5c>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <HAL_MspInit+0x5c>)
 8002ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	61d3      	str	r3, [r2, #28]
 8002eda:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <HAL_MspInit+0x5c>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_MspInit+0x60>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <HAL_MspInit+0x60>)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40010000 	.word	0x40010000

08002f14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1c:	f107 0310 	add.w	r3, r7, #16
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC3)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a2d      	ldr	r2, [pc, #180]	; (8002fe4 <HAL_ADC_MspInit+0xd0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d152      	bne.n	8002fda <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002f34:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <HAL_ADC_MspInit+0xd4>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	4a2b      	ldr	r2, [pc, #172]	; (8002fe8 <HAL_ADC_MspInit+0xd4>)
 8002f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f3e:	6193      	str	r3, [r2, #24]
 8002f40:	4b29      	ldr	r3, [pc, #164]	; (8002fe8 <HAL_ADC_MspInit+0xd4>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f4c:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <HAL_ADC_MspInit+0xd4>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	4a25      	ldr	r2, [pc, #148]	; (8002fe8 <HAL_ADC_MspInit+0xd4>)
 8002f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f56:	6193      	str	r3, [r2, #24]
 8002f58:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <HAL_ADC_MspInit+0xd4>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF6     ------> ADC3_IN4
    PF7     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = phase_a_Pin|phase_b_Pin;
 8002f64:	23c0      	movs	r3, #192	; 0xc0
 8002f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f6c:	f107 0310 	add.w	r3, r7, #16
 8002f70:	4619      	mov	r1, r3
 8002f72:	481e      	ldr	r0, [pc, #120]	; (8002fec <HAL_ADC_MspInit+0xd8>)
 8002f74:	f001 fc24 	bl	80047c0 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Channel5;
 8002f78:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <HAL_ADC_MspInit+0xdc>)
 8002f7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ff4 <HAL_ADC_MspInit+0xe0>)
 8002f7c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ff0 <HAL_ADC_MspInit+0xdc>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f84:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <HAL_ADC_MspInit+0xdc>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002f8a:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <HAL_ADC_MspInit+0xdc>)
 8002f8c:	2280      	movs	r2, #128	; 0x80
 8002f8e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f90:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <HAL_ADC_MspInit+0xdc>)
 8002f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f96:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <HAL_ADC_MspInit+0xdc>)
 8002f9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f9e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002fa0:	4b13      	ldr	r3, [pc, #76]	; (8002ff0 <HAL_ADC_MspInit+0xdc>)
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_ADC_MspInit+0xdc>)
 8002fa8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002fac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002fae:	4810      	ldr	r0, [pc, #64]	; (8002ff0 <HAL_ADC_MspInit+0xdc>)
 8002fb0:	f001 f8c6 	bl	8004140 <HAL_DMA_Init>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8002fba:	f7ff ff73 	bl	8002ea4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a0b      	ldr	r2, [pc, #44]	; (8002ff0 <HAL_ADC_MspInit+0xdc>)
 8002fc2:	621a      	str	r2, [r3, #32]
 8002fc4:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <HAL_ADC_MspInit+0xdc>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2100      	movs	r1, #0
 8002fce:	202f      	movs	r0, #47	; 0x2f
 8002fd0:	f001 f87f 	bl	80040d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002fd4:	202f      	movs	r0, #47	; 0x2f
 8002fd6:	f001 f898 	bl	800410a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8002fda:	bf00      	nop
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40013c00 	.word	0x40013c00
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40011c00 	.word	0x40011c00
 8002ff0:	20000228 	.word	0x20000228
 8002ff4:	40020458 	.word	0x40020458

08002ff8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a09      	ldr	r2, [pc, #36]	; (800302c <HAL_TIM_PWM_MspInit+0x34>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d10b      	bne.n	8003022 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_TIM_PWM_MspInit+0x38>)
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	4a08      	ldr	r2, [pc, #32]	; (8003030 <HAL_TIM_PWM_MspInit+0x38>)
 8003010:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003014:	6193      	str	r3, [r2, #24]
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_TIM_PWM_MspInit+0x38>)
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	40012c00 	.word	0x40012c00
 8003030:	40021000 	.word	0x40021000

08003034 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 030c 	add.w	r3, r7, #12
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <HAL_TIM_MspPostInit+0x80>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d12a      	bne.n	80030aa <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003054:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <HAL_TIM_MspPostInit+0x84>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	4a17      	ldr	r2, [pc, #92]	; (80030b8 <HAL_TIM_MspPostInit+0x84>)
 800305a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800305e:	6193      	str	r3, [r2, #24]
 8003060:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_TIM_MspPostInit+0x84>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_A_Pin|PWM_B_Pin|PWM_C_Pin;
 800306c:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8003070:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003072:	2302      	movs	r3, #2
 8003074:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003076:	2302      	movs	r3, #2
 8003078:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800307a:	f107 030c 	add.w	r3, r7, #12
 800307e:	4619      	mov	r1, r3
 8003080:	480e      	ldr	r0, [pc, #56]	; (80030bc <HAL_TIM_MspPostInit+0x88>)
 8003082:	f001 fb9d 	bl	80047c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <HAL_TIM_MspPostInit+0x8c>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	61fb      	str	r3, [r7, #28]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	4a06      	ldr	r2, [pc, #24]	; (80030c0 <HAL_TIM_MspPostInit+0x8c>)
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80030aa:	bf00      	nop
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40012c00 	.word	0x40012c00
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40011800 	.word	0x40011800
 80030c0:	40010000 	.word	0x40010000

080030c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 0310 	add.w	r3, r7, #16
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1b      	ldr	r2, [pc, #108]	; (800314c <HAL_UART_MspInit+0x88>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d12f      	bne.n	8003144 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030e4:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <HAL_UART_MspInit+0x8c>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	4a19      	ldr	r2, [pc, #100]	; (8003150 <HAL_UART_MspInit+0x8c>)
 80030ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ee:	61d3      	str	r3, [r2, #28]
 80030f0:	4b17      	ldr	r3, [pc, #92]	; (8003150 <HAL_UART_MspInit+0x8c>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fc:	4b14      	ldr	r3, [pc, #80]	; (8003150 <HAL_UART_MspInit+0x8c>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	4a13      	ldr	r2, [pc, #76]	; (8003150 <HAL_UART_MspInit+0x8c>)
 8003102:	f043 0304 	orr.w	r3, r3, #4
 8003106:	6193      	str	r3, [r2, #24]
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_UART_MspInit+0x8c>)
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003114:	2304      	movs	r3, #4
 8003116:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003118:	2302      	movs	r3, #2
 800311a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800311c:	2303      	movs	r3, #3
 800311e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003120:	f107 0310 	add.w	r3, r7, #16
 8003124:	4619      	mov	r1, r3
 8003126:	480b      	ldr	r0, [pc, #44]	; (8003154 <HAL_UART_MspInit+0x90>)
 8003128:	f001 fb4a 	bl	80047c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800312c:	2308      	movs	r3, #8
 800312e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003138:	f107 0310 	add.w	r3, r7, #16
 800313c:	4619      	mov	r1, r3
 800313e:	4805      	ldr	r0, [pc, #20]	; (8003154 <HAL_UART_MspInit+0x90>)
 8003140:	f001 fb3e 	bl	80047c0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003144:	bf00      	nop
 8003146:	3720      	adds	r7, #32
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40004400 	.word	0x40004400
 8003150:	40021000 	.word	0x40021000
 8003154:	40010800 	.word	0x40010800

08003158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800315c:	e7fe      	b.n	800315c <NMI_Handler+0x4>

0800315e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003162:	e7fe      	b.n	8003162 <HardFault_Handler+0x4>

08003164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003168:	e7fe      	b.n	8003168 <MemManage_Handler+0x4>

0800316a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800316a:	b480      	push	{r7}
 800316c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800316e:	e7fe      	b.n	800316e <BusFault_Handler+0x4>

08003170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003174:	e7fe      	b.n	8003174 <UsageFault_Handler+0x4>

08003176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800319e:	f000 f92d 	bl	80033fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <ADC3_IRQHandler>:
/**
  * @brief This function handles ADC3 global interrupt.
  */

void ADC3_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc3);
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <ADC3_IRQHandler+0x10>)
 80031ae:	f000 fb2d 	bl	800380c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	200001f8 	.word	0x200001f8

080031bc <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <DMA2_Channel4_5_IRQHandler+0x10>)
 80031c2:	f001 f893 	bl	80042ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000228 	.word	0x20000228

080031d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return 1;
 80031d4:	2301      	movs	r3, #1
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <_kill>:

int _kill(int pid, int sig)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031e8:	f004 f976 	bl	80074d8 <__errno>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2216      	movs	r2, #22
 80031f0:	601a      	str	r2, [r3, #0]
  return -1;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <_exit>:

void _exit (int status)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003206:	f04f 31ff 	mov.w	r1, #4294967295
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ffe7 	bl	80031de <_kill>
  while (1) {}    /* Make sure we hang here */
 8003210:	e7fe      	b.n	8003210 <_exit+0x12>

08003212 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	e00a      	b.n	800323a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003224:	f3af 8000 	nop.w
 8003228:	4601      	mov	r1, r0
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	60ba      	str	r2, [r7, #8]
 8003230:	b2ca      	uxtb	r2, r1
 8003232:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3301      	adds	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	429a      	cmp	r2, r3
 8003240:	dbf0      	blt.n	8003224 <_read+0x12>
  }

  return len;
 8003242:	687b      	ldr	r3, [r7, #4]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <_close>:
  }
  return len;
}

int _close(int file)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003272:	605a      	str	r2, [r3, #4]
  return 0;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <_isatty>:

int _isatty(int file)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003288:	2301      	movs	r3, #1
}
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032b4:	4a14      	ldr	r2, [pc, #80]	; (8003308 <_sbrk+0x5c>)
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <_sbrk+0x60>)
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032c0:	4b13      	ldr	r3, [pc, #76]	; (8003310 <_sbrk+0x64>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <_sbrk+0x64>)
 80032ca:	4a12      	ldr	r2, [pc, #72]	; (8003314 <_sbrk+0x68>)
 80032cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032ce:	4b10      	ldr	r3, [pc, #64]	; (8003310 <_sbrk+0x64>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d207      	bcs.n	80032ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032dc:	f004 f8fc 	bl	80074d8 <__errno>
 80032e0:	4603      	mov	r3, r0
 80032e2:	220c      	movs	r2, #12
 80032e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032e6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ea:	e009      	b.n	8003300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032ec:	4b08      	ldr	r3, [pc, #32]	; (8003310 <_sbrk+0x64>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032f2:	4b07      	ldr	r3, [pc, #28]	; (8003310 <_sbrk+0x64>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	4a05      	ldr	r2, [pc, #20]	; (8003310 <_sbrk+0x64>)
 80032fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032fe:	68fb      	ldr	r3, [r7, #12]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20010000 	.word	0x20010000
 800330c:	00000400 	.word	0x00000400
 8003310:	20000370 	.word	0x20000370
 8003314:	200004c8 	.word	0x200004c8

08003318 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003324:	f7ff fff8 	bl	8003318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003328:	480b      	ldr	r0, [pc, #44]	; (8003358 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800332a:	490c      	ldr	r1, [pc, #48]	; (800335c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800332c:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <LoopFillZerobss+0x16>)
  movs r3, #0
 800332e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003330:	e002      	b.n	8003338 <LoopCopyDataInit>

08003332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003336:	3304      	adds	r3, #4

08003338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800333a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800333c:	d3f9      	bcc.n	8003332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800333e:	4a09      	ldr	r2, [pc, #36]	; (8003364 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003340:	4c09      	ldr	r4, [pc, #36]	; (8003368 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003344:	e001      	b.n	800334a <LoopFillZerobss>

08003346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003348:	3204      	adds	r2, #4

0800334a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800334a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800334c:	d3fb      	bcc.n	8003346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800334e:	f004 f8c9 	bl	80074e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003352:	f7fe fa35 	bl	80017c0 <main>
  bx lr
 8003356:	4770      	bx	lr
  ldr r0, =_sdata
 8003358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800335c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003360:	0800aedc 	.word	0x0800aedc
  ldr r2, =_sbss
 8003364:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003368:	200004c4 	.word	0x200004c4

0800336c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800336c:	e7fe      	b.n	800336c <ADC1_2_IRQHandler>
	...

08003370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003374:	4b08      	ldr	r3, [pc, #32]	; (8003398 <HAL_Init+0x28>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a07      	ldr	r2, [pc, #28]	; (8003398 <HAL_Init+0x28>)
 800337a:	f043 0310 	orr.w	r3, r3, #16
 800337e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003380:	2003      	movs	r0, #3
 8003382:	f000 fe9b 	bl	80040bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003386:	200f      	movs	r0, #15
 8003388:	f000 f808 	bl	800339c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800338c:	f7ff fd90 	bl	8002eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40022000 	.word	0x40022000

0800339c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033a4:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <HAL_InitTick+0x54>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <HAL_InitTick+0x58>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	4619      	mov	r1, r3
 80033ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 feb3 	bl	8004126 <HAL_SYSTICK_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00e      	b.n	80033e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b0f      	cmp	r3, #15
 80033ce:	d80a      	bhi.n	80033e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033d0:	2200      	movs	r2, #0
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295
 80033d8:	f000 fe7b 	bl	80040d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033dc:	4a06      	ldr	r2, [pc, #24]	; (80033f8 <HAL_InitTick+0x5c>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e000      	b.n	80033e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20000008 	.word	0x20000008
 80033f4:	20000010 	.word	0x20000010
 80033f8:	2000000c 	.word	0x2000000c

080033fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_IncTick+0x1c>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_IncTick+0x20>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4413      	add	r3, r2
 800340c:	4a03      	ldr	r2, [pc, #12]	; (800341c <HAL_IncTick+0x20>)
 800340e:	6013      	str	r3, [r2, #0]
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	20000010 	.word	0x20000010
 800341c:	20000374 	.word	0x20000374

08003420 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return uwTick;
 8003424:	4b02      	ldr	r3, [pc, #8]	; (8003430 <HAL_GetTick+0x10>)
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	20000374 	.word	0x20000374

08003434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800343c:	f7ff fff0 	bl	8003420 <HAL_GetTick>
 8003440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d005      	beq.n	800345a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800344e:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <HAL_Delay+0x44>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4413      	add	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800345a:	bf00      	nop
 800345c:	f7ff ffe0 	bl	8003420 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	429a      	cmp	r2, r3
 800346a:	d8f7      	bhi.n	800345c <HAL_Delay+0x28>
  {
  }
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000010 	.word	0x20000010

0800347c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0ce      	b.n	800363c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff fd2a 	bl	8002f14 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fbcf 	bl	8003c64 <ADC_ConversionStop_Disable>
 80034c6:	4603      	mov	r3, r0
 80034c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f040 80a9 	bne.w	800362a <HAL_ADC_Init+0x1ae>
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f040 80a5 	bne.w	800362a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034e8:	f023 0302 	bic.w	r3, r3, #2
 80034ec:	f043 0202 	orr.w	r2, r3, #2
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4951      	ldr	r1, [pc, #324]	; (8003644 <HAL_ADC_Init+0x1c8>)
 80034fe:	428b      	cmp	r3, r1
 8003500:	d10a      	bne.n	8003518 <HAL_ADC_Init+0x9c>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800350a:	d002      	beq.n	8003512 <HAL_ADC_Init+0x96>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	e004      	b.n	800351c <HAL_ADC_Init+0xa0>
 8003512:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003516:	e001      	b.n	800351c <HAL_ADC_Init+0xa0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800351c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	7b1b      	ldrb	r3, [r3, #12]
 8003522:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003524:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	4313      	orrs	r3, r2
 800352a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003534:	d003      	beq.n	800353e <HAL_ADC_Init+0xc2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d102      	bne.n	8003544 <HAL_ADC_Init+0xc8>
 800353e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003542:	e000      	b.n	8003546 <HAL_ADC_Init+0xca>
 8003544:	2300      	movs	r3, #0
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	7d1b      	ldrb	r3, [r3, #20]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d119      	bne.n	8003588 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	7b1b      	ldrb	r3, [r3, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	3b01      	subs	r3, #1
 8003562:	035a      	lsls	r2, r3, #13
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	e00b      	b.n	8003588 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	f043 0201 	orr.w	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	430a      	orrs	r2, r1
 800359a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	4b29      	ldr	r3, [pc, #164]	; (8003648 <HAL_ADC_Init+0x1cc>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	430b      	orrs	r3, r1
 80035ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b8:	d003      	beq.n	80035c2 <HAL_ADC_Init+0x146>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d104      	bne.n	80035cc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	051b      	lsls	r3, r3, #20
 80035ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	430a      	orrs	r2, r1
 80035de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	4b19      	ldr	r3, [pc, #100]	; (800364c <HAL_ADC_Init+0x1d0>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d10b      	bne.n	8003608 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	f023 0303 	bic.w	r3, r3, #3
 80035fe:	f043 0201 	orr.w	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003606:	e018      	b.n	800363a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	f023 0312 	bic.w	r3, r3, #18
 8003610:	f043 0210 	orr.w	r2, r3, #16
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	f043 0201 	orr.w	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003628:	e007      	b.n	800363a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	f043 0210 	orr.w	r2, r3, #16
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800363a:	7dfb      	ldrb	r3, [r7, #23]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40013c00 	.word	0x40013c00
 8003648:	ffe1f7fd 	.word	0xffe1f7fd
 800364c:	ff1f0efe 	.word	0xff1f0efe

08003650 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a64      	ldr	r2, [pc, #400]	; (80037f8 <HAL_ADC_Start_DMA+0x1a8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d004      	beq.n	8003674 <HAL_ADC_Start_DMA+0x24>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a63      	ldr	r2, [pc, #396]	; (80037fc <HAL_ADC_Start_DMA+0x1ac>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d106      	bne.n	8003682 <HAL_ADC_Start_DMA+0x32>
 8003674:	4b60      	ldr	r3, [pc, #384]	; (80037f8 <HAL_ADC_Start_DMA+0x1a8>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800367c:	2b00      	cmp	r3, #0
 800367e:	f040 80b3 	bne.w	80037e8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_ADC_Start_DMA+0x40>
 800368c:	2302      	movs	r3, #2
 800368e:	e0ae      	b.n	80037ee <HAL_ADC_Start_DMA+0x19e>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 fa89 	bl	8003bb0 <ADC_Enable>
 800369e:	4603      	mov	r3, r0
 80036a0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80036a2:	7dfb      	ldrb	r3, [r7, #23]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f040 809a 	bne.w	80037de <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a4e      	ldr	r2, [pc, #312]	; (80037fc <HAL_ADC_Start_DMA+0x1ac>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d105      	bne.n	80036d4 <HAL_ADC_Start_DMA+0x84>
 80036c8:	4b4b      	ldr	r3, [pc, #300]	; (80037f8 <HAL_ADC_Start_DMA+0x1a8>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d115      	bne.n	8003700 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d026      	beq.n	800373c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036fe:	e01d      	b.n	800373c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a39      	ldr	r2, [pc, #228]	; (80037f8 <HAL_ADC_Start_DMA+0x1a8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d004      	beq.n	8003720 <HAL_ADC_Start_DMA+0xd0>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a38      	ldr	r2, [pc, #224]	; (80037fc <HAL_ADC_Start_DMA+0x1ac>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d10d      	bne.n	800373c <HAL_ADC_Start_DMA+0xec>
 8003720:	4b35      	ldr	r3, [pc, #212]	; (80037f8 <HAL_ADC_Start_DMA+0x1a8>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003734:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d006      	beq.n	8003756 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	f023 0206 	bic.w	r2, r3, #6
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	62da      	str	r2, [r3, #44]	; 0x2c
 8003754:	e002      	b.n	800375c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4a25      	ldr	r2, [pc, #148]	; (8003800 <HAL_ADC_Start_DMA+0x1b0>)
 800376a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4a24      	ldr	r2, [pc, #144]	; (8003804 <HAL_ADC_Start_DMA+0x1b4>)
 8003772:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	4a23      	ldr	r2, [pc, #140]	; (8003808 <HAL_ADC_Start_DMA+0x1b8>)
 800377a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0202 	mvn.w	r2, #2
 8003784:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003794:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a18      	ldr	r0, [r3, #32]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	334c      	adds	r3, #76	; 0x4c
 80037a0:	4619      	mov	r1, r3
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f000 fd41 	bl	800422c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80037b4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80037b8:	d108      	bne.n	80037cc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80037c8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80037ca:	e00f      	b.n	80037ec <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80037da:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80037dc:	e006      	b.n	80037ec <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80037e6:	e001      	b.n	80037ec <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80037ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40012400 	.word	0x40012400
 80037fc:	40012800 	.word	0x40012800
 8003800:	08003ce7 	.word	0x08003ce7
 8003804:	08003d63 	.word	0x08003d63
 8003808:	08003d7f 	.word	0x08003d7f

0800380c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d03e      	beq.n	80038ac <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d039      	beq.n	80038ac <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	d105      	bne.n	8003850 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800385a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800385e:	d11d      	bne.n	800389c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003864:	2b00      	cmp	r3, #0
 8003866:	d119      	bne.n	800389c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0220 	bic.w	r2, r2, #32
 8003876:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d105      	bne.n	800389c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	f043 0201 	orr.w	r2, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff f9b9 	bl	8002c14 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f06f 0212 	mvn.w	r2, #18
 80038aa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d04d      	beq.n	8003952 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d048      	beq.n	8003952 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80038e2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80038e6:	d012      	beq.n	800390e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d125      	bne.n	8003942 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003900:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003904:	d11d      	bne.n	8003942 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800390a:	2b00      	cmp	r3, #0
 800390c:	d119      	bne.n	8003942 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800391c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d105      	bne.n	8003942 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393a:	f043 0201 	orr.w	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fae4 	bl	8003f10 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 020c 	mvn.w	r2, #12
 8003950:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	d012      	beq.n	8003982 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f812 	bl	800399c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0201 	mvn.w	r2, #1
 8003980:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr

080039ae <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x20>
 80039dc:	2302      	movs	r3, #2
 80039de:	e0dc      	b.n	8003b9a <HAL_ADC_ConfigChannel+0x1da>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b06      	cmp	r3, #6
 80039ee:	d81c      	bhi.n	8003a2a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	3b05      	subs	r3, #5
 8003a02:	221f      	movs	r2, #31
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	4019      	ands	r1, r3
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	3b05      	subs	r3, #5
 8003a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	635a      	str	r2, [r3, #52]	; 0x34
 8003a28:	e03c      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b0c      	cmp	r3, #12
 8003a30:	d81c      	bhi.n	8003a6c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	3b23      	subs	r3, #35	; 0x23
 8003a44:	221f      	movs	r2, #31
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	4019      	ands	r1, r3
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3b23      	subs	r3, #35	; 0x23
 8003a5e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
 8003a6a:	e01b      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3b41      	subs	r3, #65	; 0x41
 8003a7e:	221f      	movs	r2, #31
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	4019      	ands	r1, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	3b41      	subs	r3, #65	; 0x41
 8003a98:	fa00 f203 	lsl.w	r2, r0, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b09      	cmp	r3, #9
 8003aaa:	d91c      	bls.n	8003ae6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68d9      	ldr	r1, [r3, #12]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4413      	add	r3, r2
 8003abc:	3b1e      	subs	r3, #30
 8003abe:	2207      	movs	r2, #7
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	4019      	ands	r1, r3
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6898      	ldr	r0, [r3, #8]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3b1e      	subs	r3, #30
 8003ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	60da      	str	r2, [r3, #12]
 8003ae4:	e019      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6919      	ldr	r1, [r3, #16]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	2207      	movs	r2, #7
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	4019      	ands	r1, r3
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	6898      	ldr	r0, [r3, #8]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	4413      	add	r3, r2
 8003b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b10      	cmp	r3, #16
 8003b20:	d003      	beq.n	8003b2a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b26:	2b11      	cmp	r3, #17
 8003b28:	d132      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d125      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d126      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b50:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b10      	cmp	r3, #16
 8003b58:	d11a      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b5a:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a13      	ldr	r2, [pc, #76]	; (8003bac <HAL_ADC_ConfigChannel+0x1ec>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	0c9a      	lsrs	r2, r3, #18
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b70:	e002      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f9      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x1b2>
 8003b7e:	e007      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr
 8003ba4:	40012400 	.word	0x40012400
 8003ba8:	20000008 	.word	0x20000008
 8003bac:	431bde83 	.word	0x431bde83

08003bb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d040      	beq.n	8003c50 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0201 	orr.w	r2, r2, #1
 8003bdc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003bde:	4b1f      	ldr	r3, [pc, #124]	; (8003c5c <ADC_Enable+0xac>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <ADC_Enable+0xb0>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	0c9b      	lsrs	r3, r3, #18
 8003bea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003bec:	e002      	b.n	8003bf4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f9      	bne.n	8003bee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bfa:	f7ff fc11 	bl	8003420 <HAL_GetTick>
 8003bfe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003c00:	e01f      	b.n	8003c42 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c02:	f7ff fc0d 	bl	8003420 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d918      	bls.n	8003c42 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d011      	beq.n	8003c42 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	f043 0210 	orr.w	r2, r3, #16
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	f043 0201 	orr.w	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e007      	b.n	8003c52 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d1d8      	bne.n	8003c02 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000008 	.word	0x20000008
 8003c60:	431bde83 	.word	0x431bde83

08003c64 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d12e      	bne.n	8003cdc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0201 	bic.w	r2, r2, #1
 8003c8c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c8e:	f7ff fbc7 	bl	8003420 <HAL_GetTick>
 8003c92:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c94:	e01b      	b.n	8003cce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c96:	f7ff fbc3 	bl	8003420 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d914      	bls.n	8003cce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d10d      	bne.n	8003cce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	f043 0210 	orr.w	r2, r3, #16
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	f043 0201 	orr.w	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e007      	b.n	8003cde <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d0dc      	beq.n	8003c96 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d127      	bne.n	8003d50 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003d16:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003d1a:	d115      	bne.n	8003d48 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d111      	bne.n	8003d48 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d105      	bne.n	8003d48 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	f043 0201 	orr.w	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f7fe ff63 	bl	8002c14 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003d4e:	e004      	b.n	8003d5a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	4798      	blx	r3
}
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f7ff fe0a 	bl	800398a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	f043 0204 	orr.w	r2, r3, #4
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7ff fe02 	bl	80039ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_ADCEx_Calibration_Start+0x1e>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e097      	b.n	8003f02 <HAL_ADCEx_Calibration_Start+0x14e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff ff42 	bl	8003c64 <ADC_ConversionStop_Disable>
 8003de0:	4603      	mov	r3, r0
 8003de2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff fee3 	bl	8003bb0 <ADC_Enable>
 8003dea:	4603      	mov	r3, r0
 8003dec:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f040 8081 	bne.w	8003ef8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003dfe:	f023 0302 	bic.w	r3, r3, #2
 8003e02:	f043 0202 	orr.w	r2, r3, #2
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003e0a:	4b40      	ldr	r3, [pc, #256]	; (8003f0c <HAL_ADCEx_Calibration_Start+0x158>)
 8003e0c:	681c      	ldr	r4, [r3, #0]
 8003e0e:	2002      	movs	r0, #2
 8003e10:	f001 fb60 	bl	80054d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e14:	4603      	mov	r3, r0
 8003e16:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003e1a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003e1c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003e1e:	e002      	b.n	8003e26 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f9      	bne.n	8003e20 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0208 	orr.w	r2, r2, #8
 8003e3a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003e3c:	f7ff faf0 	bl	8003420 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003e42:	e01b      	b.n	8003e7c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003e44:	f7ff faec 	bl	8003420 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b0a      	cmp	r3, #10
 8003e50:	d914      	bls.n	8003e7c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	f023 0312 	bic.w	r3, r3, #18
 8003e68:	f043 0210 	orr.w	r2, r3, #16
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e042      	b.n	8003f02 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1dc      	bne.n	8003e44 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0204 	orr.w	r2, r2, #4
 8003e98:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003e9a:	f7ff fac1 	bl	8003420 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003ea0:	e01b      	b.n	8003eda <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003ea2:	f7ff fabd 	bl	8003420 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b0a      	cmp	r3, #10
 8003eae:	d914      	bls.n	8003eda <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00d      	beq.n	8003eda <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec2:	f023 0312 	bic.w	r3, r3, #18
 8003ec6:	f043 0210 	orr.w	r2, r3, #16
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e013      	b.n	8003f02 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1dc      	bne.n	8003ea2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	f023 0303 	bic.w	r3, r3, #3
 8003ef0:	f043 0201 	orr.w	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd90      	pop	{r4, r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000008 	.word	0x20000008

08003f10 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr
	...

08003f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <__NVIC_SetPriorityGrouping+0x44>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f40:	4013      	ands	r3, r2
 8003f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f56:	4a04      	ldr	r2, [pc, #16]	; (8003f68 <__NVIC_SetPriorityGrouping+0x44>)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	60d3      	str	r3, [r2, #12]
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <__NVIC_GetPriorityGrouping+0x18>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	0a1b      	lsrs	r3, r3, #8
 8003f76:	f003 0307 	and.w	r3, r3, #7
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	e000ed00 	.word	0xe000ed00

08003f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	db0b      	blt.n	8003fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	f003 021f 	and.w	r2, r3, #31
 8003fa0:	4906      	ldr	r1, [pc, #24]	; (8003fbc <__NVIC_EnableIRQ+0x34>)
 8003fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	2001      	movs	r0, #1
 8003faa:	fa00 f202 	lsl.w	r2, r0, r2
 8003fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	e000e100 	.word	0xe000e100

08003fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	6039      	str	r1, [r7, #0]
 8003fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	db0a      	blt.n	8003fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	490c      	ldr	r1, [pc, #48]	; (800400c <__NVIC_SetPriority+0x4c>)
 8003fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fde:	0112      	lsls	r2, r2, #4
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fe8:	e00a      	b.n	8004000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	4908      	ldr	r1, [pc, #32]	; (8004010 <__NVIC_SetPriority+0x50>)
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	3b04      	subs	r3, #4
 8003ff8:	0112      	lsls	r2, r2, #4
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	761a      	strb	r2, [r3, #24]
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	e000e100 	.word	0xe000e100
 8004010:	e000ed00 	.word	0xe000ed00

08004014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	; 0x24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f1c3 0307 	rsb	r3, r3, #7
 800402e:	2b04      	cmp	r3, #4
 8004030:	bf28      	it	cs
 8004032:	2304      	movcs	r3, #4
 8004034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3304      	adds	r3, #4
 800403a:	2b06      	cmp	r3, #6
 800403c:	d902      	bls.n	8004044 <NVIC_EncodePriority+0x30>
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	3b03      	subs	r3, #3
 8004042:	e000      	b.n	8004046 <NVIC_EncodePriority+0x32>
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004048:	f04f 32ff 	mov.w	r2, #4294967295
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43da      	mvns	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	401a      	ands	r2, r3
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800405c:	f04f 31ff 	mov.w	r1, #4294967295
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	fa01 f303 	lsl.w	r3, r1, r3
 8004066:	43d9      	mvns	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800406c:	4313      	orrs	r3, r2
         );
}
 800406e:	4618      	mov	r0, r3
 8004070:	3724      	adds	r7, #36	; 0x24
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3b01      	subs	r3, #1
 8004084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004088:	d301      	bcc.n	800408e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800408a:	2301      	movs	r3, #1
 800408c:	e00f      	b.n	80040ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800408e:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <SysTick_Config+0x40>)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3b01      	subs	r3, #1
 8004094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004096:	210f      	movs	r1, #15
 8004098:	f04f 30ff 	mov.w	r0, #4294967295
 800409c:	f7ff ff90 	bl	8003fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <SysTick_Config+0x40>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040a6:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <SysTick_Config+0x40>)
 80040a8:	2207      	movs	r2, #7
 80040aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	e000e010 	.word	0xe000e010

080040bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff ff2d 	bl	8003f24 <__NVIC_SetPriorityGrouping>
}
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b086      	sub	sp, #24
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	4603      	mov	r3, r0
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040e4:	f7ff ff42 	bl	8003f6c <__NVIC_GetPriorityGrouping>
 80040e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	6978      	ldr	r0, [r7, #20]
 80040f0:	f7ff ff90 	bl	8004014 <NVIC_EncodePriority>
 80040f4:	4602      	mov	r2, r0
 80040f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040fa:	4611      	mov	r1, r2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff ff5f 	bl	8003fc0 <__NVIC_SetPriority>
}
 8004102:	bf00      	nop
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
 8004110:	4603      	mov	r3, r0
 8004112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff ff35 	bl	8003f88 <__NVIC_EnableIRQ>
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff ffa2 	bl	8004078 <SysTick_Config>
 8004134:	4603      	mov	r3, r0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e059      	b.n	800420a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <HAL_DMA_Init+0xd4>)
 800415e:	429a      	cmp	r2, r3
 8004160:	d80f      	bhi.n	8004182 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <HAL_DMA_Init+0xd8>)
 800416a:	4413      	add	r3, r2
 800416c:	4a2b      	ldr	r2, [pc, #172]	; (800421c <HAL_DMA_Init+0xdc>)
 800416e:	fba2 2303 	umull	r2, r3, r2, r3
 8004172:	091b      	lsrs	r3, r3, #4
 8004174:	009a      	lsls	r2, r3, #2
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a28      	ldr	r2, [pc, #160]	; (8004220 <HAL_DMA_Init+0xe0>)
 800417e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004180:	e00e      	b.n	80041a0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	4b26      	ldr	r3, [pc, #152]	; (8004224 <HAL_DMA_Init+0xe4>)
 800418a:	4413      	add	r3, r2
 800418c:	4a23      	ldr	r2, [pc, #140]	; (800421c <HAL_DMA_Init+0xdc>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	091b      	lsrs	r3, r3, #4
 8004194:	009a      	lsls	r2, r3, #2
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a22      	ldr	r2, [pc, #136]	; (8004228 <HAL_DMA_Init+0xe8>)
 800419e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80041ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80041c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr
 8004214:	40020407 	.word	0x40020407
 8004218:	bffdfff8 	.word	0xbffdfff8
 800421c:	cccccccd 	.word	0xcccccccd
 8004220:	40020000 	.word	0x40020000
 8004224:	bffdfbf8 	.word	0xbffdfbf8
 8004228:	40020400 	.word	0x40020400

0800422c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_DMA_Start_IT+0x20>
 8004248:	2302      	movs	r3, #2
 800424a:	e04b      	b.n	80042e4 <HAL_DMA_Start_IT+0xb8>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	d13a      	bne.n	80042d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0201 	bic.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fa6d 	bl	8004764 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 020e 	orr.w	r2, r2, #14
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	e00f      	b.n	80042c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0204 	bic.w	r2, r2, #4
 80042b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 020a 	orr.w	r2, r2, #10
 80042c2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	e005      	b.n	80042e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80042de:	2302      	movs	r3, #2
 80042e0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	2204      	movs	r2, #4
 800430a:	409a      	lsls	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4013      	ands	r3, r2
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80f1 	beq.w	80044f8 <HAL_DMA_IRQHandler+0x20c>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80eb 	beq.w	80044f8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d107      	bne.n	8004340 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0204 	bic.w	r2, r2, #4
 800433e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	4b5f      	ldr	r3, [pc, #380]	; (80044c4 <HAL_DMA_IRQHandler+0x1d8>)
 8004348:	429a      	cmp	r2, r3
 800434a:	d958      	bls.n	80043fe <HAL_DMA_IRQHandler+0x112>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a5d      	ldr	r2, [pc, #372]	; (80044c8 <HAL_DMA_IRQHandler+0x1dc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d04f      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x10a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a5c      	ldr	r2, [pc, #368]	; (80044cc <HAL_DMA_IRQHandler+0x1e0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d048      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x106>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a5a      	ldr	r2, [pc, #360]	; (80044d0 <HAL_DMA_IRQHandler+0x1e4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d040      	beq.n	80043ec <HAL_DMA_IRQHandler+0x100>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a59      	ldr	r2, [pc, #356]	; (80044d4 <HAL_DMA_IRQHandler+0x1e8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d038      	beq.n	80043e6 <HAL_DMA_IRQHandler+0xfa>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a57      	ldr	r2, [pc, #348]	; (80044d8 <HAL_DMA_IRQHandler+0x1ec>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d030      	beq.n	80043e0 <HAL_DMA_IRQHandler+0xf4>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a56      	ldr	r2, [pc, #344]	; (80044dc <HAL_DMA_IRQHandler+0x1f0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d028      	beq.n	80043da <HAL_DMA_IRQHandler+0xee>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a4d      	ldr	r2, [pc, #308]	; (80044c4 <HAL_DMA_IRQHandler+0x1d8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d020      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xe8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a52      	ldr	r2, [pc, #328]	; (80044e0 <HAL_DMA_IRQHandler+0x1f4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d019      	beq.n	80043d0 <HAL_DMA_IRQHandler+0xe4>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a50      	ldr	r2, [pc, #320]	; (80044e4 <HAL_DMA_IRQHandler+0x1f8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d012      	beq.n	80043cc <HAL_DMA_IRQHandler+0xe0>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a4f      	ldr	r2, [pc, #316]	; (80044e8 <HAL_DMA_IRQHandler+0x1fc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00a      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xda>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a4d      	ldr	r2, [pc, #308]	; (80044ec <HAL_DMA_IRQHandler+0x200>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d102      	bne.n	80043c0 <HAL_DMA_IRQHandler+0xd4>
 80043ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043be:	e01b      	b.n	80043f8 <HAL_DMA_IRQHandler+0x10c>
 80043c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80043c4:	e018      	b.n	80043f8 <HAL_DMA_IRQHandler+0x10c>
 80043c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043ca:	e015      	b.n	80043f8 <HAL_DMA_IRQHandler+0x10c>
 80043cc:	2340      	movs	r3, #64	; 0x40
 80043ce:	e013      	b.n	80043f8 <HAL_DMA_IRQHandler+0x10c>
 80043d0:	2304      	movs	r3, #4
 80043d2:	e011      	b.n	80043f8 <HAL_DMA_IRQHandler+0x10c>
 80043d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80043d8:	e00e      	b.n	80043f8 <HAL_DMA_IRQHandler+0x10c>
 80043da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043de:	e00b      	b.n	80043f8 <HAL_DMA_IRQHandler+0x10c>
 80043e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80043e4:	e008      	b.n	80043f8 <HAL_DMA_IRQHandler+0x10c>
 80043e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043ea:	e005      	b.n	80043f8 <HAL_DMA_IRQHandler+0x10c>
 80043ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043f0:	e002      	b.n	80043f8 <HAL_DMA_IRQHandler+0x10c>
 80043f2:	2340      	movs	r3, #64	; 0x40
 80043f4:	e000      	b.n	80043f8 <HAL_DMA_IRQHandler+0x10c>
 80043f6:	2304      	movs	r3, #4
 80043f8:	4a3d      	ldr	r2, [pc, #244]	; (80044f0 <HAL_DMA_IRQHandler+0x204>)
 80043fa:	6053      	str	r3, [r2, #4]
 80043fc:	e057      	b.n	80044ae <HAL_DMA_IRQHandler+0x1c2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a31      	ldr	r2, [pc, #196]	; (80044c8 <HAL_DMA_IRQHandler+0x1dc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d04f      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x1bc>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a2f      	ldr	r2, [pc, #188]	; (80044cc <HAL_DMA_IRQHandler+0x1e0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d048      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x1b8>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2e      	ldr	r2, [pc, #184]	; (80044d0 <HAL_DMA_IRQHandler+0x1e4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d040      	beq.n	800449e <HAL_DMA_IRQHandler+0x1b2>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a2c      	ldr	r2, [pc, #176]	; (80044d4 <HAL_DMA_IRQHandler+0x1e8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d038      	beq.n	8004498 <HAL_DMA_IRQHandler+0x1ac>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2b      	ldr	r2, [pc, #172]	; (80044d8 <HAL_DMA_IRQHandler+0x1ec>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d030      	beq.n	8004492 <HAL_DMA_IRQHandler+0x1a6>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a29      	ldr	r2, [pc, #164]	; (80044dc <HAL_DMA_IRQHandler+0x1f0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d028      	beq.n	800448c <HAL_DMA_IRQHandler+0x1a0>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a21      	ldr	r2, [pc, #132]	; (80044c4 <HAL_DMA_IRQHandler+0x1d8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d020      	beq.n	8004486 <HAL_DMA_IRQHandler+0x19a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a25      	ldr	r2, [pc, #148]	; (80044e0 <HAL_DMA_IRQHandler+0x1f4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d019      	beq.n	8004482 <HAL_DMA_IRQHandler+0x196>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a24      	ldr	r2, [pc, #144]	; (80044e4 <HAL_DMA_IRQHandler+0x1f8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d012      	beq.n	800447e <HAL_DMA_IRQHandler+0x192>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a22      	ldr	r2, [pc, #136]	; (80044e8 <HAL_DMA_IRQHandler+0x1fc>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00a      	beq.n	8004478 <HAL_DMA_IRQHandler+0x18c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a21      	ldr	r2, [pc, #132]	; (80044ec <HAL_DMA_IRQHandler+0x200>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d102      	bne.n	8004472 <HAL_DMA_IRQHandler+0x186>
 800446c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004470:	e01b      	b.n	80044aa <HAL_DMA_IRQHandler+0x1be>
 8004472:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004476:	e018      	b.n	80044aa <HAL_DMA_IRQHandler+0x1be>
 8004478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800447c:	e015      	b.n	80044aa <HAL_DMA_IRQHandler+0x1be>
 800447e:	2340      	movs	r3, #64	; 0x40
 8004480:	e013      	b.n	80044aa <HAL_DMA_IRQHandler+0x1be>
 8004482:	2304      	movs	r3, #4
 8004484:	e011      	b.n	80044aa <HAL_DMA_IRQHandler+0x1be>
 8004486:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800448a:	e00e      	b.n	80044aa <HAL_DMA_IRQHandler+0x1be>
 800448c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004490:	e00b      	b.n	80044aa <HAL_DMA_IRQHandler+0x1be>
 8004492:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004496:	e008      	b.n	80044aa <HAL_DMA_IRQHandler+0x1be>
 8004498:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800449c:	e005      	b.n	80044aa <HAL_DMA_IRQHandler+0x1be>
 800449e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a2:	e002      	b.n	80044aa <HAL_DMA_IRQHandler+0x1be>
 80044a4:	2340      	movs	r3, #64	; 0x40
 80044a6:	e000      	b.n	80044aa <HAL_DMA_IRQHandler+0x1be>
 80044a8:	2304      	movs	r3, #4
 80044aa:	4a12      	ldr	r2, [pc, #72]	; (80044f4 <HAL_DMA_IRQHandler+0x208>)
 80044ac:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 8136 	beq.w	8004724 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80044c0:	e130      	b.n	8004724 <HAL_DMA_IRQHandler+0x438>
 80044c2:	bf00      	nop
 80044c4:	40020080 	.word	0x40020080
 80044c8:	40020008 	.word	0x40020008
 80044cc:	4002001c 	.word	0x4002001c
 80044d0:	40020030 	.word	0x40020030
 80044d4:	40020044 	.word	0x40020044
 80044d8:	40020058 	.word	0x40020058
 80044dc:	4002006c 	.word	0x4002006c
 80044e0:	40020408 	.word	0x40020408
 80044e4:	4002041c 	.word	0x4002041c
 80044e8:	40020430 	.word	0x40020430
 80044ec:	40020444 	.word	0x40020444
 80044f0:	40020400 	.word	0x40020400
 80044f4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	2202      	movs	r2, #2
 80044fe:	409a      	lsls	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4013      	ands	r3, r2
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80dd 	beq.w	80046c4 <HAL_DMA_IRQHandler+0x3d8>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80d7 	beq.w	80046c4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10b      	bne.n	800453c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 020a 	bic.w	r2, r2, #10
 8004532:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	4b7b      	ldr	r3, [pc, #492]	; (8004730 <HAL_DMA_IRQHandler+0x444>)
 8004544:	429a      	cmp	r2, r3
 8004546:	d958      	bls.n	80045fa <HAL_DMA_IRQHandler+0x30e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a79      	ldr	r2, [pc, #484]	; (8004734 <HAL_DMA_IRQHandler+0x448>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d04f      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x306>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a78      	ldr	r2, [pc, #480]	; (8004738 <HAL_DMA_IRQHandler+0x44c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d048      	beq.n	80045ee <HAL_DMA_IRQHandler+0x302>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a76      	ldr	r2, [pc, #472]	; (800473c <HAL_DMA_IRQHandler+0x450>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d040      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x2fc>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a75      	ldr	r2, [pc, #468]	; (8004740 <HAL_DMA_IRQHandler+0x454>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d038      	beq.n	80045e2 <HAL_DMA_IRQHandler+0x2f6>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a73      	ldr	r2, [pc, #460]	; (8004744 <HAL_DMA_IRQHandler+0x458>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d030      	beq.n	80045dc <HAL_DMA_IRQHandler+0x2f0>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a72      	ldr	r2, [pc, #456]	; (8004748 <HAL_DMA_IRQHandler+0x45c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d028      	beq.n	80045d6 <HAL_DMA_IRQHandler+0x2ea>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a69      	ldr	r2, [pc, #420]	; (8004730 <HAL_DMA_IRQHandler+0x444>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d020      	beq.n	80045d0 <HAL_DMA_IRQHandler+0x2e4>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a6e      	ldr	r2, [pc, #440]	; (800474c <HAL_DMA_IRQHandler+0x460>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d019      	beq.n	80045cc <HAL_DMA_IRQHandler+0x2e0>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a6c      	ldr	r2, [pc, #432]	; (8004750 <HAL_DMA_IRQHandler+0x464>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d012      	beq.n	80045c8 <HAL_DMA_IRQHandler+0x2dc>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a6b      	ldr	r2, [pc, #428]	; (8004754 <HAL_DMA_IRQHandler+0x468>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00a      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x2d6>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a69      	ldr	r2, [pc, #420]	; (8004758 <HAL_DMA_IRQHandler+0x46c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d102      	bne.n	80045bc <HAL_DMA_IRQHandler+0x2d0>
 80045b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045ba:	e01b      	b.n	80045f4 <HAL_DMA_IRQHandler+0x308>
 80045bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045c0:	e018      	b.n	80045f4 <HAL_DMA_IRQHandler+0x308>
 80045c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045c6:	e015      	b.n	80045f4 <HAL_DMA_IRQHandler+0x308>
 80045c8:	2320      	movs	r3, #32
 80045ca:	e013      	b.n	80045f4 <HAL_DMA_IRQHandler+0x308>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e011      	b.n	80045f4 <HAL_DMA_IRQHandler+0x308>
 80045d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045d4:	e00e      	b.n	80045f4 <HAL_DMA_IRQHandler+0x308>
 80045d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80045da:	e00b      	b.n	80045f4 <HAL_DMA_IRQHandler+0x308>
 80045dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045e0:	e008      	b.n	80045f4 <HAL_DMA_IRQHandler+0x308>
 80045e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045e6:	e005      	b.n	80045f4 <HAL_DMA_IRQHandler+0x308>
 80045e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045ec:	e002      	b.n	80045f4 <HAL_DMA_IRQHandler+0x308>
 80045ee:	2320      	movs	r3, #32
 80045f0:	e000      	b.n	80045f4 <HAL_DMA_IRQHandler+0x308>
 80045f2:	2302      	movs	r3, #2
 80045f4:	4a59      	ldr	r2, [pc, #356]	; (800475c <HAL_DMA_IRQHandler+0x470>)
 80045f6:	6053      	str	r3, [r2, #4]
 80045f8:	e057      	b.n	80046aa <HAL_DMA_IRQHandler+0x3be>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a4d      	ldr	r2, [pc, #308]	; (8004734 <HAL_DMA_IRQHandler+0x448>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d04f      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x3b8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a4b      	ldr	r2, [pc, #300]	; (8004738 <HAL_DMA_IRQHandler+0x44c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d048      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x3b4>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a4a      	ldr	r2, [pc, #296]	; (800473c <HAL_DMA_IRQHandler+0x450>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d040      	beq.n	800469a <HAL_DMA_IRQHandler+0x3ae>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a48      	ldr	r2, [pc, #288]	; (8004740 <HAL_DMA_IRQHandler+0x454>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d038      	beq.n	8004694 <HAL_DMA_IRQHandler+0x3a8>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a47      	ldr	r2, [pc, #284]	; (8004744 <HAL_DMA_IRQHandler+0x458>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d030      	beq.n	800468e <HAL_DMA_IRQHandler+0x3a2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a45      	ldr	r2, [pc, #276]	; (8004748 <HAL_DMA_IRQHandler+0x45c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d028      	beq.n	8004688 <HAL_DMA_IRQHandler+0x39c>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a3d      	ldr	r2, [pc, #244]	; (8004730 <HAL_DMA_IRQHandler+0x444>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d020      	beq.n	8004682 <HAL_DMA_IRQHandler+0x396>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a41      	ldr	r2, [pc, #260]	; (800474c <HAL_DMA_IRQHandler+0x460>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d019      	beq.n	800467e <HAL_DMA_IRQHandler+0x392>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a40      	ldr	r2, [pc, #256]	; (8004750 <HAL_DMA_IRQHandler+0x464>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d012      	beq.n	800467a <HAL_DMA_IRQHandler+0x38e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a3e      	ldr	r2, [pc, #248]	; (8004754 <HAL_DMA_IRQHandler+0x468>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00a      	beq.n	8004674 <HAL_DMA_IRQHandler+0x388>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a3d      	ldr	r2, [pc, #244]	; (8004758 <HAL_DMA_IRQHandler+0x46c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d102      	bne.n	800466e <HAL_DMA_IRQHandler+0x382>
 8004668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800466c:	e01b      	b.n	80046a6 <HAL_DMA_IRQHandler+0x3ba>
 800466e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004672:	e018      	b.n	80046a6 <HAL_DMA_IRQHandler+0x3ba>
 8004674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004678:	e015      	b.n	80046a6 <HAL_DMA_IRQHandler+0x3ba>
 800467a:	2320      	movs	r3, #32
 800467c:	e013      	b.n	80046a6 <HAL_DMA_IRQHandler+0x3ba>
 800467e:	2302      	movs	r3, #2
 8004680:	e011      	b.n	80046a6 <HAL_DMA_IRQHandler+0x3ba>
 8004682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004686:	e00e      	b.n	80046a6 <HAL_DMA_IRQHandler+0x3ba>
 8004688:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800468c:	e00b      	b.n	80046a6 <HAL_DMA_IRQHandler+0x3ba>
 800468e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004692:	e008      	b.n	80046a6 <HAL_DMA_IRQHandler+0x3ba>
 8004694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004698:	e005      	b.n	80046a6 <HAL_DMA_IRQHandler+0x3ba>
 800469a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800469e:	e002      	b.n	80046a6 <HAL_DMA_IRQHandler+0x3ba>
 80046a0:	2320      	movs	r3, #32
 80046a2:	e000      	b.n	80046a6 <HAL_DMA_IRQHandler+0x3ba>
 80046a4:	2302      	movs	r3, #2
 80046a6:	4a2e      	ldr	r2, [pc, #184]	; (8004760 <HAL_DMA_IRQHandler+0x474>)
 80046a8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d034      	beq.n	8004724 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80046c2:	e02f      	b.n	8004724 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	2208      	movs	r2, #8
 80046ca:	409a      	lsls	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4013      	ands	r3, r2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d028      	beq.n	8004726 <HAL_DMA_IRQHandler+0x43a>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d023      	beq.n	8004726 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 020e 	bic.w	r2, r2, #14
 80046ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	2101      	movs	r1, #1
 80046f8:	fa01 f202 	lsl.w	r2, r1, r2
 80046fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	4798      	blx	r3
    }
  }
  return;
 8004724:	bf00      	nop
 8004726:	bf00      	nop
}
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40020080 	.word	0x40020080
 8004734:	40020008 	.word	0x40020008
 8004738:	4002001c 	.word	0x4002001c
 800473c:	40020030 	.word	0x40020030
 8004740:	40020044 	.word	0x40020044
 8004744:	40020058 	.word	0x40020058
 8004748:	4002006c 	.word	0x4002006c
 800474c:	40020408 	.word	0x40020408
 8004750:	4002041c 	.word	0x4002041c
 8004754:	40020430 	.word	0x40020430
 8004758:	40020444 	.word	0x40020444
 800475c:	40020400 	.word	0x40020400
 8004760:	40020000 	.word	0x40020000

08004764 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477a:	2101      	movs	r1, #1
 800477c:	fa01 f202 	lsl.w	r2, r1, r2
 8004780:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b10      	cmp	r3, #16
 8004790:	d108      	bne.n	80047a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80047a2:	e007      	b.n	80047b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	60da      	str	r2, [r3, #12]
}
 80047b4:	bf00      	nop
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr
	...

080047c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b08b      	sub	sp, #44	; 0x2c
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047ca:	2300      	movs	r3, #0
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80047ce:	2300      	movs	r3, #0
 80047d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047d2:	e179      	b.n	8004ac8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80047d4:	2201      	movs	r2, #1
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	f040 8168 	bne.w	8004ac2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4a96      	ldr	r2, [pc, #600]	; (8004a50 <HAL_GPIO_Init+0x290>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d05e      	beq.n	80048ba <HAL_GPIO_Init+0xfa>
 80047fc:	4a94      	ldr	r2, [pc, #592]	; (8004a50 <HAL_GPIO_Init+0x290>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d875      	bhi.n	80048ee <HAL_GPIO_Init+0x12e>
 8004802:	4a94      	ldr	r2, [pc, #592]	; (8004a54 <HAL_GPIO_Init+0x294>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d058      	beq.n	80048ba <HAL_GPIO_Init+0xfa>
 8004808:	4a92      	ldr	r2, [pc, #584]	; (8004a54 <HAL_GPIO_Init+0x294>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d86f      	bhi.n	80048ee <HAL_GPIO_Init+0x12e>
 800480e:	4a92      	ldr	r2, [pc, #584]	; (8004a58 <HAL_GPIO_Init+0x298>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d052      	beq.n	80048ba <HAL_GPIO_Init+0xfa>
 8004814:	4a90      	ldr	r2, [pc, #576]	; (8004a58 <HAL_GPIO_Init+0x298>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d869      	bhi.n	80048ee <HAL_GPIO_Init+0x12e>
 800481a:	4a90      	ldr	r2, [pc, #576]	; (8004a5c <HAL_GPIO_Init+0x29c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d04c      	beq.n	80048ba <HAL_GPIO_Init+0xfa>
 8004820:	4a8e      	ldr	r2, [pc, #568]	; (8004a5c <HAL_GPIO_Init+0x29c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d863      	bhi.n	80048ee <HAL_GPIO_Init+0x12e>
 8004826:	4a8e      	ldr	r2, [pc, #568]	; (8004a60 <HAL_GPIO_Init+0x2a0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d046      	beq.n	80048ba <HAL_GPIO_Init+0xfa>
 800482c:	4a8c      	ldr	r2, [pc, #560]	; (8004a60 <HAL_GPIO_Init+0x2a0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d85d      	bhi.n	80048ee <HAL_GPIO_Init+0x12e>
 8004832:	2b12      	cmp	r3, #18
 8004834:	d82a      	bhi.n	800488c <HAL_GPIO_Init+0xcc>
 8004836:	2b12      	cmp	r3, #18
 8004838:	d859      	bhi.n	80048ee <HAL_GPIO_Init+0x12e>
 800483a:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <HAL_GPIO_Init+0x80>)
 800483c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004840:	080048bb 	.word	0x080048bb
 8004844:	08004895 	.word	0x08004895
 8004848:	080048a7 	.word	0x080048a7
 800484c:	080048e9 	.word	0x080048e9
 8004850:	080048ef 	.word	0x080048ef
 8004854:	080048ef 	.word	0x080048ef
 8004858:	080048ef 	.word	0x080048ef
 800485c:	080048ef 	.word	0x080048ef
 8004860:	080048ef 	.word	0x080048ef
 8004864:	080048ef 	.word	0x080048ef
 8004868:	080048ef 	.word	0x080048ef
 800486c:	080048ef 	.word	0x080048ef
 8004870:	080048ef 	.word	0x080048ef
 8004874:	080048ef 	.word	0x080048ef
 8004878:	080048ef 	.word	0x080048ef
 800487c:	080048ef 	.word	0x080048ef
 8004880:	080048ef 	.word	0x080048ef
 8004884:	0800489d 	.word	0x0800489d
 8004888:	080048b1 	.word	0x080048b1
 800488c:	4a75      	ldr	r2, [pc, #468]	; (8004a64 <HAL_GPIO_Init+0x2a4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004892:	e02c      	b.n	80048ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	623b      	str	r3, [r7, #32]
          break;
 800489a:	e029      	b.n	80048f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	3304      	adds	r3, #4
 80048a2:	623b      	str	r3, [r7, #32]
          break;
 80048a4:	e024      	b.n	80048f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	3308      	adds	r3, #8
 80048ac:	623b      	str	r3, [r7, #32]
          break;
 80048ae:	e01f      	b.n	80048f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	330c      	adds	r3, #12
 80048b6:	623b      	str	r3, [r7, #32]
          break;
 80048b8:	e01a      	b.n	80048f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80048c2:	2304      	movs	r3, #4
 80048c4:	623b      	str	r3, [r7, #32]
          break;
 80048c6:	e013      	b.n	80048f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d105      	bne.n	80048dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048d0:	2308      	movs	r3, #8
 80048d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	611a      	str	r2, [r3, #16]
          break;
 80048da:	e009      	b.n	80048f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048dc:	2308      	movs	r3, #8
 80048de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	615a      	str	r2, [r3, #20]
          break;
 80048e6:	e003      	b.n	80048f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80048e8:	2300      	movs	r3, #0
 80048ea:	623b      	str	r3, [r7, #32]
          break;
 80048ec:	e000      	b.n	80048f0 <HAL_GPIO_Init+0x130>
          break;
 80048ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2bff      	cmp	r3, #255	; 0xff
 80048f4:	d801      	bhi.n	80048fa <HAL_GPIO_Init+0x13a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	e001      	b.n	80048fe <HAL_GPIO_Init+0x13e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3304      	adds	r3, #4
 80048fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2bff      	cmp	r3, #255	; 0xff
 8004904:	d802      	bhi.n	800490c <HAL_GPIO_Init+0x14c>
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	e002      	b.n	8004912 <HAL_GPIO_Init+0x152>
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	3b08      	subs	r3, #8
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	210f      	movs	r1, #15
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	fa01 f303 	lsl.w	r3, r1, r3
 8004920:	43db      	mvns	r3, r3
 8004922:	401a      	ands	r2, r3
 8004924:	6a39      	ldr	r1, [r7, #32]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	fa01 f303 	lsl.w	r3, r1, r3
 800492c:	431a      	orrs	r2, r3
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80c1 	beq.w	8004ac2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004940:	4b49      	ldr	r3, [pc, #292]	; (8004a68 <HAL_GPIO_Init+0x2a8>)
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	4a48      	ldr	r2, [pc, #288]	; (8004a68 <HAL_GPIO_Init+0x2a8>)
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	6193      	str	r3, [r2, #24]
 800494c:	4b46      	ldr	r3, [pc, #280]	; (8004a68 <HAL_GPIO_Init+0x2a8>)
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004958:	4a44      	ldr	r2, [pc, #272]	; (8004a6c <HAL_GPIO_Init+0x2ac>)
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	089b      	lsrs	r3, r3, #2
 800495e:	3302      	adds	r3, #2
 8004960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004964:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	f003 0303 	and.w	r3, r3, #3
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	220f      	movs	r2, #15
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	43db      	mvns	r3, r3
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4013      	ands	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a3c      	ldr	r2, [pc, #240]	; (8004a70 <HAL_GPIO_Init+0x2b0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d01f      	beq.n	80049c4 <HAL_GPIO_Init+0x204>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a3b      	ldr	r2, [pc, #236]	; (8004a74 <HAL_GPIO_Init+0x2b4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d019      	beq.n	80049c0 <HAL_GPIO_Init+0x200>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a3a      	ldr	r2, [pc, #232]	; (8004a78 <HAL_GPIO_Init+0x2b8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <HAL_GPIO_Init+0x1fc>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a39      	ldr	r2, [pc, #228]	; (8004a7c <HAL_GPIO_Init+0x2bc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00d      	beq.n	80049b8 <HAL_GPIO_Init+0x1f8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a38      	ldr	r2, [pc, #224]	; (8004a80 <HAL_GPIO_Init+0x2c0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d007      	beq.n	80049b4 <HAL_GPIO_Init+0x1f4>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a37      	ldr	r2, [pc, #220]	; (8004a84 <HAL_GPIO_Init+0x2c4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d101      	bne.n	80049b0 <HAL_GPIO_Init+0x1f0>
 80049ac:	2305      	movs	r3, #5
 80049ae:	e00a      	b.n	80049c6 <HAL_GPIO_Init+0x206>
 80049b0:	2306      	movs	r3, #6
 80049b2:	e008      	b.n	80049c6 <HAL_GPIO_Init+0x206>
 80049b4:	2304      	movs	r3, #4
 80049b6:	e006      	b.n	80049c6 <HAL_GPIO_Init+0x206>
 80049b8:	2303      	movs	r3, #3
 80049ba:	e004      	b.n	80049c6 <HAL_GPIO_Init+0x206>
 80049bc:	2302      	movs	r3, #2
 80049be:	e002      	b.n	80049c6 <HAL_GPIO_Init+0x206>
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <HAL_GPIO_Init+0x206>
 80049c4:	2300      	movs	r3, #0
 80049c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c8:	f002 0203 	and.w	r2, r2, #3
 80049cc:	0092      	lsls	r2, r2, #2
 80049ce:	4093      	lsls	r3, r2
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80049d6:	4925      	ldr	r1, [pc, #148]	; (8004a6c <HAL_GPIO_Init+0x2ac>)
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	089b      	lsrs	r3, r3, #2
 80049dc:	3302      	adds	r3, #2
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d006      	beq.n	80049fe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80049f0:	4b25      	ldr	r3, [pc, #148]	; (8004a88 <HAL_GPIO_Init+0x2c8>)
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	4924      	ldr	r1, [pc, #144]	; (8004a88 <HAL_GPIO_Init+0x2c8>)
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	608b      	str	r3, [r1, #8]
 80049fc:	e006      	b.n	8004a0c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80049fe:	4b22      	ldr	r3, [pc, #136]	; (8004a88 <HAL_GPIO_Init+0x2c8>)
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	43db      	mvns	r3, r3
 8004a06:	4920      	ldr	r1, [pc, #128]	; (8004a88 <HAL_GPIO_Init+0x2c8>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d006      	beq.n	8004a26 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004a18:	4b1b      	ldr	r3, [pc, #108]	; (8004a88 <HAL_GPIO_Init+0x2c8>)
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	491a      	ldr	r1, [pc, #104]	; (8004a88 <HAL_GPIO_Init+0x2c8>)
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60cb      	str	r3, [r1, #12]
 8004a24:	e006      	b.n	8004a34 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004a26:	4b18      	ldr	r3, [pc, #96]	; (8004a88 <HAL_GPIO_Init+0x2c8>)
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	43db      	mvns	r3, r3
 8004a2e:	4916      	ldr	r1, [pc, #88]	; (8004a88 <HAL_GPIO_Init+0x2c8>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d025      	beq.n	8004a8c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004a40:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <HAL_GPIO_Init+0x2c8>)
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	4910      	ldr	r1, [pc, #64]	; (8004a88 <HAL_GPIO_Init+0x2c8>)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	604b      	str	r3, [r1, #4]
 8004a4c:	e025      	b.n	8004a9a <HAL_GPIO_Init+0x2da>
 8004a4e:	bf00      	nop
 8004a50:	10320000 	.word	0x10320000
 8004a54:	10310000 	.word	0x10310000
 8004a58:	10220000 	.word	0x10220000
 8004a5c:	10210000 	.word	0x10210000
 8004a60:	10120000 	.word	0x10120000
 8004a64:	10110000 	.word	0x10110000
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	40010000 	.word	0x40010000
 8004a70:	40010800 	.word	0x40010800
 8004a74:	40010c00 	.word	0x40010c00
 8004a78:	40011000 	.word	0x40011000
 8004a7c:	40011400 	.word	0x40011400
 8004a80:	40011800 	.word	0x40011800
 8004a84:	40011c00 	.word	0x40011c00
 8004a88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004a8c:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <HAL_GPIO_Init+0x324>)
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	43db      	mvns	r3, r3
 8004a94:	4913      	ldr	r1, [pc, #76]	; (8004ae4 <HAL_GPIO_Init+0x324>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d006      	beq.n	8004ab4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004aa6:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <HAL_GPIO_Init+0x324>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	490e      	ldr	r1, [pc, #56]	; (8004ae4 <HAL_GPIO_Init+0x324>)
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]
 8004ab2:	e006      	b.n	8004ac2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <HAL_GPIO_Init+0x324>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	43db      	mvns	r3, r3
 8004abc:	4909      	ldr	r1, [pc, #36]	; (8004ae4 <HAL_GPIO_Init+0x324>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f47f ae7e 	bne.w	80047d4 <HAL_GPIO_Init+0x14>
  }
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	372c      	adds	r7, #44	; 0x2c
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr
 8004ae4:	40010400 	.word	0x40010400

08004ae8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	887b      	ldrh	r3, [r7, #2]
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
 8004b04:	e001      	b.n	8004b0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b06:	2300      	movs	r3, #0
 8004b08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr

08004b16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	807b      	strh	r3, [r7, #2]
 8004b22:	4613      	mov	r3, r2
 8004b24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b26:	787b      	ldrb	r3, [r7, #1]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b2c:	887a      	ldrh	r2, [r7, #2]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004b32:	e003      	b.n	8004b3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b34:	887b      	ldrh	r3, [r7, #2]
 8004b36:	041a      	lsls	r2, r3, #16
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	611a      	str	r2, [r3, #16]
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr
	...

08004b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e272      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 8087 	beq.w	8004c76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b68:	4b92      	ldr	r3, [pc, #584]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 030c 	and.w	r3, r3, #12
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d00c      	beq.n	8004b8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b74:	4b8f      	ldr	r3, [pc, #572]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f003 030c 	and.w	r3, r3, #12
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d112      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x5e>
 8004b80:	4b8c      	ldr	r3, [pc, #560]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8c:	d10b      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8e:	4b89      	ldr	r3, [pc, #548]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d06c      	beq.n	8004c74 <HAL_RCC_OscConfig+0x12c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d168      	bne.n	8004c74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e24c      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bae:	d106      	bne.n	8004bbe <HAL_RCC_OscConfig+0x76>
 8004bb0:	4b80      	ldr	r3, [pc, #512]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a7f      	ldr	r2, [pc, #508]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	e02e      	b.n	8004c1c <HAL_RCC_OscConfig+0xd4>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x98>
 8004bc6:	4b7b      	ldr	r3, [pc, #492]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a7a      	ldr	r2, [pc, #488]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	4b78      	ldr	r3, [pc, #480]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a77      	ldr	r2, [pc, #476]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e01d      	b.n	8004c1c <HAL_RCC_OscConfig+0xd4>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004be8:	d10c      	bne.n	8004c04 <HAL_RCC_OscConfig+0xbc>
 8004bea:	4b72      	ldr	r3, [pc, #456]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a71      	ldr	r2, [pc, #452]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	4b6f      	ldr	r3, [pc, #444]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a6e      	ldr	r2, [pc, #440]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e00b      	b.n	8004c1c <HAL_RCC_OscConfig+0xd4>
 8004c04:	4b6b      	ldr	r3, [pc, #428]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a6a      	ldr	r2, [pc, #424]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	4b68      	ldr	r3, [pc, #416]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a67      	ldr	r2, [pc, #412]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d013      	beq.n	8004c4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c24:	f7fe fbfc 	bl	8003420 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c2c:	f7fe fbf8 	bl	8003420 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b64      	cmp	r3, #100	; 0x64
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e200      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3e:	4b5d      	ldr	r3, [pc, #372]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f0      	beq.n	8004c2c <HAL_RCC_OscConfig+0xe4>
 8004c4a:	e014      	b.n	8004c76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4c:	f7fe fbe8 	bl	8003420 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c54:	f7fe fbe4 	bl	8003420 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e1ec      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c66:	4b53      	ldr	r3, [pc, #332]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1f0      	bne.n	8004c54 <HAL_RCC_OscConfig+0x10c>
 8004c72:	e000      	b.n	8004c76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d063      	beq.n	8004d4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c82:	4b4c      	ldr	r3, [pc, #304]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f003 030c 	and.w	r3, r3, #12
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00b      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c8e:	4b49      	ldr	r3, [pc, #292]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f003 030c 	and.w	r3, r3, #12
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d11c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x18c>
 8004c9a:	4b46      	ldr	r3, [pc, #280]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d116      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ca6:	4b43      	ldr	r3, [pc, #268]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_RCC_OscConfig+0x176>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d001      	beq.n	8004cbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e1c0      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbe:	4b3d      	ldr	r3, [pc, #244]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	4939      	ldr	r1, [pc, #228]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd2:	e03a      	b.n	8004d4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d020      	beq.n	8004d1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cdc:	4b36      	ldr	r3, [pc, #216]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce2:	f7fe fb9d 	bl	8003420 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cea:	f7fe fb99 	bl	8003420 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e1a1      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfc:	4b2d      	ldr	r3, [pc, #180]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f0      	beq.n	8004cea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d08:	4b2a      	ldr	r3, [pc, #168]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	4927      	ldr	r1, [pc, #156]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	600b      	str	r3, [r1, #0]
 8004d1c:	e015      	b.n	8004d4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d1e:	4b26      	ldr	r3, [pc, #152]	; (8004db8 <HAL_RCC_OscConfig+0x270>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d24:	f7fe fb7c 	bl	8003420 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d2c:	f7fe fb78 	bl	8003420 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e180      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d3e:	4b1d      	ldr	r3, [pc, #116]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d03a      	beq.n	8004dcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d019      	beq.n	8004d92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d5e:	4b17      	ldr	r3, [pc, #92]	; (8004dbc <HAL_RCC_OscConfig+0x274>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d64:	f7fe fb5c 	bl	8003420 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d6c:	f7fe fb58 	bl	8003420 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e160      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <HAL_RCC_OscConfig+0x26c>)
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0f0      	beq.n	8004d6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d8a:	2001      	movs	r0, #1
 8004d8c:	f000 face 	bl	800532c <RCC_Delay>
 8004d90:	e01c      	b.n	8004dcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d92:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <HAL_RCC_OscConfig+0x274>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d98:	f7fe fb42 	bl	8003420 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d9e:	e00f      	b.n	8004dc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da0:	f7fe fb3e 	bl	8003420 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d908      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e146      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>
 8004db2:	bf00      	nop
 8004db4:	40021000 	.word	0x40021000
 8004db8:	42420000 	.word	0x42420000
 8004dbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc0:	4b92      	ldr	r3, [pc, #584]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e9      	bne.n	8004da0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 80a6 	beq.w	8004f26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dde:	4b8b      	ldr	r3, [pc, #556]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10d      	bne.n	8004e06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dea:	4b88      	ldr	r3, [pc, #544]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	4a87      	ldr	r2, [pc, #540]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df4:	61d3      	str	r3, [r2, #28]
 8004df6:	4b85      	ldr	r3, [pc, #532]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	60bb      	str	r3, [r7, #8]
 8004e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e06:	4b82      	ldr	r3, [pc, #520]	; (8005010 <HAL_RCC_OscConfig+0x4c8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d118      	bne.n	8004e44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e12:	4b7f      	ldr	r3, [pc, #508]	; (8005010 <HAL_RCC_OscConfig+0x4c8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a7e      	ldr	r2, [pc, #504]	; (8005010 <HAL_RCC_OscConfig+0x4c8>)
 8004e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e1e:	f7fe faff 	bl	8003420 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e26:	f7fe fafb 	bl	8003420 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b64      	cmp	r3, #100	; 0x64
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e103      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e38:	4b75      	ldr	r3, [pc, #468]	; (8005010 <HAL_RCC_OscConfig+0x4c8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d106      	bne.n	8004e5a <HAL_RCC_OscConfig+0x312>
 8004e4c:	4b6f      	ldr	r3, [pc, #444]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	4a6e      	ldr	r2, [pc, #440]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	6213      	str	r3, [r2, #32]
 8004e58:	e02d      	b.n	8004eb6 <HAL_RCC_OscConfig+0x36e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10c      	bne.n	8004e7c <HAL_RCC_OscConfig+0x334>
 8004e62:	4b6a      	ldr	r3, [pc, #424]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	4a69      	ldr	r2, [pc, #420]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004e68:	f023 0301 	bic.w	r3, r3, #1
 8004e6c:	6213      	str	r3, [r2, #32]
 8004e6e:	4b67      	ldr	r3, [pc, #412]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	4a66      	ldr	r2, [pc, #408]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004e74:	f023 0304 	bic.w	r3, r3, #4
 8004e78:	6213      	str	r3, [r2, #32]
 8004e7a:	e01c      	b.n	8004eb6 <HAL_RCC_OscConfig+0x36e>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2b05      	cmp	r3, #5
 8004e82:	d10c      	bne.n	8004e9e <HAL_RCC_OscConfig+0x356>
 8004e84:	4b61      	ldr	r3, [pc, #388]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	4a60      	ldr	r2, [pc, #384]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004e8a:	f043 0304 	orr.w	r3, r3, #4
 8004e8e:	6213      	str	r3, [r2, #32]
 8004e90:	4b5e      	ldr	r3, [pc, #376]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	4a5d      	ldr	r2, [pc, #372]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004e96:	f043 0301 	orr.w	r3, r3, #1
 8004e9a:	6213      	str	r3, [r2, #32]
 8004e9c:	e00b      	b.n	8004eb6 <HAL_RCC_OscConfig+0x36e>
 8004e9e:	4b5b      	ldr	r3, [pc, #364]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	4a5a      	ldr	r2, [pc, #360]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	6213      	str	r3, [r2, #32]
 8004eaa:	4b58      	ldr	r3, [pc, #352]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	4a57      	ldr	r2, [pc, #348]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004eb0:	f023 0304 	bic.w	r3, r3, #4
 8004eb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d015      	beq.n	8004eea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ebe:	f7fe faaf 	bl	8003420 <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec4:	e00a      	b.n	8004edc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec6:	f7fe faab 	bl	8003420 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e0b1      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004edc:	4b4b      	ldr	r3, [pc, #300]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0ee      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x37e>
 8004ee8:	e014      	b.n	8004f14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eea:	f7fe fa99 	bl	8003420 <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ef0:	e00a      	b.n	8004f08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef2:	f7fe fa95 	bl	8003420 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e09b      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f08:	4b40      	ldr	r3, [pc, #256]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1ee      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d105      	bne.n	8004f26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f1a:	4b3c      	ldr	r3, [pc, #240]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	4a3b      	ldr	r2, [pc, #236]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 8087 	beq.w	800503e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f30:	4b36      	ldr	r3, [pc, #216]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f003 030c 	and.w	r3, r3, #12
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d061      	beq.n	8005000 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d146      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f44:	4b33      	ldr	r3, [pc, #204]	; (8005014 <HAL_RCC_OscConfig+0x4cc>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4a:	f7fe fa69 	bl	8003420 <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f52:	f7fe fa65 	bl	8003420 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e06d      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f64:	4b29      	ldr	r3, [pc, #164]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1f0      	bne.n	8004f52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f78:	d108      	bne.n	8004f8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f7a:	4b24      	ldr	r3, [pc, #144]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	4921      	ldr	r1, [pc, #132]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f8c:	4b1f      	ldr	r3, [pc, #124]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a19      	ldr	r1, [r3, #32]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	491b      	ldr	r1, [pc, #108]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa4:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <HAL_RCC_OscConfig+0x4cc>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004faa:	f7fe fa39 	bl	8003420 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb2:	f7fe fa35 	bl	8003420 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e03d      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fc4:	4b11      	ldr	r3, [pc, #68]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0f0      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x46a>
 8004fd0:	e035      	b.n	800503e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd2:	4b10      	ldr	r3, [pc, #64]	; (8005014 <HAL_RCC_OscConfig+0x4cc>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd8:	f7fe fa22 	bl	8003420 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe0:	f7fe fa1e 	bl	8003420 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e026      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ff2:	4b06      	ldr	r3, [pc, #24]	; (800500c <HAL_RCC_OscConfig+0x4c4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x498>
 8004ffe:	e01e      	b.n	800503e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d107      	bne.n	8005018 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e019      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>
 800500c:	40021000 	.word	0x40021000
 8005010:	40007000 	.word	0x40007000
 8005014:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <HAL_RCC_OscConfig+0x500>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	429a      	cmp	r2, r3
 800502a:	d106      	bne.n	800503a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005036:	429a      	cmp	r2, r3
 8005038:	d001      	beq.n	800503e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40021000 	.word	0x40021000

0800504c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0d0      	b.n	8005202 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005060:	4b6a      	ldr	r3, [pc, #424]	; (800520c <HAL_RCC_ClockConfig+0x1c0>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d910      	bls.n	8005090 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506e:	4b67      	ldr	r3, [pc, #412]	; (800520c <HAL_RCC_ClockConfig+0x1c0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f023 0207 	bic.w	r2, r3, #7
 8005076:	4965      	ldr	r1, [pc, #404]	; (800520c <HAL_RCC_ClockConfig+0x1c0>)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	4313      	orrs	r3, r2
 800507c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800507e:	4b63      	ldr	r3, [pc, #396]	; (800520c <HAL_RCC_ClockConfig+0x1c0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d001      	beq.n	8005090 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0b8      	b.n	8005202 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d020      	beq.n	80050de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050a8:	4b59      	ldr	r3, [pc, #356]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	4a58      	ldr	r2, [pc, #352]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 80050ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050c0:	4b53      	ldr	r3, [pc, #332]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	4a52      	ldr	r2, [pc, #328]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 80050c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80050ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050cc:	4b50      	ldr	r3, [pc, #320]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	494d      	ldr	r1, [pc, #308]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d040      	beq.n	800516c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d107      	bne.n	8005102 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f2:	4b47      	ldr	r3, [pc, #284]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d115      	bne.n	800512a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e07f      	b.n	8005202 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d107      	bne.n	800511a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800510a:	4b41      	ldr	r3, [pc, #260]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e073      	b.n	8005202 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511a:	4b3d      	ldr	r3, [pc, #244]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e06b      	b.n	8005202 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800512a:	4b39      	ldr	r3, [pc, #228]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f023 0203 	bic.w	r2, r3, #3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	4936      	ldr	r1, [pc, #216]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 8005138:	4313      	orrs	r3, r2
 800513a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800513c:	f7fe f970 	bl	8003420 <HAL_GetTick>
 8005140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005142:	e00a      	b.n	800515a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005144:	f7fe f96c 	bl	8003420 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005152:	4293      	cmp	r3, r2
 8005154:	d901      	bls.n	800515a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e053      	b.n	8005202 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515a:	4b2d      	ldr	r3, [pc, #180]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f003 020c 	and.w	r2, r3, #12
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	429a      	cmp	r2, r3
 800516a:	d1eb      	bne.n	8005144 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800516c:	4b27      	ldr	r3, [pc, #156]	; (800520c <HAL_RCC_ClockConfig+0x1c0>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d210      	bcs.n	800519c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517a:	4b24      	ldr	r3, [pc, #144]	; (800520c <HAL_RCC_ClockConfig+0x1c0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f023 0207 	bic.w	r2, r3, #7
 8005182:	4922      	ldr	r1, [pc, #136]	; (800520c <HAL_RCC_ClockConfig+0x1c0>)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	4313      	orrs	r3, r2
 8005188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800518a:	4b20      	ldr	r3, [pc, #128]	; (800520c <HAL_RCC_ClockConfig+0x1c0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d001      	beq.n	800519c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e032      	b.n	8005202 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a8:	4b19      	ldr	r3, [pc, #100]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	4916      	ldr	r1, [pc, #88]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051c6:	4b12      	ldr	r3, [pc, #72]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	490e      	ldr	r1, [pc, #56]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051da:	f000 f821 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 80051de:	4602      	mov	r2, r0
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	490a      	ldr	r1, [pc, #40]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 80051ec:	5ccb      	ldrb	r3, [r1, r3]
 80051ee:	fa22 f303 	lsr.w	r3, r2, r3
 80051f2:	4a09      	ldr	r2, [pc, #36]	; (8005218 <HAL_RCC_ClockConfig+0x1cc>)
 80051f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051f6:	4b09      	ldr	r3, [pc, #36]	; (800521c <HAL_RCC_ClockConfig+0x1d0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fe f8ce 	bl	800339c <HAL_InitTick>

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40022000 	.word	0x40022000
 8005210:	40021000 	.word	0x40021000
 8005214:	0800a74c 	.word	0x0800a74c
 8005218:	20000008 	.word	0x20000008
 800521c:	2000000c 	.word	0x2000000c

08005220 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	2300      	movs	r3, #0
 8005234:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800523a:	4b1e      	ldr	r3, [pc, #120]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f003 030c 	and.w	r3, r3, #12
 8005246:	2b04      	cmp	r3, #4
 8005248:	d002      	beq.n	8005250 <HAL_RCC_GetSysClockFreq+0x30>
 800524a:	2b08      	cmp	r3, #8
 800524c:	d003      	beq.n	8005256 <HAL_RCC_GetSysClockFreq+0x36>
 800524e:	e027      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005250:	4b19      	ldr	r3, [pc, #100]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005252:	613b      	str	r3, [r7, #16]
      break;
 8005254:	e027      	b.n	80052a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	0c9b      	lsrs	r3, r3, #18
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	4a17      	ldr	r2, [pc, #92]	; (80052bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005260:	5cd3      	ldrb	r3, [r2, r3]
 8005262:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d010      	beq.n	8005290 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800526e:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	0c5b      	lsrs	r3, r3, #17
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	4a11      	ldr	r2, [pc, #68]	; (80052c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800527a:	5cd3      	ldrb	r3, [r2, r3]
 800527c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a0d      	ldr	r2, [pc, #52]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005282:	fb03 f202 	mul.w	r2, r3, r2
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	fbb2 f3f3 	udiv	r3, r2, r3
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	e004      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a0c      	ldr	r2, [pc, #48]	; (80052c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005294:	fb02 f303 	mul.w	r3, r2, r3
 8005298:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	613b      	str	r3, [r7, #16]
      break;
 800529e:	e002      	b.n	80052a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052a0:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80052a2:	613b      	str	r3, [r7, #16]
      break;
 80052a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052a6:	693b      	ldr	r3, [r7, #16]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40021000 	.word	0x40021000
 80052b8:	007a1200 	.word	0x007a1200
 80052bc:	0800a764 	.word	0x0800a764
 80052c0:	0800a774 	.word	0x0800a774
 80052c4:	003d0900 	.word	0x003d0900

080052c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052cc:	4b02      	ldr	r3, [pc, #8]	; (80052d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80052ce:	681b      	ldr	r3, [r3, #0]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr
 80052d8:	20000008 	.word	0x20000008

080052dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052e0:	f7ff fff2 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 80052e4:	4602      	mov	r2, r0
 80052e6:	4b05      	ldr	r3, [pc, #20]	; (80052fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	4903      	ldr	r1, [pc, #12]	; (8005300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052f2:	5ccb      	ldrb	r3, [r1, r3]
 80052f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40021000 	.word	0x40021000
 8005300:	0800a75c 	.word	0x0800a75c

08005304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005308:	f7ff ffde 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 800530c:	4602      	mov	r2, r0
 800530e:	4b05      	ldr	r3, [pc, #20]	; (8005324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	0adb      	lsrs	r3, r3, #11
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	4903      	ldr	r1, [pc, #12]	; (8005328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800531a:	5ccb      	ldrb	r3, [r1, r3]
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005320:	4618      	mov	r0, r3
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40021000 	.word	0x40021000
 8005328:	0800a75c 	.word	0x0800a75c

0800532c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <RCC_Delay+0x34>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a0a      	ldr	r2, [pc, #40]	; (8005364 <RCC_Delay+0x38>)
 800533a:	fba2 2303 	umull	r2, r3, r2, r3
 800533e:	0a5b      	lsrs	r3, r3, #9
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	fb02 f303 	mul.w	r3, r2, r3
 8005346:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005348:	bf00      	nop
  }
  while (Delay --);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1e5a      	subs	r2, r3, #1
 800534e:	60fa      	str	r2, [r7, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1f9      	bne.n	8005348 <RCC_Delay+0x1c>
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr
 8005360:	20000008 	.word	0x20000008
 8005364:	10624dd3 	.word	0x10624dd3

08005368 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d07d      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005384:	2300      	movs	r3, #0
 8005386:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005388:	4b4f      	ldr	r3, [pc, #316]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10d      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005394:	4b4c      	ldr	r3, [pc, #304]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	4a4b      	ldr	r2, [pc, #300]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800539a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539e:	61d3      	str	r3, [r2, #28]
 80053a0:	4b49      	ldr	r3, [pc, #292]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a8:	60bb      	str	r3, [r7, #8]
 80053aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053ac:	2301      	movs	r3, #1
 80053ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b0:	4b46      	ldr	r3, [pc, #280]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d118      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053bc:	4b43      	ldr	r3, [pc, #268]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a42      	ldr	r2, [pc, #264]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053c8:	f7fe f82a 	bl	8003420 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ce:	e008      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d0:	f7fe f826 	bl	8003420 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b64      	cmp	r3, #100	; 0x64
 80053dc:	d901      	bls.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e06d      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e2:	4b3a      	ldr	r3, [pc, #232]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0f0      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053ee:	4b36      	ldr	r3, [pc, #216]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d02e      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	429a      	cmp	r2, r3
 800540a:	d027      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800540c:	4b2e      	ldr	r3, [pc, #184]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005414:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005416:	4b2e      	ldr	r3, [pc, #184]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005418:	2201      	movs	r2, #1
 800541a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800541c:	4b2c      	ldr	r3, [pc, #176]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005422:	4a29      	ldr	r2, [pc, #164]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d014      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005432:	f7fd fff5 	bl	8003420 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005438:	e00a      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543a:	f7fd fff1 	bl	8003420 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	f241 3288 	movw	r2, #5000	; 0x1388
 8005448:	4293      	cmp	r3, r2
 800544a:	d901      	bls.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e036      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005450:	4b1d      	ldr	r3, [pc, #116]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0ee      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800545c:	4b1a      	ldr	r3, [pc, #104]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	4917      	ldr	r1, [pc, #92]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800546a:	4313      	orrs	r3, r2
 800546c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800546e:	7dfb      	ldrb	r3, [r7, #23]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d105      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005474:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800548c:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	490b      	ldr	r1, [pc, #44]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800549a:	4313      	orrs	r3, r2
 800549c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d008      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054aa:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	4904      	ldr	r1, [pc, #16]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	40021000 	.word	0x40021000
 80054cc:	40007000 	.word	0x40007000
 80054d0:	42420440 	.word	0x42420440

080054d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	2300      	movs	r3, #0
 80054e2:	61fb      	str	r3, [r7, #28]
 80054e4:	2300      	movs	r3, #0
 80054e6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	2300      	movs	r3, #0
 80054ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	2b0f      	cmp	r3, #15
 80054f6:	f200 80af 	bhi.w	8005658 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80054fa:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80054fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005500:	080055d7 	.word	0x080055d7
 8005504:	0800563d 	.word	0x0800563d
 8005508:	08005659 	.word	0x08005659
 800550c:	080055c7 	.word	0x080055c7
 8005510:	08005659 	.word	0x08005659
 8005514:	08005659 	.word	0x08005659
 8005518:	08005659 	.word	0x08005659
 800551c:	080055cf 	.word	0x080055cf
 8005520:	08005659 	.word	0x08005659
 8005524:	08005659 	.word	0x08005659
 8005528:	08005659 	.word	0x08005659
 800552c:	08005659 	.word	0x08005659
 8005530:	08005659 	.word	0x08005659
 8005534:	08005659 	.word	0x08005659
 8005538:	08005659 	.word	0x08005659
 800553c:	08005541 	.word	0x08005541
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005540:	4b4a      	ldr	r3, [pc, #296]	; (800566c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005546:	4b49      	ldr	r3, [pc, #292]	; (800566c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 8084 	beq.w	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	0c9b      	lsrs	r3, r3, #18
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	4a44      	ldr	r2, [pc, #272]	; (8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800555e:	5cd3      	ldrb	r3, [r2, r3]
 8005560:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d015      	beq.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800556c:	4b3f      	ldr	r3, [pc, #252]	; (800566c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	0c5b      	lsrs	r3, r3, #17
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	4a3f      	ldr	r2, [pc, #252]	; (8005674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8005578:	5cd3      	ldrb	r3, [r2, r3]
 800557a:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00d      	beq.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005586:	4a3c      	ldr	r2, [pc, #240]	; (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	fbb2 f2f3 	udiv	r2, r2, r3
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	fb02 f303 	mul.w	r3, r2, r3
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	e004      	b.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	4a38      	ldr	r2, [pc, #224]	; (800567c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800559c:	fb02 f303 	mul.w	r3, r2, r3
 80055a0:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80055a2:	4b32      	ldr	r3, [pc, #200]	; (800566c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ae:	d102      	bne.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80055b4:	e052      	b.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	4a31      	ldr	r2, [pc, #196]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 80055bc:	fba2 2303 	umull	r2, r3, r2, r3
 80055c0:	085b      	lsrs	r3, r3, #1
 80055c2:	61bb      	str	r3, [r7, #24]
      break;
 80055c4:	e04a      	b.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80055c6:	f7ff fe2b 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 80055ca:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80055cc:	e049      	b.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80055ce:	f7ff fe27 	bl	8005220 <HAL_RCC_GetSysClockFreq>
 80055d2:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80055d4:	e045      	b.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80055d6:	4b25      	ldr	r3, [pc, #148]	; (800566c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e6:	d108      	bne.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80055f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f6:	61bb      	str	r3, [r7, #24]
 80055f8:	e01f      	b.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005604:	d109      	bne.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005606:	4b19      	ldr	r3, [pc, #100]	; (800566c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8005612:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005616:	61bb      	str	r3, [r7, #24]
 8005618:	e00f      	b.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005624:	d11c      	bne.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8005626:	4b11      	ldr	r3, [pc, #68]	; (800566c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d016      	beq.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8005632:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005636:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8005638:	e012      	b.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800563a:	e011      	b.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800563c:	f7ff fe62 	bl	8005304 <HAL_RCC_GetPCLK2Freq>
 8005640:	4602      	mov	r2, r0
 8005642:	4b0a      	ldr	r3, [pc, #40]	; (800566c <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	0b9b      	lsrs	r3, r3, #14
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	3301      	adds	r3, #1
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	fbb2 f3f3 	udiv	r3, r2, r3
 8005654:	61bb      	str	r3, [r7, #24]
      break;
 8005656:	e004      	b.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8005658:	bf00      	nop
 800565a:	e002      	b.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 800565c:	bf00      	nop
 800565e:	e000      	b.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8005660:	bf00      	nop
    }
  }
  return (frequency);
 8005662:	69bb      	ldr	r3, [r7, #24]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3720      	adds	r7, #32
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40021000 	.word	0x40021000
 8005670:	0800a778 	.word	0x0800a778
 8005674:	0800a788 	.word	0x0800a788
 8005678:	007a1200 	.word	0x007a1200
 800567c:	003d0900 	.word	0x003d0900
 8005680:	aaaaaaab 	.word	0xaaaaaaab

08005684 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b01      	cmp	r3, #1
 8005696:	d001      	beq.n	800569c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e03c      	b.n	8005716 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1d      	ldr	r2, [pc, #116]	; (8005720 <HAL_TIM_Base_Start+0x9c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d018      	beq.n	80056e0 <HAL_TIM_Base_Start+0x5c>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1c      	ldr	r2, [pc, #112]	; (8005724 <HAL_TIM_Base_Start+0xa0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d013      	beq.n	80056e0 <HAL_TIM_Base_Start+0x5c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c0:	d00e      	beq.n	80056e0 <HAL_TIM_Base_Start+0x5c>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a18      	ldr	r2, [pc, #96]	; (8005728 <HAL_TIM_Base_Start+0xa4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d009      	beq.n	80056e0 <HAL_TIM_Base_Start+0x5c>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a16      	ldr	r2, [pc, #88]	; (800572c <HAL_TIM_Base_Start+0xa8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d004      	beq.n	80056e0 <HAL_TIM_Base_Start+0x5c>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a15      	ldr	r2, [pc, #84]	; (8005730 <HAL_TIM_Base_Start+0xac>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d111      	bne.n	8005704 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b06      	cmp	r3, #6
 80056f0:	d010      	beq.n	8005714 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0201 	orr.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005702:	e007      	b.n	8005714 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr
 8005720:	40012c00 	.word	0x40012c00
 8005724:	40013400 	.word	0x40013400
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800
 8005730:	40000c00 	.word	0x40000c00

08005734 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <HAL_TIM_OC_Start+0x24>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b01      	cmp	r3, #1
 800574e:	bf14      	ite	ne
 8005750:	2301      	movne	r3, #1
 8005752:	2300      	moveq	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	e022      	b.n	800579e <HAL_TIM_OC_Start+0x6a>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b04      	cmp	r3, #4
 800575c:	d109      	bne.n	8005772 <HAL_TIM_OC_Start+0x3e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b01      	cmp	r3, #1
 8005768:	bf14      	ite	ne
 800576a:	2301      	movne	r3, #1
 800576c:	2300      	moveq	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	e015      	b.n	800579e <HAL_TIM_OC_Start+0x6a>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b08      	cmp	r3, #8
 8005776:	d109      	bne.n	800578c <HAL_TIM_OC_Start+0x58>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	bf14      	ite	ne
 8005784:	2301      	movne	r3, #1
 8005786:	2300      	moveq	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	e008      	b.n	800579e <HAL_TIM_OC_Start+0x6a>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b01      	cmp	r3, #1
 8005796:	bf14      	ite	ne
 8005798:	2301      	movne	r3, #1
 800579a:	2300      	moveq	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e072      	b.n	800588c <HAL_TIM_OC_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d104      	bne.n	80057b6 <HAL_TIM_OC_Start+0x82>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b4:	e013      	b.n	80057de <HAL_TIM_OC_Start+0xaa>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_OC_Start+0x92>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c4:	e00b      	b.n	80057de <HAL_TIM_OC_Start+0xaa>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_OC_Start+0xa2>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d4:	e003      	b.n	80057de <HAL_TIM_OC_Start+0xaa>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2202      	movs	r2, #2
 80057da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2201      	movs	r2, #1
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fcb8 	bl	800615c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a28      	ldr	r2, [pc, #160]	; (8005894 <HAL_TIM_OC_Start+0x160>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d004      	beq.n	8005800 <HAL_TIM_OC_Start+0xcc>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a27      	ldr	r2, [pc, #156]	; (8005898 <HAL_TIM_OC_Start+0x164>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d101      	bne.n	8005804 <HAL_TIM_OC_Start+0xd0>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <HAL_TIM_OC_Start+0xd2>
 8005804:	2300      	movs	r3, #0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005818:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <HAL_TIM_OC_Start+0x160>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d018      	beq.n	8005856 <HAL_TIM_OC_Start+0x122>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1b      	ldr	r2, [pc, #108]	; (8005898 <HAL_TIM_OC_Start+0x164>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <HAL_TIM_OC_Start+0x122>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005836:	d00e      	beq.n	8005856 <HAL_TIM_OC_Start+0x122>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a17      	ldr	r2, [pc, #92]	; (800589c <HAL_TIM_OC_Start+0x168>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d009      	beq.n	8005856 <HAL_TIM_OC_Start+0x122>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a16      	ldr	r2, [pc, #88]	; (80058a0 <HAL_TIM_OC_Start+0x16c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_TIM_OC_Start+0x122>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a14      	ldr	r2, [pc, #80]	; (80058a4 <HAL_TIM_OC_Start+0x170>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d111      	bne.n	800587a <HAL_TIM_OC_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b06      	cmp	r3, #6
 8005866:	d010      	beq.n	800588a <HAL_TIM_OC_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005878:	e007      	b.n	800588a <HAL_TIM_OC_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40012c00 	.word	0x40012c00
 8005898:	40013400 	.word	0x40013400
 800589c:	40000400 	.word	0x40000400
 80058a0:	40000800 	.word	0x40000800
 80058a4:	40000c00 	.word	0x40000c00

080058a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e041      	b.n	800593e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fd fb92 	bl	8002ff8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3304      	adds	r3, #4
 80058e4:	4619      	mov	r1, r3
 80058e6:	4610      	mov	r0, r2
 80058e8:	f000 fa06 	bl	8005cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d109      	bne.n	800596c <HAL_TIM_PWM_Start+0x24>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b01      	cmp	r3, #1
 8005962:	bf14      	ite	ne
 8005964:	2301      	movne	r3, #1
 8005966:	2300      	moveq	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	e022      	b.n	80059b2 <HAL_TIM_PWM_Start+0x6a>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b04      	cmp	r3, #4
 8005970:	d109      	bne.n	8005986 <HAL_TIM_PWM_Start+0x3e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b01      	cmp	r3, #1
 800597c:	bf14      	ite	ne
 800597e:	2301      	movne	r3, #1
 8005980:	2300      	moveq	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	e015      	b.n	80059b2 <HAL_TIM_PWM_Start+0x6a>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b08      	cmp	r3, #8
 800598a:	d109      	bne.n	80059a0 <HAL_TIM_PWM_Start+0x58>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b01      	cmp	r3, #1
 8005996:	bf14      	ite	ne
 8005998:	2301      	movne	r3, #1
 800599a:	2300      	moveq	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	e008      	b.n	80059b2 <HAL_TIM_PWM_Start+0x6a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	bf14      	ite	ne
 80059ac:	2301      	movne	r3, #1
 80059ae:	2300      	moveq	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e072      	b.n	8005aa0 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d104      	bne.n	80059ca <HAL_TIM_PWM_Start+0x82>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c8:	e013      	b.n	80059f2 <HAL_TIM_PWM_Start+0xaa>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d104      	bne.n	80059da <HAL_TIM_PWM_Start+0x92>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059d8:	e00b      	b.n	80059f2 <HAL_TIM_PWM_Start+0xaa>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d104      	bne.n	80059ea <HAL_TIM_PWM_Start+0xa2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059e8:	e003      	b.n	80059f2 <HAL_TIM_PWM_Start+0xaa>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2201      	movs	r2, #1
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fbae 	bl	800615c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a28      	ldr	r2, [pc, #160]	; (8005aa8 <HAL_TIM_PWM_Start+0x160>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <HAL_TIM_PWM_Start+0xcc>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a27      	ldr	r2, [pc, #156]	; (8005aac <HAL_TIM_PWM_Start+0x164>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d101      	bne.n	8005a18 <HAL_TIM_PWM_Start+0xd0>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <HAL_TIM_PWM_Start+0xd2>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a1d      	ldr	r2, [pc, #116]	; (8005aa8 <HAL_TIM_PWM_Start+0x160>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d018      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x122>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1b      	ldr	r2, [pc, #108]	; (8005aac <HAL_TIM_PWM_Start+0x164>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d013      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x122>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4a:	d00e      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x122>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a17      	ldr	r2, [pc, #92]	; (8005ab0 <HAL_TIM_PWM_Start+0x168>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d009      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x122>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a16      	ldr	r2, [pc, #88]	; (8005ab4 <HAL_TIM_PWM_Start+0x16c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d004      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x122>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a14      	ldr	r2, [pc, #80]	; (8005ab8 <HAL_TIM_PWM_Start+0x170>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d111      	bne.n	8005a8e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b06      	cmp	r3, #6
 8005a7a:	d010      	beq.n	8005a9e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8c:	e007      	b.n	8005a9e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 0201 	orr.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40012c00 	.word	0x40012c00
 8005aac:	40013400 	.word	0x40013400
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800
 8005ab8:	40000c00 	.word	0x40000c00

08005abc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_TIM_OC_ConfigChannel+0x1e>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e048      	b.n	8005b6c <HAL_TIM_OC_ConfigChannel+0xb0>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b0c      	cmp	r3, #12
 8005ae6:	d839      	bhi.n	8005b5c <HAL_TIM_OC_ConfigChannel+0xa0>
 8005ae8:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aee:	bf00      	nop
 8005af0:	08005b25 	.word	0x08005b25
 8005af4:	08005b5d 	.word	0x08005b5d
 8005af8:	08005b5d 	.word	0x08005b5d
 8005afc:	08005b5d 	.word	0x08005b5d
 8005b00:	08005b33 	.word	0x08005b33
 8005b04:	08005b5d 	.word	0x08005b5d
 8005b08:	08005b5d 	.word	0x08005b5d
 8005b0c:	08005b5d 	.word	0x08005b5d
 8005b10:	08005b41 	.word	0x08005b41
 8005b14:	08005b5d 	.word	0x08005b5d
 8005b18:	08005b5d 	.word	0x08005b5d
 8005b1c:	08005b5d 	.word	0x08005b5d
 8005b20:	08005b4f 	.word	0x08005b4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68b9      	ldr	r1, [r7, #8]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 f96a 	bl	8005e04 <TIM_OC1_SetConfig>
      break;
 8005b30:	e017      	b.n	8005b62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 f9d3 	bl	8005ee4 <TIM_OC2_SetConfig>
      break;
 8005b3e:	e010      	b.n	8005b62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fa40 	bl	8005fcc <TIM_OC3_SetConfig>
      break;
 8005b4c:	e009      	b.n	8005b62 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 faad 	bl	80060b4 <TIM_OC4_SetConfig>
      break;
 8005b5a:	e002      	b.n	8005b62 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d101      	bne.n	8005b92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	e0ae      	b.n	8005cf0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b0c      	cmp	r3, #12
 8005b9e:	f200 809f 	bhi.w	8005ce0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ba2:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba8:	08005bdd 	.word	0x08005bdd
 8005bac:	08005ce1 	.word	0x08005ce1
 8005bb0:	08005ce1 	.word	0x08005ce1
 8005bb4:	08005ce1 	.word	0x08005ce1
 8005bb8:	08005c1d 	.word	0x08005c1d
 8005bbc:	08005ce1 	.word	0x08005ce1
 8005bc0:	08005ce1 	.word	0x08005ce1
 8005bc4:	08005ce1 	.word	0x08005ce1
 8005bc8:	08005c5f 	.word	0x08005c5f
 8005bcc:	08005ce1 	.word	0x08005ce1
 8005bd0:	08005ce1 	.word	0x08005ce1
 8005bd4:	08005ce1 	.word	0x08005ce1
 8005bd8:	08005c9f 	.word	0x08005c9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 f90e 	bl	8005e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0208 	orr.w	r2, r2, #8
 8005bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0204 	bic.w	r2, r2, #4
 8005c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6999      	ldr	r1, [r3, #24]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	619a      	str	r2, [r3, #24]
      break;
 8005c1a:	e064      	b.n	8005ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 f95e 	bl	8005ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6999      	ldr	r1, [r3, #24]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	021a      	lsls	r2, r3, #8
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	619a      	str	r2, [r3, #24]
      break;
 8005c5c:	e043      	b.n	8005ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 f9b1 	bl	8005fcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0208 	orr.w	r2, r2, #8
 8005c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69da      	ldr	r2, [r3, #28]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0204 	bic.w	r2, r2, #4
 8005c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69d9      	ldr	r1, [r3, #28]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	61da      	str	r2, [r3, #28]
      break;
 8005c9c:	e023      	b.n	8005ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fa05 	bl	80060b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69d9      	ldr	r1, [r3, #28]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	021a      	lsls	r2, r3, #8
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	61da      	str	r2, [r3, #28]
      break;
 8005cde:	e002      	b.n	8005ce6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a39      	ldr	r2, [pc, #228]	; (8005df0 <TIM_Base_SetConfig+0xf8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d013      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a38      	ldr	r2, [pc, #224]	; (8005df4 <TIM_Base_SetConfig+0xfc>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00f      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d1e:	d00b      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a35      	ldr	r2, [pc, #212]	; (8005df8 <TIM_Base_SetConfig+0x100>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a34      	ldr	r2, [pc, #208]	; (8005dfc <TIM_Base_SetConfig+0x104>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_Base_SetConfig+0x40>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a33      	ldr	r2, [pc, #204]	; (8005e00 <TIM_Base_SetConfig+0x108>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d108      	bne.n	8005d4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a28      	ldr	r2, [pc, #160]	; (8005df0 <TIM_Base_SetConfig+0xf8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d013      	beq.n	8005d7a <TIM_Base_SetConfig+0x82>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a27      	ldr	r2, [pc, #156]	; (8005df4 <TIM_Base_SetConfig+0xfc>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00f      	beq.n	8005d7a <TIM_Base_SetConfig+0x82>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d60:	d00b      	beq.n	8005d7a <TIM_Base_SetConfig+0x82>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a24      	ldr	r2, [pc, #144]	; (8005df8 <TIM_Base_SetConfig+0x100>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d007      	beq.n	8005d7a <TIM_Base_SetConfig+0x82>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a23      	ldr	r2, [pc, #140]	; (8005dfc <TIM_Base_SetConfig+0x104>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d003      	beq.n	8005d7a <TIM_Base_SetConfig+0x82>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a22      	ldr	r2, [pc, #136]	; (8005e00 <TIM_Base_SetConfig+0x108>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d108      	bne.n	8005d8c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a0f      	ldr	r2, [pc, #60]	; (8005df0 <TIM_Base_SetConfig+0xf8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_Base_SetConfig+0xc8>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a0e      	ldr	r2, [pc, #56]	; (8005df4 <TIM_Base_SetConfig+0xfc>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d103      	bne.n	8005dc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d005      	beq.n	8005de6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	f023 0201 	bic.w	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	611a      	str	r2, [r3, #16]
  }
}
 8005de6:	bf00      	nop
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr
 8005df0:	40012c00 	.word	0x40012c00
 8005df4:	40013400 	.word	0x40013400
 8005df8:	40000400 	.word	0x40000400
 8005dfc:	40000800 	.word	0x40000800
 8005e00:	40000c00 	.word	0x40000c00

08005e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	f023 0201 	bic.w	r2, r3, #1
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0303 	bic.w	r3, r3, #3
 8005e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f023 0302 	bic.w	r3, r3, #2
 8005e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a20      	ldr	r2, [pc, #128]	; (8005edc <TIM_OC1_SetConfig+0xd8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d003      	beq.n	8005e68 <TIM_OC1_SetConfig+0x64>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a1f      	ldr	r2, [pc, #124]	; (8005ee0 <TIM_OC1_SetConfig+0xdc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d10c      	bne.n	8005e82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f023 0308 	bic.w	r3, r3, #8
 8005e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f023 0304 	bic.w	r3, r3, #4
 8005e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a15      	ldr	r2, [pc, #84]	; (8005edc <TIM_OC1_SetConfig+0xd8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d003      	beq.n	8005e92 <TIM_OC1_SetConfig+0x8e>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a14      	ldr	r2, [pc, #80]	; (8005ee0 <TIM_OC1_SetConfig+0xdc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d111      	bne.n	8005eb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	621a      	str	r2, [r3, #32]
}
 8005ed0:	bf00      	nop
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bc80      	pop	{r7}
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40013400 	.word	0x40013400

08005ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	f023 0210 	bic.w	r2, r3, #16
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f023 0320 	bic.w	r3, r3, #32
 8005f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a21      	ldr	r2, [pc, #132]	; (8005fc4 <TIM_OC2_SetConfig+0xe0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_OC2_SetConfig+0x68>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a20      	ldr	r2, [pc, #128]	; (8005fc8 <TIM_OC2_SetConfig+0xe4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d10d      	bne.n	8005f68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a16      	ldr	r2, [pc, #88]	; (8005fc4 <TIM_OC2_SetConfig+0xe0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_OC2_SetConfig+0x94>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a15      	ldr	r2, [pc, #84]	; (8005fc8 <TIM_OC2_SetConfig+0xe4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d113      	bne.n	8005fa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	621a      	str	r2, [r3, #32]
}
 8005fba:	bf00      	nop
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc80      	pop	{r7}
 8005fc2:	4770      	bx	lr
 8005fc4:	40012c00 	.word	0x40012c00
 8005fc8:	40013400 	.word	0x40013400

08005fcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0303 	bic.w	r3, r3, #3
 8006002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	021b      	lsls	r3, r3, #8
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a21      	ldr	r2, [pc, #132]	; (80060ac <TIM_OC3_SetConfig+0xe0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d003      	beq.n	8006032 <TIM_OC3_SetConfig+0x66>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a20      	ldr	r2, [pc, #128]	; (80060b0 <TIM_OC3_SetConfig+0xe4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d10d      	bne.n	800604e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006038:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	021b      	lsls	r3, r3, #8
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800604c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a16      	ldr	r2, [pc, #88]	; (80060ac <TIM_OC3_SetConfig+0xe0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d003      	beq.n	800605e <TIM_OC3_SetConfig+0x92>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a15      	ldr	r2, [pc, #84]	; (80060b0 <TIM_OC3_SetConfig+0xe4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d113      	bne.n	8006086 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800606c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	011b      	lsls	r3, r3, #4
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	4313      	orrs	r3, r2
 8006084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	621a      	str	r2, [r3, #32]
}
 80060a0:	bf00      	nop
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc80      	pop	{r7}
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40012c00 	.word	0x40012c00
 80060b0:	40013400 	.word	0x40013400

080060b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	021b      	lsls	r3, r3, #8
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	031b      	lsls	r3, r3, #12
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a11      	ldr	r2, [pc, #68]	; (8006154 <TIM_OC4_SetConfig+0xa0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_OC4_SetConfig+0x68>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a10      	ldr	r2, [pc, #64]	; (8006158 <TIM_OC4_SetConfig+0xa4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d109      	bne.n	8006130 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006122:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	019b      	lsls	r3, r3, #6
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	621a      	str	r2, [r3, #32]
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	bc80      	pop	{r7}
 8006152:	4770      	bx	lr
 8006154:	40012c00 	.word	0x40012c00
 8006158:	40013400 	.word	0x40013400

0800615c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2201      	movs	r2, #1
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1a      	ldr	r2, [r3, #32]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	43db      	mvns	r3, r3
 800617e:	401a      	ands	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1a      	ldr	r2, [r3, #32]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	fa01 f303 	lsl.w	r3, r1, r3
 8006194:	431a      	orrs	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	621a      	str	r2, [r3, #32]
}
 800619a:	bf00      	nop
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr

080061a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e050      	b.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1b      	ldr	r2, [pc, #108]	; (8006268 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d018      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a19      	ldr	r2, [pc, #100]	; (800626c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006212:	d00e      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a15      	ldr	r2, [pc, #84]	; (8006270 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a14      	ldr	r2, [pc, #80]	; (8006274 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d004      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a12      	ldr	r2, [pc, #72]	; (8006278 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d10c      	bne.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	4313      	orrs	r3, r2
 8006242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	bc80      	pop	{r7}
 8006266:	4770      	bx	lr
 8006268:	40012c00 	.word	0x40012c00
 800626c:	40013400 	.word	0x40013400
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00

0800627c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006294:	2302      	movs	r3, #2
 8006296:	e03d      	b.n	8006314 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr

0800631e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e042      	b.n	80063b6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d106      	bne.n	800634a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7fc febd 	bl	80030c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2224      	movs	r2, #36	; 0x24
 800634e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006360:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f972 	bl	800664c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691a      	ldr	r2, [r3, #16]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006376:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	695a      	ldr	r2, [r3, #20]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006386:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006396:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b08a      	sub	sp, #40	; 0x28
 80063c2:	af02      	add	r7, sp, #8
 80063c4:	60f8      	str	r0, [r7, #12]
 80063c6:	60b9      	str	r1, [r7, #8]
 80063c8:	603b      	str	r3, [r7, #0]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b20      	cmp	r3, #32
 80063dc:	d175      	bne.n	80064ca <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <HAL_UART_Transmit+0x2c>
 80063e4:	88fb      	ldrh	r3, [r7, #6]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e06e      	b.n	80064cc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2221      	movs	r2, #33	; 0x21
 80063f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063fc:	f7fd f810 	bl	8003420 <HAL_GetTick>
 8006400:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	88fa      	ldrh	r2, [r7, #6]
 8006406:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	88fa      	ldrh	r2, [r7, #6]
 800640c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006416:	d108      	bne.n	800642a <HAL_UART_Transmit+0x6c>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d104      	bne.n	800642a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006420:	2300      	movs	r3, #0
 8006422:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	61bb      	str	r3, [r7, #24]
 8006428:	e003      	b.n	8006432 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006432:	e02e      	b.n	8006492 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2200      	movs	r2, #0
 800643c:	2180      	movs	r1, #128	; 0x80
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 f848 	bl	80064d4 <UART_WaitOnFlagUntilTimeout>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d005      	beq.n	8006456 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e03a      	b.n	80064cc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10b      	bne.n	8006474 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	461a      	mov	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800646a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	3302      	adds	r3, #2
 8006470:	61bb      	str	r3, [r7, #24]
 8006472:	e007      	b.n	8006484 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	781a      	ldrb	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	3301      	adds	r3, #1
 8006482:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	b29a      	uxth	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1cb      	bne.n	8006434 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2200      	movs	r2, #0
 80064a4:	2140      	movs	r1, #64	; 0x40
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 f814 	bl	80064d4 <UART_WaitOnFlagUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e006      	b.n	80064cc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e000      	b.n	80064cc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80064ca:	2302      	movs	r3, #2
  }
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3720      	adds	r7, #32
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	4613      	mov	r3, r2
 80064e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e4:	e03b      	b.n	800655e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ec:	d037      	beq.n	800655e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ee:	f7fc ff97 	bl	8003420 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	6a3a      	ldr	r2, [r7, #32]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d302      	bcc.n	8006504 <UART_WaitOnFlagUntilTimeout+0x30>
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e03a      	b.n	800657e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b00      	cmp	r3, #0
 8006514:	d023      	beq.n	800655e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2b80      	cmp	r3, #128	; 0x80
 800651a:	d020      	beq.n	800655e <UART_WaitOnFlagUntilTimeout+0x8a>
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	d01d      	beq.n	800655e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0308 	and.w	r3, r3, #8
 800652c:	2b08      	cmp	r3, #8
 800652e:	d116      	bne.n	800655e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 f81d 	bl	8006586 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2208      	movs	r2, #8
 8006550:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e00f      	b.n	800657e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4013      	ands	r3, r2
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	429a      	cmp	r2, r3
 800656c:	bf0c      	ite	eq
 800656e:	2301      	moveq	r3, #1
 8006570:	2300      	movne	r3, #0
 8006572:	b2db      	uxtb	r3, r3
 8006574:	461a      	mov	r2, r3
 8006576:	79fb      	ldrb	r3, [r7, #7]
 8006578:	429a      	cmp	r2, r3
 800657a:	d0b4      	beq.n	80064e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006586:	b480      	push	{r7}
 8006588:	b095      	sub	sp, #84	; 0x54
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	330c      	adds	r3, #12
 8006594:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	330c      	adds	r3, #12
 80065ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065ae:	643a      	str	r2, [r7, #64]	; 0x40
 80065b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e5      	bne.n	800658e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3314      	adds	r3, #20
 80065c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	f023 0301 	bic.w	r3, r3, #1
 80065d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3314      	adds	r3, #20
 80065e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e5      	bne.n	80065c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d119      	bne.n	8006632 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330c      	adds	r3, #12
 8006604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	60bb      	str	r3, [r7, #8]
   return(result);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f023 0310 	bic.w	r3, r3, #16
 8006614:	647b      	str	r3, [r7, #68]	; 0x44
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	330c      	adds	r3, #12
 800661c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800661e:	61ba      	str	r2, [r7, #24]
 8006620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	6979      	ldr	r1, [r7, #20]
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	613b      	str	r3, [r7, #16]
   return(result);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e5      	bne.n	80065fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006640:	bf00      	nop
 8006642:	3754      	adds	r7, #84	; 0x54
 8006644:	46bd      	mov	sp, r7
 8006646:	bc80      	pop	{r7}
 8006648:	4770      	bx	lr
	...

0800664c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006686:	f023 030c 	bic.w	r3, r3, #12
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6812      	ldr	r2, [r2, #0]
 800668e:	68b9      	ldr	r1, [r7, #8]
 8006690:	430b      	orrs	r3, r1
 8006692:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a2c      	ldr	r2, [pc, #176]	; (8006760 <UART_SetConfig+0x114>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d103      	bne.n	80066bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80066b4:	f7fe fe26 	bl	8005304 <HAL_RCC_GetPCLK2Freq>
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	e002      	b.n	80066c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80066bc:	f7fe fe0e 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 80066c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	009a      	lsls	r2, r3, #2
 80066cc:	441a      	add	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d8:	4a22      	ldr	r2, [pc, #136]	; (8006764 <UART_SetConfig+0x118>)
 80066da:	fba2 2303 	umull	r2, r3, r2, r3
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	0119      	lsls	r1, r3, #4
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	009a      	lsls	r2, r3, #2
 80066ec:	441a      	add	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80066f8:	4b1a      	ldr	r3, [pc, #104]	; (8006764 <UART_SetConfig+0x118>)
 80066fa:	fba3 0302 	umull	r0, r3, r3, r2
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	2064      	movs	r0, #100	; 0x64
 8006702:	fb00 f303 	mul.w	r3, r0, r3
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	3332      	adds	r3, #50	; 0x32
 800670c:	4a15      	ldr	r2, [pc, #84]	; (8006764 <UART_SetConfig+0x118>)
 800670e:	fba2 2303 	umull	r2, r3, r2, r3
 8006712:	095b      	lsrs	r3, r3, #5
 8006714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006718:	4419      	add	r1, r3
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	009a      	lsls	r2, r3, #2
 8006724:	441a      	add	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006730:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <UART_SetConfig+0x118>)
 8006732:	fba3 0302 	umull	r0, r3, r3, r2
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	2064      	movs	r0, #100	; 0x64
 800673a:	fb00 f303 	mul.w	r3, r0, r3
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	3332      	adds	r3, #50	; 0x32
 8006744:	4a07      	ldr	r2, [pc, #28]	; (8006764 <UART_SetConfig+0x118>)
 8006746:	fba2 2303 	umull	r2, r3, r2, r3
 800674a:	095b      	lsrs	r3, r3, #5
 800674c:	f003 020f 	and.w	r2, r3, #15
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	440a      	add	r2, r1
 8006756:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	40013800 	.word	0x40013800
 8006764:	51eb851f 	.word	0x51eb851f

08006768 <__cvt>:
 8006768:	2b00      	cmp	r3, #0
 800676a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800676e:	461f      	mov	r7, r3
 8006770:	bfbb      	ittet	lt
 8006772:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006776:	461f      	movlt	r7, r3
 8006778:	2300      	movge	r3, #0
 800677a:	232d      	movlt	r3, #45	; 0x2d
 800677c:	b088      	sub	sp, #32
 800677e:	4614      	mov	r4, r2
 8006780:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006782:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006784:	7013      	strb	r3, [r2, #0]
 8006786:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006788:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800678c:	f023 0820 	bic.w	r8, r3, #32
 8006790:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006794:	d005      	beq.n	80067a2 <__cvt+0x3a>
 8006796:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800679a:	d100      	bne.n	800679e <__cvt+0x36>
 800679c:	3501      	adds	r5, #1
 800679e:	2302      	movs	r3, #2
 80067a0:	e000      	b.n	80067a4 <__cvt+0x3c>
 80067a2:	2303      	movs	r3, #3
 80067a4:	aa07      	add	r2, sp, #28
 80067a6:	9204      	str	r2, [sp, #16]
 80067a8:	aa06      	add	r2, sp, #24
 80067aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80067ae:	e9cd 3500 	strd	r3, r5, [sp]
 80067b2:	4622      	mov	r2, r4
 80067b4:	463b      	mov	r3, r7
 80067b6:	f000 ff53 	bl	8007660 <_dtoa_r>
 80067ba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067be:	4606      	mov	r6, r0
 80067c0:	d102      	bne.n	80067c8 <__cvt+0x60>
 80067c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067c4:	07db      	lsls	r3, r3, #31
 80067c6:	d522      	bpl.n	800680e <__cvt+0xa6>
 80067c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067cc:	eb06 0905 	add.w	r9, r6, r5
 80067d0:	d110      	bne.n	80067f4 <__cvt+0x8c>
 80067d2:	7833      	ldrb	r3, [r6, #0]
 80067d4:	2b30      	cmp	r3, #48	; 0x30
 80067d6:	d10a      	bne.n	80067ee <__cvt+0x86>
 80067d8:	2200      	movs	r2, #0
 80067da:	2300      	movs	r3, #0
 80067dc:	4620      	mov	r0, r4
 80067de:	4639      	mov	r1, r7
 80067e0:	f7fa f94e 	bl	8000a80 <__aeabi_dcmpeq>
 80067e4:	b918      	cbnz	r0, 80067ee <__cvt+0x86>
 80067e6:	f1c5 0501 	rsb	r5, r5, #1
 80067ea:	f8ca 5000 	str.w	r5, [sl]
 80067ee:	f8da 3000 	ldr.w	r3, [sl]
 80067f2:	4499      	add	r9, r3
 80067f4:	2200      	movs	r2, #0
 80067f6:	2300      	movs	r3, #0
 80067f8:	4620      	mov	r0, r4
 80067fa:	4639      	mov	r1, r7
 80067fc:	f7fa f940 	bl	8000a80 <__aeabi_dcmpeq>
 8006800:	b108      	cbz	r0, 8006806 <__cvt+0x9e>
 8006802:	f8cd 901c 	str.w	r9, [sp, #28]
 8006806:	2230      	movs	r2, #48	; 0x30
 8006808:	9b07      	ldr	r3, [sp, #28]
 800680a:	454b      	cmp	r3, r9
 800680c:	d307      	bcc.n	800681e <__cvt+0xb6>
 800680e:	4630      	mov	r0, r6
 8006810:	9b07      	ldr	r3, [sp, #28]
 8006812:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006814:	1b9b      	subs	r3, r3, r6
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	b008      	add	sp, #32
 800681a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681e:	1c59      	adds	r1, r3, #1
 8006820:	9107      	str	r1, [sp, #28]
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	e7f0      	b.n	8006808 <__cvt+0xa0>

08006826 <__exponent>:
 8006826:	4603      	mov	r3, r0
 8006828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800682a:	2900      	cmp	r1, #0
 800682c:	f803 2b02 	strb.w	r2, [r3], #2
 8006830:	bfb6      	itet	lt
 8006832:	222d      	movlt	r2, #45	; 0x2d
 8006834:	222b      	movge	r2, #43	; 0x2b
 8006836:	4249      	neglt	r1, r1
 8006838:	2909      	cmp	r1, #9
 800683a:	7042      	strb	r2, [r0, #1]
 800683c:	dd2a      	ble.n	8006894 <__exponent+0x6e>
 800683e:	f10d 0207 	add.w	r2, sp, #7
 8006842:	4617      	mov	r7, r2
 8006844:	260a      	movs	r6, #10
 8006846:	fb91 f5f6 	sdiv	r5, r1, r6
 800684a:	4694      	mov	ip, r2
 800684c:	fb06 1415 	mls	r4, r6, r5, r1
 8006850:	3430      	adds	r4, #48	; 0x30
 8006852:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006856:	460c      	mov	r4, r1
 8006858:	2c63      	cmp	r4, #99	; 0x63
 800685a:	4629      	mov	r1, r5
 800685c:	f102 32ff 	add.w	r2, r2, #4294967295
 8006860:	dcf1      	bgt.n	8006846 <__exponent+0x20>
 8006862:	3130      	adds	r1, #48	; 0x30
 8006864:	f1ac 0402 	sub.w	r4, ip, #2
 8006868:	f802 1c01 	strb.w	r1, [r2, #-1]
 800686c:	4622      	mov	r2, r4
 800686e:	1c41      	adds	r1, r0, #1
 8006870:	42ba      	cmp	r2, r7
 8006872:	d30a      	bcc.n	800688a <__exponent+0x64>
 8006874:	f10d 0209 	add.w	r2, sp, #9
 8006878:	eba2 020c 	sub.w	r2, r2, ip
 800687c:	42bc      	cmp	r4, r7
 800687e:	bf88      	it	hi
 8006880:	2200      	movhi	r2, #0
 8006882:	4413      	add	r3, r2
 8006884:	1a18      	subs	r0, r3, r0
 8006886:	b003      	add	sp, #12
 8006888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800688a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800688e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006892:	e7ed      	b.n	8006870 <__exponent+0x4a>
 8006894:	2330      	movs	r3, #48	; 0x30
 8006896:	3130      	adds	r1, #48	; 0x30
 8006898:	7083      	strb	r3, [r0, #2]
 800689a:	70c1      	strb	r1, [r0, #3]
 800689c:	1d03      	adds	r3, r0, #4
 800689e:	e7f1      	b.n	8006884 <__exponent+0x5e>

080068a0 <_printf_float>:
 80068a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a4:	b091      	sub	sp, #68	; 0x44
 80068a6:	460c      	mov	r4, r1
 80068a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80068ac:	4616      	mov	r6, r2
 80068ae:	461f      	mov	r7, r3
 80068b0:	4605      	mov	r5, r0
 80068b2:	f000 fdc7 	bl	8007444 <_localeconv_r>
 80068b6:	6803      	ldr	r3, [r0, #0]
 80068b8:	4618      	mov	r0, r3
 80068ba:	9309      	str	r3, [sp, #36]	; 0x24
 80068bc:	f7f9 fcb4 	bl	8000228 <strlen>
 80068c0:	2300      	movs	r3, #0
 80068c2:	930e      	str	r3, [sp, #56]	; 0x38
 80068c4:	f8d8 3000 	ldr.w	r3, [r8]
 80068c8:	900a      	str	r0, [sp, #40]	; 0x28
 80068ca:	3307      	adds	r3, #7
 80068cc:	f023 0307 	bic.w	r3, r3, #7
 80068d0:	f103 0208 	add.w	r2, r3, #8
 80068d4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80068d8:	f8d4 b000 	ldr.w	fp, [r4]
 80068dc:	f8c8 2000 	str.w	r2, [r8]
 80068e0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80068e4:	4652      	mov	r2, sl
 80068e6:	4643      	mov	r3, r8
 80068e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068ec:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80068f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80068f2:	f04f 32ff 	mov.w	r2, #4294967295
 80068f6:	4650      	mov	r0, sl
 80068f8:	4b9c      	ldr	r3, [pc, #624]	; (8006b6c <_printf_float+0x2cc>)
 80068fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068fc:	f7fa f8f2 	bl	8000ae4 <__aeabi_dcmpun>
 8006900:	bb70      	cbnz	r0, 8006960 <_printf_float+0xc0>
 8006902:	f04f 32ff 	mov.w	r2, #4294967295
 8006906:	4650      	mov	r0, sl
 8006908:	4b98      	ldr	r3, [pc, #608]	; (8006b6c <_printf_float+0x2cc>)
 800690a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800690c:	f7fa f8cc 	bl	8000aa8 <__aeabi_dcmple>
 8006910:	bb30      	cbnz	r0, 8006960 <_printf_float+0xc0>
 8006912:	2200      	movs	r2, #0
 8006914:	2300      	movs	r3, #0
 8006916:	4650      	mov	r0, sl
 8006918:	4641      	mov	r1, r8
 800691a:	f7fa f8bb 	bl	8000a94 <__aeabi_dcmplt>
 800691e:	b110      	cbz	r0, 8006926 <_printf_float+0x86>
 8006920:	232d      	movs	r3, #45	; 0x2d
 8006922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006926:	4a92      	ldr	r2, [pc, #584]	; (8006b70 <_printf_float+0x2d0>)
 8006928:	4b92      	ldr	r3, [pc, #584]	; (8006b74 <_printf_float+0x2d4>)
 800692a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800692e:	bf94      	ite	ls
 8006930:	4690      	movls	r8, r2
 8006932:	4698      	movhi	r8, r3
 8006934:	2303      	movs	r3, #3
 8006936:	f04f 0a00 	mov.w	sl, #0
 800693a:	6123      	str	r3, [r4, #16]
 800693c:	f02b 0304 	bic.w	r3, fp, #4
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	4633      	mov	r3, r6
 8006944:	4621      	mov	r1, r4
 8006946:	4628      	mov	r0, r5
 8006948:	9700      	str	r7, [sp, #0]
 800694a:	aa0f      	add	r2, sp, #60	; 0x3c
 800694c:	f000 f9d6 	bl	8006cfc <_printf_common>
 8006950:	3001      	adds	r0, #1
 8006952:	f040 8090 	bne.w	8006a76 <_printf_float+0x1d6>
 8006956:	f04f 30ff 	mov.w	r0, #4294967295
 800695a:	b011      	add	sp, #68	; 0x44
 800695c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006960:	4652      	mov	r2, sl
 8006962:	4643      	mov	r3, r8
 8006964:	4650      	mov	r0, sl
 8006966:	4641      	mov	r1, r8
 8006968:	f7fa f8bc 	bl	8000ae4 <__aeabi_dcmpun>
 800696c:	b148      	cbz	r0, 8006982 <_printf_float+0xe2>
 800696e:	f1b8 0f00 	cmp.w	r8, #0
 8006972:	bfb8      	it	lt
 8006974:	232d      	movlt	r3, #45	; 0x2d
 8006976:	4a80      	ldr	r2, [pc, #512]	; (8006b78 <_printf_float+0x2d8>)
 8006978:	bfb8      	it	lt
 800697a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800697e:	4b7f      	ldr	r3, [pc, #508]	; (8006b7c <_printf_float+0x2dc>)
 8006980:	e7d3      	b.n	800692a <_printf_float+0x8a>
 8006982:	6863      	ldr	r3, [r4, #4]
 8006984:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	d142      	bne.n	8006a12 <_printf_float+0x172>
 800698c:	2306      	movs	r3, #6
 800698e:	6063      	str	r3, [r4, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	9206      	str	r2, [sp, #24]
 8006994:	aa0e      	add	r2, sp, #56	; 0x38
 8006996:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800699a:	aa0d      	add	r2, sp, #52	; 0x34
 800699c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80069a0:	9203      	str	r2, [sp, #12]
 80069a2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80069a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80069aa:	6023      	str	r3, [r4, #0]
 80069ac:	6863      	ldr	r3, [r4, #4]
 80069ae:	4652      	mov	r2, sl
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	4628      	mov	r0, r5
 80069b4:	4643      	mov	r3, r8
 80069b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80069b8:	f7ff fed6 	bl	8006768 <__cvt>
 80069bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069be:	4680      	mov	r8, r0
 80069c0:	2947      	cmp	r1, #71	; 0x47
 80069c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80069c4:	d108      	bne.n	80069d8 <_printf_float+0x138>
 80069c6:	1cc8      	adds	r0, r1, #3
 80069c8:	db02      	blt.n	80069d0 <_printf_float+0x130>
 80069ca:	6863      	ldr	r3, [r4, #4]
 80069cc:	4299      	cmp	r1, r3
 80069ce:	dd40      	ble.n	8006a52 <_printf_float+0x1b2>
 80069d0:	f1a9 0902 	sub.w	r9, r9, #2
 80069d4:	fa5f f989 	uxtb.w	r9, r9
 80069d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80069dc:	d81f      	bhi.n	8006a1e <_printf_float+0x17e>
 80069de:	464a      	mov	r2, r9
 80069e0:	3901      	subs	r1, #1
 80069e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069e6:	910d      	str	r1, [sp, #52]	; 0x34
 80069e8:	f7ff ff1d 	bl	8006826 <__exponent>
 80069ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069ee:	4682      	mov	sl, r0
 80069f0:	1813      	adds	r3, r2, r0
 80069f2:	2a01      	cmp	r2, #1
 80069f4:	6123      	str	r3, [r4, #16]
 80069f6:	dc02      	bgt.n	80069fe <_printf_float+0x15e>
 80069f8:	6822      	ldr	r2, [r4, #0]
 80069fa:	07d2      	lsls	r2, r2, #31
 80069fc:	d501      	bpl.n	8006a02 <_printf_float+0x162>
 80069fe:	3301      	adds	r3, #1
 8006a00:	6123      	str	r3, [r4, #16]
 8006a02:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d09b      	beq.n	8006942 <_printf_float+0xa2>
 8006a0a:	232d      	movs	r3, #45	; 0x2d
 8006a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a10:	e797      	b.n	8006942 <_printf_float+0xa2>
 8006a12:	2947      	cmp	r1, #71	; 0x47
 8006a14:	d1bc      	bne.n	8006990 <_printf_float+0xf0>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1ba      	bne.n	8006990 <_printf_float+0xf0>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e7b7      	b.n	800698e <_printf_float+0xee>
 8006a1e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006a22:	d118      	bne.n	8006a56 <_printf_float+0x1b6>
 8006a24:	2900      	cmp	r1, #0
 8006a26:	6863      	ldr	r3, [r4, #4]
 8006a28:	dd0b      	ble.n	8006a42 <_printf_float+0x1a2>
 8006a2a:	6121      	str	r1, [r4, #16]
 8006a2c:	b913      	cbnz	r3, 8006a34 <_printf_float+0x194>
 8006a2e:	6822      	ldr	r2, [r4, #0]
 8006a30:	07d0      	lsls	r0, r2, #31
 8006a32:	d502      	bpl.n	8006a3a <_printf_float+0x19a>
 8006a34:	3301      	adds	r3, #1
 8006a36:	440b      	add	r3, r1
 8006a38:	6123      	str	r3, [r4, #16]
 8006a3a:	f04f 0a00 	mov.w	sl, #0
 8006a3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a40:	e7df      	b.n	8006a02 <_printf_float+0x162>
 8006a42:	b913      	cbnz	r3, 8006a4a <_printf_float+0x1aa>
 8006a44:	6822      	ldr	r2, [r4, #0]
 8006a46:	07d2      	lsls	r2, r2, #31
 8006a48:	d501      	bpl.n	8006a4e <_printf_float+0x1ae>
 8006a4a:	3302      	adds	r3, #2
 8006a4c:	e7f4      	b.n	8006a38 <_printf_float+0x198>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e7f2      	b.n	8006a38 <_printf_float+0x198>
 8006a52:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006a56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a58:	4299      	cmp	r1, r3
 8006a5a:	db05      	blt.n	8006a68 <_printf_float+0x1c8>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	6121      	str	r1, [r4, #16]
 8006a60:	07d8      	lsls	r0, r3, #31
 8006a62:	d5ea      	bpl.n	8006a3a <_printf_float+0x19a>
 8006a64:	1c4b      	adds	r3, r1, #1
 8006a66:	e7e7      	b.n	8006a38 <_printf_float+0x198>
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	bfcc      	ite	gt
 8006a6c:	2201      	movgt	r2, #1
 8006a6e:	f1c1 0202 	rsble	r2, r1, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	e7e0      	b.n	8006a38 <_printf_float+0x198>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	055a      	lsls	r2, r3, #21
 8006a7a:	d407      	bmi.n	8006a8c <_printf_float+0x1ec>
 8006a7c:	6923      	ldr	r3, [r4, #16]
 8006a7e:	4642      	mov	r2, r8
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b8      	blx	r7
 8006a86:	3001      	adds	r0, #1
 8006a88:	d12b      	bne.n	8006ae2 <_printf_float+0x242>
 8006a8a:	e764      	b.n	8006956 <_printf_float+0xb6>
 8006a8c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006a90:	f240 80dd 	bls.w	8006c4e <_printf_float+0x3ae>
 8006a94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a98:	2200      	movs	r2, #0
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f7f9 fff0 	bl	8000a80 <__aeabi_dcmpeq>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d033      	beq.n	8006b0c <_printf_float+0x26c>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	4a35      	ldr	r2, [pc, #212]	; (8006b80 <_printf_float+0x2e0>)
 8006aac:	47b8      	blx	r7
 8006aae:	3001      	adds	r0, #1
 8006ab0:	f43f af51 	beq.w	8006956 <_printf_float+0xb6>
 8006ab4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	db02      	blt.n	8006ac2 <_printf_float+0x222>
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	07d8      	lsls	r0, r3, #31
 8006ac0:	d50f      	bpl.n	8006ae2 <_printf_float+0x242>
 8006ac2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4628      	mov	r0, r5
 8006aca:	47b8      	blx	r7
 8006acc:	3001      	adds	r0, #1
 8006ace:	f43f af42 	beq.w	8006956 <_printf_float+0xb6>
 8006ad2:	f04f 0800 	mov.w	r8, #0
 8006ad6:	f104 091a 	add.w	r9, r4, #26
 8006ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006adc:	3b01      	subs	r3, #1
 8006ade:	4543      	cmp	r3, r8
 8006ae0:	dc09      	bgt.n	8006af6 <_printf_float+0x256>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	079b      	lsls	r3, r3, #30
 8006ae6:	f100 8104 	bmi.w	8006cf2 <_printf_float+0x452>
 8006aea:	68e0      	ldr	r0, [r4, #12]
 8006aec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006aee:	4298      	cmp	r0, r3
 8006af0:	bfb8      	it	lt
 8006af2:	4618      	movlt	r0, r3
 8006af4:	e731      	b.n	800695a <_printf_float+0xba>
 8006af6:	2301      	movs	r3, #1
 8006af8:	464a      	mov	r2, r9
 8006afa:	4631      	mov	r1, r6
 8006afc:	4628      	mov	r0, r5
 8006afe:	47b8      	blx	r7
 8006b00:	3001      	adds	r0, #1
 8006b02:	f43f af28 	beq.w	8006956 <_printf_float+0xb6>
 8006b06:	f108 0801 	add.w	r8, r8, #1
 8006b0a:	e7e6      	b.n	8006ada <_printf_float+0x23a>
 8006b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	dc38      	bgt.n	8006b84 <_printf_float+0x2e4>
 8006b12:	2301      	movs	r3, #1
 8006b14:	4631      	mov	r1, r6
 8006b16:	4628      	mov	r0, r5
 8006b18:	4a19      	ldr	r2, [pc, #100]	; (8006b80 <_printf_float+0x2e0>)
 8006b1a:	47b8      	blx	r7
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	f43f af1a 	beq.w	8006956 <_printf_float+0xb6>
 8006b22:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006b26:	4313      	orrs	r3, r2
 8006b28:	d102      	bne.n	8006b30 <_printf_float+0x290>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	07d9      	lsls	r1, r3, #31
 8006b2e:	d5d8      	bpl.n	8006ae2 <_printf_float+0x242>
 8006b30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b34:	4631      	mov	r1, r6
 8006b36:	4628      	mov	r0, r5
 8006b38:	47b8      	blx	r7
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	f43f af0b 	beq.w	8006956 <_printf_float+0xb6>
 8006b40:	f04f 0900 	mov.w	r9, #0
 8006b44:	f104 0a1a 	add.w	sl, r4, #26
 8006b48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b4a:	425b      	negs	r3, r3
 8006b4c:	454b      	cmp	r3, r9
 8006b4e:	dc01      	bgt.n	8006b54 <_printf_float+0x2b4>
 8006b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b52:	e794      	b.n	8006a7e <_printf_float+0x1de>
 8006b54:	2301      	movs	r3, #1
 8006b56:	4652      	mov	r2, sl
 8006b58:	4631      	mov	r1, r6
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	47b8      	blx	r7
 8006b5e:	3001      	adds	r0, #1
 8006b60:	f43f aef9 	beq.w	8006956 <_printf_float+0xb6>
 8006b64:	f109 0901 	add.w	r9, r9, #1
 8006b68:	e7ee      	b.n	8006b48 <_printf_float+0x2a8>
 8006b6a:	bf00      	nop
 8006b6c:	7fefffff 	.word	0x7fefffff
 8006b70:	0800a78a 	.word	0x0800a78a
 8006b74:	0800a78e 	.word	0x0800a78e
 8006b78:	0800a792 	.word	0x0800a792
 8006b7c:	0800a796 	.word	0x0800a796
 8006b80:	0800a79a 	.word	0x0800a79a
 8006b84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	bfa8      	it	ge
 8006b8c:	461a      	movge	r2, r3
 8006b8e:	2a00      	cmp	r2, #0
 8006b90:	4691      	mov	r9, r2
 8006b92:	dc37      	bgt.n	8006c04 <_printf_float+0x364>
 8006b94:	f04f 0b00 	mov.w	fp, #0
 8006b98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b9c:	f104 021a 	add.w	r2, r4, #26
 8006ba0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006ba4:	ebaa 0309 	sub.w	r3, sl, r9
 8006ba8:	455b      	cmp	r3, fp
 8006baa:	dc33      	bgt.n	8006c14 <_printf_float+0x374>
 8006bac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	db3b      	blt.n	8006c2c <_printf_float+0x38c>
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	07da      	lsls	r2, r3, #31
 8006bb8:	d438      	bmi.n	8006c2c <_printf_float+0x38c>
 8006bba:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006bbe:	eba2 0903 	sub.w	r9, r2, r3
 8006bc2:	eba2 020a 	sub.w	r2, r2, sl
 8006bc6:	4591      	cmp	r9, r2
 8006bc8:	bfa8      	it	ge
 8006bca:	4691      	movge	r9, r2
 8006bcc:	f1b9 0f00 	cmp.w	r9, #0
 8006bd0:	dc34      	bgt.n	8006c3c <_printf_float+0x39c>
 8006bd2:	f04f 0800 	mov.w	r8, #0
 8006bd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bda:	f104 0a1a 	add.w	sl, r4, #26
 8006bde:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006be2:	1a9b      	subs	r3, r3, r2
 8006be4:	eba3 0309 	sub.w	r3, r3, r9
 8006be8:	4543      	cmp	r3, r8
 8006bea:	f77f af7a 	ble.w	8006ae2 <_printf_float+0x242>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	4652      	mov	r2, sl
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	47b8      	blx	r7
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	f43f aeac 	beq.w	8006956 <_printf_float+0xb6>
 8006bfe:	f108 0801 	add.w	r8, r8, #1
 8006c02:	e7ec      	b.n	8006bde <_printf_float+0x33e>
 8006c04:	4613      	mov	r3, r2
 8006c06:	4631      	mov	r1, r6
 8006c08:	4642      	mov	r2, r8
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	47b8      	blx	r7
 8006c0e:	3001      	adds	r0, #1
 8006c10:	d1c0      	bne.n	8006b94 <_printf_float+0x2f4>
 8006c12:	e6a0      	b.n	8006956 <_printf_float+0xb6>
 8006c14:	2301      	movs	r3, #1
 8006c16:	4631      	mov	r1, r6
 8006c18:	4628      	mov	r0, r5
 8006c1a:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c1c:	47b8      	blx	r7
 8006c1e:	3001      	adds	r0, #1
 8006c20:	f43f ae99 	beq.w	8006956 <_printf_float+0xb6>
 8006c24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c26:	f10b 0b01 	add.w	fp, fp, #1
 8006c2a:	e7b9      	b.n	8006ba0 <_printf_float+0x300>
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c32:	4628      	mov	r0, r5
 8006c34:	47b8      	blx	r7
 8006c36:	3001      	adds	r0, #1
 8006c38:	d1bf      	bne.n	8006bba <_printf_float+0x31a>
 8006c3a:	e68c      	b.n	8006956 <_printf_float+0xb6>
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	4631      	mov	r1, r6
 8006c40:	4628      	mov	r0, r5
 8006c42:	eb08 020a 	add.w	r2, r8, sl
 8006c46:	47b8      	blx	r7
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d1c2      	bne.n	8006bd2 <_printf_float+0x332>
 8006c4c:	e683      	b.n	8006956 <_printf_float+0xb6>
 8006c4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c50:	2a01      	cmp	r2, #1
 8006c52:	dc01      	bgt.n	8006c58 <_printf_float+0x3b8>
 8006c54:	07db      	lsls	r3, r3, #31
 8006c56:	d539      	bpl.n	8006ccc <_printf_float+0x42c>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	4642      	mov	r2, r8
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	4628      	mov	r0, r5
 8006c60:	47b8      	blx	r7
 8006c62:	3001      	adds	r0, #1
 8006c64:	f43f ae77 	beq.w	8006956 <_printf_float+0xb6>
 8006c68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	4628      	mov	r0, r5
 8006c70:	47b8      	blx	r7
 8006c72:	3001      	adds	r0, #1
 8006c74:	f43f ae6f 	beq.w	8006956 <_printf_float+0xb6>
 8006c78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006c84:	f7f9 fefc 	bl	8000a80 <__aeabi_dcmpeq>
 8006c88:	b9d8      	cbnz	r0, 8006cc2 <_printf_float+0x422>
 8006c8a:	f109 33ff 	add.w	r3, r9, #4294967295
 8006c8e:	f108 0201 	add.w	r2, r8, #1
 8006c92:	4631      	mov	r1, r6
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b8      	blx	r7
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d10e      	bne.n	8006cba <_printf_float+0x41a>
 8006c9c:	e65b      	b.n	8006956 <_printf_float+0xb6>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	464a      	mov	r2, r9
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	47b8      	blx	r7
 8006ca8:	3001      	adds	r0, #1
 8006caa:	f43f ae54 	beq.w	8006956 <_printf_float+0xb6>
 8006cae:	f108 0801 	add.w	r8, r8, #1
 8006cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	4543      	cmp	r3, r8
 8006cb8:	dcf1      	bgt.n	8006c9e <_printf_float+0x3fe>
 8006cba:	4653      	mov	r3, sl
 8006cbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006cc0:	e6de      	b.n	8006a80 <_printf_float+0x1e0>
 8006cc2:	f04f 0800 	mov.w	r8, #0
 8006cc6:	f104 091a 	add.w	r9, r4, #26
 8006cca:	e7f2      	b.n	8006cb2 <_printf_float+0x412>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	4642      	mov	r2, r8
 8006cd0:	e7df      	b.n	8006c92 <_printf_float+0x3f2>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	464a      	mov	r2, r9
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	47b8      	blx	r7
 8006cdc:	3001      	adds	r0, #1
 8006cde:	f43f ae3a 	beq.w	8006956 <_printf_float+0xb6>
 8006ce2:	f108 0801 	add.w	r8, r8, #1
 8006ce6:	68e3      	ldr	r3, [r4, #12]
 8006ce8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006cea:	1a5b      	subs	r3, r3, r1
 8006cec:	4543      	cmp	r3, r8
 8006cee:	dcf0      	bgt.n	8006cd2 <_printf_float+0x432>
 8006cf0:	e6fb      	b.n	8006aea <_printf_float+0x24a>
 8006cf2:	f04f 0800 	mov.w	r8, #0
 8006cf6:	f104 0919 	add.w	r9, r4, #25
 8006cfa:	e7f4      	b.n	8006ce6 <_printf_float+0x446>

08006cfc <_printf_common>:
 8006cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d00:	4616      	mov	r6, r2
 8006d02:	4699      	mov	r9, r3
 8006d04:	688a      	ldr	r2, [r1, #8]
 8006d06:	690b      	ldr	r3, [r1, #16]
 8006d08:	4607      	mov	r7, r0
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	bfb8      	it	lt
 8006d0e:	4613      	movlt	r3, r2
 8006d10:	6033      	str	r3, [r6, #0]
 8006d12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d16:	460c      	mov	r4, r1
 8006d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d1c:	b10a      	cbz	r2, 8006d22 <_printf_common+0x26>
 8006d1e:	3301      	adds	r3, #1
 8006d20:	6033      	str	r3, [r6, #0]
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	0699      	lsls	r1, r3, #26
 8006d26:	bf42      	ittt	mi
 8006d28:	6833      	ldrmi	r3, [r6, #0]
 8006d2a:	3302      	addmi	r3, #2
 8006d2c:	6033      	strmi	r3, [r6, #0]
 8006d2e:	6825      	ldr	r5, [r4, #0]
 8006d30:	f015 0506 	ands.w	r5, r5, #6
 8006d34:	d106      	bne.n	8006d44 <_printf_common+0x48>
 8006d36:	f104 0a19 	add.w	sl, r4, #25
 8006d3a:	68e3      	ldr	r3, [r4, #12]
 8006d3c:	6832      	ldr	r2, [r6, #0]
 8006d3e:	1a9b      	subs	r3, r3, r2
 8006d40:	42ab      	cmp	r3, r5
 8006d42:	dc2b      	bgt.n	8006d9c <_printf_common+0xa0>
 8006d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d48:	1e13      	subs	r3, r2, #0
 8006d4a:	6822      	ldr	r2, [r4, #0]
 8006d4c:	bf18      	it	ne
 8006d4e:	2301      	movne	r3, #1
 8006d50:	0692      	lsls	r2, r2, #26
 8006d52:	d430      	bmi.n	8006db6 <_printf_common+0xba>
 8006d54:	4649      	mov	r1, r9
 8006d56:	4638      	mov	r0, r7
 8006d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d5c:	47c0      	blx	r8
 8006d5e:	3001      	adds	r0, #1
 8006d60:	d023      	beq.n	8006daa <_printf_common+0xae>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	6922      	ldr	r2, [r4, #16]
 8006d66:	f003 0306 	and.w	r3, r3, #6
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	bf14      	ite	ne
 8006d6e:	2500      	movne	r5, #0
 8006d70:	6833      	ldreq	r3, [r6, #0]
 8006d72:	f04f 0600 	mov.w	r6, #0
 8006d76:	bf08      	it	eq
 8006d78:	68e5      	ldreq	r5, [r4, #12]
 8006d7a:	f104 041a 	add.w	r4, r4, #26
 8006d7e:	bf08      	it	eq
 8006d80:	1aed      	subeq	r5, r5, r3
 8006d82:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006d86:	bf08      	it	eq
 8006d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	bfc4      	itt	gt
 8006d90:	1a9b      	subgt	r3, r3, r2
 8006d92:	18ed      	addgt	r5, r5, r3
 8006d94:	42b5      	cmp	r5, r6
 8006d96:	d11a      	bne.n	8006dce <_printf_common+0xd2>
 8006d98:	2000      	movs	r0, #0
 8006d9a:	e008      	b.n	8006dae <_printf_common+0xb2>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	4652      	mov	r2, sl
 8006da0:	4649      	mov	r1, r9
 8006da2:	4638      	mov	r0, r7
 8006da4:	47c0      	blx	r8
 8006da6:	3001      	adds	r0, #1
 8006da8:	d103      	bne.n	8006db2 <_printf_common+0xb6>
 8006daa:	f04f 30ff 	mov.w	r0, #4294967295
 8006dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db2:	3501      	adds	r5, #1
 8006db4:	e7c1      	b.n	8006d3a <_printf_common+0x3e>
 8006db6:	2030      	movs	r0, #48	; 0x30
 8006db8:	18e1      	adds	r1, r4, r3
 8006dba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dc4:	4422      	add	r2, r4
 8006dc6:	3302      	adds	r3, #2
 8006dc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dcc:	e7c2      	b.n	8006d54 <_printf_common+0x58>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	4622      	mov	r2, r4
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	4638      	mov	r0, r7
 8006dd6:	47c0      	blx	r8
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d0e6      	beq.n	8006daa <_printf_common+0xae>
 8006ddc:	3601      	adds	r6, #1
 8006dde:	e7d9      	b.n	8006d94 <_printf_common+0x98>

08006de0 <_printf_i>:
 8006de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de4:	7e0f      	ldrb	r7, [r1, #24]
 8006de6:	4691      	mov	r9, r2
 8006de8:	2f78      	cmp	r7, #120	; 0x78
 8006dea:	4680      	mov	r8, r0
 8006dec:	460c      	mov	r4, r1
 8006dee:	469a      	mov	sl, r3
 8006df0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006df2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006df6:	d807      	bhi.n	8006e08 <_printf_i+0x28>
 8006df8:	2f62      	cmp	r7, #98	; 0x62
 8006dfa:	d80a      	bhi.n	8006e12 <_printf_i+0x32>
 8006dfc:	2f00      	cmp	r7, #0
 8006dfe:	f000 80d5 	beq.w	8006fac <_printf_i+0x1cc>
 8006e02:	2f58      	cmp	r7, #88	; 0x58
 8006e04:	f000 80c1 	beq.w	8006f8a <_printf_i+0x1aa>
 8006e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e10:	e03a      	b.n	8006e88 <_printf_i+0xa8>
 8006e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e16:	2b15      	cmp	r3, #21
 8006e18:	d8f6      	bhi.n	8006e08 <_printf_i+0x28>
 8006e1a:	a101      	add	r1, pc, #4	; (adr r1, 8006e20 <_printf_i+0x40>)
 8006e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e20:	08006e79 	.word	0x08006e79
 8006e24:	08006e8d 	.word	0x08006e8d
 8006e28:	08006e09 	.word	0x08006e09
 8006e2c:	08006e09 	.word	0x08006e09
 8006e30:	08006e09 	.word	0x08006e09
 8006e34:	08006e09 	.word	0x08006e09
 8006e38:	08006e8d 	.word	0x08006e8d
 8006e3c:	08006e09 	.word	0x08006e09
 8006e40:	08006e09 	.word	0x08006e09
 8006e44:	08006e09 	.word	0x08006e09
 8006e48:	08006e09 	.word	0x08006e09
 8006e4c:	08006f93 	.word	0x08006f93
 8006e50:	08006eb9 	.word	0x08006eb9
 8006e54:	08006f4d 	.word	0x08006f4d
 8006e58:	08006e09 	.word	0x08006e09
 8006e5c:	08006e09 	.word	0x08006e09
 8006e60:	08006fb5 	.word	0x08006fb5
 8006e64:	08006e09 	.word	0x08006e09
 8006e68:	08006eb9 	.word	0x08006eb9
 8006e6c:	08006e09 	.word	0x08006e09
 8006e70:	08006e09 	.word	0x08006e09
 8006e74:	08006f55 	.word	0x08006f55
 8006e78:	682b      	ldr	r3, [r5, #0]
 8006e7a:	1d1a      	adds	r2, r3, #4
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	602a      	str	r2, [r5, #0]
 8006e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e0a0      	b.n	8006fce <_printf_i+0x1ee>
 8006e8c:	6820      	ldr	r0, [r4, #0]
 8006e8e:	682b      	ldr	r3, [r5, #0]
 8006e90:	0607      	lsls	r7, r0, #24
 8006e92:	f103 0104 	add.w	r1, r3, #4
 8006e96:	6029      	str	r1, [r5, #0]
 8006e98:	d501      	bpl.n	8006e9e <_printf_i+0xbe>
 8006e9a:	681e      	ldr	r6, [r3, #0]
 8006e9c:	e003      	b.n	8006ea6 <_printf_i+0xc6>
 8006e9e:	0646      	lsls	r6, r0, #25
 8006ea0:	d5fb      	bpl.n	8006e9a <_printf_i+0xba>
 8006ea2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ea6:	2e00      	cmp	r6, #0
 8006ea8:	da03      	bge.n	8006eb2 <_printf_i+0xd2>
 8006eaa:	232d      	movs	r3, #45	; 0x2d
 8006eac:	4276      	negs	r6, r6
 8006eae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eb2:	230a      	movs	r3, #10
 8006eb4:	4859      	ldr	r0, [pc, #356]	; (800701c <_printf_i+0x23c>)
 8006eb6:	e012      	b.n	8006ede <_printf_i+0xfe>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	6820      	ldr	r0, [r4, #0]
 8006ebc:	1d19      	adds	r1, r3, #4
 8006ebe:	6029      	str	r1, [r5, #0]
 8006ec0:	0605      	lsls	r5, r0, #24
 8006ec2:	d501      	bpl.n	8006ec8 <_printf_i+0xe8>
 8006ec4:	681e      	ldr	r6, [r3, #0]
 8006ec6:	e002      	b.n	8006ece <_printf_i+0xee>
 8006ec8:	0641      	lsls	r1, r0, #25
 8006eca:	d5fb      	bpl.n	8006ec4 <_printf_i+0xe4>
 8006ecc:	881e      	ldrh	r6, [r3, #0]
 8006ece:	2f6f      	cmp	r7, #111	; 0x6f
 8006ed0:	bf0c      	ite	eq
 8006ed2:	2308      	moveq	r3, #8
 8006ed4:	230a      	movne	r3, #10
 8006ed6:	4851      	ldr	r0, [pc, #324]	; (800701c <_printf_i+0x23c>)
 8006ed8:	2100      	movs	r1, #0
 8006eda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ede:	6865      	ldr	r5, [r4, #4]
 8006ee0:	2d00      	cmp	r5, #0
 8006ee2:	bfa8      	it	ge
 8006ee4:	6821      	ldrge	r1, [r4, #0]
 8006ee6:	60a5      	str	r5, [r4, #8]
 8006ee8:	bfa4      	itt	ge
 8006eea:	f021 0104 	bicge.w	r1, r1, #4
 8006eee:	6021      	strge	r1, [r4, #0]
 8006ef0:	b90e      	cbnz	r6, 8006ef6 <_printf_i+0x116>
 8006ef2:	2d00      	cmp	r5, #0
 8006ef4:	d04b      	beq.n	8006f8e <_printf_i+0x1ae>
 8006ef6:	4615      	mov	r5, r2
 8006ef8:	fbb6 f1f3 	udiv	r1, r6, r3
 8006efc:	fb03 6711 	mls	r7, r3, r1, r6
 8006f00:	5dc7      	ldrb	r7, [r0, r7]
 8006f02:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f06:	4637      	mov	r7, r6
 8006f08:	42bb      	cmp	r3, r7
 8006f0a:	460e      	mov	r6, r1
 8006f0c:	d9f4      	bls.n	8006ef8 <_printf_i+0x118>
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	d10b      	bne.n	8006f2a <_printf_i+0x14a>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	07de      	lsls	r6, r3, #31
 8006f16:	d508      	bpl.n	8006f2a <_printf_i+0x14a>
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	6861      	ldr	r1, [r4, #4]
 8006f1c:	4299      	cmp	r1, r3
 8006f1e:	bfde      	ittt	le
 8006f20:	2330      	movle	r3, #48	; 0x30
 8006f22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f2a:	1b52      	subs	r2, r2, r5
 8006f2c:	6122      	str	r2, [r4, #16]
 8006f2e:	464b      	mov	r3, r9
 8006f30:	4621      	mov	r1, r4
 8006f32:	4640      	mov	r0, r8
 8006f34:	f8cd a000 	str.w	sl, [sp]
 8006f38:	aa03      	add	r2, sp, #12
 8006f3a:	f7ff fedf 	bl	8006cfc <_printf_common>
 8006f3e:	3001      	adds	r0, #1
 8006f40:	d14a      	bne.n	8006fd8 <_printf_i+0x1f8>
 8006f42:	f04f 30ff 	mov.w	r0, #4294967295
 8006f46:	b004      	add	sp, #16
 8006f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	f043 0320 	orr.w	r3, r3, #32
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	2778      	movs	r7, #120	; 0x78
 8006f56:	4832      	ldr	r0, [pc, #200]	; (8007020 <_printf_i+0x240>)
 8006f58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	6829      	ldr	r1, [r5, #0]
 8006f60:	061f      	lsls	r7, r3, #24
 8006f62:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f66:	d402      	bmi.n	8006f6e <_printf_i+0x18e>
 8006f68:	065f      	lsls	r7, r3, #25
 8006f6a:	bf48      	it	mi
 8006f6c:	b2b6      	uxthmi	r6, r6
 8006f6e:	07df      	lsls	r7, r3, #31
 8006f70:	bf48      	it	mi
 8006f72:	f043 0320 	orrmi.w	r3, r3, #32
 8006f76:	6029      	str	r1, [r5, #0]
 8006f78:	bf48      	it	mi
 8006f7a:	6023      	strmi	r3, [r4, #0]
 8006f7c:	b91e      	cbnz	r6, 8006f86 <_printf_i+0x1a6>
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	f023 0320 	bic.w	r3, r3, #32
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	2310      	movs	r3, #16
 8006f88:	e7a6      	b.n	8006ed8 <_printf_i+0xf8>
 8006f8a:	4824      	ldr	r0, [pc, #144]	; (800701c <_printf_i+0x23c>)
 8006f8c:	e7e4      	b.n	8006f58 <_printf_i+0x178>
 8006f8e:	4615      	mov	r5, r2
 8006f90:	e7bd      	b.n	8006f0e <_printf_i+0x12e>
 8006f92:	682b      	ldr	r3, [r5, #0]
 8006f94:	6826      	ldr	r6, [r4, #0]
 8006f96:	1d18      	adds	r0, r3, #4
 8006f98:	6961      	ldr	r1, [r4, #20]
 8006f9a:	6028      	str	r0, [r5, #0]
 8006f9c:	0635      	lsls	r5, r6, #24
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	d501      	bpl.n	8006fa6 <_printf_i+0x1c6>
 8006fa2:	6019      	str	r1, [r3, #0]
 8006fa4:	e002      	b.n	8006fac <_printf_i+0x1cc>
 8006fa6:	0670      	lsls	r0, r6, #25
 8006fa8:	d5fb      	bpl.n	8006fa2 <_printf_i+0x1c2>
 8006faa:	8019      	strh	r1, [r3, #0]
 8006fac:	2300      	movs	r3, #0
 8006fae:	4615      	mov	r5, r2
 8006fb0:	6123      	str	r3, [r4, #16]
 8006fb2:	e7bc      	b.n	8006f2e <_printf_i+0x14e>
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	1d1a      	adds	r2, r3, #4
 8006fba:	602a      	str	r2, [r5, #0]
 8006fbc:	681d      	ldr	r5, [r3, #0]
 8006fbe:	6862      	ldr	r2, [r4, #4]
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f000 fab6 	bl	8007532 <memchr>
 8006fc6:	b108      	cbz	r0, 8006fcc <_printf_i+0x1ec>
 8006fc8:	1b40      	subs	r0, r0, r5
 8006fca:	6060      	str	r0, [r4, #4]
 8006fcc:	6863      	ldr	r3, [r4, #4]
 8006fce:	6123      	str	r3, [r4, #16]
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fd6:	e7aa      	b.n	8006f2e <_printf_i+0x14e>
 8006fd8:	462a      	mov	r2, r5
 8006fda:	4649      	mov	r1, r9
 8006fdc:	4640      	mov	r0, r8
 8006fde:	6923      	ldr	r3, [r4, #16]
 8006fe0:	47d0      	blx	sl
 8006fe2:	3001      	adds	r0, #1
 8006fe4:	d0ad      	beq.n	8006f42 <_printf_i+0x162>
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	079b      	lsls	r3, r3, #30
 8006fea:	d413      	bmi.n	8007014 <_printf_i+0x234>
 8006fec:	68e0      	ldr	r0, [r4, #12]
 8006fee:	9b03      	ldr	r3, [sp, #12]
 8006ff0:	4298      	cmp	r0, r3
 8006ff2:	bfb8      	it	lt
 8006ff4:	4618      	movlt	r0, r3
 8006ff6:	e7a6      	b.n	8006f46 <_printf_i+0x166>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	4632      	mov	r2, r6
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	4640      	mov	r0, r8
 8007000:	47d0      	blx	sl
 8007002:	3001      	adds	r0, #1
 8007004:	d09d      	beq.n	8006f42 <_printf_i+0x162>
 8007006:	3501      	adds	r5, #1
 8007008:	68e3      	ldr	r3, [r4, #12]
 800700a:	9903      	ldr	r1, [sp, #12]
 800700c:	1a5b      	subs	r3, r3, r1
 800700e:	42ab      	cmp	r3, r5
 8007010:	dcf2      	bgt.n	8006ff8 <_printf_i+0x218>
 8007012:	e7eb      	b.n	8006fec <_printf_i+0x20c>
 8007014:	2500      	movs	r5, #0
 8007016:	f104 0619 	add.w	r6, r4, #25
 800701a:	e7f5      	b.n	8007008 <_printf_i+0x228>
 800701c:	0800a79c 	.word	0x0800a79c
 8007020:	0800a7ad 	.word	0x0800a7ad

08007024 <std>:
 8007024:	2300      	movs	r3, #0
 8007026:	b510      	push	{r4, lr}
 8007028:	4604      	mov	r4, r0
 800702a:	e9c0 3300 	strd	r3, r3, [r0]
 800702e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007032:	6083      	str	r3, [r0, #8]
 8007034:	8181      	strh	r1, [r0, #12]
 8007036:	6643      	str	r3, [r0, #100]	; 0x64
 8007038:	81c2      	strh	r2, [r0, #14]
 800703a:	6183      	str	r3, [r0, #24]
 800703c:	4619      	mov	r1, r3
 800703e:	2208      	movs	r2, #8
 8007040:	305c      	adds	r0, #92	; 0x5c
 8007042:	f000 f9f7 	bl	8007434 <memset>
 8007046:	4b0d      	ldr	r3, [pc, #52]	; (800707c <std+0x58>)
 8007048:	6224      	str	r4, [r4, #32]
 800704a:	6263      	str	r3, [r4, #36]	; 0x24
 800704c:	4b0c      	ldr	r3, [pc, #48]	; (8007080 <std+0x5c>)
 800704e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007050:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <std+0x60>)
 8007052:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007054:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <std+0x64>)
 8007056:	6323      	str	r3, [r4, #48]	; 0x30
 8007058:	4b0c      	ldr	r3, [pc, #48]	; (800708c <std+0x68>)
 800705a:	429c      	cmp	r4, r3
 800705c:	d006      	beq.n	800706c <std+0x48>
 800705e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007062:	4294      	cmp	r4, r2
 8007064:	d002      	beq.n	800706c <std+0x48>
 8007066:	33d0      	adds	r3, #208	; 0xd0
 8007068:	429c      	cmp	r4, r3
 800706a:	d105      	bne.n	8007078 <std+0x54>
 800706c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007074:	f000 ba5a 	b.w	800752c <__retarget_lock_init_recursive>
 8007078:	bd10      	pop	{r4, pc}
 800707a:	bf00      	nop
 800707c:	08007285 	.word	0x08007285
 8007080:	080072a7 	.word	0x080072a7
 8007084:	080072df 	.word	0x080072df
 8007088:	08007303 	.word	0x08007303
 800708c:	20000378 	.word	0x20000378

08007090 <stdio_exit_handler>:
 8007090:	4a02      	ldr	r2, [pc, #8]	; (800709c <stdio_exit_handler+0xc>)
 8007092:	4903      	ldr	r1, [pc, #12]	; (80070a0 <stdio_exit_handler+0x10>)
 8007094:	4803      	ldr	r0, [pc, #12]	; (80070a4 <stdio_exit_handler+0x14>)
 8007096:	f000 b869 	b.w	800716c <_fwalk_sglue>
 800709a:	bf00      	nop
 800709c:	20000014 	.word	0x20000014
 80070a0:	08008e99 	.word	0x08008e99
 80070a4:	20000020 	.word	0x20000020

080070a8 <cleanup_stdio>:
 80070a8:	6841      	ldr	r1, [r0, #4]
 80070aa:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <cleanup_stdio+0x34>)
 80070ac:	b510      	push	{r4, lr}
 80070ae:	4299      	cmp	r1, r3
 80070b0:	4604      	mov	r4, r0
 80070b2:	d001      	beq.n	80070b8 <cleanup_stdio+0x10>
 80070b4:	f001 fef0 	bl	8008e98 <_fflush_r>
 80070b8:	68a1      	ldr	r1, [r4, #8]
 80070ba:	4b09      	ldr	r3, [pc, #36]	; (80070e0 <cleanup_stdio+0x38>)
 80070bc:	4299      	cmp	r1, r3
 80070be:	d002      	beq.n	80070c6 <cleanup_stdio+0x1e>
 80070c0:	4620      	mov	r0, r4
 80070c2:	f001 fee9 	bl	8008e98 <_fflush_r>
 80070c6:	68e1      	ldr	r1, [r4, #12]
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <cleanup_stdio+0x3c>)
 80070ca:	4299      	cmp	r1, r3
 80070cc:	d004      	beq.n	80070d8 <cleanup_stdio+0x30>
 80070ce:	4620      	mov	r0, r4
 80070d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070d4:	f001 bee0 	b.w	8008e98 <_fflush_r>
 80070d8:	bd10      	pop	{r4, pc}
 80070da:	bf00      	nop
 80070dc:	20000378 	.word	0x20000378
 80070e0:	200003e0 	.word	0x200003e0
 80070e4:	20000448 	.word	0x20000448

080070e8 <global_stdio_init.part.0>:
 80070e8:	b510      	push	{r4, lr}
 80070ea:	4b0b      	ldr	r3, [pc, #44]	; (8007118 <global_stdio_init.part.0+0x30>)
 80070ec:	4c0b      	ldr	r4, [pc, #44]	; (800711c <global_stdio_init.part.0+0x34>)
 80070ee:	4a0c      	ldr	r2, [pc, #48]	; (8007120 <global_stdio_init.part.0+0x38>)
 80070f0:	4620      	mov	r0, r4
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	2104      	movs	r1, #4
 80070f6:	2200      	movs	r2, #0
 80070f8:	f7ff ff94 	bl	8007024 <std>
 80070fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007100:	2201      	movs	r2, #1
 8007102:	2109      	movs	r1, #9
 8007104:	f7ff ff8e 	bl	8007024 <std>
 8007108:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800710c:	2202      	movs	r2, #2
 800710e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007112:	2112      	movs	r1, #18
 8007114:	f7ff bf86 	b.w	8007024 <std>
 8007118:	200004b0 	.word	0x200004b0
 800711c:	20000378 	.word	0x20000378
 8007120:	08007091 	.word	0x08007091

08007124 <__sfp_lock_acquire>:
 8007124:	4801      	ldr	r0, [pc, #4]	; (800712c <__sfp_lock_acquire+0x8>)
 8007126:	f000 ba02 	b.w	800752e <__retarget_lock_acquire_recursive>
 800712a:	bf00      	nop
 800712c:	200004b9 	.word	0x200004b9

08007130 <__sfp_lock_release>:
 8007130:	4801      	ldr	r0, [pc, #4]	; (8007138 <__sfp_lock_release+0x8>)
 8007132:	f000 b9fd 	b.w	8007530 <__retarget_lock_release_recursive>
 8007136:	bf00      	nop
 8007138:	200004b9 	.word	0x200004b9

0800713c <__sinit>:
 800713c:	b510      	push	{r4, lr}
 800713e:	4604      	mov	r4, r0
 8007140:	f7ff fff0 	bl	8007124 <__sfp_lock_acquire>
 8007144:	6a23      	ldr	r3, [r4, #32]
 8007146:	b11b      	cbz	r3, 8007150 <__sinit+0x14>
 8007148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800714c:	f7ff bff0 	b.w	8007130 <__sfp_lock_release>
 8007150:	4b04      	ldr	r3, [pc, #16]	; (8007164 <__sinit+0x28>)
 8007152:	6223      	str	r3, [r4, #32]
 8007154:	4b04      	ldr	r3, [pc, #16]	; (8007168 <__sinit+0x2c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1f5      	bne.n	8007148 <__sinit+0xc>
 800715c:	f7ff ffc4 	bl	80070e8 <global_stdio_init.part.0>
 8007160:	e7f2      	b.n	8007148 <__sinit+0xc>
 8007162:	bf00      	nop
 8007164:	080070a9 	.word	0x080070a9
 8007168:	200004b0 	.word	0x200004b0

0800716c <_fwalk_sglue>:
 800716c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007170:	4607      	mov	r7, r0
 8007172:	4688      	mov	r8, r1
 8007174:	4614      	mov	r4, r2
 8007176:	2600      	movs	r6, #0
 8007178:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800717c:	f1b9 0901 	subs.w	r9, r9, #1
 8007180:	d505      	bpl.n	800718e <_fwalk_sglue+0x22>
 8007182:	6824      	ldr	r4, [r4, #0]
 8007184:	2c00      	cmp	r4, #0
 8007186:	d1f7      	bne.n	8007178 <_fwalk_sglue+0xc>
 8007188:	4630      	mov	r0, r6
 800718a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800718e:	89ab      	ldrh	r3, [r5, #12]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d907      	bls.n	80071a4 <_fwalk_sglue+0x38>
 8007194:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007198:	3301      	adds	r3, #1
 800719a:	d003      	beq.n	80071a4 <_fwalk_sglue+0x38>
 800719c:	4629      	mov	r1, r5
 800719e:	4638      	mov	r0, r7
 80071a0:	47c0      	blx	r8
 80071a2:	4306      	orrs	r6, r0
 80071a4:	3568      	adds	r5, #104	; 0x68
 80071a6:	e7e9      	b.n	800717c <_fwalk_sglue+0x10>

080071a8 <iprintf>:
 80071a8:	b40f      	push	{r0, r1, r2, r3}
 80071aa:	b507      	push	{r0, r1, r2, lr}
 80071ac:	4906      	ldr	r1, [pc, #24]	; (80071c8 <iprintf+0x20>)
 80071ae:	ab04      	add	r3, sp, #16
 80071b0:	6808      	ldr	r0, [r1, #0]
 80071b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b6:	6881      	ldr	r1, [r0, #8]
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	f001 fcd1 	bl	8008b60 <_vfiprintf_r>
 80071be:	b003      	add	sp, #12
 80071c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c4:	b004      	add	sp, #16
 80071c6:	4770      	bx	lr
 80071c8:	2000006c 	.word	0x2000006c

080071cc <_puts_r>:
 80071cc:	6a03      	ldr	r3, [r0, #32]
 80071ce:	b570      	push	{r4, r5, r6, lr}
 80071d0:	4605      	mov	r5, r0
 80071d2:	460e      	mov	r6, r1
 80071d4:	6884      	ldr	r4, [r0, #8]
 80071d6:	b90b      	cbnz	r3, 80071dc <_puts_r+0x10>
 80071d8:	f7ff ffb0 	bl	800713c <__sinit>
 80071dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071de:	07db      	lsls	r3, r3, #31
 80071e0:	d405      	bmi.n	80071ee <_puts_r+0x22>
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	0598      	lsls	r0, r3, #22
 80071e6:	d402      	bmi.n	80071ee <_puts_r+0x22>
 80071e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ea:	f000 f9a0 	bl	800752e <__retarget_lock_acquire_recursive>
 80071ee:	89a3      	ldrh	r3, [r4, #12]
 80071f0:	0719      	lsls	r1, r3, #28
 80071f2:	d513      	bpl.n	800721c <_puts_r+0x50>
 80071f4:	6923      	ldr	r3, [r4, #16]
 80071f6:	b18b      	cbz	r3, 800721c <_puts_r+0x50>
 80071f8:	3e01      	subs	r6, #1
 80071fa:	68a3      	ldr	r3, [r4, #8]
 80071fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007200:	3b01      	subs	r3, #1
 8007202:	60a3      	str	r3, [r4, #8]
 8007204:	b9e9      	cbnz	r1, 8007242 <_puts_r+0x76>
 8007206:	2b00      	cmp	r3, #0
 8007208:	da2e      	bge.n	8007268 <_puts_r+0x9c>
 800720a:	4622      	mov	r2, r4
 800720c:	210a      	movs	r1, #10
 800720e:	4628      	mov	r0, r5
 8007210:	f000 f87b 	bl	800730a <__swbuf_r>
 8007214:	3001      	adds	r0, #1
 8007216:	d007      	beq.n	8007228 <_puts_r+0x5c>
 8007218:	250a      	movs	r5, #10
 800721a:	e007      	b.n	800722c <_puts_r+0x60>
 800721c:	4621      	mov	r1, r4
 800721e:	4628      	mov	r0, r5
 8007220:	f000 f8b0 	bl	8007384 <__swsetup_r>
 8007224:	2800      	cmp	r0, #0
 8007226:	d0e7      	beq.n	80071f8 <_puts_r+0x2c>
 8007228:	f04f 35ff 	mov.w	r5, #4294967295
 800722c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800722e:	07da      	lsls	r2, r3, #31
 8007230:	d405      	bmi.n	800723e <_puts_r+0x72>
 8007232:	89a3      	ldrh	r3, [r4, #12]
 8007234:	059b      	lsls	r3, r3, #22
 8007236:	d402      	bmi.n	800723e <_puts_r+0x72>
 8007238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800723a:	f000 f979 	bl	8007530 <__retarget_lock_release_recursive>
 800723e:	4628      	mov	r0, r5
 8007240:	bd70      	pop	{r4, r5, r6, pc}
 8007242:	2b00      	cmp	r3, #0
 8007244:	da04      	bge.n	8007250 <_puts_r+0x84>
 8007246:	69a2      	ldr	r2, [r4, #24]
 8007248:	429a      	cmp	r2, r3
 800724a:	dc06      	bgt.n	800725a <_puts_r+0x8e>
 800724c:	290a      	cmp	r1, #10
 800724e:	d004      	beq.n	800725a <_puts_r+0x8e>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	6022      	str	r2, [r4, #0]
 8007256:	7019      	strb	r1, [r3, #0]
 8007258:	e7cf      	b.n	80071fa <_puts_r+0x2e>
 800725a:	4622      	mov	r2, r4
 800725c:	4628      	mov	r0, r5
 800725e:	f000 f854 	bl	800730a <__swbuf_r>
 8007262:	3001      	adds	r0, #1
 8007264:	d1c9      	bne.n	80071fa <_puts_r+0x2e>
 8007266:	e7df      	b.n	8007228 <_puts_r+0x5c>
 8007268:	250a      	movs	r5, #10
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	6022      	str	r2, [r4, #0]
 8007270:	701d      	strb	r5, [r3, #0]
 8007272:	e7db      	b.n	800722c <_puts_r+0x60>

08007274 <puts>:
 8007274:	4b02      	ldr	r3, [pc, #8]	; (8007280 <puts+0xc>)
 8007276:	4601      	mov	r1, r0
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	f7ff bfa7 	b.w	80071cc <_puts_r>
 800727e:	bf00      	nop
 8007280:	2000006c 	.word	0x2000006c

08007284 <__sread>:
 8007284:	b510      	push	{r4, lr}
 8007286:	460c      	mov	r4, r1
 8007288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728c:	f000 f900 	bl	8007490 <_read_r>
 8007290:	2800      	cmp	r0, #0
 8007292:	bfab      	itete	ge
 8007294:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007296:	89a3      	ldrhlt	r3, [r4, #12]
 8007298:	181b      	addge	r3, r3, r0
 800729a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800729e:	bfac      	ite	ge
 80072a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80072a2:	81a3      	strhlt	r3, [r4, #12]
 80072a4:	bd10      	pop	{r4, pc}

080072a6 <__swrite>:
 80072a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072aa:	461f      	mov	r7, r3
 80072ac:	898b      	ldrh	r3, [r1, #12]
 80072ae:	4605      	mov	r5, r0
 80072b0:	05db      	lsls	r3, r3, #23
 80072b2:	460c      	mov	r4, r1
 80072b4:	4616      	mov	r6, r2
 80072b6:	d505      	bpl.n	80072c4 <__swrite+0x1e>
 80072b8:	2302      	movs	r3, #2
 80072ba:	2200      	movs	r2, #0
 80072bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c0:	f000 f8d4 	bl	800746c <_lseek_r>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	4632      	mov	r2, r6
 80072c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072cc:	81a3      	strh	r3, [r4, #12]
 80072ce:	4628      	mov	r0, r5
 80072d0:	463b      	mov	r3, r7
 80072d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072da:	f000 b8eb 	b.w	80074b4 <_write_r>

080072de <__sseek>:
 80072de:	b510      	push	{r4, lr}
 80072e0:	460c      	mov	r4, r1
 80072e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e6:	f000 f8c1 	bl	800746c <_lseek_r>
 80072ea:	1c43      	adds	r3, r0, #1
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	bf15      	itete	ne
 80072f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80072f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072fa:	81a3      	strheq	r3, [r4, #12]
 80072fc:	bf18      	it	ne
 80072fe:	81a3      	strhne	r3, [r4, #12]
 8007300:	bd10      	pop	{r4, pc}

08007302 <__sclose>:
 8007302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007306:	f000 b8a1 	b.w	800744c <_close_r>

0800730a <__swbuf_r>:
 800730a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730c:	460e      	mov	r6, r1
 800730e:	4614      	mov	r4, r2
 8007310:	4605      	mov	r5, r0
 8007312:	b118      	cbz	r0, 800731c <__swbuf_r+0x12>
 8007314:	6a03      	ldr	r3, [r0, #32]
 8007316:	b90b      	cbnz	r3, 800731c <__swbuf_r+0x12>
 8007318:	f7ff ff10 	bl	800713c <__sinit>
 800731c:	69a3      	ldr	r3, [r4, #24]
 800731e:	60a3      	str	r3, [r4, #8]
 8007320:	89a3      	ldrh	r3, [r4, #12]
 8007322:	071a      	lsls	r2, r3, #28
 8007324:	d525      	bpl.n	8007372 <__swbuf_r+0x68>
 8007326:	6923      	ldr	r3, [r4, #16]
 8007328:	b31b      	cbz	r3, 8007372 <__swbuf_r+0x68>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	6922      	ldr	r2, [r4, #16]
 800732e:	b2f6      	uxtb	r6, r6
 8007330:	1a98      	subs	r0, r3, r2
 8007332:	6963      	ldr	r3, [r4, #20]
 8007334:	4637      	mov	r7, r6
 8007336:	4283      	cmp	r3, r0
 8007338:	dc04      	bgt.n	8007344 <__swbuf_r+0x3a>
 800733a:	4621      	mov	r1, r4
 800733c:	4628      	mov	r0, r5
 800733e:	f001 fdab 	bl	8008e98 <_fflush_r>
 8007342:	b9e0      	cbnz	r0, 800737e <__swbuf_r+0x74>
 8007344:	68a3      	ldr	r3, [r4, #8]
 8007346:	3b01      	subs	r3, #1
 8007348:	60a3      	str	r3, [r4, #8]
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	6022      	str	r2, [r4, #0]
 8007350:	701e      	strb	r6, [r3, #0]
 8007352:	6962      	ldr	r2, [r4, #20]
 8007354:	1c43      	adds	r3, r0, #1
 8007356:	429a      	cmp	r2, r3
 8007358:	d004      	beq.n	8007364 <__swbuf_r+0x5a>
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	07db      	lsls	r3, r3, #31
 800735e:	d506      	bpl.n	800736e <__swbuf_r+0x64>
 8007360:	2e0a      	cmp	r6, #10
 8007362:	d104      	bne.n	800736e <__swbuf_r+0x64>
 8007364:	4621      	mov	r1, r4
 8007366:	4628      	mov	r0, r5
 8007368:	f001 fd96 	bl	8008e98 <_fflush_r>
 800736c:	b938      	cbnz	r0, 800737e <__swbuf_r+0x74>
 800736e:	4638      	mov	r0, r7
 8007370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007372:	4621      	mov	r1, r4
 8007374:	4628      	mov	r0, r5
 8007376:	f000 f805 	bl	8007384 <__swsetup_r>
 800737a:	2800      	cmp	r0, #0
 800737c:	d0d5      	beq.n	800732a <__swbuf_r+0x20>
 800737e:	f04f 37ff 	mov.w	r7, #4294967295
 8007382:	e7f4      	b.n	800736e <__swbuf_r+0x64>

08007384 <__swsetup_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4b2a      	ldr	r3, [pc, #168]	; (8007430 <__swsetup_r+0xac>)
 8007388:	4605      	mov	r5, r0
 800738a:	6818      	ldr	r0, [r3, #0]
 800738c:	460c      	mov	r4, r1
 800738e:	b118      	cbz	r0, 8007398 <__swsetup_r+0x14>
 8007390:	6a03      	ldr	r3, [r0, #32]
 8007392:	b90b      	cbnz	r3, 8007398 <__swsetup_r+0x14>
 8007394:	f7ff fed2 	bl	800713c <__sinit>
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800739e:	0718      	lsls	r0, r3, #28
 80073a0:	d422      	bmi.n	80073e8 <__swsetup_r+0x64>
 80073a2:	06d9      	lsls	r1, r3, #27
 80073a4:	d407      	bmi.n	80073b6 <__swsetup_r+0x32>
 80073a6:	2309      	movs	r3, #9
 80073a8:	602b      	str	r3, [r5, #0]
 80073aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073ae:	f04f 30ff 	mov.w	r0, #4294967295
 80073b2:	81a3      	strh	r3, [r4, #12]
 80073b4:	e034      	b.n	8007420 <__swsetup_r+0x9c>
 80073b6:	0758      	lsls	r0, r3, #29
 80073b8:	d512      	bpl.n	80073e0 <__swsetup_r+0x5c>
 80073ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073bc:	b141      	cbz	r1, 80073d0 <__swsetup_r+0x4c>
 80073be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073c2:	4299      	cmp	r1, r3
 80073c4:	d002      	beq.n	80073cc <__swsetup_r+0x48>
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 ff2e 	bl	8008228 <_free_r>
 80073cc:	2300      	movs	r3, #0
 80073ce:	6363      	str	r3, [r4, #52]	; 0x34
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073d6:	81a3      	strh	r3, [r4, #12]
 80073d8:	2300      	movs	r3, #0
 80073da:	6063      	str	r3, [r4, #4]
 80073dc:	6923      	ldr	r3, [r4, #16]
 80073de:	6023      	str	r3, [r4, #0]
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	f043 0308 	orr.w	r3, r3, #8
 80073e6:	81a3      	strh	r3, [r4, #12]
 80073e8:	6923      	ldr	r3, [r4, #16]
 80073ea:	b94b      	cbnz	r3, 8007400 <__swsetup_r+0x7c>
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f6:	d003      	beq.n	8007400 <__swsetup_r+0x7c>
 80073f8:	4621      	mov	r1, r4
 80073fa:	4628      	mov	r0, r5
 80073fc:	f001 fd99 	bl	8008f32 <__smakebuf_r>
 8007400:	89a0      	ldrh	r0, [r4, #12]
 8007402:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007406:	f010 0301 	ands.w	r3, r0, #1
 800740a:	d00a      	beq.n	8007422 <__swsetup_r+0x9e>
 800740c:	2300      	movs	r3, #0
 800740e:	60a3      	str	r3, [r4, #8]
 8007410:	6963      	ldr	r3, [r4, #20]
 8007412:	425b      	negs	r3, r3
 8007414:	61a3      	str	r3, [r4, #24]
 8007416:	6923      	ldr	r3, [r4, #16]
 8007418:	b943      	cbnz	r3, 800742c <__swsetup_r+0xa8>
 800741a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800741e:	d1c4      	bne.n	80073aa <__swsetup_r+0x26>
 8007420:	bd38      	pop	{r3, r4, r5, pc}
 8007422:	0781      	lsls	r1, r0, #30
 8007424:	bf58      	it	pl
 8007426:	6963      	ldrpl	r3, [r4, #20]
 8007428:	60a3      	str	r3, [r4, #8]
 800742a:	e7f4      	b.n	8007416 <__swsetup_r+0x92>
 800742c:	2000      	movs	r0, #0
 800742e:	e7f7      	b.n	8007420 <__swsetup_r+0x9c>
 8007430:	2000006c 	.word	0x2000006c

08007434 <memset>:
 8007434:	4603      	mov	r3, r0
 8007436:	4402      	add	r2, r0
 8007438:	4293      	cmp	r3, r2
 800743a:	d100      	bne.n	800743e <memset+0xa>
 800743c:	4770      	bx	lr
 800743e:	f803 1b01 	strb.w	r1, [r3], #1
 8007442:	e7f9      	b.n	8007438 <memset+0x4>

08007444 <_localeconv_r>:
 8007444:	4800      	ldr	r0, [pc, #0]	; (8007448 <_localeconv_r+0x4>)
 8007446:	4770      	bx	lr
 8007448:	20000160 	.word	0x20000160

0800744c <_close_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	2300      	movs	r3, #0
 8007450:	4d05      	ldr	r5, [pc, #20]	; (8007468 <_close_r+0x1c>)
 8007452:	4604      	mov	r4, r0
 8007454:	4608      	mov	r0, r1
 8007456:	602b      	str	r3, [r5, #0]
 8007458:	f7fb fef8 	bl	800324c <_close>
 800745c:	1c43      	adds	r3, r0, #1
 800745e:	d102      	bne.n	8007466 <_close_r+0x1a>
 8007460:	682b      	ldr	r3, [r5, #0]
 8007462:	b103      	cbz	r3, 8007466 <_close_r+0x1a>
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	bd38      	pop	{r3, r4, r5, pc}
 8007468:	200004b4 	.word	0x200004b4

0800746c <_lseek_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4604      	mov	r4, r0
 8007470:	4608      	mov	r0, r1
 8007472:	4611      	mov	r1, r2
 8007474:	2200      	movs	r2, #0
 8007476:	4d05      	ldr	r5, [pc, #20]	; (800748c <_lseek_r+0x20>)
 8007478:	602a      	str	r2, [r5, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	f7fb ff0a 	bl	8003294 <_lseek>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <_lseek_r+0x1e>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	b103      	cbz	r3, 800748a <_lseek_r+0x1e>
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	200004b4 	.word	0x200004b4

08007490 <_read_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4604      	mov	r4, r0
 8007494:	4608      	mov	r0, r1
 8007496:	4611      	mov	r1, r2
 8007498:	2200      	movs	r2, #0
 800749a:	4d05      	ldr	r5, [pc, #20]	; (80074b0 <_read_r+0x20>)
 800749c:	602a      	str	r2, [r5, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	f7fb feb7 	bl	8003212 <_read>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_read_r+0x1e>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_read_r+0x1e>
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	200004b4 	.word	0x200004b4

080074b4 <_write_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4604      	mov	r4, r0
 80074b8:	4608      	mov	r0, r1
 80074ba:	4611      	mov	r1, r2
 80074bc:	2200      	movs	r2, #0
 80074be:	4d05      	ldr	r5, [pc, #20]	; (80074d4 <_write_r+0x20>)
 80074c0:	602a      	str	r2, [r5, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	f7fa f956 	bl	8001774 <_write>
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	d102      	bne.n	80074d2 <_write_r+0x1e>
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	b103      	cbz	r3, 80074d2 <_write_r+0x1e>
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	200004b4 	.word	0x200004b4

080074d8 <__errno>:
 80074d8:	4b01      	ldr	r3, [pc, #4]	; (80074e0 <__errno+0x8>)
 80074da:	6818      	ldr	r0, [r3, #0]
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	2000006c 	.word	0x2000006c

080074e4 <__libc_init_array>:
 80074e4:	b570      	push	{r4, r5, r6, lr}
 80074e6:	2600      	movs	r6, #0
 80074e8:	4d0c      	ldr	r5, [pc, #48]	; (800751c <__libc_init_array+0x38>)
 80074ea:	4c0d      	ldr	r4, [pc, #52]	; (8007520 <__libc_init_array+0x3c>)
 80074ec:	1b64      	subs	r4, r4, r5
 80074ee:	10a4      	asrs	r4, r4, #2
 80074f0:	42a6      	cmp	r6, r4
 80074f2:	d109      	bne.n	8007508 <__libc_init_array+0x24>
 80074f4:	f002 fcf0 	bl	8009ed8 <_init>
 80074f8:	2600      	movs	r6, #0
 80074fa:	4d0a      	ldr	r5, [pc, #40]	; (8007524 <__libc_init_array+0x40>)
 80074fc:	4c0a      	ldr	r4, [pc, #40]	; (8007528 <__libc_init_array+0x44>)
 80074fe:	1b64      	subs	r4, r4, r5
 8007500:	10a4      	asrs	r4, r4, #2
 8007502:	42a6      	cmp	r6, r4
 8007504:	d105      	bne.n	8007512 <__libc_init_array+0x2e>
 8007506:	bd70      	pop	{r4, r5, r6, pc}
 8007508:	f855 3b04 	ldr.w	r3, [r5], #4
 800750c:	4798      	blx	r3
 800750e:	3601      	adds	r6, #1
 8007510:	e7ee      	b.n	80074f0 <__libc_init_array+0xc>
 8007512:	f855 3b04 	ldr.w	r3, [r5], #4
 8007516:	4798      	blx	r3
 8007518:	3601      	adds	r6, #1
 800751a:	e7f2      	b.n	8007502 <__libc_init_array+0x1e>
 800751c:	0800aed4 	.word	0x0800aed4
 8007520:	0800aed4 	.word	0x0800aed4
 8007524:	0800aed4 	.word	0x0800aed4
 8007528:	0800aed8 	.word	0x0800aed8

0800752c <__retarget_lock_init_recursive>:
 800752c:	4770      	bx	lr

0800752e <__retarget_lock_acquire_recursive>:
 800752e:	4770      	bx	lr

08007530 <__retarget_lock_release_recursive>:
 8007530:	4770      	bx	lr

08007532 <memchr>:
 8007532:	4603      	mov	r3, r0
 8007534:	b510      	push	{r4, lr}
 8007536:	b2c9      	uxtb	r1, r1
 8007538:	4402      	add	r2, r0
 800753a:	4293      	cmp	r3, r2
 800753c:	4618      	mov	r0, r3
 800753e:	d101      	bne.n	8007544 <memchr+0x12>
 8007540:	2000      	movs	r0, #0
 8007542:	e003      	b.n	800754c <memchr+0x1a>
 8007544:	7804      	ldrb	r4, [r0, #0]
 8007546:	3301      	adds	r3, #1
 8007548:	428c      	cmp	r4, r1
 800754a:	d1f6      	bne.n	800753a <memchr+0x8>
 800754c:	bd10      	pop	{r4, pc}

0800754e <quorem>:
 800754e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007552:	6903      	ldr	r3, [r0, #16]
 8007554:	690c      	ldr	r4, [r1, #16]
 8007556:	4607      	mov	r7, r0
 8007558:	42a3      	cmp	r3, r4
 800755a:	db7f      	blt.n	800765c <quorem+0x10e>
 800755c:	3c01      	subs	r4, #1
 800755e:	f100 0514 	add.w	r5, r0, #20
 8007562:	f101 0814 	add.w	r8, r1, #20
 8007566:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800756a:	9301      	str	r3, [sp, #4]
 800756c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007570:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007574:	3301      	adds	r3, #1
 8007576:	429a      	cmp	r2, r3
 8007578:	fbb2 f6f3 	udiv	r6, r2, r3
 800757c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007580:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007584:	d331      	bcc.n	80075ea <quorem+0x9c>
 8007586:	f04f 0e00 	mov.w	lr, #0
 800758a:	4640      	mov	r0, r8
 800758c:	46ac      	mov	ip, r5
 800758e:	46f2      	mov	sl, lr
 8007590:	f850 2b04 	ldr.w	r2, [r0], #4
 8007594:	b293      	uxth	r3, r2
 8007596:	fb06 e303 	mla	r3, r6, r3, lr
 800759a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800759e:	0c1a      	lsrs	r2, r3, #16
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	fb06 220e 	mla	r2, r6, lr, r2
 80075a6:	ebaa 0303 	sub.w	r3, sl, r3
 80075aa:	f8dc a000 	ldr.w	sl, [ip]
 80075ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075b2:	fa1f fa8a 	uxth.w	sl, sl
 80075b6:	4453      	add	r3, sl
 80075b8:	f8dc a000 	ldr.w	sl, [ip]
 80075bc:	b292      	uxth	r2, r2
 80075be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80075c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075cc:	4581      	cmp	r9, r0
 80075ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80075d2:	f84c 3b04 	str.w	r3, [ip], #4
 80075d6:	d2db      	bcs.n	8007590 <quorem+0x42>
 80075d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80075dc:	b92b      	cbnz	r3, 80075ea <quorem+0x9c>
 80075de:	9b01      	ldr	r3, [sp, #4]
 80075e0:	3b04      	subs	r3, #4
 80075e2:	429d      	cmp	r5, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	d32d      	bcc.n	8007644 <quorem+0xf6>
 80075e8:	613c      	str	r4, [r7, #16]
 80075ea:	4638      	mov	r0, r7
 80075ec:	f001 f992 	bl	8008914 <__mcmp>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	db23      	blt.n	800763c <quorem+0xee>
 80075f4:	4629      	mov	r1, r5
 80075f6:	2000      	movs	r0, #0
 80075f8:	3601      	adds	r6, #1
 80075fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80075fe:	f8d1 c000 	ldr.w	ip, [r1]
 8007602:	b293      	uxth	r3, r2
 8007604:	1ac3      	subs	r3, r0, r3
 8007606:	0c12      	lsrs	r2, r2, #16
 8007608:	fa1f f08c 	uxth.w	r0, ip
 800760c:	4403      	add	r3, r0
 800760e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007612:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007616:	b29b      	uxth	r3, r3
 8007618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800761c:	45c1      	cmp	r9, r8
 800761e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007622:	f841 3b04 	str.w	r3, [r1], #4
 8007626:	d2e8      	bcs.n	80075fa <quorem+0xac>
 8007628:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800762c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007630:	b922      	cbnz	r2, 800763c <quorem+0xee>
 8007632:	3b04      	subs	r3, #4
 8007634:	429d      	cmp	r5, r3
 8007636:	461a      	mov	r2, r3
 8007638:	d30a      	bcc.n	8007650 <quorem+0x102>
 800763a:	613c      	str	r4, [r7, #16]
 800763c:	4630      	mov	r0, r6
 800763e:	b003      	add	sp, #12
 8007640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007644:	6812      	ldr	r2, [r2, #0]
 8007646:	3b04      	subs	r3, #4
 8007648:	2a00      	cmp	r2, #0
 800764a:	d1cd      	bne.n	80075e8 <quorem+0x9a>
 800764c:	3c01      	subs	r4, #1
 800764e:	e7c8      	b.n	80075e2 <quorem+0x94>
 8007650:	6812      	ldr	r2, [r2, #0]
 8007652:	3b04      	subs	r3, #4
 8007654:	2a00      	cmp	r2, #0
 8007656:	d1f0      	bne.n	800763a <quorem+0xec>
 8007658:	3c01      	subs	r4, #1
 800765a:	e7eb      	b.n	8007634 <quorem+0xe6>
 800765c:	2000      	movs	r0, #0
 800765e:	e7ee      	b.n	800763e <quorem+0xf0>

08007660 <_dtoa_r>:
 8007660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007664:	4616      	mov	r6, r2
 8007666:	461f      	mov	r7, r3
 8007668:	69c4      	ldr	r4, [r0, #28]
 800766a:	b099      	sub	sp, #100	; 0x64
 800766c:	4605      	mov	r5, r0
 800766e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007672:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007676:	b974      	cbnz	r4, 8007696 <_dtoa_r+0x36>
 8007678:	2010      	movs	r0, #16
 800767a:	f000 fe1d 	bl	80082b8 <malloc>
 800767e:	4602      	mov	r2, r0
 8007680:	61e8      	str	r0, [r5, #28]
 8007682:	b920      	cbnz	r0, 800768e <_dtoa_r+0x2e>
 8007684:	21ef      	movs	r1, #239	; 0xef
 8007686:	4bac      	ldr	r3, [pc, #688]	; (8007938 <_dtoa_r+0x2d8>)
 8007688:	48ac      	ldr	r0, [pc, #688]	; (800793c <_dtoa_r+0x2dc>)
 800768a:	f001 fccf 	bl	800902c <__assert_func>
 800768e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007692:	6004      	str	r4, [r0, #0]
 8007694:	60c4      	str	r4, [r0, #12]
 8007696:	69eb      	ldr	r3, [r5, #28]
 8007698:	6819      	ldr	r1, [r3, #0]
 800769a:	b151      	cbz	r1, 80076b2 <_dtoa_r+0x52>
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	2301      	movs	r3, #1
 80076a0:	4093      	lsls	r3, r2
 80076a2:	604a      	str	r2, [r1, #4]
 80076a4:	608b      	str	r3, [r1, #8]
 80076a6:	4628      	mov	r0, r5
 80076a8:	f000 fefa 	bl	80084a0 <_Bfree>
 80076ac:	2200      	movs	r2, #0
 80076ae:	69eb      	ldr	r3, [r5, #28]
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	1e3b      	subs	r3, r7, #0
 80076b4:	bfaf      	iteee	ge
 80076b6:	2300      	movge	r3, #0
 80076b8:	2201      	movlt	r2, #1
 80076ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076be:	9305      	strlt	r3, [sp, #20]
 80076c0:	bfa8      	it	ge
 80076c2:	f8c8 3000 	strge.w	r3, [r8]
 80076c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80076ca:	4b9d      	ldr	r3, [pc, #628]	; (8007940 <_dtoa_r+0x2e0>)
 80076cc:	bfb8      	it	lt
 80076ce:	f8c8 2000 	strlt.w	r2, [r8]
 80076d2:	ea33 0309 	bics.w	r3, r3, r9
 80076d6:	d119      	bne.n	800770c <_dtoa_r+0xac>
 80076d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80076dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076e4:	4333      	orrs	r3, r6
 80076e6:	f000 8589 	beq.w	80081fc <_dtoa_r+0xb9c>
 80076ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076ec:	b953      	cbnz	r3, 8007704 <_dtoa_r+0xa4>
 80076ee:	4b95      	ldr	r3, [pc, #596]	; (8007944 <_dtoa_r+0x2e4>)
 80076f0:	e023      	b.n	800773a <_dtoa_r+0xda>
 80076f2:	4b95      	ldr	r3, [pc, #596]	; (8007948 <_dtoa_r+0x2e8>)
 80076f4:	9303      	str	r3, [sp, #12]
 80076f6:	3308      	adds	r3, #8
 80076f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	9803      	ldr	r0, [sp, #12]
 80076fe:	b019      	add	sp, #100	; 0x64
 8007700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007704:	4b8f      	ldr	r3, [pc, #572]	; (8007944 <_dtoa_r+0x2e4>)
 8007706:	9303      	str	r3, [sp, #12]
 8007708:	3303      	adds	r3, #3
 800770a:	e7f5      	b.n	80076f8 <_dtoa_r+0x98>
 800770c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007710:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007714:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007718:	2200      	movs	r2, #0
 800771a:	2300      	movs	r3, #0
 800771c:	f7f9 f9b0 	bl	8000a80 <__aeabi_dcmpeq>
 8007720:	4680      	mov	r8, r0
 8007722:	b160      	cbz	r0, 800773e <_dtoa_r+0xde>
 8007724:	2301      	movs	r3, #1
 8007726:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007728:	6013      	str	r3, [r2, #0]
 800772a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 8562 	beq.w	80081f6 <_dtoa_r+0xb96>
 8007732:	4b86      	ldr	r3, [pc, #536]	; (800794c <_dtoa_r+0x2ec>)
 8007734:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	3b01      	subs	r3, #1
 800773a:	9303      	str	r3, [sp, #12]
 800773c:	e7de      	b.n	80076fc <_dtoa_r+0x9c>
 800773e:	ab16      	add	r3, sp, #88	; 0x58
 8007740:	9301      	str	r3, [sp, #4]
 8007742:	ab17      	add	r3, sp, #92	; 0x5c
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	4628      	mov	r0, r5
 8007748:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800774c:	f001 f98a 	bl	8008a64 <__d2b>
 8007750:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007754:	4682      	mov	sl, r0
 8007756:	2c00      	cmp	r4, #0
 8007758:	d07e      	beq.n	8007858 <_dtoa_r+0x1f8>
 800775a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800775e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007760:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007768:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800776c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007770:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007774:	4619      	mov	r1, r3
 8007776:	2200      	movs	r2, #0
 8007778:	4b75      	ldr	r3, [pc, #468]	; (8007950 <_dtoa_r+0x2f0>)
 800777a:	f7f8 fd61 	bl	8000240 <__aeabi_dsub>
 800777e:	a368      	add	r3, pc, #416	; (adr r3, 8007920 <_dtoa_r+0x2c0>)
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	f7f8 ff14 	bl	80005b0 <__aeabi_dmul>
 8007788:	a367      	add	r3, pc, #412	; (adr r3, 8007928 <_dtoa_r+0x2c8>)
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	f7f8 fd59 	bl	8000244 <__adddf3>
 8007792:	4606      	mov	r6, r0
 8007794:	4620      	mov	r0, r4
 8007796:	460f      	mov	r7, r1
 8007798:	f7f8 fea0 	bl	80004dc <__aeabi_i2d>
 800779c:	a364      	add	r3, pc, #400	; (adr r3, 8007930 <_dtoa_r+0x2d0>)
 800779e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a2:	f7f8 ff05 	bl	80005b0 <__aeabi_dmul>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4630      	mov	r0, r6
 80077ac:	4639      	mov	r1, r7
 80077ae:	f7f8 fd49 	bl	8000244 <__adddf3>
 80077b2:	4606      	mov	r6, r0
 80077b4:	460f      	mov	r7, r1
 80077b6:	f7f9 f9ab 	bl	8000b10 <__aeabi_d2iz>
 80077ba:	2200      	movs	r2, #0
 80077bc:	4683      	mov	fp, r0
 80077be:	2300      	movs	r3, #0
 80077c0:	4630      	mov	r0, r6
 80077c2:	4639      	mov	r1, r7
 80077c4:	f7f9 f966 	bl	8000a94 <__aeabi_dcmplt>
 80077c8:	b148      	cbz	r0, 80077de <_dtoa_r+0x17e>
 80077ca:	4658      	mov	r0, fp
 80077cc:	f7f8 fe86 	bl	80004dc <__aeabi_i2d>
 80077d0:	4632      	mov	r2, r6
 80077d2:	463b      	mov	r3, r7
 80077d4:	f7f9 f954 	bl	8000a80 <__aeabi_dcmpeq>
 80077d8:	b908      	cbnz	r0, 80077de <_dtoa_r+0x17e>
 80077da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077de:	f1bb 0f16 	cmp.w	fp, #22
 80077e2:	d857      	bhi.n	8007894 <_dtoa_r+0x234>
 80077e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077e8:	4b5a      	ldr	r3, [pc, #360]	; (8007954 <_dtoa_r+0x2f4>)
 80077ea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	f7f9 f94f 	bl	8000a94 <__aeabi_dcmplt>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d04e      	beq.n	8007898 <_dtoa_r+0x238>
 80077fa:	2300      	movs	r3, #0
 80077fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007800:	930f      	str	r3, [sp, #60]	; 0x3c
 8007802:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007804:	1b1b      	subs	r3, r3, r4
 8007806:	1e5a      	subs	r2, r3, #1
 8007808:	bf46      	itte	mi
 800780a:	f1c3 0901 	rsbmi	r9, r3, #1
 800780e:	2300      	movmi	r3, #0
 8007810:	f04f 0900 	movpl.w	r9, #0
 8007814:	9209      	str	r2, [sp, #36]	; 0x24
 8007816:	bf48      	it	mi
 8007818:	9309      	strmi	r3, [sp, #36]	; 0x24
 800781a:	f1bb 0f00 	cmp.w	fp, #0
 800781e:	db3d      	blt.n	800789c <_dtoa_r+0x23c>
 8007820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007822:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007826:	445b      	add	r3, fp
 8007828:	9309      	str	r3, [sp, #36]	; 0x24
 800782a:	2300      	movs	r3, #0
 800782c:	930a      	str	r3, [sp, #40]	; 0x28
 800782e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007830:	2b09      	cmp	r3, #9
 8007832:	d867      	bhi.n	8007904 <_dtoa_r+0x2a4>
 8007834:	2b05      	cmp	r3, #5
 8007836:	bfc4      	itt	gt
 8007838:	3b04      	subgt	r3, #4
 800783a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800783c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800783e:	bfc8      	it	gt
 8007840:	2400      	movgt	r4, #0
 8007842:	f1a3 0302 	sub.w	r3, r3, #2
 8007846:	bfd8      	it	le
 8007848:	2401      	movle	r4, #1
 800784a:	2b03      	cmp	r3, #3
 800784c:	f200 8086 	bhi.w	800795c <_dtoa_r+0x2fc>
 8007850:	e8df f003 	tbb	[pc, r3]
 8007854:	5637392c 	.word	0x5637392c
 8007858:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800785c:	441c      	add	r4, r3
 800785e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007862:	2b20      	cmp	r3, #32
 8007864:	bfc1      	itttt	gt
 8007866:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800786a:	fa09 f903 	lslgt.w	r9, r9, r3
 800786e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007872:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007876:	bfd6      	itet	le
 8007878:	f1c3 0320 	rsble	r3, r3, #32
 800787c:	ea49 0003 	orrgt.w	r0, r9, r3
 8007880:	fa06 f003 	lslle.w	r0, r6, r3
 8007884:	f7f8 fe1a 	bl	80004bc <__aeabi_ui2d>
 8007888:	2201      	movs	r2, #1
 800788a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800788e:	3c01      	subs	r4, #1
 8007890:	9213      	str	r2, [sp, #76]	; 0x4c
 8007892:	e76f      	b.n	8007774 <_dtoa_r+0x114>
 8007894:	2301      	movs	r3, #1
 8007896:	e7b3      	b.n	8007800 <_dtoa_r+0x1a0>
 8007898:	900f      	str	r0, [sp, #60]	; 0x3c
 800789a:	e7b2      	b.n	8007802 <_dtoa_r+0x1a2>
 800789c:	f1cb 0300 	rsb	r3, fp, #0
 80078a0:	930a      	str	r3, [sp, #40]	; 0x28
 80078a2:	2300      	movs	r3, #0
 80078a4:	eba9 090b 	sub.w	r9, r9, fp
 80078a8:	930e      	str	r3, [sp, #56]	; 0x38
 80078aa:	e7c0      	b.n	800782e <_dtoa_r+0x1ce>
 80078ac:	2300      	movs	r3, #0
 80078ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80078b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	dc55      	bgt.n	8007962 <_dtoa_r+0x302>
 80078b6:	2301      	movs	r3, #1
 80078b8:	461a      	mov	r2, r3
 80078ba:	9306      	str	r3, [sp, #24]
 80078bc:	9308      	str	r3, [sp, #32]
 80078be:	9223      	str	r2, [sp, #140]	; 0x8c
 80078c0:	e00b      	b.n	80078da <_dtoa_r+0x27a>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e7f3      	b.n	80078ae <_dtoa_r+0x24e>
 80078c6:	2300      	movs	r3, #0
 80078c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80078ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80078cc:	445b      	add	r3, fp
 80078ce:	9306      	str	r3, [sp, #24]
 80078d0:	3301      	adds	r3, #1
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	9308      	str	r3, [sp, #32]
 80078d6:	bfb8      	it	lt
 80078d8:	2301      	movlt	r3, #1
 80078da:	2100      	movs	r1, #0
 80078dc:	2204      	movs	r2, #4
 80078de:	69e8      	ldr	r0, [r5, #28]
 80078e0:	f102 0614 	add.w	r6, r2, #20
 80078e4:	429e      	cmp	r6, r3
 80078e6:	d940      	bls.n	800796a <_dtoa_r+0x30a>
 80078e8:	6041      	str	r1, [r0, #4]
 80078ea:	4628      	mov	r0, r5
 80078ec:	f000 fd98 	bl	8008420 <_Balloc>
 80078f0:	9003      	str	r0, [sp, #12]
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d13c      	bne.n	8007970 <_dtoa_r+0x310>
 80078f6:	4602      	mov	r2, r0
 80078f8:	f240 11af 	movw	r1, #431	; 0x1af
 80078fc:	4b16      	ldr	r3, [pc, #88]	; (8007958 <_dtoa_r+0x2f8>)
 80078fe:	e6c3      	b.n	8007688 <_dtoa_r+0x28>
 8007900:	2301      	movs	r3, #1
 8007902:	e7e1      	b.n	80078c8 <_dtoa_r+0x268>
 8007904:	2401      	movs	r4, #1
 8007906:	2300      	movs	r3, #0
 8007908:	940b      	str	r4, [sp, #44]	; 0x2c
 800790a:	9322      	str	r3, [sp, #136]	; 0x88
 800790c:	f04f 33ff 	mov.w	r3, #4294967295
 8007910:	2200      	movs	r2, #0
 8007912:	9306      	str	r3, [sp, #24]
 8007914:	9308      	str	r3, [sp, #32]
 8007916:	2312      	movs	r3, #18
 8007918:	e7d1      	b.n	80078be <_dtoa_r+0x25e>
 800791a:	bf00      	nop
 800791c:	f3af 8000 	nop.w
 8007920:	636f4361 	.word	0x636f4361
 8007924:	3fd287a7 	.word	0x3fd287a7
 8007928:	8b60c8b3 	.word	0x8b60c8b3
 800792c:	3fc68a28 	.word	0x3fc68a28
 8007930:	509f79fb 	.word	0x509f79fb
 8007934:	3fd34413 	.word	0x3fd34413
 8007938:	0800a7cb 	.word	0x0800a7cb
 800793c:	0800a7e2 	.word	0x0800a7e2
 8007940:	7ff00000 	.word	0x7ff00000
 8007944:	0800a7c7 	.word	0x0800a7c7
 8007948:	0800a7be 	.word	0x0800a7be
 800794c:	0800a79b 	.word	0x0800a79b
 8007950:	3ff80000 	.word	0x3ff80000
 8007954:	0800a8d0 	.word	0x0800a8d0
 8007958:	0800a83a 	.word	0x0800a83a
 800795c:	2301      	movs	r3, #1
 800795e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007960:	e7d4      	b.n	800790c <_dtoa_r+0x2ac>
 8007962:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007964:	9306      	str	r3, [sp, #24]
 8007966:	9308      	str	r3, [sp, #32]
 8007968:	e7b7      	b.n	80078da <_dtoa_r+0x27a>
 800796a:	3101      	adds	r1, #1
 800796c:	0052      	lsls	r2, r2, #1
 800796e:	e7b7      	b.n	80078e0 <_dtoa_r+0x280>
 8007970:	69eb      	ldr	r3, [r5, #28]
 8007972:	9a03      	ldr	r2, [sp, #12]
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	9b08      	ldr	r3, [sp, #32]
 8007978:	2b0e      	cmp	r3, #14
 800797a:	f200 80a8 	bhi.w	8007ace <_dtoa_r+0x46e>
 800797e:	2c00      	cmp	r4, #0
 8007980:	f000 80a5 	beq.w	8007ace <_dtoa_r+0x46e>
 8007984:	f1bb 0f00 	cmp.w	fp, #0
 8007988:	dd34      	ble.n	80079f4 <_dtoa_r+0x394>
 800798a:	4b9a      	ldr	r3, [pc, #616]	; (8007bf4 <_dtoa_r+0x594>)
 800798c:	f00b 020f 	and.w	r2, fp, #15
 8007990:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007994:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007998:	e9d3 3400 	ldrd	r3, r4, [r3]
 800799c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80079a0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80079a4:	d016      	beq.n	80079d4 <_dtoa_r+0x374>
 80079a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079aa:	4b93      	ldr	r3, [pc, #588]	; (8007bf8 <_dtoa_r+0x598>)
 80079ac:	2703      	movs	r7, #3
 80079ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079b2:	f7f8 ff27 	bl	8000804 <__aeabi_ddiv>
 80079b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079ba:	f004 040f 	and.w	r4, r4, #15
 80079be:	4e8e      	ldr	r6, [pc, #568]	; (8007bf8 <_dtoa_r+0x598>)
 80079c0:	b954      	cbnz	r4, 80079d8 <_dtoa_r+0x378>
 80079c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079ca:	f7f8 ff1b 	bl	8000804 <__aeabi_ddiv>
 80079ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079d2:	e029      	b.n	8007a28 <_dtoa_r+0x3c8>
 80079d4:	2702      	movs	r7, #2
 80079d6:	e7f2      	b.n	80079be <_dtoa_r+0x35e>
 80079d8:	07e1      	lsls	r1, r4, #31
 80079da:	d508      	bpl.n	80079ee <_dtoa_r+0x38e>
 80079dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80079e4:	f7f8 fde4 	bl	80005b0 <__aeabi_dmul>
 80079e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079ec:	3701      	adds	r7, #1
 80079ee:	1064      	asrs	r4, r4, #1
 80079f0:	3608      	adds	r6, #8
 80079f2:	e7e5      	b.n	80079c0 <_dtoa_r+0x360>
 80079f4:	f000 80a5 	beq.w	8007b42 <_dtoa_r+0x4e2>
 80079f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079fc:	f1cb 0400 	rsb	r4, fp, #0
 8007a00:	4b7c      	ldr	r3, [pc, #496]	; (8007bf4 <_dtoa_r+0x594>)
 8007a02:	f004 020f 	and.w	r2, r4, #15
 8007a06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0e:	f7f8 fdcf 	bl	80005b0 <__aeabi_dmul>
 8007a12:	2702      	movs	r7, #2
 8007a14:	2300      	movs	r3, #0
 8007a16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a1a:	4e77      	ldr	r6, [pc, #476]	; (8007bf8 <_dtoa_r+0x598>)
 8007a1c:	1124      	asrs	r4, r4, #4
 8007a1e:	2c00      	cmp	r4, #0
 8007a20:	f040 8084 	bne.w	8007b2c <_dtoa_r+0x4cc>
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1d2      	bne.n	80079ce <_dtoa_r+0x36e>
 8007a28:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007a2c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007a30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 8087 	beq.w	8007b46 <_dtoa_r+0x4e6>
 8007a38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	4b6f      	ldr	r3, [pc, #444]	; (8007bfc <_dtoa_r+0x59c>)
 8007a40:	f7f9 f828 	bl	8000a94 <__aeabi_dcmplt>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d07e      	beq.n	8007b46 <_dtoa_r+0x4e6>
 8007a48:	9b08      	ldr	r3, [sp, #32]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d07b      	beq.n	8007b46 <_dtoa_r+0x4e6>
 8007a4e:	9b06      	ldr	r3, [sp, #24]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	dd38      	ble.n	8007ac6 <_dtoa_r+0x466>
 8007a54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a58:	2200      	movs	r2, #0
 8007a5a:	4b69      	ldr	r3, [pc, #420]	; (8007c00 <_dtoa_r+0x5a0>)
 8007a5c:	f7f8 fda8 	bl	80005b0 <__aeabi_dmul>
 8007a60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a64:	9c06      	ldr	r4, [sp, #24]
 8007a66:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007a6a:	3701      	adds	r7, #1
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	f7f8 fd35 	bl	80004dc <__aeabi_i2d>
 8007a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a76:	f7f8 fd9b 	bl	80005b0 <__aeabi_dmul>
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	4b61      	ldr	r3, [pc, #388]	; (8007c04 <_dtoa_r+0x5a4>)
 8007a7e:	f7f8 fbe1 	bl	8000244 <__adddf3>
 8007a82:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007a86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a8a:	9611      	str	r6, [sp, #68]	; 0x44
 8007a8c:	2c00      	cmp	r4, #0
 8007a8e:	d15d      	bne.n	8007b4c <_dtoa_r+0x4ec>
 8007a90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a94:	2200      	movs	r2, #0
 8007a96:	4b5c      	ldr	r3, [pc, #368]	; (8007c08 <_dtoa_r+0x5a8>)
 8007a98:	f7f8 fbd2 	bl	8000240 <__aeabi_dsub>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007aa4:	4633      	mov	r3, r6
 8007aa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007aa8:	f7f9 f812 	bl	8000ad0 <__aeabi_dcmpgt>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	f040 8295 	bne.w	8007fdc <_dtoa_r+0x97c>
 8007ab2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ab6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ab8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007abc:	f7f8 ffea 	bl	8000a94 <__aeabi_dcmplt>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	f040 8289 	bne.w	8007fd8 <_dtoa_r+0x978>
 8007ac6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007aca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ace:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f2c0 8151 	blt.w	8007d78 <_dtoa_r+0x718>
 8007ad6:	f1bb 0f0e 	cmp.w	fp, #14
 8007ada:	f300 814d 	bgt.w	8007d78 <_dtoa_r+0x718>
 8007ade:	4b45      	ldr	r3, [pc, #276]	; (8007bf4 <_dtoa_r+0x594>)
 8007ae0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ae4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ae8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007aec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f280 80da 	bge.w	8007ca8 <_dtoa_r+0x648>
 8007af4:	9b08      	ldr	r3, [sp, #32]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f300 80d6 	bgt.w	8007ca8 <_dtoa_r+0x648>
 8007afc:	f040 826b 	bne.w	8007fd6 <_dtoa_r+0x976>
 8007b00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b04:	2200      	movs	r2, #0
 8007b06:	4b40      	ldr	r3, [pc, #256]	; (8007c08 <_dtoa_r+0x5a8>)
 8007b08:	f7f8 fd52 	bl	80005b0 <__aeabi_dmul>
 8007b0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b10:	f7f8 ffd4 	bl	8000abc <__aeabi_dcmpge>
 8007b14:	9c08      	ldr	r4, [sp, #32]
 8007b16:	4626      	mov	r6, r4
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	f040 8241 	bne.w	8007fa0 <_dtoa_r+0x940>
 8007b1e:	2331      	movs	r3, #49	; 0x31
 8007b20:	9f03      	ldr	r7, [sp, #12]
 8007b22:	f10b 0b01 	add.w	fp, fp, #1
 8007b26:	f807 3b01 	strb.w	r3, [r7], #1
 8007b2a:	e23d      	b.n	8007fa8 <_dtoa_r+0x948>
 8007b2c:	07e2      	lsls	r2, r4, #31
 8007b2e:	d505      	bpl.n	8007b3c <_dtoa_r+0x4dc>
 8007b30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b34:	f7f8 fd3c 	bl	80005b0 <__aeabi_dmul>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	3701      	adds	r7, #1
 8007b3c:	1064      	asrs	r4, r4, #1
 8007b3e:	3608      	adds	r6, #8
 8007b40:	e76d      	b.n	8007a1e <_dtoa_r+0x3be>
 8007b42:	2702      	movs	r7, #2
 8007b44:	e770      	b.n	8007a28 <_dtoa_r+0x3c8>
 8007b46:	46d8      	mov	r8, fp
 8007b48:	9c08      	ldr	r4, [sp, #32]
 8007b4a:	e78f      	b.n	8007a6c <_dtoa_r+0x40c>
 8007b4c:	9903      	ldr	r1, [sp, #12]
 8007b4e:	4b29      	ldr	r3, [pc, #164]	; (8007bf4 <_dtoa_r+0x594>)
 8007b50:	4421      	add	r1, r4
 8007b52:	9112      	str	r1, [sp, #72]	; 0x48
 8007b54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b5a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007b5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b62:	2900      	cmp	r1, #0
 8007b64:	d054      	beq.n	8007c10 <_dtoa_r+0x5b0>
 8007b66:	2000      	movs	r0, #0
 8007b68:	4928      	ldr	r1, [pc, #160]	; (8007c0c <_dtoa_r+0x5ac>)
 8007b6a:	f7f8 fe4b 	bl	8000804 <__aeabi_ddiv>
 8007b6e:	463b      	mov	r3, r7
 8007b70:	4632      	mov	r2, r6
 8007b72:	f7f8 fb65 	bl	8000240 <__aeabi_dsub>
 8007b76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b7a:	9f03      	ldr	r7, [sp, #12]
 8007b7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b80:	f7f8 ffc6 	bl	8000b10 <__aeabi_d2iz>
 8007b84:	4604      	mov	r4, r0
 8007b86:	f7f8 fca9 	bl	80004dc <__aeabi_i2d>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b92:	f7f8 fb55 	bl	8000240 <__aeabi_dsub>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	3430      	adds	r4, #48	; 0x30
 8007b9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ba0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ba4:	f807 4b01 	strb.w	r4, [r7], #1
 8007ba8:	f7f8 ff74 	bl	8000a94 <__aeabi_dcmplt>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d173      	bne.n	8007c98 <_dtoa_r+0x638>
 8007bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	4911      	ldr	r1, [pc, #68]	; (8007bfc <_dtoa_r+0x59c>)
 8007bb8:	f7f8 fb42 	bl	8000240 <__aeabi_dsub>
 8007bbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bc0:	f7f8 ff68 	bl	8000a94 <__aeabi_dcmplt>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	f040 80b6 	bne.w	8007d36 <_dtoa_r+0x6d6>
 8007bca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bcc:	429f      	cmp	r7, r3
 8007bce:	f43f af7a 	beq.w	8007ac6 <_dtoa_r+0x466>
 8007bd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	4b09      	ldr	r3, [pc, #36]	; (8007c00 <_dtoa_r+0x5a0>)
 8007bda:	f7f8 fce9 	bl	80005b0 <__aeabi_dmul>
 8007bde:	2200      	movs	r2, #0
 8007be0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007be4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007be8:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <_dtoa_r+0x5a0>)
 8007bea:	f7f8 fce1 	bl	80005b0 <__aeabi_dmul>
 8007bee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bf2:	e7c3      	b.n	8007b7c <_dtoa_r+0x51c>
 8007bf4:	0800a8d0 	.word	0x0800a8d0
 8007bf8:	0800a8a8 	.word	0x0800a8a8
 8007bfc:	3ff00000 	.word	0x3ff00000
 8007c00:	40240000 	.word	0x40240000
 8007c04:	401c0000 	.word	0x401c0000
 8007c08:	40140000 	.word	0x40140000
 8007c0c:	3fe00000 	.word	0x3fe00000
 8007c10:	4630      	mov	r0, r6
 8007c12:	4639      	mov	r1, r7
 8007c14:	f7f8 fccc 	bl	80005b0 <__aeabi_dmul>
 8007c18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c1e:	9c03      	ldr	r4, [sp, #12]
 8007c20:	9314      	str	r3, [sp, #80]	; 0x50
 8007c22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c26:	f7f8 ff73 	bl	8000b10 <__aeabi_d2iz>
 8007c2a:	9015      	str	r0, [sp, #84]	; 0x54
 8007c2c:	f7f8 fc56 	bl	80004dc <__aeabi_i2d>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c38:	f7f8 fb02 	bl	8000240 <__aeabi_dsub>
 8007c3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c3e:	4606      	mov	r6, r0
 8007c40:	3330      	adds	r3, #48	; 0x30
 8007c42:	f804 3b01 	strb.w	r3, [r4], #1
 8007c46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c48:	460f      	mov	r7, r1
 8007c4a:	429c      	cmp	r4, r3
 8007c4c:	f04f 0200 	mov.w	r2, #0
 8007c50:	d124      	bne.n	8007c9c <_dtoa_r+0x63c>
 8007c52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c56:	4baf      	ldr	r3, [pc, #700]	; (8007f14 <_dtoa_r+0x8b4>)
 8007c58:	f7f8 faf4 	bl	8000244 <__adddf3>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4630      	mov	r0, r6
 8007c62:	4639      	mov	r1, r7
 8007c64:	f7f8 ff34 	bl	8000ad0 <__aeabi_dcmpgt>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	d163      	bne.n	8007d34 <_dtoa_r+0x6d4>
 8007c6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c70:	2000      	movs	r0, #0
 8007c72:	49a8      	ldr	r1, [pc, #672]	; (8007f14 <_dtoa_r+0x8b4>)
 8007c74:	f7f8 fae4 	bl	8000240 <__aeabi_dsub>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	4639      	mov	r1, r7
 8007c80:	f7f8 ff08 	bl	8000a94 <__aeabi_dcmplt>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	f43f af1e 	beq.w	8007ac6 <_dtoa_r+0x466>
 8007c8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007c8c:	1e7b      	subs	r3, r7, #1
 8007c8e:	9314      	str	r3, [sp, #80]	; 0x50
 8007c90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007c94:	2b30      	cmp	r3, #48	; 0x30
 8007c96:	d0f8      	beq.n	8007c8a <_dtoa_r+0x62a>
 8007c98:	46c3      	mov	fp, r8
 8007c9a:	e03b      	b.n	8007d14 <_dtoa_r+0x6b4>
 8007c9c:	4b9e      	ldr	r3, [pc, #632]	; (8007f18 <_dtoa_r+0x8b8>)
 8007c9e:	f7f8 fc87 	bl	80005b0 <__aeabi_dmul>
 8007ca2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ca6:	e7bc      	b.n	8007c22 <_dtoa_r+0x5c2>
 8007ca8:	9f03      	ldr	r7, [sp, #12]
 8007caa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007cae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	4649      	mov	r1, r9
 8007cb6:	f7f8 fda5 	bl	8000804 <__aeabi_ddiv>
 8007cba:	f7f8 ff29 	bl	8000b10 <__aeabi_d2iz>
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	f7f8 fc0c 	bl	80004dc <__aeabi_i2d>
 8007cc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cc8:	f7f8 fc72 	bl	80005b0 <__aeabi_dmul>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4640      	mov	r0, r8
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	f7f8 fab4 	bl	8000240 <__aeabi_dsub>
 8007cd8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007cdc:	f807 6b01 	strb.w	r6, [r7], #1
 8007ce0:	9e03      	ldr	r6, [sp, #12]
 8007ce2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007ce6:	1bbe      	subs	r6, r7, r6
 8007ce8:	45b4      	cmp	ip, r6
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	d136      	bne.n	8007d5e <_dtoa_r+0x6fe>
 8007cf0:	f7f8 faa8 	bl	8000244 <__adddf3>
 8007cf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cf8:	4680      	mov	r8, r0
 8007cfa:	4689      	mov	r9, r1
 8007cfc:	f7f8 fee8 	bl	8000ad0 <__aeabi_dcmpgt>
 8007d00:	bb58      	cbnz	r0, 8007d5a <_dtoa_r+0x6fa>
 8007d02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d06:	4640      	mov	r0, r8
 8007d08:	4649      	mov	r1, r9
 8007d0a:	f7f8 feb9 	bl	8000a80 <__aeabi_dcmpeq>
 8007d0e:	b108      	cbz	r0, 8007d14 <_dtoa_r+0x6b4>
 8007d10:	07e3      	lsls	r3, r4, #31
 8007d12:	d422      	bmi.n	8007d5a <_dtoa_r+0x6fa>
 8007d14:	4651      	mov	r1, sl
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 fbc2 	bl	80084a0 <_Bfree>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d20:	703b      	strb	r3, [r7, #0]
 8007d22:	f10b 0301 	add.w	r3, fp, #1
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f43f ace6 	beq.w	80076fc <_dtoa_r+0x9c>
 8007d30:	601f      	str	r7, [r3, #0]
 8007d32:	e4e3      	b.n	80076fc <_dtoa_r+0x9c>
 8007d34:	4627      	mov	r7, r4
 8007d36:	463b      	mov	r3, r7
 8007d38:	461f      	mov	r7, r3
 8007d3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d3e:	2a39      	cmp	r2, #57	; 0x39
 8007d40:	d107      	bne.n	8007d52 <_dtoa_r+0x6f2>
 8007d42:	9a03      	ldr	r2, [sp, #12]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d1f7      	bne.n	8007d38 <_dtoa_r+0x6d8>
 8007d48:	2230      	movs	r2, #48	; 0x30
 8007d4a:	9903      	ldr	r1, [sp, #12]
 8007d4c:	f108 0801 	add.w	r8, r8, #1
 8007d50:	700a      	strb	r2, [r1, #0]
 8007d52:	781a      	ldrb	r2, [r3, #0]
 8007d54:	3201      	adds	r2, #1
 8007d56:	701a      	strb	r2, [r3, #0]
 8007d58:	e79e      	b.n	8007c98 <_dtoa_r+0x638>
 8007d5a:	46d8      	mov	r8, fp
 8007d5c:	e7eb      	b.n	8007d36 <_dtoa_r+0x6d6>
 8007d5e:	2200      	movs	r2, #0
 8007d60:	4b6d      	ldr	r3, [pc, #436]	; (8007f18 <_dtoa_r+0x8b8>)
 8007d62:	f7f8 fc25 	bl	80005b0 <__aeabi_dmul>
 8007d66:	2200      	movs	r2, #0
 8007d68:	2300      	movs	r3, #0
 8007d6a:	4680      	mov	r8, r0
 8007d6c:	4689      	mov	r9, r1
 8007d6e:	f7f8 fe87 	bl	8000a80 <__aeabi_dcmpeq>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	d09b      	beq.n	8007cae <_dtoa_r+0x64e>
 8007d76:	e7cd      	b.n	8007d14 <_dtoa_r+0x6b4>
 8007d78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d7a:	2a00      	cmp	r2, #0
 8007d7c:	f000 80c4 	beq.w	8007f08 <_dtoa_r+0x8a8>
 8007d80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007d82:	2a01      	cmp	r2, #1
 8007d84:	f300 80a8 	bgt.w	8007ed8 <_dtoa_r+0x878>
 8007d88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d8a:	2a00      	cmp	r2, #0
 8007d8c:	f000 80a0 	beq.w	8007ed0 <_dtoa_r+0x870>
 8007d90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d94:	464f      	mov	r7, r9
 8007d96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	441a      	add	r2, r3
 8007d9e:	4628      	mov	r0, r5
 8007da0:	4499      	add	r9, r3
 8007da2:	9209      	str	r2, [sp, #36]	; 0x24
 8007da4:	f000 fc32 	bl	800860c <__i2b>
 8007da8:	4606      	mov	r6, r0
 8007daa:	b15f      	cbz	r7, 8007dc4 <_dtoa_r+0x764>
 8007dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	dd08      	ble.n	8007dc4 <_dtoa_r+0x764>
 8007db2:	42bb      	cmp	r3, r7
 8007db4:	bfa8      	it	ge
 8007db6:	463b      	movge	r3, r7
 8007db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dba:	eba9 0903 	sub.w	r9, r9, r3
 8007dbe:	1aff      	subs	r7, r7, r3
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dc6:	b1f3      	cbz	r3, 8007e06 <_dtoa_r+0x7a6>
 8007dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 80a0 	beq.w	8007f10 <_dtoa_r+0x8b0>
 8007dd0:	2c00      	cmp	r4, #0
 8007dd2:	dd10      	ble.n	8007df6 <_dtoa_r+0x796>
 8007dd4:	4631      	mov	r1, r6
 8007dd6:	4622      	mov	r2, r4
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f000 fcd5 	bl	8008788 <__pow5mult>
 8007dde:	4652      	mov	r2, sl
 8007de0:	4601      	mov	r1, r0
 8007de2:	4606      	mov	r6, r0
 8007de4:	4628      	mov	r0, r5
 8007de6:	f000 fc27 	bl	8008638 <__multiply>
 8007dea:	4680      	mov	r8, r0
 8007dec:	4651      	mov	r1, sl
 8007dee:	4628      	mov	r0, r5
 8007df0:	f000 fb56 	bl	80084a0 <_Bfree>
 8007df4:	46c2      	mov	sl, r8
 8007df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007df8:	1b1a      	subs	r2, r3, r4
 8007dfa:	d004      	beq.n	8007e06 <_dtoa_r+0x7a6>
 8007dfc:	4651      	mov	r1, sl
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f000 fcc2 	bl	8008788 <__pow5mult>
 8007e04:	4682      	mov	sl, r0
 8007e06:	2101      	movs	r1, #1
 8007e08:	4628      	mov	r0, r5
 8007e0a:	f000 fbff 	bl	800860c <__i2b>
 8007e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e10:	4604      	mov	r4, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f340 8082 	ble.w	8007f1c <_dtoa_r+0x8bc>
 8007e18:	461a      	mov	r2, r3
 8007e1a:	4601      	mov	r1, r0
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f000 fcb3 	bl	8008788 <__pow5mult>
 8007e22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e24:	4604      	mov	r4, r0
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	dd7b      	ble.n	8007f22 <_dtoa_r+0x8c2>
 8007e2a:	f04f 0800 	mov.w	r8, #0
 8007e2e:	6923      	ldr	r3, [r4, #16]
 8007e30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e34:	6918      	ldr	r0, [r3, #16]
 8007e36:	f000 fb9b 	bl	8008570 <__hi0bits>
 8007e3a:	f1c0 0020 	rsb	r0, r0, #32
 8007e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e40:	4418      	add	r0, r3
 8007e42:	f010 001f 	ands.w	r0, r0, #31
 8007e46:	f000 8092 	beq.w	8007f6e <_dtoa_r+0x90e>
 8007e4a:	f1c0 0320 	rsb	r3, r0, #32
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	f340 8085 	ble.w	8007f5e <_dtoa_r+0x8fe>
 8007e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e56:	f1c0 001c 	rsb	r0, r0, #28
 8007e5a:	4403      	add	r3, r0
 8007e5c:	4481      	add	r9, r0
 8007e5e:	4407      	add	r7, r0
 8007e60:	9309      	str	r3, [sp, #36]	; 0x24
 8007e62:	f1b9 0f00 	cmp.w	r9, #0
 8007e66:	dd05      	ble.n	8007e74 <_dtoa_r+0x814>
 8007e68:	4651      	mov	r1, sl
 8007e6a:	464a      	mov	r2, r9
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	f000 fce5 	bl	800883c <__lshift>
 8007e72:	4682      	mov	sl, r0
 8007e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	dd05      	ble.n	8007e86 <_dtoa_r+0x826>
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f000 fcdc 	bl	800883c <__lshift>
 8007e84:	4604      	mov	r4, r0
 8007e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d072      	beq.n	8007f72 <_dtoa_r+0x912>
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	4650      	mov	r0, sl
 8007e90:	f000 fd40 	bl	8008914 <__mcmp>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	da6c      	bge.n	8007f72 <_dtoa_r+0x912>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	4651      	mov	r1, sl
 8007e9c:	220a      	movs	r2, #10
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f000 fb20 	bl	80084e4 <__multadd>
 8007ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ea6:	4682      	mov	sl, r0
 8007ea8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 81ac 	beq.w	800820a <_dtoa_r+0xbaa>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	220a      	movs	r2, #10
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f000 fb13 	bl	80084e4 <__multadd>
 8007ebe:	9b06      	ldr	r3, [sp, #24]
 8007ec0:	4606      	mov	r6, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f300 8093 	bgt.w	8007fee <_dtoa_r+0x98e>
 8007ec8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	dc59      	bgt.n	8007f82 <_dtoa_r+0x922>
 8007ece:	e08e      	b.n	8007fee <_dtoa_r+0x98e>
 8007ed0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ed2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ed6:	e75d      	b.n	8007d94 <_dtoa_r+0x734>
 8007ed8:	9b08      	ldr	r3, [sp, #32]
 8007eda:	1e5c      	subs	r4, r3, #1
 8007edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ede:	42a3      	cmp	r3, r4
 8007ee0:	bfbf      	itttt	lt
 8007ee2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007ee4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007ee6:	1ae3      	sublt	r3, r4, r3
 8007ee8:	18d2      	addlt	r2, r2, r3
 8007eea:	bfa8      	it	ge
 8007eec:	1b1c      	subge	r4, r3, r4
 8007eee:	9b08      	ldr	r3, [sp, #32]
 8007ef0:	bfbe      	ittt	lt
 8007ef2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007ef4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007ef6:	2400      	movlt	r4, #0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	bfb5      	itete	lt
 8007efc:	eba9 0703 	sublt.w	r7, r9, r3
 8007f00:	464f      	movge	r7, r9
 8007f02:	2300      	movlt	r3, #0
 8007f04:	9b08      	ldrge	r3, [sp, #32]
 8007f06:	e747      	b.n	8007d98 <_dtoa_r+0x738>
 8007f08:	464f      	mov	r7, r9
 8007f0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f0c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007f0e:	e74c      	b.n	8007daa <_dtoa_r+0x74a>
 8007f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f12:	e773      	b.n	8007dfc <_dtoa_r+0x79c>
 8007f14:	3fe00000 	.word	0x3fe00000
 8007f18:	40240000 	.word	0x40240000
 8007f1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	dc18      	bgt.n	8007f54 <_dtoa_r+0x8f4>
 8007f22:	9b04      	ldr	r3, [sp, #16]
 8007f24:	b9b3      	cbnz	r3, 8007f54 <_dtoa_r+0x8f4>
 8007f26:	9b05      	ldr	r3, [sp, #20]
 8007f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f2c:	b993      	cbnz	r3, 8007f54 <_dtoa_r+0x8f4>
 8007f2e:	9b05      	ldr	r3, [sp, #20]
 8007f30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f34:	0d1b      	lsrs	r3, r3, #20
 8007f36:	051b      	lsls	r3, r3, #20
 8007f38:	b17b      	cbz	r3, 8007f5a <_dtoa_r+0x8fa>
 8007f3a:	f04f 0801 	mov.w	r8, #1
 8007f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f40:	f109 0901 	add.w	r9, r9, #1
 8007f44:	3301      	adds	r3, #1
 8007f46:	9309      	str	r3, [sp, #36]	; 0x24
 8007f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f47f af6f 	bne.w	8007e2e <_dtoa_r+0x7ce>
 8007f50:	2001      	movs	r0, #1
 8007f52:	e774      	b.n	8007e3e <_dtoa_r+0x7de>
 8007f54:	f04f 0800 	mov.w	r8, #0
 8007f58:	e7f6      	b.n	8007f48 <_dtoa_r+0x8e8>
 8007f5a:	4698      	mov	r8, r3
 8007f5c:	e7f4      	b.n	8007f48 <_dtoa_r+0x8e8>
 8007f5e:	d080      	beq.n	8007e62 <_dtoa_r+0x802>
 8007f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f62:	331c      	adds	r3, #28
 8007f64:	441a      	add	r2, r3
 8007f66:	4499      	add	r9, r3
 8007f68:	441f      	add	r7, r3
 8007f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8007f6c:	e779      	b.n	8007e62 <_dtoa_r+0x802>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	e7f6      	b.n	8007f60 <_dtoa_r+0x900>
 8007f72:	9b08      	ldr	r3, [sp, #32]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dc34      	bgt.n	8007fe2 <_dtoa_r+0x982>
 8007f78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	dd31      	ble.n	8007fe2 <_dtoa_r+0x982>
 8007f7e:	9b08      	ldr	r3, [sp, #32]
 8007f80:	9306      	str	r3, [sp, #24]
 8007f82:	9b06      	ldr	r3, [sp, #24]
 8007f84:	b963      	cbnz	r3, 8007fa0 <_dtoa_r+0x940>
 8007f86:	4621      	mov	r1, r4
 8007f88:	2205      	movs	r2, #5
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	f000 faaa 	bl	80084e4 <__multadd>
 8007f90:	4601      	mov	r1, r0
 8007f92:	4604      	mov	r4, r0
 8007f94:	4650      	mov	r0, sl
 8007f96:	f000 fcbd 	bl	8008914 <__mcmp>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	f73f adbf 	bgt.w	8007b1e <_dtoa_r+0x4be>
 8007fa0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fa2:	9f03      	ldr	r7, [sp, #12]
 8007fa4:	ea6f 0b03 	mvn.w	fp, r3
 8007fa8:	f04f 0800 	mov.w	r8, #0
 8007fac:	4621      	mov	r1, r4
 8007fae:	4628      	mov	r0, r5
 8007fb0:	f000 fa76 	bl	80084a0 <_Bfree>
 8007fb4:	2e00      	cmp	r6, #0
 8007fb6:	f43f aead 	beq.w	8007d14 <_dtoa_r+0x6b4>
 8007fba:	f1b8 0f00 	cmp.w	r8, #0
 8007fbe:	d005      	beq.n	8007fcc <_dtoa_r+0x96c>
 8007fc0:	45b0      	cmp	r8, r6
 8007fc2:	d003      	beq.n	8007fcc <_dtoa_r+0x96c>
 8007fc4:	4641      	mov	r1, r8
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f000 fa6a 	bl	80084a0 <_Bfree>
 8007fcc:	4631      	mov	r1, r6
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f000 fa66 	bl	80084a0 <_Bfree>
 8007fd4:	e69e      	b.n	8007d14 <_dtoa_r+0x6b4>
 8007fd6:	2400      	movs	r4, #0
 8007fd8:	4626      	mov	r6, r4
 8007fda:	e7e1      	b.n	8007fa0 <_dtoa_r+0x940>
 8007fdc:	46c3      	mov	fp, r8
 8007fde:	4626      	mov	r6, r4
 8007fe0:	e59d      	b.n	8007b1e <_dtoa_r+0x4be>
 8007fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 80c8 	beq.w	800817a <_dtoa_r+0xb1a>
 8007fea:	9b08      	ldr	r3, [sp, #32]
 8007fec:	9306      	str	r3, [sp, #24]
 8007fee:	2f00      	cmp	r7, #0
 8007ff0:	dd05      	ble.n	8007ffe <_dtoa_r+0x99e>
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	463a      	mov	r2, r7
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f000 fc20 	bl	800883c <__lshift>
 8007ffc:	4606      	mov	r6, r0
 8007ffe:	f1b8 0f00 	cmp.w	r8, #0
 8008002:	d05b      	beq.n	80080bc <_dtoa_r+0xa5c>
 8008004:	4628      	mov	r0, r5
 8008006:	6871      	ldr	r1, [r6, #4]
 8008008:	f000 fa0a 	bl	8008420 <_Balloc>
 800800c:	4607      	mov	r7, r0
 800800e:	b928      	cbnz	r0, 800801c <_dtoa_r+0x9bc>
 8008010:	4602      	mov	r2, r0
 8008012:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008016:	4b81      	ldr	r3, [pc, #516]	; (800821c <_dtoa_r+0xbbc>)
 8008018:	f7ff bb36 	b.w	8007688 <_dtoa_r+0x28>
 800801c:	6932      	ldr	r2, [r6, #16]
 800801e:	f106 010c 	add.w	r1, r6, #12
 8008022:	3202      	adds	r2, #2
 8008024:	0092      	lsls	r2, r2, #2
 8008026:	300c      	adds	r0, #12
 8008028:	f000 fff2 	bl	8009010 <memcpy>
 800802c:	2201      	movs	r2, #1
 800802e:	4639      	mov	r1, r7
 8008030:	4628      	mov	r0, r5
 8008032:	f000 fc03 	bl	800883c <__lshift>
 8008036:	46b0      	mov	r8, r6
 8008038:	4606      	mov	r6, r0
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	9a03      	ldr	r2, [sp, #12]
 800803e:	3301      	adds	r3, #1
 8008040:	9308      	str	r3, [sp, #32]
 8008042:	9b06      	ldr	r3, [sp, #24]
 8008044:	4413      	add	r3, r2
 8008046:	930b      	str	r3, [sp, #44]	; 0x2c
 8008048:	9b04      	ldr	r3, [sp, #16]
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	930a      	str	r3, [sp, #40]	; 0x28
 8008050:	9b08      	ldr	r3, [sp, #32]
 8008052:	4621      	mov	r1, r4
 8008054:	3b01      	subs	r3, #1
 8008056:	4650      	mov	r0, sl
 8008058:	9304      	str	r3, [sp, #16]
 800805a:	f7ff fa78 	bl	800754e <quorem>
 800805e:	4641      	mov	r1, r8
 8008060:	9006      	str	r0, [sp, #24]
 8008062:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008066:	4650      	mov	r0, sl
 8008068:	f000 fc54 	bl	8008914 <__mcmp>
 800806c:	4632      	mov	r2, r6
 800806e:	9009      	str	r0, [sp, #36]	; 0x24
 8008070:	4621      	mov	r1, r4
 8008072:	4628      	mov	r0, r5
 8008074:	f000 fc6a 	bl	800894c <__mdiff>
 8008078:	68c2      	ldr	r2, [r0, #12]
 800807a:	4607      	mov	r7, r0
 800807c:	bb02      	cbnz	r2, 80080c0 <_dtoa_r+0xa60>
 800807e:	4601      	mov	r1, r0
 8008080:	4650      	mov	r0, sl
 8008082:	f000 fc47 	bl	8008914 <__mcmp>
 8008086:	4602      	mov	r2, r0
 8008088:	4639      	mov	r1, r7
 800808a:	4628      	mov	r0, r5
 800808c:	920c      	str	r2, [sp, #48]	; 0x30
 800808e:	f000 fa07 	bl	80084a0 <_Bfree>
 8008092:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008094:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008096:	9f08      	ldr	r7, [sp, #32]
 8008098:	ea43 0102 	orr.w	r1, r3, r2
 800809c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800809e:	4319      	orrs	r1, r3
 80080a0:	d110      	bne.n	80080c4 <_dtoa_r+0xa64>
 80080a2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80080a6:	d029      	beq.n	80080fc <_dtoa_r+0xa9c>
 80080a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	dd02      	ble.n	80080b4 <_dtoa_r+0xa54>
 80080ae:	9b06      	ldr	r3, [sp, #24]
 80080b0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80080b4:	9b04      	ldr	r3, [sp, #16]
 80080b6:	f883 9000 	strb.w	r9, [r3]
 80080ba:	e777      	b.n	8007fac <_dtoa_r+0x94c>
 80080bc:	4630      	mov	r0, r6
 80080be:	e7ba      	b.n	8008036 <_dtoa_r+0x9d6>
 80080c0:	2201      	movs	r2, #1
 80080c2:	e7e1      	b.n	8008088 <_dtoa_r+0xa28>
 80080c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	db04      	blt.n	80080d4 <_dtoa_r+0xa74>
 80080ca:	9922      	ldr	r1, [sp, #136]	; 0x88
 80080cc:	430b      	orrs	r3, r1
 80080ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80080d0:	430b      	orrs	r3, r1
 80080d2:	d120      	bne.n	8008116 <_dtoa_r+0xab6>
 80080d4:	2a00      	cmp	r2, #0
 80080d6:	dded      	ble.n	80080b4 <_dtoa_r+0xa54>
 80080d8:	4651      	mov	r1, sl
 80080da:	2201      	movs	r2, #1
 80080dc:	4628      	mov	r0, r5
 80080de:	f000 fbad 	bl	800883c <__lshift>
 80080e2:	4621      	mov	r1, r4
 80080e4:	4682      	mov	sl, r0
 80080e6:	f000 fc15 	bl	8008914 <__mcmp>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	dc03      	bgt.n	80080f6 <_dtoa_r+0xa96>
 80080ee:	d1e1      	bne.n	80080b4 <_dtoa_r+0xa54>
 80080f0:	f019 0f01 	tst.w	r9, #1
 80080f4:	d0de      	beq.n	80080b4 <_dtoa_r+0xa54>
 80080f6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80080fa:	d1d8      	bne.n	80080ae <_dtoa_r+0xa4e>
 80080fc:	2339      	movs	r3, #57	; 0x39
 80080fe:	9a04      	ldr	r2, [sp, #16]
 8008100:	7013      	strb	r3, [r2, #0]
 8008102:	463b      	mov	r3, r7
 8008104:	461f      	mov	r7, r3
 8008106:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800810a:	3b01      	subs	r3, #1
 800810c:	2a39      	cmp	r2, #57	; 0x39
 800810e:	d06b      	beq.n	80081e8 <_dtoa_r+0xb88>
 8008110:	3201      	adds	r2, #1
 8008112:	701a      	strb	r2, [r3, #0]
 8008114:	e74a      	b.n	8007fac <_dtoa_r+0x94c>
 8008116:	2a00      	cmp	r2, #0
 8008118:	dd07      	ble.n	800812a <_dtoa_r+0xaca>
 800811a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800811e:	d0ed      	beq.n	80080fc <_dtoa_r+0xa9c>
 8008120:	9a04      	ldr	r2, [sp, #16]
 8008122:	f109 0301 	add.w	r3, r9, #1
 8008126:	7013      	strb	r3, [r2, #0]
 8008128:	e740      	b.n	8007fac <_dtoa_r+0x94c>
 800812a:	9b08      	ldr	r3, [sp, #32]
 800812c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800812e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008132:	4293      	cmp	r3, r2
 8008134:	d042      	beq.n	80081bc <_dtoa_r+0xb5c>
 8008136:	4651      	mov	r1, sl
 8008138:	2300      	movs	r3, #0
 800813a:	220a      	movs	r2, #10
 800813c:	4628      	mov	r0, r5
 800813e:	f000 f9d1 	bl	80084e4 <__multadd>
 8008142:	45b0      	cmp	r8, r6
 8008144:	4682      	mov	sl, r0
 8008146:	f04f 0300 	mov.w	r3, #0
 800814a:	f04f 020a 	mov.w	r2, #10
 800814e:	4641      	mov	r1, r8
 8008150:	4628      	mov	r0, r5
 8008152:	d107      	bne.n	8008164 <_dtoa_r+0xb04>
 8008154:	f000 f9c6 	bl	80084e4 <__multadd>
 8008158:	4680      	mov	r8, r0
 800815a:	4606      	mov	r6, r0
 800815c:	9b08      	ldr	r3, [sp, #32]
 800815e:	3301      	adds	r3, #1
 8008160:	9308      	str	r3, [sp, #32]
 8008162:	e775      	b.n	8008050 <_dtoa_r+0x9f0>
 8008164:	f000 f9be 	bl	80084e4 <__multadd>
 8008168:	4631      	mov	r1, r6
 800816a:	4680      	mov	r8, r0
 800816c:	2300      	movs	r3, #0
 800816e:	220a      	movs	r2, #10
 8008170:	4628      	mov	r0, r5
 8008172:	f000 f9b7 	bl	80084e4 <__multadd>
 8008176:	4606      	mov	r6, r0
 8008178:	e7f0      	b.n	800815c <_dtoa_r+0xafc>
 800817a:	9b08      	ldr	r3, [sp, #32]
 800817c:	9306      	str	r3, [sp, #24]
 800817e:	9f03      	ldr	r7, [sp, #12]
 8008180:	4621      	mov	r1, r4
 8008182:	4650      	mov	r0, sl
 8008184:	f7ff f9e3 	bl	800754e <quorem>
 8008188:	9b03      	ldr	r3, [sp, #12]
 800818a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800818e:	f807 9b01 	strb.w	r9, [r7], #1
 8008192:	1afa      	subs	r2, r7, r3
 8008194:	9b06      	ldr	r3, [sp, #24]
 8008196:	4293      	cmp	r3, r2
 8008198:	dd07      	ble.n	80081aa <_dtoa_r+0xb4a>
 800819a:	4651      	mov	r1, sl
 800819c:	2300      	movs	r3, #0
 800819e:	220a      	movs	r2, #10
 80081a0:	4628      	mov	r0, r5
 80081a2:	f000 f99f 	bl	80084e4 <__multadd>
 80081a6:	4682      	mov	sl, r0
 80081a8:	e7ea      	b.n	8008180 <_dtoa_r+0xb20>
 80081aa:	9b06      	ldr	r3, [sp, #24]
 80081ac:	f04f 0800 	mov.w	r8, #0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	bfcc      	ite	gt
 80081b4:	461f      	movgt	r7, r3
 80081b6:	2701      	movle	r7, #1
 80081b8:	9b03      	ldr	r3, [sp, #12]
 80081ba:	441f      	add	r7, r3
 80081bc:	4651      	mov	r1, sl
 80081be:	2201      	movs	r2, #1
 80081c0:	4628      	mov	r0, r5
 80081c2:	f000 fb3b 	bl	800883c <__lshift>
 80081c6:	4621      	mov	r1, r4
 80081c8:	4682      	mov	sl, r0
 80081ca:	f000 fba3 	bl	8008914 <__mcmp>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	dc97      	bgt.n	8008102 <_dtoa_r+0xaa2>
 80081d2:	d102      	bne.n	80081da <_dtoa_r+0xb7a>
 80081d4:	f019 0f01 	tst.w	r9, #1
 80081d8:	d193      	bne.n	8008102 <_dtoa_r+0xaa2>
 80081da:	463b      	mov	r3, r7
 80081dc:	461f      	mov	r7, r3
 80081de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081e2:	2a30      	cmp	r2, #48	; 0x30
 80081e4:	d0fa      	beq.n	80081dc <_dtoa_r+0xb7c>
 80081e6:	e6e1      	b.n	8007fac <_dtoa_r+0x94c>
 80081e8:	9a03      	ldr	r2, [sp, #12]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d18a      	bne.n	8008104 <_dtoa_r+0xaa4>
 80081ee:	2331      	movs	r3, #49	; 0x31
 80081f0:	f10b 0b01 	add.w	fp, fp, #1
 80081f4:	e797      	b.n	8008126 <_dtoa_r+0xac6>
 80081f6:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <_dtoa_r+0xbc0>)
 80081f8:	f7ff ba9f 	b.w	800773a <_dtoa_r+0xda>
 80081fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f47f aa77 	bne.w	80076f2 <_dtoa_r+0x92>
 8008204:	4b07      	ldr	r3, [pc, #28]	; (8008224 <_dtoa_r+0xbc4>)
 8008206:	f7ff ba98 	b.w	800773a <_dtoa_r+0xda>
 800820a:	9b06      	ldr	r3, [sp, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	dcb6      	bgt.n	800817e <_dtoa_r+0xb1e>
 8008210:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008212:	2b02      	cmp	r3, #2
 8008214:	f73f aeb5 	bgt.w	8007f82 <_dtoa_r+0x922>
 8008218:	e7b1      	b.n	800817e <_dtoa_r+0xb1e>
 800821a:	bf00      	nop
 800821c:	0800a83a 	.word	0x0800a83a
 8008220:	0800a79a 	.word	0x0800a79a
 8008224:	0800a7be 	.word	0x0800a7be

08008228 <_free_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	4605      	mov	r5, r0
 800822c:	2900      	cmp	r1, #0
 800822e:	d040      	beq.n	80082b2 <_free_r+0x8a>
 8008230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008234:	1f0c      	subs	r4, r1, #4
 8008236:	2b00      	cmp	r3, #0
 8008238:	bfb8      	it	lt
 800823a:	18e4      	addlt	r4, r4, r3
 800823c:	f000 f8e4 	bl	8008408 <__malloc_lock>
 8008240:	4a1c      	ldr	r2, [pc, #112]	; (80082b4 <_free_r+0x8c>)
 8008242:	6813      	ldr	r3, [r2, #0]
 8008244:	b933      	cbnz	r3, 8008254 <_free_r+0x2c>
 8008246:	6063      	str	r3, [r4, #4]
 8008248:	6014      	str	r4, [r2, #0]
 800824a:	4628      	mov	r0, r5
 800824c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008250:	f000 b8e0 	b.w	8008414 <__malloc_unlock>
 8008254:	42a3      	cmp	r3, r4
 8008256:	d908      	bls.n	800826a <_free_r+0x42>
 8008258:	6820      	ldr	r0, [r4, #0]
 800825a:	1821      	adds	r1, r4, r0
 800825c:	428b      	cmp	r3, r1
 800825e:	bf01      	itttt	eq
 8008260:	6819      	ldreq	r1, [r3, #0]
 8008262:	685b      	ldreq	r3, [r3, #4]
 8008264:	1809      	addeq	r1, r1, r0
 8008266:	6021      	streq	r1, [r4, #0]
 8008268:	e7ed      	b.n	8008246 <_free_r+0x1e>
 800826a:	461a      	mov	r2, r3
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	b10b      	cbz	r3, 8008274 <_free_r+0x4c>
 8008270:	42a3      	cmp	r3, r4
 8008272:	d9fa      	bls.n	800826a <_free_r+0x42>
 8008274:	6811      	ldr	r1, [r2, #0]
 8008276:	1850      	adds	r0, r2, r1
 8008278:	42a0      	cmp	r0, r4
 800827a:	d10b      	bne.n	8008294 <_free_r+0x6c>
 800827c:	6820      	ldr	r0, [r4, #0]
 800827e:	4401      	add	r1, r0
 8008280:	1850      	adds	r0, r2, r1
 8008282:	4283      	cmp	r3, r0
 8008284:	6011      	str	r1, [r2, #0]
 8008286:	d1e0      	bne.n	800824a <_free_r+0x22>
 8008288:	6818      	ldr	r0, [r3, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	4408      	add	r0, r1
 800828e:	6010      	str	r0, [r2, #0]
 8008290:	6053      	str	r3, [r2, #4]
 8008292:	e7da      	b.n	800824a <_free_r+0x22>
 8008294:	d902      	bls.n	800829c <_free_r+0x74>
 8008296:	230c      	movs	r3, #12
 8008298:	602b      	str	r3, [r5, #0]
 800829a:	e7d6      	b.n	800824a <_free_r+0x22>
 800829c:	6820      	ldr	r0, [r4, #0]
 800829e:	1821      	adds	r1, r4, r0
 80082a0:	428b      	cmp	r3, r1
 80082a2:	bf01      	itttt	eq
 80082a4:	6819      	ldreq	r1, [r3, #0]
 80082a6:	685b      	ldreq	r3, [r3, #4]
 80082a8:	1809      	addeq	r1, r1, r0
 80082aa:	6021      	streq	r1, [r4, #0]
 80082ac:	6063      	str	r3, [r4, #4]
 80082ae:	6054      	str	r4, [r2, #4]
 80082b0:	e7cb      	b.n	800824a <_free_r+0x22>
 80082b2:	bd38      	pop	{r3, r4, r5, pc}
 80082b4:	200004bc 	.word	0x200004bc

080082b8 <malloc>:
 80082b8:	4b02      	ldr	r3, [pc, #8]	; (80082c4 <malloc+0xc>)
 80082ba:	4601      	mov	r1, r0
 80082bc:	6818      	ldr	r0, [r3, #0]
 80082be:	f000 b823 	b.w	8008308 <_malloc_r>
 80082c2:	bf00      	nop
 80082c4:	2000006c 	.word	0x2000006c

080082c8 <sbrk_aligned>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	4e0e      	ldr	r6, [pc, #56]	; (8008304 <sbrk_aligned+0x3c>)
 80082cc:	460c      	mov	r4, r1
 80082ce:	6831      	ldr	r1, [r6, #0]
 80082d0:	4605      	mov	r5, r0
 80082d2:	b911      	cbnz	r1, 80082da <sbrk_aligned+0x12>
 80082d4:	f000 fe8c 	bl	8008ff0 <_sbrk_r>
 80082d8:	6030      	str	r0, [r6, #0]
 80082da:	4621      	mov	r1, r4
 80082dc:	4628      	mov	r0, r5
 80082de:	f000 fe87 	bl	8008ff0 <_sbrk_r>
 80082e2:	1c43      	adds	r3, r0, #1
 80082e4:	d00a      	beq.n	80082fc <sbrk_aligned+0x34>
 80082e6:	1cc4      	adds	r4, r0, #3
 80082e8:	f024 0403 	bic.w	r4, r4, #3
 80082ec:	42a0      	cmp	r0, r4
 80082ee:	d007      	beq.n	8008300 <sbrk_aligned+0x38>
 80082f0:	1a21      	subs	r1, r4, r0
 80082f2:	4628      	mov	r0, r5
 80082f4:	f000 fe7c 	bl	8008ff0 <_sbrk_r>
 80082f8:	3001      	adds	r0, #1
 80082fa:	d101      	bne.n	8008300 <sbrk_aligned+0x38>
 80082fc:	f04f 34ff 	mov.w	r4, #4294967295
 8008300:	4620      	mov	r0, r4
 8008302:	bd70      	pop	{r4, r5, r6, pc}
 8008304:	200004c0 	.word	0x200004c0

08008308 <_malloc_r>:
 8008308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800830c:	1ccd      	adds	r5, r1, #3
 800830e:	f025 0503 	bic.w	r5, r5, #3
 8008312:	3508      	adds	r5, #8
 8008314:	2d0c      	cmp	r5, #12
 8008316:	bf38      	it	cc
 8008318:	250c      	movcc	r5, #12
 800831a:	2d00      	cmp	r5, #0
 800831c:	4607      	mov	r7, r0
 800831e:	db01      	blt.n	8008324 <_malloc_r+0x1c>
 8008320:	42a9      	cmp	r1, r5
 8008322:	d905      	bls.n	8008330 <_malloc_r+0x28>
 8008324:	230c      	movs	r3, #12
 8008326:	2600      	movs	r6, #0
 8008328:	603b      	str	r3, [r7, #0]
 800832a:	4630      	mov	r0, r6
 800832c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008330:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008404 <_malloc_r+0xfc>
 8008334:	f000 f868 	bl	8008408 <__malloc_lock>
 8008338:	f8d8 3000 	ldr.w	r3, [r8]
 800833c:	461c      	mov	r4, r3
 800833e:	bb5c      	cbnz	r4, 8008398 <_malloc_r+0x90>
 8008340:	4629      	mov	r1, r5
 8008342:	4638      	mov	r0, r7
 8008344:	f7ff ffc0 	bl	80082c8 <sbrk_aligned>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	4604      	mov	r4, r0
 800834c:	d155      	bne.n	80083fa <_malloc_r+0xf2>
 800834e:	f8d8 4000 	ldr.w	r4, [r8]
 8008352:	4626      	mov	r6, r4
 8008354:	2e00      	cmp	r6, #0
 8008356:	d145      	bne.n	80083e4 <_malloc_r+0xdc>
 8008358:	2c00      	cmp	r4, #0
 800835a:	d048      	beq.n	80083ee <_malloc_r+0xe6>
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	4631      	mov	r1, r6
 8008360:	4638      	mov	r0, r7
 8008362:	eb04 0903 	add.w	r9, r4, r3
 8008366:	f000 fe43 	bl	8008ff0 <_sbrk_r>
 800836a:	4581      	cmp	r9, r0
 800836c:	d13f      	bne.n	80083ee <_malloc_r+0xe6>
 800836e:	6821      	ldr	r1, [r4, #0]
 8008370:	4638      	mov	r0, r7
 8008372:	1a6d      	subs	r5, r5, r1
 8008374:	4629      	mov	r1, r5
 8008376:	f7ff ffa7 	bl	80082c8 <sbrk_aligned>
 800837a:	3001      	adds	r0, #1
 800837c:	d037      	beq.n	80083ee <_malloc_r+0xe6>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	442b      	add	r3, r5
 8008382:	6023      	str	r3, [r4, #0]
 8008384:	f8d8 3000 	ldr.w	r3, [r8]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d038      	beq.n	80083fe <_malloc_r+0xf6>
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	42a2      	cmp	r2, r4
 8008390:	d12b      	bne.n	80083ea <_malloc_r+0xe2>
 8008392:	2200      	movs	r2, #0
 8008394:	605a      	str	r2, [r3, #4]
 8008396:	e00f      	b.n	80083b8 <_malloc_r+0xb0>
 8008398:	6822      	ldr	r2, [r4, #0]
 800839a:	1b52      	subs	r2, r2, r5
 800839c:	d41f      	bmi.n	80083de <_malloc_r+0xd6>
 800839e:	2a0b      	cmp	r2, #11
 80083a0:	d917      	bls.n	80083d2 <_malloc_r+0xca>
 80083a2:	1961      	adds	r1, r4, r5
 80083a4:	42a3      	cmp	r3, r4
 80083a6:	6025      	str	r5, [r4, #0]
 80083a8:	bf18      	it	ne
 80083aa:	6059      	strne	r1, [r3, #4]
 80083ac:	6863      	ldr	r3, [r4, #4]
 80083ae:	bf08      	it	eq
 80083b0:	f8c8 1000 	streq.w	r1, [r8]
 80083b4:	5162      	str	r2, [r4, r5]
 80083b6:	604b      	str	r3, [r1, #4]
 80083b8:	4638      	mov	r0, r7
 80083ba:	f104 060b 	add.w	r6, r4, #11
 80083be:	f000 f829 	bl	8008414 <__malloc_unlock>
 80083c2:	f026 0607 	bic.w	r6, r6, #7
 80083c6:	1d23      	adds	r3, r4, #4
 80083c8:	1af2      	subs	r2, r6, r3
 80083ca:	d0ae      	beq.n	800832a <_malloc_r+0x22>
 80083cc:	1b9b      	subs	r3, r3, r6
 80083ce:	50a3      	str	r3, [r4, r2]
 80083d0:	e7ab      	b.n	800832a <_malloc_r+0x22>
 80083d2:	42a3      	cmp	r3, r4
 80083d4:	6862      	ldr	r2, [r4, #4]
 80083d6:	d1dd      	bne.n	8008394 <_malloc_r+0x8c>
 80083d8:	f8c8 2000 	str.w	r2, [r8]
 80083dc:	e7ec      	b.n	80083b8 <_malloc_r+0xb0>
 80083de:	4623      	mov	r3, r4
 80083e0:	6864      	ldr	r4, [r4, #4]
 80083e2:	e7ac      	b.n	800833e <_malloc_r+0x36>
 80083e4:	4634      	mov	r4, r6
 80083e6:	6876      	ldr	r6, [r6, #4]
 80083e8:	e7b4      	b.n	8008354 <_malloc_r+0x4c>
 80083ea:	4613      	mov	r3, r2
 80083ec:	e7cc      	b.n	8008388 <_malloc_r+0x80>
 80083ee:	230c      	movs	r3, #12
 80083f0:	4638      	mov	r0, r7
 80083f2:	603b      	str	r3, [r7, #0]
 80083f4:	f000 f80e 	bl	8008414 <__malloc_unlock>
 80083f8:	e797      	b.n	800832a <_malloc_r+0x22>
 80083fa:	6025      	str	r5, [r4, #0]
 80083fc:	e7dc      	b.n	80083b8 <_malloc_r+0xb0>
 80083fe:	605b      	str	r3, [r3, #4]
 8008400:	deff      	udf	#255	; 0xff
 8008402:	bf00      	nop
 8008404:	200004bc 	.word	0x200004bc

08008408 <__malloc_lock>:
 8008408:	4801      	ldr	r0, [pc, #4]	; (8008410 <__malloc_lock+0x8>)
 800840a:	f7ff b890 	b.w	800752e <__retarget_lock_acquire_recursive>
 800840e:	bf00      	nop
 8008410:	200004b8 	.word	0x200004b8

08008414 <__malloc_unlock>:
 8008414:	4801      	ldr	r0, [pc, #4]	; (800841c <__malloc_unlock+0x8>)
 8008416:	f7ff b88b 	b.w	8007530 <__retarget_lock_release_recursive>
 800841a:	bf00      	nop
 800841c:	200004b8 	.word	0x200004b8

08008420 <_Balloc>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	69c6      	ldr	r6, [r0, #28]
 8008424:	4604      	mov	r4, r0
 8008426:	460d      	mov	r5, r1
 8008428:	b976      	cbnz	r6, 8008448 <_Balloc+0x28>
 800842a:	2010      	movs	r0, #16
 800842c:	f7ff ff44 	bl	80082b8 <malloc>
 8008430:	4602      	mov	r2, r0
 8008432:	61e0      	str	r0, [r4, #28]
 8008434:	b920      	cbnz	r0, 8008440 <_Balloc+0x20>
 8008436:	216b      	movs	r1, #107	; 0x6b
 8008438:	4b17      	ldr	r3, [pc, #92]	; (8008498 <_Balloc+0x78>)
 800843a:	4818      	ldr	r0, [pc, #96]	; (800849c <_Balloc+0x7c>)
 800843c:	f000 fdf6 	bl	800902c <__assert_func>
 8008440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008444:	6006      	str	r6, [r0, #0]
 8008446:	60c6      	str	r6, [r0, #12]
 8008448:	69e6      	ldr	r6, [r4, #28]
 800844a:	68f3      	ldr	r3, [r6, #12]
 800844c:	b183      	cbz	r3, 8008470 <_Balloc+0x50>
 800844e:	69e3      	ldr	r3, [r4, #28]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008456:	b9b8      	cbnz	r0, 8008488 <_Balloc+0x68>
 8008458:	2101      	movs	r1, #1
 800845a:	fa01 f605 	lsl.w	r6, r1, r5
 800845e:	1d72      	adds	r2, r6, #5
 8008460:	4620      	mov	r0, r4
 8008462:	0092      	lsls	r2, r2, #2
 8008464:	f000 fe00 	bl	8009068 <_calloc_r>
 8008468:	b160      	cbz	r0, 8008484 <_Balloc+0x64>
 800846a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800846e:	e00e      	b.n	800848e <_Balloc+0x6e>
 8008470:	2221      	movs	r2, #33	; 0x21
 8008472:	2104      	movs	r1, #4
 8008474:	4620      	mov	r0, r4
 8008476:	f000 fdf7 	bl	8009068 <_calloc_r>
 800847a:	69e3      	ldr	r3, [r4, #28]
 800847c:	60f0      	str	r0, [r6, #12]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1e4      	bne.n	800844e <_Balloc+0x2e>
 8008484:	2000      	movs	r0, #0
 8008486:	bd70      	pop	{r4, r5, r6, pc}
 8008488:	6802      	ldr	r2, [r0, #0]
 800848a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800848e:	2300      	movs	r3, #0
 8008490:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008494:	e7f7      	b.n	8008486 <_Balloc+0x66>
 8008496:	bf00      	nop
 8008498:	0800a7cb 	.word	0x0800a7cb
 800849c:	0800a84b 	.word	0x0800a84b

080084a0 <_Bfree>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	69c6      	ldr	r6, [r0, #28]
 80084a4:	4605      	mov	r5, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	b976      	cbnz	r6, 80084c8 <_Bfree+0x28>
 80084aa:	2010      	movs	r0, #16
 80084ac:	f7ff ff04 	bl	80082b8 <malloc>
 80084b0:	4602      	mov	r2, r0
 80084b2:	61e8      	str	r0, [r5, #28]
 80084b4:	b920      	cbnz	r0, 80084c0 <_Bfree+0x20>
 80084b6:	218f      	movs	r1, #143	; 0x8f
 80084b8:	4b08      	ldr	r3, [pc, #32]	; (80084dc <_Bfree+0x3c>)
 80084ba:	4809      	ldr	r0, [pc, #36]	; (80084e0 <_Bfree+0x40>)
 80084bc:	f000 fdb6 	bl	800902c <__assert_func>
 80084c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084c4:	6006      	str	r6, [r0, #0]
 80084c6:	60c6      	str	r6, [r0, #12]
 80084c8:	b13c      	cbz	r4, 80084da <_Bfree+0x3a>
 80084ca:	69eb      	ldr	r3, [r5, #28]
 80084cc:	6862      	ldr	r2, [r4, #4]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084d4:	6021      	str	r1, [r4, #0]
 80084d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	0800a7cb 	.word	0x0800a7cb
 80084e0:	0800a84b 	.word	0x0800a84b

080084e4 <__multadd>:
 80084e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e8:	4607      	mov	r7, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	461e      	mov	r6, r3
 80084ee:	2000      	movs	r0, #0
 80084f0:	690d      	ldr	r5, [r1, #16]
 80084f2:	f101 0c14 	add.w	ip, r1, #20
 80084f6:	f8dc 3000 	ldr.w	r3, [ip]
 80084fa:	3001      	adds	r0, #1
 80084fc:	b299      	uxth	r1, r3
 80084fe:	fb02 6101 	mla	r1, r2, r1, r6
 8008502:	0c1e      	lsrs	r6, r3, #16
 8008504:	0c0b      	lsrs	r3, r1, #16
 8008506:	fb02 3306 	mla	r3, r2, r6, r3
 800850a:	b289      	uxth	r1, r1
 800850c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008510:	4285      	cmp	r5, r0
 8008512:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008516:	f84c 1b04 	str.w	r1, [ip], #4
 800851a:	dcec      	bgt.n	80084f6 <__multadd+0x12>
 800851c:	b30e      	cbz	r6, 8008562 <__multadd+0x7e>
 800851e:	68a3      	ldr	r3, [r4, #8]
 8008520:	42ab      	cmp	r3, r5
 8008522:	dc19      	bgt.n	8008558 <__multadd+0x74>
 8008524:	6861      	ldr	r1, [r4, #4]
 8008526:	4638      	mov	r0, r7
 8008528:	3101      	adds	r1, #1
 800852a:	f7ff ff79 	bl	8008420 <_Balloc>
 800852e:	4680      	mov	r8, r0
 8008530:	b928      	cbnz	r0, 800853e <__multadd+0x5a>
 8008532:	4602      	mov	r2, r0
 8008534:	21ba      	movs	r1, #186	; 0xba
 8008536:	4b0c      	ldr	r3, [pc, #48]	; (8008568 <__multadd+0x84>)
 8008538:	480c      	ldr	r0, [pc, #48]	; (800856c <__multadd+0x88>)
 800853a:	f000 fd77 	bl	800902c <__assert_func>
 800853e:	6922      	ldr	r2, [r4, #16]
 8008540:	f104 010c 	add.w	r1, r4, #12
 8008544:	3202      	adds	r2, #2
 8008546:	0092      	lsls	r2, r2, #2
 8008548:	300c      	adds	r0, #12
 800854a:	f000 fd61 	bl	8009010 <memcpy>
 800854e:	4621      	mov	r1, r4
 8008550:	4638      	mov	r0, r7
 8008552:	f7ff ffa5 	bl	80084a0 <_Bfree>
 8008556:	4644      	mov	r4, r8
 8008558:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800855c:	3501      	adds	r5, #1
 800855e:	615e      	str	r6, [r3, #20]
 8008560:	6125      	str	r5, [r4, #16]
 8008562:	4620      	mov	r0, r4
 8008564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008568:	0800a83a 	.word	0x0800a83a
 800856c:	0800a84b 	.word	0x0800a84b

08008570 <__hi0bits>:
 8008570:	0c02      	lsrs	r2, r0, #16
 8008572:	0412      	lsls	r2, r2, #16
 8008574:	4603      	mov	r3, r0
 8008576:	b9ca      	cbnz	r2, 80085ac <__hi0bits+0x3c>
 8008578:	0403      	lsls	r3, r0, #16
 800857a:	2010      	movs	r0, #16
 800857c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008580:	bf04      	itt	eq
 8008582:	021b      	lsleq	r3, r3, #8
 8008584:	3008      	addeq	r0, #8
 8008586:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800858a:	bf04      	itt	eq
 800858c:	011b      	lsleq	r3, r3, #4
 800858e:	3004      	addeq	r0, #4
 8008590:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008594:	bf04      	itt	eq
 8008596:	009b      	lsleq	r3, r3, #2
 8008598:	3002      	addeq	r0, #2
 800859a:	2b00      	cmp	r3, #0
 800859c:	db05      	blt.n	80085aa <__hi0bits+0x3a>
 800859e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80085a2:	f100 0001 	add.w	r0, r0, #1
 80085a6:	bf08      	it	eq
 80085a8:	2020      	moveq	r0, #32
 80085aa:	4770      	bx	lr
 80085ac:	2000      	movs	r0, #0
 80085ae:	e7e5      	b.n	800857c <__hi0bits+0xc>

080085b0 <__lo0bits>:
 80085b0:	6803      	ldr	r3, [r0, #0]
 80085b2:	4602      	mov	r2, r0
 80085b4:	f013 0007 	ands.w	r0, r3, #7
 80085b8:	d00b      	beq.n	80085d2 <__lo0bits+0x22>
 80085ba:	07d9      	lsls	r1, r3, #31
 80085bc:	d421      	bmi.n	8008602 <__lo0bits+0x52>
 80085be:	0798      	lsls	r0, r3, #30
 80085c0:	bf49      	itett	mi
 80085c2:	085b      	lsrmi	r3, r3, #1
 80085c4:	089b      	lsrpl	r3, r3, #2
 80085c6:	2001      	movmi	r0, #1
 80085c8:	6013      	strmi	r3, [r2, #0]
 80085ca:	bf5c      	itt	pl
 80085cc:	2002      	movpl	r0, #2
 80085ce:	6013      	strpl	r3, [r2, #0]
 80085d0:	4770      	bx	lr
 80085d2:	b299      	uxth	r1, r3
 80085d4:	b909      	cbnz	r1, 80085da <__lo0bits+0x2a>
 80085d6:	2010      	movs	r0, #16
 80085d8:	0c1b      	lsrs	r3, r3, #16
 80085da:	b2d9      	uxtb	r1, r3
 80085dc:	b909      	cbnz	r1, 80085e2 <__lo0bits+0x32>
 80085de:	3008      	adds	r0, #8
 80085e0:	0a1b      	lsrs	r3, r3, #8
 80085e2:	0719      	lsls	r1, r3, #28
 80085e4:	bf04      	itt	eq
 80085e6:	091b      	lsreq	r3, r3, #4
 80085e8:	3004      	addeq	r0, #4
 80085ea:	0799      	lsls	r1, r3, #30
 80085ec:	bf04      	itt	eq
 80085ee:	089b      	lsreq	r3, r3, #2
 80085f0:	3002      	addeq	r0, #2
 80085f2:	07d9      	lsls	r1, r3, #31
 80085f4:	d403      	bmi.n	80085fe <__lo0bits+0x4e>
 80085f6:	085b      	lsrs	r3, r3, #1
 80085f8:	f100 0001 	add.w	r0, r0, #1
 80085fc:	d003      	beq.n	8008606 <__lo0bits+0x56>
 80085fe:	6013      	str	r3, [r2, #0]
 8008600:	4770      	bx	lr
 8008602:	2000      	movs	r0, #0
 8008604:	4770      	bx	lr
 8008606:	2020      	movs	r0, #32
 8008608:	4770      	bx	lr
	...

0800860c <__i2b>:
 800860c:	b510      	push	{r4, lr}
 800860e:	460c      	mov	r4, r1
 8008610:	2101      	movs	r1, #1
 8008612:	f7ff ff05 	bl	8008420 <_Balloc>
 8008616:	4602      	mov	r2, r0
 8008618:	b928      	cbnz	r0, 8008626 <__i2b+0x1a>
 800861a:	f240 1145 	movw	r1, #325	; 0x145
 800861e:	4b04      	ldr	r3, [pc, #16]	; (8008630 <__i2b+0x24>)
 8008620:	4804      	ldr	r0, [pc, #16]	; (8008634 <__i2b+0x28>)
 8008622:	f000 fd03 	bl	800902c <__assert_func>
 8008626:	2301      	movs	r3, #1
 8008628:	6144      	str	r4, [r0, #20]
 800862a:	6103      	str	r3, [r0, #16]
 800862c:	bd10      	pop	{r4, pc}
 800862e:	bf00      	nop
 8008630:	0800a83a 	.word	0x0800a83a
 8008634:	0800a84b 	.word	0x0800a84b

08008638 <__multiply>:
 8008638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863c:	4691      	mov	r9, r2
 800863e:	690a      	ldr	r2, [r1, #16]
 8008640:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008644:	460c      	mov	r4, r1
 8008646:	429a      	cmp	r2, r3
 8008648:	bfbe      	ittt	lt
 800864a:	460b      	movlt	r3, r1
 800864c:	464c      	movlt	r4, r9
 800864e:	4699      	movlt	r9, r3
 8008650:	6927      	ldr	r7, [r4, #16]
 8008652:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008656:	68a3      	ldr	r3, [r4, #8]
 8008658:	6861      	ldr	r1, [r4, #4]
 800865a:	eb07 060a 	add.w	r6, r7, sl
 800865e:	42b3      	cmp	r3, r6
 8008660:	b085      	sub	sp, #20
 8008662:	bfb8      	it	lt
 8008664:	3101      	addlt	r1, #1
 8008666:	f7ff fedb 	bl	8008420 <_Balloc>
 800866a:	b930      	cbnz	r0, 800867a <__multiply+0x42>
 800866c:	4602      	mov	r2, r0
 800866e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008672:	4b43      	ldr	r3, [pc, #268]	; (8008780 <__multiply+0x148>)
 8008674:	4843      	ldr	r0, [pc, #268]	; (8008784 <__multiply+0x14c>)
 8008676:	f000 fcd9 	bl	800902c <__assert_func>
 800867a:	f100 0514 	add.w	r5, r0, #20
 800867e:	462b      	mov	r3, r5
 8008680:	2200      	movs	r2, #0
 8008682:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008686:	4543      	cmp	r3, r8
 8008688:	d321      	bcc.n	80086ce <__multiply+0x96>
 800868a:	f104 0314 	add.w	r3, r4, #20
 800868e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008692:	f109 0314 	add.w	r3, r9, #20
 8008696:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800869a:	9202      	str	r2, [sp, #8]
 800869c:	1b3a      	subs	r2, r7, r4
 800869e:	3a15      	subs	r2, #21
 80086a0:	f022 0203 	bic.w	r2, r2, #3
 80086a4:	3204      	adds	r2, #4
 80086a6:	f104 0115 	add.w	r1, r4, #21
 80086aa:	428f      	cmp	r7, r1
 80086ac:	bf38      	it	cc
 80086ae:	2204      	movcc	r2, #4
 80086b0:	9201      	str	r2, [sp, #4]
 80086b2:	9a02      	ldr	r2, [sp, #8]
 80086b4:	9303      	str	r3, [sp, #12]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d80c      	bhi.n	80086d4 <__multiply+0x9c>
 80086ba:	2e00      	cmp	r6, #0
 80086bc:	dd03      	ble.n	80086c6 <__multiply+0x8e>
 80086be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d05a      	beq.n	800877c <__multiply+0x144>
 80086c6:	6106      	str	r6, [r0, #16]
 80086c8:	b005      	add	sp, #20
 80086ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ce:	f843 2b04 	str.w	r2, [r3], #4
 80086d2:	e7d8      	b.n	8008686 <__multiply+0x4e>
 80086d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80086d8:	f1ba 0f00 	cmp.w	sl, #0
 80086dc:	d023      	beq.n	8008726 <__multiply+0xee>
 80086de:	46a9      	mov	r9, r5
 80086e0:	f04f 0c00 	mov.w	ip, #0
 80086e4:	f104 0e14 	add.w	lr, r4, #20
 80086e8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80086ec:	f8d9 1000 	ldr.w	r1, [r9]
 80086f0:	fa1f fb82 	uxth.w	fp, r2
 80086f4:	b289      	uxth	r1, r1
 80086f6:	fb0a 110b 	mla	r1, sl, fp, r1
 80086fa:	4461      	add	r1, ip
 80086fc:	f8d9 c000 	ldr.w	ip, [r9]
 8008700:	0c12      	lsrs	r2, r2, #16
 8008702:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008706:	fb0a c202 	mla	r2, sl, r2, ip
 800870a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800870e:	b289      	uxth	r1, r1
 8008710:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008714:	4577      	cmp	r7, lr
 8008716:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800871a:	f849 1b04 	str.w	r1, [r9], #4
 800871e:	d8e3      	bhi.n	80086e8 <__multiply+0xb0>
 8008720:	9a01      	ldr	r2, [sp, #4]
 8008722:	f845 c002 	str.w	ip, [r5, r2]
 8008726:	9a03      	ldr	r2, [sp, #12]
 8008728:	3304      	adds	r3, #4
 800872a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800872e:	f1b9 0f00 	cmp.w	r9, #0
 8008732:	d021      	beq.n	8008778 <__multiply+0x140>
 8008734:	46ae      	mov	lr, r5
 8008736:	f04f 0a00 	mov.w	sl, #0
 800873a:	6829      	ldr	r1, [r5, #0]
 800873c:	f104 0c14 	add.w	ip, r4, #20
 8008740:	f8bc b000 	ldrh.w	fp, [ip]
 8008744:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008748:	b289      	uxth	r1, r1
 800874a:	fb09 220b 	mla	r2, r9, fp, r2
 800874e:	4452      	add	r2, sl
 8008750:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008754:	f84e 1b04 	str.w	r1, [lr], #4
 8008758:	f85c 1b04 	ldr.w	r1, [ip], #4
 800875c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008760:	f8be 1000 	ldrh.w	r1, [lr]
 8008764:	4567      	cmp	r7, ip
 8008766:	fb09 110a 	mla	r1, r9, sl, r1
 800876a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800876e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008772:	d8e5      	bhi.n	8008740 <__multiply+0x108>
 8008774:	9a01      	ldr	r2, [sp, #4]
 8008776:	50a9      	str	r1, [r5, r2]
 8008778:	3504      	adds	r5, #4
 800877a:	e79a      	b.n	80086b2 <__multiply+0x7a>
 800877c:	3e01      	subs	r6, #1
 800877e:	e79c      	b.n	80086ba <__multiply+0x82>
 8008780:	0800a83a 	.word	0x0800a83a
 8008784:	0800a84b 	.word	0x0800a84b

08008788 <__pow5mult>:
 8008788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800878c:	4615      	mov	r5, r2
 800878e:	f012 0203 	ands.w	r2, r2, #3
 8008792:	4606      	mov	r6, r0
 8008794:	460f      	mov	r7, r1
 8008796:	d007      	beq.n	80087a8 <__pow5mult+0x20>
 8008798:	4c25      	ldr	r4, [pc, #148]	; (8008830 <__pow5mult+0xa8>)
 800879a:	3a01      	subs	r2, #1
 800879c:	2300      	movs	r3, #0
 800879e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087a2:	f7ff fe9f 	bl	80084e4 <__multadd>
 80087a6:	4607      	mov	r7, r0
 80087a8:	10ad      	asrs	r5, r5, #2
 80087aa:	d03d      	beq.n	8008828 <__pow5mult+0xa0>
 80087ac:	69f4      	ldr	r4, [r6, #28]
 80087ae:	b97c      	cbnz	r4, 80087d0 <__pow5mult+0x48>
 80087b0:	2010      	movs	r0, #16
 80087b2:	f7ff fd81 	bl	80082b8 <malloc>
 80087b6:	4602      	mov	r2, r0
 80087b8:	61f0      	str	r0, [r6, #28]
 80087ba:	b928      	cbnz	r0, 80087c8 <__pow5mult+0x40>
 80087bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80087c0:	4b1c      	ldr	r3, [pc, #112]	; (8008834 <__pow5mult+0xac>)
 80087c2:	481d      	ldr	r0, [pc, #116]	; (8008838 <__pow5mult+0xb0>)
 80087c4:	f000 fc32 	bl	800902c <__assert_func>
 80087c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087cc:	6004      	str	r4, [r0, #0]
 80087ce:	60c4      	str	r4, [r0, #12]
 80087d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80087d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087d8:	b94c      	cbnz	r4, 80087ee <__pow5mult+0x66>
 80087da:	f240 2171 	movw	r1, #625	; 0x271
 80087de:	4630      	mov	r0, r6
 80087e0:	f7ff ff14 	bl	800860c <__i2b>
 80087e4:	2300      	movs	r3, #0
 80087e6:	4604      	mov	r4, r0
 80087e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80087ec:	6003      	str	r3, [r0, #0]
 80087ee:	f04f 0900 	mov.w	r9, #0
 80087f2:	07eb      	lsls	r3, r5, #31
 80087f4:	d50a      	bpl.n	800880c <__pow5mult+0x84>
 80087f6:	4639      	mov	r1, r7
 80087f8:	4622      	mov	r2, r4
 80087fa:	4630      	mov	r0, r6
 80087fc:	f7ff ff1c 	bl	8008638 <__multiply>
 8008800:	4680      	mov	r8, r0
 8008802:	4639      	mov	r1, r7
 8008804:	4630      	mov	r0, r6
 8008806:	f7ff fe4b 	bl	80084a0 <_Bfree>
 800880a:	4647      	mov	r7, r8
 800880c:	106d      	asrs	r5, r5, #1
 800880e:	d00b      	beq.n	8008828 <__pow5mult+0xa0>
 8008810:	6820      	ldr	r0, [r4, #0]
 8008812:	b938      	cbnz	r0, 8008824 <__pow5mult+0x9c>
 8008814:	4622      	mov	r2, r4
 8008816:	4621      	mov	r1, r4
 8008818:	4630      	mov	r0, r6
 800881a:	f7ff ff0d 	bl	8008638 <__multiply>
 800881e:	6020      	str	r0, [r4, #0]
 8008820:	f8c0 9000 	str.w	r9, [r0]
 8008824:	4604      	mov	r4, r0
 8008826:	e7e4      	b.n	80087f2 <__pow5mult+0x6a>
 8008828:	4638      	mov	r0, r7
 800882a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800882e:	bf00      	nop
 8008830:	0800a998 	.word	0x0800a998
 8008834:	0800a7cb 	.word	0x0800a7cb
 8008838:	0800a84b 	.word	0x0800a84b

0800883c <__lshift>:
 800883c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008840:	460c      	mov	r4, r1
 8008842:	4607      	mov	r7, r0
 8008844:	4691      	mov	r9, r2
 8008846:	6923      	ldr	r3, [r4, #16]
 8008848:	6849      	ldr	r1, [r1, #4]
 800884a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800884e:	68a3      	ldr	r3, [r4, #8]
 8008850:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008854:	f108 0601 	add.w	r6, r8, #1
 8008858:	42b3      	cmp	r3, r6
 800885a:	db0b      	blt.n	8008874 <__lshift+0x38>
 800885c:	4638      	mov	r0, r7
 800885e:	f7ff fddf 	bl	8008420 <_Balloc>
 8008862:	4605      	mov	r5, r0
 8008864:	b948      	cbnz	r0, 800887a <__lshift+0x3e>
 8008866:	4602      	mov	r2, r0
 8008868:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800886c:	4b27      	ldr	r3, [pc, #156]	; (800890c <__lshift+0xd0>)
 800886e:	4828      	ldr	r0, [pc, #160]	; (8008910 <__lshift+0xd4>)
 8008870:	f000 fbdc 	bl	800902c <__assert_func>
 8008874:	3101      	adds	r1, #1
 8008876:	005b      	lsls	r3, r3, #1
 8008878:	e7ee      	b.n	8008858 <__lshift+0x1c>
 800887a:	2300      	movs	r3, #0
 800887c:	f100 0114 	add.w	r1, r0, #20
 8008880:	f100 0210 	add.w	r2, r0, #16
 8008884:	4618      	mov	r0, r3
 8008886:	4553      	cmp	r3, sl
 8008888:	db33      	blt.n	80088f2 <__lshift+0xb6>
 800888a:	6920      	ldr	r0, [r4, #16]
 800888c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008890:	f104 0314 	add.w	r3, r4, #20
 8008894:	f019 091f 	ands.w	r9, r9, #31
 8008898:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800889c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088a0:	d02b      	beq.n	80088fa <__lshift+0xbe>
 80088a2:	468a      	mov	sl, r1
 80088a4:	2200      	movs	r2, #0
 80088a6:	f1c9 0e20 	rsb	lr, r9, #32
 80088aa:	6818      	ldr	r0, [r3, #0]
 80088ac:	fa00 f009 	lsl.w	r0, r0, r9
 80088b0:	4310      	orrs	r0, r2
 80088b2:	f84a 0b04 	str.w	r0, [sl], #4
 80088b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ba:	459c      	cmp	ip, r3
 80088bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80088c0:	d8f3      	bhi.n	80088aa <__lshift+0x6e>
 80088c2:	ebac 0304 	sub.w	r3, ip, r4
 80088c6:	3b15      	subs	r3, #21
 80088c8:	f023 0303 	bic.w	r3, r3, #3
 80088cc:	3304      	adds	r3, #4
 80088ce:	f104 0015 	add.w	r0, r4, #21
 80088d2:	4584      	cmp	ip, r0
 80088d4:	bf38      	it	cc
 80088d6:	2304      	movcc	r3, #4
 80088d8:	50ca      	str	r2, [r1, r3]
 80088da:	b10a      	cbz	r2, 80088e0 <__lshift+0xa4>
 80088dc:	f108 0602 	add.w	r6, r8, #2
 80088e0:	3e01      	subs	r6, #1
 80088e2:	4638      	mov	r0, r7
 80088e4:	4621      	mov	r1, r4
 80088e6:	612e      	str	r6, [r5, #16]
 80088e8:	f7ff fdda 	bl	80084a0 <_Bfree>
 80088ec:	4628      	mov	r0, r5
 80088ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80088f6:	3301      	adds	r3, #1
 80088f8:	e7c5      	b.n	8008886 <__lshift+0x4a>
 80088fa:	3904      	subs	r1, #4
 80088fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008900:	459c      	cmp	ip, r3
 8008902:	f841 2f04 	str.w	r2, [r1, #4]!
 8008906:	d8f9      	bhi.n	80088fc <__lshift+0xc0>
 8008908:	e7ea      	b.n	80088e0 <__lshift+0xa4>
 800890a:	bf00      	nop
 800890c:	0800a83a 	.word	0x0800a83a
 8008910:	0800a84b 	.word	0x0800a84b

08008914 <__mcmp>:
 8008914:	4603      	mov	r3, r0
 8008916:	690a      	ldr	r2, [r1, #16]
 8008918:	6900      	ldr	r0, [r0, #16]
 800891a:	b530      	push	{r4, r5, lr}
 800891c:	1a80      	subs	r0, r0, r2
 800891e:	d10d      	bne.n	800893c <__mcmp+0x28>
 8008920:	3314      	adds	r3, #20
 8008922:	3114      	adds	r1, #20
 8008924:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008928:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800892c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008930:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008934:	4295      	cmp	r5, r2
 8008936:	d002      	beq.n	800893e <__mcmp+0x2a>
 8008938:	d304      	bcc.n	8008944 <__mcmp+0x30>
 800893a:	2001      	movs	r0, #1
 800893c:	bd30      	pop	{r4, r5, pc}
 800893e:	42a3      	cmp	r3, r4
 8008940:	d3f4      	bcc.n	800892c <__mcmp+0x18>
 8008942:	e7fb      	b.n	800893c <__mcmp+0x28>
 8008944:	f04f 30ff 	mov.w	r0, #4294967295
 8008948:	e7f8      	b.n	800893c <__mcmp+0x28>
	...

0800894c <__mdiff>:
 800894c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008950:	460d      	mov	r5, r1
 8008952:	4607      	mov	r7, r0
 8008954:	4611      	mov	r1, r2
 8008956:	4628      	mov	r0, r5
 8008958:	4614      	mov	r4, r2
 800895a:	f7ff ffdb 	bl	8008914 <__mcmp>
 800895e:	1e06      	subs	r6, r0, #0
 8008960:	d111      	bne.n	8008986 <__mdiff+0x3a>
 8008962:	4631      	mov	r1, r6
 8008964:	4638      	mov	r0, r7
 8008966:	f7ff fd5b 	bl	8008420 <_Balloc>
 800896a:	4602      	mov	r2, r0
 800896c:	b928      	cbnz	r0, 800897a <__mdiff+0x2e>
 800896e:	f240 2137 	movw	r1, #567	; 0x237
 8008972:	4b3a      	ldr	r3, [pc, #232]	; (8008a5c <__mdiff+0x110>)
 8008974:	483a      	ldr	r0, [pc, #232]	; (8008a60 <__mdiff+0x114>)
 8008976:	f000 fb59 	bl	800902c <__assert_func>
 800897a:	2301      	movs	r3, #1
 800897c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008980:	4610      	mov	r0, r2
 8008982:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008986:	bfa4      	itt	ge
 8008988:	4623      	movge	r3, r4
 800898a:	462c      	movge	r4, r5
 800898c:	4638      	mov	r0, r7
 800898e:	6861      	ldr	r1, [r4, #4]
 8008990:	bfa6      	itte	ge
 8008992:	461d      	movge	r5, r3
 8008994:	2600      	movge	r6, #0
 8008996:	2601      	movlt	r6, #1
 8008998:	f7ff fd42 	bl	8008420 <_Balloc>
 800899c:	4602      	mov	r2, r0
 800899e:	b918      	cbnz	r0, 80089a8 <__mdiff+0x5c>
 80089a0:	f240 2145 	movw	r1, #581	; 0x245
 80089a4:	4b2d      	ldr	r3, [pc, #180]	; (8008a5c <__mdiff+0x110>)
 80089a6:	e7e5      	b.n	8008974 <__mdiff+0x28>
 80089a8:	f102 0814 	add.w	r8, r2, #20
 80089ac:	46c2      	mov	sl, r8
 80089ae:	f04f 0c00 	mov.w	ip, #0
 80089b2:	6927      	ldr	r7, [r4, #16]
 80089b4:	60c6      	str	r6, [r0, #12]
 80089b6:	692e      	ldr	r6, [r5, #16]
 80089b8:	f104 0014 	add.w	r0, r4, #20
 80089bc:	f105 0914 	add.w	r9, r5, #20
 80089c0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80089c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80089c8:	3410      	adds	r4, #16
 80089ca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80089ce:	f859 3b04 	ldr.w	r3, [r9], #4
 80089d2:	fa1f f18b 	uxth.w	r1, fp
 80089d6:	4461      	add	r1, ip
 80089d8:	fa1f fc83 	uxth.w	ip, r3
 80089dc:	0c1b      	lsrs	r3, r3, #16
 80089de:	eba1 010c 	sub.w	r1, r1, ip
 80089e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80089e6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80089ea:	b289      	uxth	r1, r1
 80089ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80089f0:	454e      	cmp	r6, r9
 80089f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80089f6:	f84a 1b04 	str.w	r1, [sl], #4
 80089fa:	d8e6      	bhi.n	80089ca <__mdiff+0x7e>
 80089fc:	1b73      	subs	r3, r6, r5
 80089fe:	3b15      	subs	r3, #21
 8008a00:	f023 0303 	bic.w	r3, r3, #3
 8008a04:	3515      	adds	r5, #21
 8008a06:	3304      	adds	r3, #4
 8008a08:	42ae      	cmp	r6, r5
 8008a0a:	bf38      	it	cc
 8008a0c:	2304      	movcc	r3, #4
 8008a0e:	4418      	add	r0, r3
 8008a10:	4443      	add	r3, r8
 8008a12:	461e      	mov	r6, r3
 8008a14:	4605      	mov	r5, r0
 8008a16:	4575      	cmp	r5, lr
 8008a18:	d30e      	bcc.n	8008a38 <__mdiff+0xec>
 8008a1a:	f10e 0103 	add.w	r1, lr, #3
 8008a1e:	1a09      	subs	r1, r1, r0
 8008a20:	f021 0103 	bic.w	r1, r1, #3
 8008a24:	3803      	subs	r0, #3
 8008a26:	4586      	cmp	lr, r0
 8008a28:	bf38      	it	cc
 8008a2a:	2100      	movcc	r1, #0
 8008a2c:	440b      	add	r3, r1
 8008a2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a32:	b189      	cbz	r1, 8008a58 <__mdiff+0x10c>
 8008a34:	6117      	str	r7, [r2, #16]
 8008a36:	e7a3      	b.n	8008980 <__mdiff+0x34>
 8008a38:	f855 8b04 	ldr.w	r8, [r5], #4
 8008a3c:	fa1f f188 	uxth.w	r1, r8
 8008a40:	4461      	add	r1, ip
 8008a42:	140c      	asrs	r4, r1, #16
 8008a44:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008a48:	b289      	uxth	r1, r1
 8008a4a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008a4e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008a52:	f846 1b04 	str.w	r1, [r6], #4
 8008a56:	e7de      	b.n	8008a16 <__mdiff+0xca>
 8008a58:	3f01      	subs	r7, #1
 8008a5a:	e7e8      	b.n	8008a2e <__mdiff+0xe2>
 8008a5c:	0800a83a 	.word	0x0800a83a
 8008a60:	0800a84b 	.word	0x0800a84b

08008a64 <__d2b>:
 8008a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a66:	2101      	movs	r1, #1
 8008a68:	4617      	mov	r7, r2
 8008a6a:	461c      	mov	r4, r3
 8008a6c:	9e08      	ldr	r6, [sp, #32]
 8008a6e:	f7ff fcd7 	bl	8008420 <_Balloc>
 8008a72:	4605      	mov	r5, r0
 8008a74:	b930      	cbnz	r0, 8008a84 <__d2b+0x20>
 8008a76:	4602      	mov	r2, r0
 8008a78:	f240 310f 	movw	r1, #783	; 0x30f
 8008a7c:	4b22      	ldr	r3, [pc, #136]	; (8008b08 <__d2b+0xa4>)
 8008a7e:	4823      	ldr	r0, [pc, #140]	; (8008b0c <__d2b+0xa8>)
 8008a80:	f000 fad4 	bl	800902c <__assert_func>
 8008a84:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008a88:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008a8c:	bb24      	cbnz	r4, 8008ad8 <__d2b+0x74>
 8008a8e:	2f00      	cmp	r7, #0
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	d026      	beq.n	8008ae2 <__d2b+0x7e>
 8008a94:	4668      	mov	r0, sp
 8008a96:	9700      	str	r7, [sp, #0]
 8008a98:	f7ff fd8a 	bl	80085b0 <__lo0bits>
 8008a9c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008aa0:	b1e8      	cbz	r0, 8008ade <__d2b+0x7a>
 8008aa2:	f1c0 0320 	rsb	r3, r0, #32
 8008aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aaa:	430b      	orrs	r3, r1
 8008aac:	40c2      	lsrs	r2, r0
 8008aae:	616b      	str	r3, [r5, #20]
 8008ab0:	9201      	str	r2, [sp, #4]
 8008ab2:	9b01      	ldr	r3, [sp, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	bf14      	ite	ne
 8008ab8:	2102      	movne	r1, #2
 8008aba:	2101      	moveq	r1, #1
 8008abc:	61ab      	str	r3, [r5, #24]
 8008abe:	6129      	str	r1, [r5, #16]
 8008ac0:	b1bc      	cbz	r4, 8008af2 <__d2b+0x8e>
 8008ac2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008ac6:	4404      	add	r4, r0
 8008ac8:	6034      	str	r4, [r6, #0]
 8008aca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad0:	6018      	str	r0, [r3, #0]
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	b003      	add	sp, #12
 8008ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008adc:	e7d7      	b.n	8008a8e <__d2b+0x2a>
 8008ade:	6169      	str	r1, [r5, #20]
 8008ae0:	e7e7      	b.n	8008ab2 <__d2b+0x4e>
 8008ae2:	a801      	add	r0, sp, #4
 8008ae4:	f7ff fd64 	bl	80085b0 <__lo0bits>
 8008ae8:	9b01      	ldr	r3, [sp, #4]
 8008aea:	2101      	movs	r1, #1
 8008aec:	616b      	str	r3, [r5, #20]
 8008aee:	3020      	adds	r0, #32
 8008af0:	e7e5      	b.n	8008abe <__d2b+0x5a>
 8008af2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008af6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008afa:	6030      	str	r0, [r6, #0]
 8008afc:	6918      	ldr	r0, [r3, #16]
 8008afe:	f7ff fd37 	bl	8008570 <__hi0bits>
 8008b02:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008b06:	e7e2      	b.n	8008ace <__d2b+0x6a>
 8008b08:	0800a83a 	.word	0x0800a83a
 8008b0c:	0800a84b 	.word	0x0800a84b

08008b10 <__sfputc_r>:
 8008b10:	6893      	ldr	r3, [r2, #8]
 8008b12:	b410      	push	{r4}
 8008b14:	3b01      	subs	r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	6093      	str	r3, [r2, #8]
 8008b1a:	da07      	bge.n	8008b2c <__sfputc_r+0x1c>
 8008b1c:	6994      	ldr	r4, [r2, #24]
 8008b1e:	42a3      	cmp	r3, r4
 8008b20:	db01      	blt.n	8008b26 <__sfputc_r+0x16>
 8008b22:	290a      	cmp	r1, #10
 8008b24:	d102      	bne.n	8008b2c <__sfputc_r+0x1c>
 8008b26:	bc10      	pop	{r4}
 8008b28:	f7fe bbef 	b.w	800730a <__swbuf_r>
 8008b2c:	6813      	ldr	r3, [r2, #0]
 8008b2e:	1c58      	adds	r0, r3, #1
 8008b30:	6010      	str	r0, [r2, #0]
 8008b32:	7019      	strb	r1, [r3, #0]
 8008b34:	4608      	mov	r0, r1
 8008b36:	bc10      	pop	{r4}
 8008b38:	4770      	bx	lr

08008b3a <__sfputs_r>:
 8008b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3c:	4606      	mov	r6, r0
 8008b3e:	460f      	mov	r7, r1
 8008b40:	4614      	mov	r4, r2
 8008b42:	18d5      	adds	r5, r2, r3
 8008b44:	42ac      	cmp	r4, r5
 8008b46:	d101      	bne.n	8008b4c <__sfputs_r+0x12>
 8008b48:	2000      	movs	r0, #0
 8008b4a:	e007      	b.n	8008b5c <__sfputs_r+0x22>
 8008b4c:	463a      	mov	r2, r7
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b54:	f7ff ffdc 	bl	8008b10 <__sfputc_r>
 8008b58:	1c43      	adds	r3, r0, #1
 8008b5a:	d1f3      	bne.n	8008b44 <__sfputs_r+0xa>
 8008b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b60 <_vfiprintf_r>:
 8008b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b64:	460d      	mov	r5, r1
 8008b66:	4614      	mov	r4, r2
 8008b68:	4698      	mov	r8, r3
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	b09d      	sub	sp, #116	; 0x74
 8008b6e:	b118      	cbz	r0, 8008b78 <_vfiprintf_r+0x18>
 8008b70:	6a03      	ldr	r3, [r0, #32]
 8008b72:	b90b      	cbnz	r3, 8008b78 <_vfiprintf_r+0x18>
 8008b74:	f7fe fae2 	bl	800713c <__sinit>
 8008b78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b7a:	07d9      	lsls	r1, r3, #31
 8008b7c:	d405      	bmi.n	8008b8a <_vfiprintf_r+0x2a>
 8008b7e:	89ab      	ldrh	r3, [r5, #12]
 8008b80:	059a      	lsls	r2, r3, #22
 8008b82:	d402      	bmi.n	8008b8a <_vfiprintf_r+0x2a>
 8008b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b86:	f7fe fcd2 	bl	800752e <__retarget_lock_acquire_recursive>
 8008b8a:	89ab      	ldrh	r3, [r5, #12]
 8008b8c:	071b      	lsls	r3, r3, #28
 8008b8e:	d501      	bpl.n	8008b94 <_vfiprintf_r+0x34>
 8008b90:	692b      	ldr	r3, [r5, #16]
 8008b92:	b99b      	cbnz	r3, 8008bbc <_vfiprintf_r+0x5c>
 8008b94:	4629      	mov	r1, r5
 8008b96:	4630      	mov	r0, r6
 8008b98:	f7fe fbf4 	bl	8007384 <__swsetup_r>
 8008b9c:	b170      	cbz	r0, 8008bbc <_vfiprintf_r+0x5c>
 8008b9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ba0:	07dc      	lsls	r4, r3, #31
 8008ba2:	d504      	bpl.n	8008bae <_vfiprintf_r+0x4e>
 8008ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba8:	b01d      	add	sp, #116	; 0x74
 8008baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bae:	89ab      	ldrh	r3, [r5, #12]
 8008bb0:	0598      	lsls	r0, r3, #22
 8008bb2:	d4f7      	bmi.n	8008ba4 <_vfiprintf_r+0x44>
 8008bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bb6:	f7fe fcbb 	bl	8007530 <__retarget_lock_release_recursive>
 8008bba:	e7f3      	b.n	8008ba4 <_vfiprintf_r+0x44>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc0:	2320      	movs	r3, #32
 8008bc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bc6:	2330      	movs	r3, #48	; 0x30
 8008bc8:	f04f 0901 	mov.w	r9, #1
 8008bcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008d80 <_vfiprintf_r+0x220>
 8008bd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bd8:	4623      	mov	r3, r4
 8008bda:	469a      	mov	sl, r3
 8008bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008be0:	b10a      	cbz	r2, 8008be6 <_vfiprintf_r+0x86>
 8008be2:	2a25      	cmp	r2, #37	; 0x25
 8008be4:	d1f9      	bne.n	8008bda <_vfiprintf_r+0x7a>
 8008be6:	ebba 0b04 	subs.w	fp, sl, r4
 8008bea:	d00b      	beq.n	8008c04 <_vfiprintf_r+0xa4>
 8008bec:	465b      	mov	r3, fp
 8008bee:	4622      	mov	r2, r4
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f7ff ffa1 	bl	8008b3a <__sfputs_r>
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	f000 80a9 	beq.w	8008d50 <_vfiprintf_r+0x1f0>
 8008bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c00:	445a      	add	r2, fp
 8008c02:	9209      	str	r2, [sp, #36]	; 0x24
 8008c04:	f89a 3000 	ldrb.w	r3, [sl]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 80a1 	beq.w	8008d50 <_vfiprintf_r+0x1f0>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f04f 32ff 	mov.w	r2, #4294967295
 8008c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c18:	f10a 0a01 	add.w	sl, sl, #1
 8008c1c:	9304      	str	r3, [sp, #16]
 8008c1e:	9307      	str	r3, [sp, #28]
 8008c20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c24:	931a      	str	r3, [sp, #104]	; 0x68
 8008c26:	4654      	mov	r4, sl
 8008c28:	2205      	movs	r2, #5
 8008c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c2e:	4854      	ldr	r0, [pc, #336]	; (8008d80 <_vfiprintf_r+0x220>)
 8008c30:	f7fe fc7f 	bl	8007532 <memchr>
 8008c34:	9a04      	ldr	r2, [sp, #16]
 8008c36:	b9d8      	cbnz	r0, 8008c70 <_vfiprintf_r+0x110>
 8008c38:	06d1      	lsls	r1, r2, #27
 8008c3a:	bf44      	itt	mi
 8008c3c:	2320      	movmi	r3, #32
 8008c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c42:	0713      	lsls	r3, r2, #28
 8008c44:	bf44      	itt	mi
 8008c46:	232b      	movmi	r3, #43	; 0x2b
 8008c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c50:	2b2a      	cmp	r3, #42	; 0x2a
 8008c52:	d015      	beq.n	8008c80 <_vfiprintf_r+0x120>
 8008c54:	4654      	mov	r4, sl
 8008c56:	2000      	movs	r0, #0
 8008c58:	f04f 0c0a 	mov.w	ip, #10
 8008c5c:	9a07      	ldr	r2, [sp, #28]
 8008c5e:	4621      	mov	r1, r4
 8008c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c64:	3b30      	subs	r3, #48	; 0x30
 8008c66:	2b09      	cmp	r3, #9
 8008c68:	d94d      	bls.n	8008d06 <_vfiprintf_r+0x1a6>
 8008c6a:	b1b0      	cbz	r0, 8008c9a <_vfiprintf_r+0x13a>
 8008c6c:	9207      	str	r2, [sp, #28]
 8008c6e:	e014      	b.n	8008c9a <_vfiprintf_r+0x13a>
 8008c70:	eba0 0308 	sub.w	r3, r0, r8
 8008c74:	fa09 f303 	lsl.w	r3, r9, r3
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	46a2      	mov	sl, r4
 8008c7c:	9304      	str	r3, [sp, #16]
 8008c7e:	e7d2      	b.n	8008c26 <_vfiprintf_r+0xc6>
 8008c80:	9b03      	ldr	r3, [sp, #12]
 8008c82:	1d19      	adds	r1, r3, #4
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	9103      	str	r1, [sp, #12]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	bfbb      	ittet	lt
 8008c8c:	425b      	neglt	r3, r3
 8008c8e:	f042 0202 	orrlt.w	r2, r2, #2
 8008c92:	9307      	strge	r3, [sp, #28]
 8008c94:	9307      	strlt	r3, [sp, #28]
 8008c96:	bfb8      	it	lt
 8008c98:	9204      	strlt	r2, [sp, #16]
 8008c9a:	7823      	ldrb	r3, [r4, #0]
 8008c9c:	2b2e      	cmp	r3, #46	; 0x2e
 8008c9e:	d10c      	bne.n	8008cba <_vfiprintf_r+0x15a>
 8008ca0:	7863      	ldrb	r3, [r4, #1]
 8008ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ca4:	d134      	bne.n	8008d10 <_vfiprintf_r+0x1b0>
 8008ca6:	9b03      	ldr	r3, [sp, #12]
 8008ca8:	3402      	adds	r4, #2
 8008caa:	1d1a      	adds	r2, r3, #4
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	9203      	str	r2, [sp, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	bfb8      	it	lt
 8008cb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cb8:	9305      	str	r3, [sp, #20]
 8008cba:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d84 <_vfiprintf_r+0x224>
 8008cbe:	2203      	movs	r2, #3
 8008cc0:	4650      	mov	r0, sl
 8008cc2:	7821      	ldrb	r1, [r4, #0]
 8008cc4:	f7fe fc35 	bl	8007532 <memchr>
 8008cc8:	b138      	cbz	r0, 8008cda <_vfiprintf_r+0x17a>
 8008cca:	2240      	movs	r2, #64	; 0x40
 8008ccc:	9b04      	ldr	r3, [sp, #16]
 8008cce:	eba0 000a 	sub.w	r0, r0, sl
 8008cd2:	4082      	lsls	r2, r0
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	3401      	adds	r4, #1
 8008cd8:	9304      	str	r3, [sp, #16]
 8008cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cde:	2206      	movs	r2, #6
 8008ce0:	4829      	ldr	r0, [pc, #164]	; (8008d88 <_vfiprintf_r+0x228>)
 8008ce2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ce6:	f7fe fc24 	bl	8007532 <memchr>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d03f      	beq.n	8008d6e <_vfiprintf_r+0x20e>
 8008cee:	4b27      	ldr	r3, [pc, #156]	; (8008d8c <_vfiprintf_r+0x22c>)
 8008cf0:	bb1b      	cbnz	r3, 8008d3a <_vfiprintf_r+0x1da>
 8008cf2:	9b03      	ldr	r3, [sp, #12]
 8008cf4:	3307      	adds	r3, #7
 8008cf6:	f023 0307 	bic.w	r3, r3, #7
 8008cfa:	3308      	adds	r3, #8
 8008cfc:	9303      	str	r3, [sp, #12]
 8008cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d00:	443b      	add	r3, r7
 8008d02:	9309      	str	r3, [sp, #36]	; 0x24
 8008d04:	e768      	b.n	8008bd8 <_vfiprintf_r+0x78>
 8008d06:	460c      	mov	r4, r1
 8008d08:	2001      	movs	r0, #1
 8008d0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d0e:	e7a6      	b.n	8008c5e <_vfiprintf_r+0xfe>
 8008d10:	2300      	movs	r3, #0
 8008d12:	f04f 0c0a 	mov.w	ip, #10
 8008d16:	4619      	mov	r1, r3
 8008d18:	3401      	adds	r4, #1
 8008d1a:	9305      	str	r3, [sp, #20]
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d22:	3a30      	subs	r2, #48	; 0x30
 8008d24:	2a09      	cmp	r2, #9
 8008d26:	d903      	bls.n	8008d30 <_vfiprintf_r+0x1d0>
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d0c6      	beq.n	8008cba <_vfiprintf_r+0x15a>
 8008d2c:	9105      	str	r1, [sp, #20]
 8008d2e:	e7c4      	b.n	8008cba <_vfiprintf_r+0x15a>
 8008d30:	4604      	mov	r4, r0
 8008d32:	2301      	movs	r3, #1
 8008d34:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d38:	e7f0      	b.n	8008d1c <_vfiprintf_r+0x1bc>
 8008d3a:	ab03      	add	r3, sp, #12
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	462a      	mov	r2, r5
 8008d40:	4630      	mov	r0, r6
 8008d42:	4b13      	ldr	r3, [pc, #76]	; (8008d90 <_vfiprintf_r+0x230>)
 8008d44:	a904      	add	r1, sp, #16
 8008d46:	f7fd fdab 	bl	80068a0 <_printf_float>
 8008d4a:	4607      	mov	r7, r0
 8008d4c:	1c78      	adds	r0, r7, #1
 8008d4e:	d1d6      	bne.n	8008cfe <_vfiprintf_r+0x19e>
 8008d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d52:	07d9      	lsls	r1, r3, #31
 8008d54:	d405      	bmi.n	8008d62 <_vfiprintf_r+0x202>
 8008d56:	89ab      	ldrh	r3, [r5, #12]
 8008d58:	059a      	lsls	r2, r3, #22
 8008d5a:	d402      	bmi.n	8008d62 <_vfiprintf_r+0x202>
 8008d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d5e:	f7fe fbe7 	bl	8007530 <__retarget_lock_release_recursive>
 8008d62:	89ab      	ldrh	r3, [r5, #12]
 8008d64:	065b      	lsls	r3, r3, #25
 8008d66:	f53f af1d 	bmi.w	8008ba4 <_vfiprintf_r+0x44>
 8008d6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d6c:	e71c      	b.n	8008ba8 <_vfiprintf_r+0x48>
 8008d6e:	ab03      	add	r3, sp, #12
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	462a      	mov	r2, r5
 8008d74:	4630      	mov	r0, r6
 8008d76:	4b06      	ldr	r3, [pc, #24]	; (8008d90 <_vfiprintf_r+0x230>)
 8008d78:	a904      	add	r1, sp, #16
 8008d7a:	f7fe f831 	bl	8006de0 <_printf_i>
 8008d7e:	e7e4      	b.n	8008d4a <_vfiprintf_r+0x1ea>
 8008d80:	0800a9a4 	.word	0x0800a9a4
 8008d84:	0800a9aa 	.word	0x0800a9aa
 8008d88:	0800a9ae 	.word	0x0800a9ae
 8008d8c:	080068a1 	.word	0x080068a1
 8008d90:	08008b3b 	.word	0x08008b3b

08008d94 <__sflush_r>:
 8008d94:	898a      	ldrh	r2, [r1, #12]
 8008d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d98:	4605      	mov	r5, r0
 8008d9a:	0710      	lsls	r0, r2, #28
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	d457      	bmi.n	8008e50 <__sflush_r+0xbc>
 8008da0:	684b      	ldr	r3, [r1, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	dc04      	bgt.n	8008db0 <__sflush_r+0x1c>
 8008da6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	dc01      	bgt.n	8008db0 <__sflush_r+0x1c>
 8008dac:	2000      	movs	r0, #0
 8008dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008db0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008db2:	2e00      	cmp	r6, #0
 8008db4:	d0fa      	beq.n	8008dac <__sflush_r+0x18>
 8008db6:	2300      	movs	r3, #0
 8008db8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008dbc:	682f      	ldr	r7, [r5, #0]
 8008dbe:	6a21      	ldr	r1, [r4, #32]
 8008dc0:	602b      	str	r3, [r5, #0]
 8008dc2:	d032      	beq.n	8008e2a <__sflush_r+0x96>
 8008dc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	075a      	lsls	r2, r3, #29
 8008dca:	d505      	bpl.n	8008dd8 <__sflush_r+0x44>
 8008dcc:	6863      	ldr	r3, [r4, #4]
 8008dce:	1ac0      	subs	r0, r0, r3
 8008dd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dd2:	b10b      	cbz	r3, 8008dd8 <__sflush_r+0x44>
 8008dd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dd6:	1ac0      	subs	r0, r0, r3
 8008dd8:	2300      	movs	r3, #0
 8008dda:	4602      	mov	r2, r0
 8008ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dde:	4628      	mov	r0, r5
 8008de0:	6a21      	ldr	r1, [r4, #32]
 8008de2:	47b0      	blx	r6
 8008de4:	1c43      	adds	r3, r0, #1
 8008de6:	89a3      	ldrh	r3, [r4, #12]
 8008de8:	d106      	bne.n	8008df8 <__sflush_r+0x64>
 8008dea:	6829      	ldr	r1, [r5, #0]
 8008dec:	291d      	cmp	r1, #29
 8008dee:	d82b      	bhi.n	8008e48 <__sflush_r+0xb4>
 8008df0:	4a28      	ldr	r2, [pc, #160]	; (8008e94 <__sflush_r+0x100>)
 8008df2:	410a      	asrs	r2, r1
 8008df4:	07d6      	lsls	r6, r2, #31
 8008df6:	d427      	bmi.n	8008e48 <__sflush_r+0xb4>
 8008df8:	2200      	movs	r2, #0
 8008dfa:	6062      	str	r2, [r4, #4]
 8008dfc:	6922      	ldr	r2, [r4, #16]
 8008dfe:	04d9      	lsls	r1, r3, #19
 8008e00:	6022      	str	r2, [r4, #0]
 8008e02:	d504      	bpl.n	8008e0e <__sflush_r+0x7a>
 8008e04:	1c42      	adds	r2, r0, #1
 8008e06:	d101      	bne.n	8008e0c <__sflush_r+0x78>
 8008e08:	682b      	ldr	r3, [r5, #0]
 8008e0a:	b903      	cbnz	r3, 8008e0e <__sflush_r+0x7a>
 8008e0c:	6560      	str	r0, [r4, #84]	; 0x54
 8008e0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e10:	602f      	str	r7, [r5, #0]
 8008e12:	2900      	cmp	r1, #0
 8008e14:	d0ca      	beq.n	8008dac <__sflush_r+0x18>
 8008e16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e1a:	4299      	cmp	r1, r3
 8008e1c:	d002      	beq.n	8008e24 <__sflush_r+0x90>
 8008e1e:	4628      	mov	r0, r5
 8008e20:	f7ff fa02 	bl	8008228 <_free_r>
 8008e24:	2000      	movs	r0, #0
 8008e26:	6360      	str	r0, [r4, #52]	; 0x34
 8008e28:	e7c1      	b.n	8008dae <__sflush_r+0x1a>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	47b0      	blx	r6
 8008e30:	1c41      	adds	r1, r0, #1
 8008e32:	d1c8      	bne.n	8008dc6 <__sflush_r+0x32>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d0c5      	beq.n	8008dc6 <__sflush_r+0x32>
 8008e3a:	2b1d      	cmp	r3, #29
 8008e3c:	d001      	beq.n	8008e42 <__sflush_r+0xae>
 8008e3e:	2b16      	cmp	r3, #22
 8008e40:	d101      	bne.n	8008e46 <__sflush_r+0xb2>
 8008e42:	602f      	str	r7, [r5, #0]
 8008e44:	e7b2      	b.n	8008dac <__sflush_r+0x18>
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e4c:	81a3      	strh	r3, [r4, #12]
 8008e4e:	e7ae      	b.n	8008dae <__sflush_r+0x1a>
 8008e50:	690f      	ldr	r7, [r1, #16]
 8008e52:	2f00      	cmp	r7, #0
 8008e54:	d0aa      	beq.n	8008dac <__sflush_r+0x18>
 8008e56:	0793      	lsls	r3, r2, #30
 8008e58:	bf18      	it	ne
 8008e5a:	2300      	movne	r3, #0
 8008e5c:	680e      	ldr	r6, [r1, #0]
 8008e5e:	bf08      	it	eq
 8008e60:	694b      	ldreq	r3, [r1, #20]
 8008e62:	1bf6      	subs	r6, r6, r7
 8008e64:	600f      	str	r7, [r1, #0]
 8008e66:	608b      	str	r3, [r1, #8]
 8008e68:	2e00      	cmp	r6, #0
 8008e6a:	dd9f      	ble.n	8008dac <__sflush_r+0x18>
 8008e6c:	4633      	mov	r3, r6
 8008e6e:	463a      	mov	r2, r7
 8008e70:	4628      	mov	r0, r5
 8008e72:	6a21      	ldr	r1, [r4, #32]
 8008e74:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008e78:	47e0      	blx	ip
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	dc06      	bgt.n	8008e8c <__sflush_r+0xf8>
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	f04f 30ff 	mov.w	r0, #4294967295
 8008e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e88:	81a3      	strh	r3, [r4, #12]
 8008e8a:	e790      	b.n	8008dae <__sflush_r+0x1a>
 8008e8c:	4407      	add	r7, r0
 8008e8e:	1a36      	subs	r6, r6, r0
 8008e90:	e7ea      	b.n	8008e68 <__sflush_r+0xd4>
 8008e92:	bf00      	nop
 8008e94:	dfbffffe 	.word	0xdfbffffe

08008e98 <_fflush_r>:
 8008e98:	b538      	push	{r3, r4, r5, lr}
 8008e9a:	690b      	ldr	r3, [r1, #16]
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	b913      	cbnz	r3, 8008ea8 <_fflush_r+0x10>
 8008ea2:	2500      	movs	r5, #0
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	bd38      	pop	{r3, r4, r5, pc}
 8008ea8:	b118      	cbz	r0, 8008eb2 <_fflush_r+0x1a>
 8008eaa:	6a03      	ldr	r3, [r0, #32]
 8008eac:	b90b      	cbnz	r3, 8008eb2 <_fflush_r+0x1a>
 8008eae:	f7fe f945 	bl	800713c <__sinit>
 8008eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d0f3      	beq.n	8008ea2 <_fflush_r+0xa>
 8008eba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ebc:	07d0      	lsls	r0, r2, #31
 8008ebe:	d404      	bmi.n	8008eca <_fflush_r+0x32>
 8008ec0:	0599      	lsls	r1, r3, #22
 8008ec2:	d402      	bmi.n	8008eca <_fflush_r+0x32>
 8008ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ec6:	f7fe fb32 	bl	800752e <__retarget_lock_acquire_recursive>
 8008eca:	4628      	mov	r0, r5
 8008ecc:	4621      	mov	r1, r4
 8008ece:	f7ff ff61 	bl	8008d94 <__sflush_r>
 8008ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ed4:	4605      	mov	r5, r0
 8008ed6:	07da      	lsls	r2, r3, #31
 8008ed8:	d4e4      	bmi.n	8008ea4 <_fflush_r+0xc>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	059b      	lsls	r3, r3, #22
 8008ede:	d4e1      	bmi.n	8008ea4 <_fflush_r+0xc>
 8008ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ee2:	f7fe fb25 	bl	8007530 <__retarget_lock_release_recursive>
 8008ee6:	e7dd      	b.n	8008ea4 <_fflush_r+0xc>

08008ee8 <__swhatbuf_r>:
 8008ee8:	b570      	push	{r4, r5, r6, lr}
 8008eea:	460c      	mov	r4, r1
 8008eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef0:	4615      	mov	r5, r2
 8008ef2:	2900      	cmp	r1, #0
 8008ef4:	461e      	mov	r6, r3
 8008ef6:	b096      	sub	sp, #88	; 0x58
 8008ef8:	da0c      	bge.n	8008f14 <__swhatbuf_r+0x2c>
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	2100      	movs	r1, #0
 8008efe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f02:	bf0c      	ite	eq
 8008f04:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008f08:	2340      	movne	r3, #64	; 0x40
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	6031      	str	r1, [r6, #0]
 8008f0e:	602b      	str	r3, [r5, #0]
 8008f10:	b016      	add	sp, #88	; 0x58
 8008f12:	bd70      	pop	{r4, r5, r6, pc}
 8008f14:	466a      	mov	r2, sp
 8008f16:	f000 f849 	bl	8008fac <_fstat_r>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	dbed      	blt.n	8008efa <__swhatbuf_r+0x12>
 8008f1e:	9901      	ldr	r1, [sp, #4]
 8008f20:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008f24:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008f28:	4259      	negs	r1, r3
 8008f2a:	4159      	adcs	r1, r3
 8008f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f30:	e7eb      	b.n	8008f0a <__swhatbuf_r+0x22>

08008f32 <__smakebuf_r>:
 8008f32:	898b      	ldrh	r3, [r1, #12]
 8008f34:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f36:	079d      	lsls	r5, r3, #30
 8008f38:	4606      	mov	r6, r0
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	d507      	bpl.n	8008f4e <__smakebuf_r+0x1c>
 8008f3e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f42:	6023      	str	r3, [r4, #0]
 8008f44:	6123      	str	r3, [r4, #16]
 8008f46:	2301      	movs	r3, #1
 8008f48:	6163      	str	r3, [r4, #20]
 8008f4a:	b002      	add	sp, #8
 8008f4c:	bd70      	pop	{r4, r5, r6, pc}
 8008f4e:	466a      	mov	r2, sp
 8008f50:	ab01      	add	r3, sp, #4
 8008f52:	f7ff ffc9 	bl	8008ee8 <__swhatbuf_r>
 8008f56:	9900      	ldr	r1, [sp, #0]
 8008f58:	4605      	mov	r5, r0
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	f7ff f9d4 	bl	8008308 <_malloc_r>
 8008f60:	b948      	cbnz	r0, 8008f76 <__smakebuf_r+0x44>
 8008f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f66:	059a      	lsls	r2, r3, #22
 8008f68:	d4ef      	bmi.n	8008f4a <__smakebuf_r+0x18>
 8008f6a:	f023 0303 	bic.w	r3, r3, #3
 8008f6e:	f043 0302 	orr.w	r3, r3, #2
 8008f72:	81a3      	strh	r3, [r4, #12]
 8008f74:	e7e3      	b.n	8008f3e <__smakebuf_r+0xc>
 8008f76:	89a3      	ldrh	r3, [r4, #12]
 8008f78:	6020      	str	r0, [r4, #0]
 8008f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f7e:	81a3      	strh	r3, [r4, #12]
 8008f80:	9b00      	ldr	r3, [sp, #0]
 8008f82:	6120      	str	r0, [r4, #16]
 8008f84:	6163      	str	r3, [r4, #20]
 8008f86:	9b01      	ldr	r3, [sp, #4]
 8008f88:	b15b      	cbz	r3, 8008fa2 <__smakebuf_r+0x70>
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f90:	f000 f81e 	bl	8008fd0 <_isatty_r>
 8008f94:	b128      	cbz	r0, 8008fa2 <__smakebuf_r+0x70>
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	f023 0303 	bic.w	r3, r3, #3
 8008f9c:	f043 0301 	orr.w	r3, r3, #1
 8008fa0:	81a3      	strh	r3, [r4, #12]
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	431d      	orrs	r5, r3
 8008fa6:	81a5      	strh	r5, [r4, #12]
 8008fa8:	e7cf      	b.n	8008f4a <__smakebuf_r+0x18>
	...

08008fac <_fstat_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	2300      	movs	r3, #0
 8008fb0:	4d06      	ldr	r5, [pc, #24]	; (8008fcc <_fstat_r+0x20>)
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	4608      	mov	r0, r1
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	602b      	str	r3, [r5, #0]
 8008fba:	f7fa f952 	bl	8003262 <_fstat>
 8008fbe:	1c43      	adds	r3, r0, #1
 8008fc0:	d102      	bne.n	8008fc8 <_fstat_r+0x1c>
 8008fc2:	682b      	ldr	r3, [r5, #0]
 8008fc4:	b103      	cbz	r3, 8008fc8 <_fstat_r+0x1c>
 8008fc6:	6023      	str	r3, [r4, #0]
 8008fc8:	bd38      	pop	{r3, r4, r5, pc}
 8008fca:	bf00      	nop
 8008fcc:	200004b4 	.word	0x200004b4

08008fd0 <_isatty_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	4d05      	ldr	r5, [pc, #20]	; (8008fec <_isatty_r+0x1c>)
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	4608      	mov	r0, r1
 8008fda:	602b      	str	r3, [r5, #0]
 8008fdc:	f7fa f950 	bl	8003280 <_isatty>
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	d102      	bne.n	8008fea <_isatty_r+0x1a>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	b103      	cbz	r3, 8008fea <_isatty_r+0x1a>
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	bd38      	pop	{r3, r4, r5, pc}
 8008fec:	200004b4 	.word	0x200004b4

08008ff0 <_sbrk_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	4d05      	ldr	r5, [pc, #20]	; (800900c <_sbrk_r+0x1c>)
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	4608      	mov	r0, r1
 8008ffa:	602b      	str	r3, [r5, #0]
 8008ffc:	f7fa f956 	bl	80032ac <_sbrk>
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	d102      	bne.n	800900a <_sbrk_r+0x1a>
 8009004:	682b      	ldr	r3, [r5, #0]
 8009006:	b103      	cbz	r3, 800900a <_sbrk_r+0x1a>
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	bd38      	pop	{r3, r4, r5, pc}
 800900c:	200004b4 	.word	0x200004b4

08009010 <memcpy>:
 8009010:	440a      	add	r2, r1
 8009012:	4291      	cmp	r1, r2
 8009014:	f100 33ff 	add.w	r3, r0, #4294967295
 8009018:	d100      	bne.n	800901c <memcpy+0xc>
 800901a:	4770      	bx	lr
 800901c:	b510      	push	{r4, lr}
 800901e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009022:	4291      	cmp	r1, r2
 8009024:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009028:	d1f9      	bne.n	800901e <memcpy+0xe>
 800902a:	bd10      	pop	{r4, pc}

0800902c <__assert_func>:
 800902c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800902e:	4614      	mov	r4, r2
 8009030:	461a      	mov	r2, r3
 8009032:	4b09      	ldr	r3, [pc, #36]	; (8009058 <__assert_func+0x2c>)
 8009034:	4605      	mov	r5, r0
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68d8      	ldr	r0, [r3, #12]
 800903a:	b14c      	cbz	r4, 8009050 <__assert_func+0x24>
 800903c:	4b07      	ldr	r3, [pc, #28]	; (800905c <__assert_func+0x30>)
 800903e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009042:	9100      	str	r1, [sp, #0]
 8009044:	462b      	mov	r3, r5
 8009046:	4906      	ldr	r1, [pc, #24]	; (8009060 <__assert_func+0x34>)
 8009048:	f000 f842 	bl	80090d0 <fiprintf>
 800904c:	f000 f852 	bl	80090f4 <abort>
 8009050:	4b04      	ldr	r3, [pc, #16]	; (8009064 <__assert_func+0x38>)
 8009052:	461c      	mov	r4, r3
 8009054:	e7f3      	b.n	800903e <__assert_func+0x12>
 8009056:	bf00      	nop
 8009058:	2000006c 	.word	0x2000006c
 800905c:	0800a9bf 	.word	0x0800a9bf
 8009060:	0800a9cc 	.word	0x0800a9cc
 8009064:	0800a9fa 	.word	0x0800a9fa

08009068 <_calloc_r>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	fba1 5402 	umull	r5, r4, r1, r2
 800906e:	b934      	cbnz	r4, 800907e <_calloc_r+0x16>
 8009070:	4629      	mov	r1, r5
 8009072:	f7ff f949 	bl	8008308 <_malloc_r>
 8009076:	4606      	mov	r6, r0
 8009078:	b928      	cbnz	r0, 8009086 <_calloc_r+0x1e>
 800907a:	4630      	mov	r0, r6
 800907c:	bd70      	pop	{r4, r5, r6, pc}
 800907e:	220c      	movs	r2, #12
 8009080:	2600      	movs	r6, #0
 8009082:	6002      	str	r2, [r0, #0]
 8009084:	e7f9      	b.n	800907a <_calloc_r+0x12>
 8009086:	462a      	mov	r2, r5
 8009088:	4621      	mov	r1, r4
 800908a:	f7fe f9d3 	bl	8007434 <memset>
 800908e:	e7f4      	b.n	800907a <_calloc_r+0x12>

08009090 <__ascii_mbtowc>:
 8009090:	b082      	sub	sp, #8
 8009092:	b901      	cbnz	r1, 8009096 <__ascii_mbtowc+0x6>
 8009094:	a901      	add	r1, sp, #4
 8009096:	b142      	cbz	r2, 80090aa <__ascii_mbtowc+0x1a>
 8009098:	b14b      	cbz	r3, 80090ae <__ascii_mbtowc+0x1e>
 800909a:	7813      	ldrb	r3, [r2, #0]
 800909c:	600b      	str	r3, [r1, #0]
 800909e:	7812      	ldrb	r2, [r2, #0]
 80090a0:	1e10      	subs	r0, r2, #0
 80090a2:	bf18      	it	ne
 80090a4:	2001      	movne	r0, #1
 80090a6:	b002      	add	sp, #8
 80090a8:	4770      	bx	lr
 80090aa:	4610      	mov	r0, r2
 80090ac:	e7fb      	b.n	80090a6 <__ascii_mbtowc+0x16>
 80090ae:	f06f 0001 	mvn.w	r0, #1
 80090b2:	e7f8      	b.n	80090a6 <__ascii_mbtowc+0x16>

080090b4 <__ascii_wctomb>:
 80090b4:	4603      	mov	r3, r0
 80090b6:	4608      	mov	r0, r1
 80090b8:	b141      	cbz	r1, 80090cc <__ascii_wctomb+0x18>
 80090ba:	2aff      	cmp	r2, #255	; 0xff
 80090bc:	d904      	bls.n	80090c8 <__ascii_wctomb+0x14>
 80090be:	228a      	movs	r2, #138	; 0x8a
 80090c0:	f04f 30ff 	mov.w	r0, #4294967295
 80090c4:	601a      	str	r2, [r3, #0]
 80090c6:	4770      	bx	lr
 80090c8:	2001      	movs	r0, #1
 80090ca:	700a      	strb	r2, [r1, #0]
 80090cc:	4770      	bx	lr
	...

080090d0 <fiprintf>:
 80090d0:	b40e      	push	{r1, r2, r3}
 80090d2:	b503      	push	{r0, r1, lr}
 80090d4:	4601      	mov	r1, r0
 80090d6:	ab03      	add	r3, sp, #12
 80090d8:	4805      	ldr	r0, [pc, #20]	; (80090f0 <fiprintf+0x20>)
 80090da:	f853 2b04 	ldr.w	r2, [r3], #4
 80090de:	6800      	ldr	r0, [r0, #0]
 80090e0:	9301      	str	r3, [sp, #4]
 80090e2:	f7ff fd3d 	bl	8008b60 <_vfiprintf_r>
 80090e6:	b002      	add	sp, #8
 80090e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80090ec:	b003      	add	sp, #12
 80090ee:	4770      	bx	lr
 80090f0:	2000006c 	.word	0x2000006c

080090f4 <abort>:
 80090f4:	2006      	movs	r0, #6
 80090f6:	b508      	push	{r3, lr}
 80090f8:	f000 f82c 	bl	8009154 <raise>
 80090fc:	2001      	movs	r0, #1
 80090fe:	f7fa f87e 	bl	80031fe <_exit>

08009102 <_raise_r>:
 8009102:	291f      	cmp	r1, #31
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	4604      	mov	r4, r0
 8009108:	460d      	mov	r5, r1
 800910a:	d904      	bls.n	8009116 <_raise_r+0x14>
 800910c:	2316      	movs	r3, #22
 800910e:	6003      	str	r3, [r0, #0]
 8009110:	f04f 30ff 	mov.w	r0, #4294967295
 8009114:	bd38      	pop	{r3, r4, r5, pc}
 8009116:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009118:	b112      	cbz	r2, 8009120 <_raise_r+0x1e>
 800911a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800911e:	b94b      	cbnz	r3, 8009134 <_raise_r+0x32>
 8009120:	4620      	mov	r0, r4
 8009122:	f000 f831 	bl	8009188 <_getpid_r>
 8009126:	462a      	mov	r2, r5
 8009128:	4601      	mov	r1, r0
 800912a:	4620      	mov	r0, r4
 800912c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009130:	f000 b818 	b.w	8009164 <_kill_r>
 8009134:	2b01      	cmp	r3, #1
 8009136:	d00a      	beq.n	800914e <_raise_r+0x4c>
 8009138:	1c59      	adds	r1, r3, #1
 800913a:	d103      	bne.n	8009144 <_raise_r+0x42>
 800913c:	2316      	movs	r3, #22
 800913e:	6003      	str	r3, [r0, #0]
 8009140:	2001      	movs	r0, #1
 8009142:	e7e7      	b.n	8009114 <_raise_r+0x12>
 8009144:	2400      	movs	r4, #0
 8009146:	4628      	mov	r0, r5
 8009148:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800914c:	4798      	blx	r3
 800914e:	2000      	movs	r0, #0
 8009150:	e7e0      	b.n	8009114 <_raise_r+0x12>
	...

08009154 <raise>:
 8009154:	4b02      	ldr	r3, [pc, #8]	; (8009160 <raise+0xc>)
 8009156:	4601      	mov	r1, r0
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	f7ff bfd2 	b.w	8009102 <_raise_r>
 800915e:	bf00      	nop
 8009160:	2000006c 	.word	0x2000006c

08009164 <_kill_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	2300      	movs	r3, #0
 8009168:	4d06      	ldr	r5, [pc, #24]	; (8009184 <_kill_r+0x20>)
 800916a:	4604      	mov	r4, r0
 800916c:	4608      	mov	r0, r1
 800916e:	4611      	mov	r1, r2
 8009170:	602b      	str	r3, [r5, #0]
 8009172:	f7fa f834 	bl	80031de <_kill>
 8009176:	1c43      	adds	r3, r0, #1
 8009178:	d102      	bne.n	8009180 <_kill_r+0x1c>
 800917a:	682b      	ldr	r3, [r5, #0]
 800917c:	b103      	cbz	r3, 8009180 <_kill_r+0x1c>
 800917e:	6023      	str	r3, [r4, #0]
 8009180:	bd38      	pop	{r3, r4, r5, pc}
 8009182:	bf00      	nop
 8009184:	200004b4 	.word	0x200004b4

08009188 <_getpid_r>:
 8009188:	f7fa b822 	b.w	80031d0 <_getpid>

0800918c <fmodf>:
 800918c:	b570      	push	{r4, r5, r6, lr}
 800918e:	4606      	mov	r6, r0
 8009190:	460d      	mov	r5, r1
 8009192:	f000 f97f 	bl	8009494 <__ieee754_fmodf>
 8009196:	4629      	mov	r1, r5
 8009198:	4604      	mov	r4, r0
 800919a:	4630      	mov	r0, r6
 800919c:	f7f7 ffb4 	bl	8001108 <__aeabi_fcmpun>
 80091a0:	b968      	cbnz	r0, 80091be <fmodf+0x32>
 80091a2:	2100      	movs	r1, #0
 80091a4:	4628      	mov	r0, r5
 80091a6:	f7f7 ff7d 	bl	80010a4 <__aeabi_fcmpeq>
 80091aa:	b140      	cbz	r0, 80091be <fmodf+0x32>
 80091ac:	f7fe f994 	bl	80074d8 <__errno>
 80091b0:	2321      	movs	r3, #33	; 0x21
 80091b2:	2100      	movs	r1, #0
 80091b4:	6003      	str	r3, [r0, #0]
 80091b6:	4608      	mov	r0, r1
 80091b8:	f7f7 fe94 	bl	8000ee4 <__aeabi_fdiv>
 80091bc:	4604      	mov	r4, r0
 80091be:	4620      	mov	r0, r4
 80091c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080091c4 <cosf>:
 80091c4:	b507      	push	{r0, r1, r2, lr}
 80091c6:	4a1a      	ldr	r2, [pc, #104]	; (8009230 <cosf+0x6c>)
 80091c8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80091cc:	4293      	cmp	r3, r2
 80091ce:	4601      	mov	r1, r0
 80091d0:	dc05      	bgt.n	80091de <cosf+0x1a>
 80091d2:	2100      	movs	r1, #0
 80091d4:	b003      	add	sp, #12
 80091d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80091da:	f000 b865 	b.w	80092a8 <__kernel_cosf>
 80091de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80091e2:	db04      	blt.n	80091ee <cosf+0x2a>
 80091e4:	f7f7 fcc0 	bl	8000b68 <__aeabi_fsub>
 80091e8:	b003      	add	sp, #12
 80091ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80091ee:	4669      	mov	r1, sp
 80091f0:	f000 f9d0 	bl	8009594 <__ieee754_rem_pio2f>
 80091f4:	f000 0203 	and.w	r2, r0, #3
 80091f8:	2a01      	cmp	r2, #1
 80091fa:	d007      	beq.n	800920c <cosf+0x48>
 80091fc:	2a02      	cmp	r2, #2
 80091fe:	d00c      	beq.n	800921a <cosf+0x56>
 8009200:	b982      	cbnz	r2, 8009224 <cosf+0x60>
 8009202:	9901      	ldr	r1, [sp, #4]
 8009204:	9800      	ldr	r0, [sp, #0]
 8009206:	f000 f84f 	bl	80092a8 <__kernel_cosf>
 800920a:	e7ed      	b.n	80091e8 <cosf+0x24>
 800920c:	9901      	ldr	r1, [sp, #4]
 800920e:	9800      	ldr	r0, [sp, #0]
 8009210:	f000 f8ca 	bl	80093a8 <__kernel_sinf>
 8009214:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009218:	e7e6      	b.n	80091e8 <cosf+0x24>
 800921a:	9901      	ldr	r1, [sp, #4]
 800921c:	9800      	ldr	r0, [sp, #0]
 800921e:	f000 f843 	bl	80092a8 <__kernel_cosf>
 8009222:	e7f7      	b.n	8009214 <cosf+0x50>
 8009224:	2201      	movs	r2, #1
 8009226:	9901      	ldr	r1, [sp, #4]
 8009228:	9800      	ldr	r0, [sp, #0]
 800922a:	f000 f8bd 	bl	80093a8 <__kernel_sinf>
 800922e:	e7db      	b.n	80091e8 <cosf+0x24>
 8009230:	3f490fd8 	.word	0x3f490fd8

08009234 <sinf>:
 8009234:	b507      	push	{r0, r1, r2, lr}
 8009236:	4a1b      	ldr	r2, [pc, #108]	; (80092a4 <sinf+0x70>)
 8009238:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800923c:	4293      	cmp	r3, r2
 800923e:	4601      	mov	r1, r0
 8009240:	dc06      	bgt.n	8009250 <sinf+0x1c>
 8009242:	2200      	movs	r2, #0
 8009244:	2100      	movs	r1, #0
 8009246:	b003      	add	sp, #12
 8009248:	f85d eb04 	ldr.w	lr, [sp], #4
 800924c:	f000 b8ac 	b.w	80093a8 <__kernel_sinf>
 8009250:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009254:	db04      	blt.n	8009260 <sinf+0x2c>
 8009256:	f7f7 fc87 	bl	8000b68 <__aeabi_fsub>
 800925a:	b003      	add	sp, #12
 800925c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009260:	4669      	mov	r1, sp
 8009262:	f000 f997 	bl	8009594 <__ieee754_rem_pio2f>
 8009266:	f000 0003 	and.w	r0, r0, #3
 800926a:	2801      	cmp	r0, #1
 800926c:	d008      	beq.n	8009280 <sinf+0x4c>
 800926e:	2802      	cmp	r0, #2
 8009270:	d00b      	beq.n	800928a <sinf+0x56>
 8009272:	b990      	cbnz	r0, 800929a <sinf+0x66>
 8009274:	2201      	movs	r2, #1
 8009276:	9901      	ldr	r1, [sp, #4]
 8009278:	9800      	ldr	r0, [sp, #0]
 800927a:	f000 f895 	bl	80093a8 <__kernel_sinf>
 800927e:	e7ec      	b.n	800925a <sinf+0x26>
 8009280:	9901      	ldr	r1, [sp, #4]
 8009282:	9800      	ldr	r0, [sp, #0]
 8009284:	f000 f810 	bl	80092a8 <__kernel_cosf>
 8009288:	e7e7      	b.n	800925a <sinf+0x26>
 800928a:	2201      	movs	r2, #1
 800928c:	9901      	ldr	r1, [sp, #4]
 800928e:	9800      	ldr	r0, [sp, #0]
 8009290:	f000 f88a 	bl	80093a8 <__kernel_sinf>
 8009294:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009298:	e7df      	b.n	800925a <sinf+0x26>
 800929a:	9901      	ldr	r1, [sp, #4]
 800929c:	9800      	ldr	r0, [sp, #0]
 800929e:	f000 f803 	bl	80092a8 <__kernel_cosf>
 80092a2:	e7f7      	b.n	8009294 <sinf+0x60>
 80092a4:	3f490fd8 	.word	0x3f490fd8

080092a8 <__kernel_cosf>:
 80092a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ac:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80092b0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80092b4:	4606      	mov	r6, r0
 80092b6:	4688      	mov	r8, r1
 80092b8:	da03      	bge.n	80092c2 <__kernel_cosf+0x1a>
 80092ba:	f7f7 ff3b 	bl	8001134 <__aeabi_f2iz>
 80092be:	2800      	cmp	r0, #0
 80092c0:	d05c      	beq.n	800937c <__kernel_cosf+0xd4>
 80092c2:	4631      	mov	r1, r6
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7f7 fd59 	bl	8000d7c <__aeabi_fmul>
 80092ca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80092ce:	4605      	mov	r5, r0
 80092d0:	f7f7 fd54 	bl	8000d7c <__aeabi_fmul>
 80092d4:	492b      	ldr	r1, [pc, #172]	; (8009384 <__kernel_cosf+0xdc>)
 80092d6:	4607      	mov	r7, r0
 80092d8:	4628      	mov	r0, r5
 80092da:	f7f7 fd4f 	bl	8000d7c <__aeabi_fmul>
 80092de:	492a      	ldr	r1, [pc, #168]	; (8009388 <__kernel_cosf+0xe0>)
 80092e0:	f7f7 fc44 	bl	8000b6c <__addsf3>
 80092e4:	4629      	mov	r1, r5
 80092e6:	f7f7 fd49 	bl	8000d7c <__aeabi_fmul>
 80092ea:	4928      	ldr	r1, [pc, #160]	; (800938c <__kernel_cosf+0xe4>)
 80092ec:	f7f7 fc3c 	bl	8000b68 <__aeabi_fsub>
 80092f0:	4629      	mov	r1, r5
 80092f2:	f7f7 fd43 	bl	8000d7c <__aeabi_fmul>
 80092f6:	4926      	ldr	r1, [pc, #152]	; (8009390 <__kernel_cosf+0xe8>)
 80092f8:	f7f7 fc38 	bl	8000b6c <__addsf3>
 80092fc:	4629      	mov	r1, r5
 80092fe:	f7f7 fd3d 	bl	8000d7c <__aeabi_fmul>
 8009302:	4924      	ldr	r1, [pc, #144]	; (8009394 <__kernel_cosf+0xec>)
 8009304:	f7f7 fc30 	bl	8000b68 <__aeabi_fsub>
 8009308:	4629      	mov	r1, r5
 800930a:	f7f7 fd37 	bl	8000d7c <__aeabi_fmul>
 800930e:	4922      	ldr	r1, [pc, #136]	; (8009398 <__kernel_cosf+0xf0>)
 8009310:	f7f7 fc2c 	bl	8000b6c <__addsf3>
 8009314:	4629      	mov	r1, r5
 8009316:	f7f7 fd31 	bl	8000d7c <__aeabi_fmul>
 800931a:	4629      	mov	r1, r5
 800931c:	f7f7 fd2e 	bl	8000d7c <__aeabi_fmul>
 8009320:	4641      	mov	r1, r8
 8009322:	4605      	mov	r5, r0
 8009324:	4630      	mov	r0, r6
 8009326:	f7f7 fd29 	bl	8000d7c <__aeabi_fmul>
 800932a:	4601      	mov	r1, r0
 800932c:	4628      	mov	r0, r5
 800932e:	f7f7 fc1b 	bl	8000b68 <__aeabi_fsub>
 8009332:	4b1a      	ldr	r3, [pc, #104]	; (800939c <__kernel_cosf+0xf4>)
 8009334:	4605      	mov	r5, r0
 8009336:	429c      	cmp	r4, r3
 8009338:	dc0a      	bgt.n	8009350 <__kernel_cosf+0xa8>
 800933a:	4601      	mov	r1, r0
 800933c:	4638      	mov	r0, r7
 800933e:	f7f7 fc13 	bl	8000b68 <__aeabi_fsub>
 8009342:	4601      	mov	r1, r0
 8009344:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009348:	f7f7 fc0e 	bl	8000b68 <__aeabi_fsub>
 800934c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009350:	4b13      	ldr	r3, [pc, #76]	; (80093a0 <__kernel_cosf+0xf8>)
 8009352:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009356:	429c      	cmp	r4, r3
 8009358:	bfcc      	ite	gt
 800935a:	4c12      	ldrgt	r4, [pc, #72]	; (80093a4 <__kernel_cosf+0xfc>)
 800935c:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8009360:	4621      	mov	r1, r4
 8009362:	f7f7 fc01 	bl	8000b68 <__aeabi_fsub>
 8009366:	4621      	mov	r1, r4
 8009368:	4606      	mov	r6, r0
 800936a:	4638      	mov	r0, r7
 800936c:	f7f7 fbfc 	bl	8000b68 <__aeabi_fsub>
 8009370:	4629      	mov	r1, r5
 8009372:	f7f7 fbf9 	bl	8000b68 <__aeabi_fsub>
 8009376:	4601      	mov	r1, r0
 8009378:	4630      	mov	r0, r6
 800937a:	e7e5      	b.n	8009348 <__kernel_cosf+0xa0>
 800937c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009380:	e7e4      	b.n	800934c <__kernel_cosf+0xa4>
 8009382:	bf00      	nop
 8009384:	ad47d74e 	.word	0xad47d74e
 8009388:	310f74f6 	.word	0x310f74f6
 800938c:	3493f27c 	.word	0x3493f27c
 8009390:	37d00d01 	.word	0x37d00d01
 8009394:	3ab60b61 	.word	0x3ab60b61
 8009398:	3d2aaaab 	.word	0x3d2aaaab
 800939c:	3e999999 	.word	0x3e999999
 80093a0:	3f480000 	.word	0x3f480000
 80093a4:	3e900000 	.word	0x3e900000

080093a8 <__kernel_sinf>:
 80093a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093ac:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80093b0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80093b4:	4604      	mov	r4, r0
 80093b6:	460f      	mov	r7, r1
 80093b8:	4691      	mov	r9, r2
 80093ba:	da03      	bge.n	80093c4 <__kernel_sinf+0x1c>
 80093bc:	f7f7 feba 	bl	8001134 <__aeabi_f2iz>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d035      	beq.n	8009430 <__kernel_sinf+0x88>
 80093c4:	4621      	mov	r1, r4
 80093c6:	4620      	mov	r0, r4
 80093c8:	f7f7 fcd8 	bl	8000d7c <__aeabi_fmul>
 80093cc:	4605      	mov	r5, r0
 80093ce:	4601      	mov	r1, r0
 80093d0:	4620      	mov	r0, r4
 80093d2:	f7f7 fcd3 	bl	8000d7c <__aeabi_fmul>
 80093d6:	4929      	ldr	r1, [pc, #164]	; (800947c <__kernel_sinf+0xd4>)
 80093d8:	4606      	mov	r6, r0
 80093da:	4628      	mov	r0, r5
 80093dc:	f7f7 fcce 	bl	8000d7c <__aeabi_fmul>
 80093e0:	4927      	ldr	r1, [pc, #156]	; (8009480 <__kernel_sinf+0xd8>)
 80093e2:	f7f7 fbc1 	bl	8000b68 <__aeabi_fsub>
 80093e6:	4629      	mov	r1, r5
 80093e8:	f7f7 fcc8 	bl	8000d7c <__aeabi_fmul>
 80093ec:	4925      	ldr	r1, [pc, #148]	; (8009484 <__kernel_sinf+0xdc>)
 80093ee:	f7f7 fbbd 	bl	8000b6c <__addsf3>
 80093f2:	4629      	mov	r1, r5
 80093f4:	f7f7 fcc2 	bl	8000d7c <__aeabi_fmul>
 80093f8:	4923      	ldr	r1, [pc, #140]	; (8009488 <__kernel_sinf+0xe0>)
 80093fa:	f7f7 fbb5 	bl	8000b68 <__aeabi_fsub>
 80093fe:	4629      	mov	r1, r5
 8009400:	f7f7 fcbc 	bl	8000d7c <__aeabi_fmul>
 8009404:	4921      	ldr	r1, [pc, #132]	; (800948c <__kernel_sinf+0xe4>)
 8009406:	f7f7 fbb1 	bl	8000b6c <__addsf3>
 800940a:	4680      	mov	r8, r0
 800940c:	f1b9 0f00 	cmp.w	r9, #0
 8009410:	d111      	bne.n	8009436 <__kernel_sinf+0x8e>
 8009412:	4601      	mov	r1, r0
 8009414:	4628      	mov	r0, r5
 8009416:	f7f7 fcb1 	bl	8000d7c <__aeabi_fmul>
 800941a:	491d      	ldr	r1, [pc, #116]	; (8009490 <__kernel_sinf+0xe8>)
 800941c:	f7f7 fba4 	bl	8000b68 <__aeabi_fsub>
 8009420:	4631      	mov	r1, r6
 8009422:	f7f7 fcab 	bl	8000d7c <__aeabi_fmul>
 8009426:	4601      	mov	r1, r0
 8009428:	4620      	mov	r0, r4
 800942a:	f7f7 fb9f 	bl	8000b6c <__addsf3>
 800942e:	4604      	mov	r4, r0
 8009430:	4620      	mov	r0, r4
 8009432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009436:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800943a:	4638      	mov	r0, r7
 800943c:	f7f7 fc9e 	bl	8000d7c <__aeabi_fmul>
 8009440:	4641      	mov	r1, r8
 8009442:	4681      	mov	r9, r0
 8009444:	4630      	mov	r0, r6
 8009446:	f7f7 fc99 	bl	8000d7c <__aeabi_fmul>
 800944a:	4601      	mov	r1, r0
 800944c:	4648      	mov	r0, r9
 800944e:	f7f7 fb8b 	bl	8000b68 <__aeabi_fsub>
 8009452:	4629      	mov	r1, r5
 8009454:	f7f7 fc92 	bl	8000d7c <__aeabi_fmul>
 8009458:	4639      	mov	r1, r7
 800945a:	f7f7 fb85 	bl	8000b68 <__aeabi_fsub>
 800945e:	490c      	ldr	r1, [pc, #48]	; (8009490 <__kernel_sinf+0xe8>)
 8009460:	4605      	mov	r5, r0
 8009462:	4630      	mov	r0, r6
 8009464:	f7f7 fc8a 	bl	8000d7c <__aeabi_fmul>
 8009468:	4601      	mov	r1, r0
 800946a:	4628      	mov	r0, r5
 800946c:	f7f7 fb7e 	bl	8000b6c <__addsf3>
 8009470:	4601      	mov	r1, r0
 8009472:	4620      	mov	r0, r4
 8009474:	f7f7 fb78 	bl	8000b68 <__aeabi_fsub>
 8009478:	e7d9      	b.n	800942e <__kernel_sinf+0x86>
 800947a:	bf00      	nop
 800947c:	2f2ec9d3 	.word	0x2f2ec9d3
 8009480:	32d72f34 	.word	0x32d72f34
 8009484:	3638ef1b 	.word	0x3638ef1b
 8009488:	39500d01 	.word	0x39500d01
 800948c:	3c088889 	.word	0x3c088889
 8009490:	3e2aaaab 	.word	0x3e2aaaab

08009494 <__ieee754_fmodf>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	f031 4500 	bics.w	r5, r1, #2147483648	; 0x80000000
 800949a:	460e      	mov	r6, r1
 800949c:	d008      	beq.n	80094b0 <__ieee754_fmodf+0x1c>
 800949e:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 80094a2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80094a6:	4603      	mov	r3, r0
 80094a8:	da02      	bge.n	80094b0 <__ieee754_fmodf+0x1c>
 80094aa:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80094ae:	dd05      	ble.n	80094bc <__ieee754_fmodf+0x28>
 80094b0:	f7f7 fc64 	bl	8000d7c <__aeabi_fmul>
 80094b4:	4601      	mov	r1, r0
 80094b6:	f7f7 fd15 	bl	8000ee4 <__aeabi_fdiv>
 80094ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094bc:	42af      	cmp	r7, r5
 80094be:	dbfc      	blt.n	80094ba <__ieee754_fmodf+0x26>
 80094c0:	f000 4400 	and.w	r4, r0, #2147483648	; 0x80000000
 80094c4:	d104      	bne.n	80094d0 <__ieee754_fmodf+0x3c>
 80094c6:	4b32      	ldr	r3, [pc, #200]	; (8009590 <__ieee754_fmodf+0xfc>)
 80094c8:	0fe4      	lsrs	r4, r4, #31
 80094ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80094ce:	e7f4      	b.n	80094ba <__ieee754_fmodf+0x26>
 80094d0:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80094d4:	d13e      	bne.n	8009554 <__ieee754_fmodf+0xc0>
 80094d6:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80094da:	023a      	lsls	r2, r7, #8
 80094dc:	2a00      	cmp	r2, #0
 80094de:	dc36      	bgt.n	800954e <__ieee754_fmodf+0xba>
 80094e0:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80094e4:	d13c      	bne.n	8009560 <__ieee754_fmodf+0xcc>
 80094e6:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80094ea:	0228      	lsls	r0, r5, #8
 80094ec:	2800      	cmp	r0, #0
 80094ee:	da34      	bge.n	800955a <__ieee754_fmodf+0xc6>
 80094f0:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80094f4:	bfb5      	itete	lt
 80094f6:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80094fa:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 80094fe:	1a5b      	sublt	r3, r3, r1
 8009500:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8009504:	bfb8      	it	lt
 8009506:	fa07 f303 	lsllt.w	r3, r7, r3
 800950a:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800950e:	bfb5      	itete	lt
 8009510:	f06f 007d 	mvnlt.w	r0, #125	; 0x7d
 8009514:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8009518:	1a80      	sublt	r0, r0, r2
 800951a:	f446 0500 	orrge.w	r5, r6, #8388608	; 0x800000
 800951e:	bfb8      	it	lt
 8009520:	4085      	lsllt	r5, r0
 8009522:	1a89      	subs	r1, r1, r2
 8009524:	1b58      	subs	r0, r3, r5
 8009526:	b9f1      	cbnz	r1, 8009566 <__ieee754_fmodf+0xd2>
 8009528:	ea13 0320 	ands.w	r3, r3, r0, asr #32
 800952c:	bf38      	it	cc
 800952e:	4603      	movcc	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d0c8      	beq.n	80094c6 <__ieee754_fmodf+0x32>
 8009534:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009538:	db1d      	blt.n	8009576 <__ieee754_fmodf+0xe2>
 800953a:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800953e:	db1d      	blt.n	800957c <__ieee754_fmodf+0xe8>
 8009540:	f5a3 0000 	sub.w	r0, r3, #8388608	; 0x800000
 8009544:	327f      	adds	r2, #127	; 0x7f
 8009546:	4320      	orrs	r0, r4
 8009548:	ea40 50c2 	orr.w	r0, r0, r2, lsl #23
 800954c:	e7b5      	b.n	80094ba <__ieee754_fmodf+0x26>
 800954e:	3901      	subs	r1, #1
 8009550:	0052      	lsls	r2, r2, #1
 8009552:	e7c3      	b.n	80094dc <__ieee754_fmodf+0x48>
 8009554:	15f9      	asrs	r1, r7, #23
 8009556:	397f      	subs	r1, #127	; 0x7f
 8009558:	e7c2      	b.n	80094e0 <__ieee754_fmodf+0x4c>
 800955a:	3a01      	subs	r2, #1
 800955c:	0040      	lsls	r0, r0, #1
 800955e:	e7c5      	b.n	80094ec <__ieee754_fmodf+0x58>
 8009560:	15ea      	asrs	r2, r5, #23
 8009562:	3a7f      	subs	r2, #127	; 0x7f
 8009564:	e7c4      	b.n	80094f0 <__ieee754_fmodf+0x5c>
 8009566:	2800      	cmp	r0, #0
 8009568:	da02      	bge.n	8009570 <__ieee754_fmodf+0xdc>
 800956a:	005b      	lsls	r3, r3, #1
 800956c:	3901      	subs	r1, #1
 800956e:	e7d9      	b.n	8009524 <__ieee754_fmodf+0x90>
 8009570:	d0a9      	beq.n	80094c6 <__ieee754_fmodf+0x32>
 8009572:	0043      	lsls	r3, r0, #1
 8009574:	e7fa      	b.n	800956c <__ieee754_fmodf+0xd8>
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	3a01      	subs	r2, #1
 800957a:	e7db      	b.n	8009534 <__ieee754_fmodf+0xa0>
 800957c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009580:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009584:	3282      	adds	r2, #130	; 0x82
 8009586:	fa43 f002 	asr.w	r0, r3, r2
 800958a:	4320      	orrs	r0, r4
 800958c:	e795      	b.n	80094ba <__ieee754_fmodf+0x26>
 800958e:	bf00      	nop
 8009590:	0800aafc 	.word	0x0800aafc

08009594 <__ieee754_rem_pio2f>:
 8009594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	4aa0      	ldr	r2, [pc, #640]	; (800981c <__ieee754_rem_pio2f+0x288>)
 800959a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800959e:	4296      	cmp	r6, r2
 80095a0:	460c      	mov	r4, r1
 80095a2:	4682      	mov	sl, r0
 80095a4:	b087      	sub	sp, #28
 80095a6:	dc04      	bgt.n	80095b2 <__ieee754_rem_pio2f+0x1e>
 80095a8:	2300      	movs	r3, #0
 80095aa:	6008      	str	r0, [r1, #0]
 80095ac:	604b      	str	r3, [r1, #4]
 80095ae:	2500      	movs	r5, #0
 80095b0:	e01a      	b.n	80095e8 <__ieee754_rem_pio2f+0x54>
 80095b2:	4a9b      	ldr	r2, [pc, #620]	; (8009820 <__ieee754_rem_pio2f+0x28c>)
 80095b4:	4296      	cmp	r6, r2
 80095b6:	dc4b      	bgt.n	8009650 <__ieee754_rem_pio2f+0xbc>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	499a      	ldr	r1, [pc, #616]	; (8009824 <__ieee754_rem_pio2f+0x290>)
 80095bc:	4f9a      	ldr	r7, [pc, #616]	; (8009828 <__ieee754_rem_pio2f+0x294>)
 80095be:	f026 060f 	bic.w	r6, r6, #15
 80095c2:	dd23      	ble.n	800960c <__ieee754_rem_pio2f+0x78>
 80095c4:	f7f7 fad0 	bl	8000b68 <__aeabi_fsub>
 80095c8:	42be      	cmp	r6, r7
 80095ca:	4605      	mov	r5, r0
 80095cc:	d010      	beq.n	80095f0 <__ieee754_rem_pio2f+0x5c>
 80095ce:	4997      	ldr	r1, [pc, #604]	; (800982c <__ieee754_rem_pio2f+0x298>)
 80095d0:	f7f7 faca 	bl	8000b68 <__aeabi_fsub>
 80095d4:	4601      	mov	r1, r0
 80095d6:	6020      	str	r0, [r4, #0]
 80095d8:	4628      	mov	r0, r5
 80095da:	f7f7 fac5 	bl	8000b68 <__aeabi_fsub>
 80095de:	4993      	ldr	r1, [pc, #588]	; (800982c <__ieee754_rem_pio2f+0x298>)
 80095e0:	f7f7 fac2 	bl	8000b68 <__aeabi_fsub>
 80095e4:	2501      	movs	r5, #1
 80095e6:	6060      	str	r0, [r4, #4]
 80095e8:	4628      	mov	r0, r5
 80095ea:	b007      	add	sp, #28
 80095ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f0:	498f      	ldr	r1, [pc, #572]	; (8009830 <__ieee754_rem_pio2f+0x29c>)
 80095f2:	f7f7 fab9 	bl	8000b68 <__aeabi_fsub>
 80095f6:	498f      	ldr	r1, [pc, #572]	; (8009834 <__ieee754_rem_pio2f+0x2a0>)
 80095f8:	4605      	mov	r5, r0
 80095fa:	f7f7 fab5 	bl	8000b68 <__aeabi_fsub>
 80095fe:	4601      	mov	r1, r0
 8009600:	6020      	str	r0, [r4, #0]
 8009602:	4628      	mov	r0, r5
 8009604:	f7f7 fab0 	bl	8000b68 <__aeabi_fsub>
 8009608:	498a      	ldr	r1, [pc, #552]	; (8009834 <__ieee754_rem_pio2f+0x2a0>)
 800960a:	e7e9      	b.n	80095e0 <__ieee754_rem_pio2f+0x4c>
 800960c:	f7f7 faae 	bl	8000b6c <__addsf3>
 8009610:	42be      	cmp	r6, r7
 8009612:	4605      	mov	r5, r0
 8009614:	d00e      	beq.n	8009634 <__ieee754_rem_pio2f+0xa0>
 8009616:	4985      	ldr	r1, [pc, #532]	; (800982c <__ieee754_rem_pio2f+0x298>)
 8009618:	f7f7 faa8 	bl	8000b6c <__addsf3>
 800961c:	4601      	mov	r1, r0
 800961e:	6020      	str	r0, [r4, #0]
 8009620:	4628      	mov	r0, r5
 8009622:	f7f7 faa1 	bl	8000b68 <__aeabi_fsub>
 8009626:	4981      	ldr	r1, [pc, #516]	; (800982c <__ieee754_rem_pio2f+0x298>)
 8009628:	f7f7 faa0 	bl	8000b6c <__addsf3>
 800962c:	f04f 35ff 	mov.w	r5, #4294967295
 8009630:	6060      	str	r0, [r4, #4]
 8009632:	e7d9      	b.n	80095e8 <__ieee754_rem_pio2f+0x54>
 8009634:	497e      	ldr	r1, [pc, #504]	; (8009830 <__ieee754_rem_pio2f+0x29c>)
 8009636:	f7f7 fa99 	bl	8000b6c <__addsf3>
 800963a:	497e      	ldr	r1, [pc, #504]	; (8009834 <__ieee754_rem_pio2f+0x2a0>)
 800963c:	4605      	mov	r5, r0
 800963e:	f7f7 fa95 	bl	8000b6c <__addsf3>
 8009642:	4601      	mov	r1, r0
 8009644:	6020      	str	r0, [r4, #0]
 8009646:	4628      	mov	r0, r5
 8009648:	f7f7 fa8e 	bl	8000b68 <__aeabi_fsub>
 800964c:	4979      	ldr	r1, [pc, #484]	; (8009834 <__ieee754_rem_pio2f+0x2a0>)
 800964e:	e7eb      	b.n	8009628 <__ieee754_rem_pio2f+0x94>
 8009650:	4a79      	ldr	r2, [pc, #484]	; (8009838 <__ieee754_rem_pio2f+0x2a4>)
 8009652:	4296      	cmp	r6, r2
 8009654:	f300 8091 	bgt.w	800977a <__ieee754_rem_pio2f+0x1e6>
 8009658:	f000 f8fa 	bl	8009850 <fabsf>
 800965c:	4977      	ldr	r1, [pc, #476]	; (800983c <__ieee754_rem_pio2f+0x2a8>)
 800965e:	4607      	mov	r7, r0
 8009660:	f7f7 fb8c 	bl	8000d7c <__aeabi_fmul>
 8009664:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009668:	f7f7 fa80 	bl	8000b6c <__addsf3>
 800966c:	f7f7 fd62 	bl	8001134 <__aeabi_f2iz>
 8009670:	4605      	mov	r5, r0
 8009672:	f7f7 fb2f 	bl	8000cd4 <__aeabi_i2f>
 8009676:	496b      	ldr	r1, [pc, #428]	; (8009824 <__ieee754_rem_pio2f+0x290>)
 8009678:	4681      	mov	r9, r0
 800967a:	f7f7 fb7f 	bl	8000d7c <__aeabi_fmul>
 800967e:	4601      	mov	r1, r0
 8009680:	4638      	mov	r0, r7
 8009682:	f7f7 fa71 	bl	8000b68 <__aeabi_fsub>
 8009686:	4969      	ldr	r1, [pc, #420]	; (800982c <__ieee754_rem_pio2f+0x298>)
 8009688:	4680      	mov	r8, r0
 800968a:	4648      	mov	r0, r9
 800968c:	f7f7 fb76 	bl	8000d7c <__aeabi_fmul>
 8009690:	2d1f      	cmp	r5, #31
 8009692:	4607      	mov	r7, r0
 8009694:	dc0c      	bgt.n	80096b0 <__ieee754_rem_pio2f+0x11c>
 8009696:	4a6a      	ldr	r2, [pc, #424]	; (8009840 <__ieee754_rem_pio2f+0x2ac>)
 8009698:	1e69      	subs	r1, r5, #1
 800969a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800969e:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d004      	beq.n	80096b0 <__ieee754_rem_pio2f+0x11c>
 80096a6:	4639      	mov	r1, r7
 80096a8:	4640      	mov	r0, r8
 80096aa:	f7f7 fa5d 	bl	8000b68 <__aeabi_fsub>
 80096ae:	e00b      	b.n	80096c8 <__ieee754_rem_pio2f+0x134>
 80096b0:	4639      	mov	r1, r7
 80096b2:	4640      	mov	r0, r8
 80096b4:	f7f7 fa58 	bl	8000b68 <__aeabi_fsub>
 80096b8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80096bc:	ebc3 53d6 	rsb	r3, r3, r6, lsr #23
 80096c0:	2b08      	cmp	r3, #8
 80096c2:	ea4f 5be6 	mov.w	fp, r6, asr #23
 80096c6:	dc01      	bgt.n	80096cc <__ieee754_rem_pio2f+0x138>
 80096c8:	6020      	str	r0, [r4, #0]
 80096ca:	e026      	b.n	800971a <__ieee754_rem_pio2f+0x186>
 80096cc:	4958      	ldr	r1, [pc, #352]	; (8009830 <__ieee754_rem_pio2f+0x29c>)
 80096ce:	4648      	mov	r0, r9
 80096d0:	f7f7 fb54 	bl	8000d7c <__aeabi_fmul>
 80096d4:	4607      	mov	r7, r0
 80096d6:	4601      	mov	r1, r0
 80096d8:	4640      	mov	r0, r8
 80096da:	f7f7 fa45 	bl	8000b68 <__aeabi_fsub>
 80096de:	4601      	mov	r1, r0
 80096e0:	4606      	mov	r6, r0
 80096e2:	4640      	mov	r0, r8
 80096e4:	f7f7 fa40 	bl	8000b68 <__aeabi_fsub>
 80096e8:	4639      	mov	r1, r7
 80096ea:	f7f7 fa3d 	bl	8000b68 <__aeabi_fsub>
 80096ee:	4607      	mov	r7, r0
 80096f0:	4950      	ldr	r1, [pc, #320]	; (8009834 <__ieee754_rem_pio2f+0x2a0>)
 80096f2:	4648      	mov	r0, r9
 80096f4:	f7f7 fb42 	bl	8000d7c <__aeabi_fmul>
 80096f8:	4639      	mov	r1, r7
 80096fa:	f7f7 fa35 	bl	8000b68 <__aeabi_fsub>
 80096fe:	4601      	mov	r1, r0
 8009700:	4607      	mov	r7, r0
 8009702:	4630      	mov	r0, r6
 8009704:	f7f7 fa30 	bl	8000b68 <__aeabi_fsub>
 8009708:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800970c:	ebab 0b03 	sub.w	fp, fp, r3
 8009710:	f1bb 0f19 	cmp.w	fp, #25
 8009714:	dc16      	bgt.n	8009744 <__ieee754_rem_pio2f+0x1b0>
 8009716:	46b0      	mov	r8, r6
 8009718:	6020      	str	r0, [r4, #0]
 800971a:	6826      	ldr	r6, [r4, #0]
 800971c:	4640      	mov	r0, r8
 800971e:	4631      	mov	r1, r6
 8009720:	f7f7 fa22 	bl	8000b68 <__aeabi_fsub>
 8009724:	4639      	mov	r1, r7
 8009726:	f7f7 fa1f 	bl	8000b68 <__aeabi_fsub>
 800972a:	f1ba 0f00 	cmp.w	sl, #0
 800972e:	6060      	str	r0, [r4, #4]
 8009730:	f6bf af5a 	bge.w	80095e8 <__ieee754_rem_pio2f+0x54>
 8009734:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009738:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800973c:	6026      	str	r6, [r4, #0]
 800973e:	6060      	str	r0, [r4, #4]
 8009740:	426d      	negs	r5, r5
 8009742:	e751      	b.n	80095e8 <__ieee754_rem_pio2f+0x54>
 8009744:	493f      	ldr	r1, [pc, #252]	; (8009844 <__ieee754_rem_pio2f+0x2b0>)
 8009746:	4648      	mov	r0, r9
 8009748:	f7f7 fb18 	bl	8000d7c <__aeabi_fmul>
 800974c:	4607      	mov	r7, r0
 800974e:	4601      	mov	r1, r0
 8009750:	4630      	mov	r0, r6
 8009752:	f7f7 fa09 	bl	8000b68 <__aeabi_fsub>
 8009756:	4601      	mov	r1, r0
 8009758:	4680      	mov	r8, r0
 800975a:	4630      	mov	r0, r6
 800975c:	f7f7 fa04 	bl	8000b68 <__aeabi_fsub>
 8009760:	4639      	mov	r1, r7
 8009762:	f7f7 fa01 	bl	8000b68 <__aeabi_fsub>
 8009766:	4606      	mov	r6, r0
 8009768:	4937      	ldr	r1, [pc, #220]	; (8009848 <__ieee754_rem_pio2f+0x2b4>)
 800976a:	4648      	mov	r0, r9
 800976c:	f7f7 fb06 	bl	8000d7c <__aeabi_fmul>
 8009770:	4631      	mov	r1, r6
 8009772:	f7f7 f9f9 	bl	8000b68 <__aeabi_fsub>
 8009776:	4607      	mov	r7, r0
 8009778:	e795      	b.n	80096a6 <__ieee754_rem_pio2f+0x112>
 800977a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800977e:	db05      	blt.n	800978c <__ieee754_rem_pio2f+0x1f8>
 8009780:	4601      	mov	r1, r0
 8009782:	f7f7 f9f1 	bl	8000b68 <__aeabi_fsub>
 8009786:	6060      	str	r0, [r4, #4]
 8009788:	6020      	str	r0, [r4, #0]
 800978a:	e710      	b.n	80095ae <__ieee754_rem_pio2f+0x1a>
 800978c:	15f7      	asrs	r7, r6, #23
 800978e:	3f86      	subs	r7, #134	; 0x86
 8009790:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8009794:	4630      	mov	r0, r6
 8009796:	f7f7 fccd 	bl	8001134 <__aeabi_f2iz>
 800979a:	f7f7 fa9b 	bl	8000cd4 <__aeabi_i2f>
 800979e:	4601      	mov	r1, r0
 80097a0:	9003      	str	r0, [sp, #12]
 80097a2:	4630      	mov	r0, r6
 80097a4:	f7f7 f9e0 	bl	8000b68 <__aeabi_fsub>
 80097a8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80097ac:	f7f7 fae6 	bl	8000d7c <__aeabi_fmul>
 80097b0:	4606      	mov	r6, r0
 80097b2:	f7f7 fcbf 	bl	8001134 <__aeabi_f2iz>
 80097b6:	f7f7 fa8d 	bl	8000cd4 <__aeabi_i2f>
 80097ba:	4601      	mov	r1, r0
 80097bc:	9004      	str	r0, [sp, #16]
 80097be:	4605      	mov	r5, r0
 80097c0:	4630      	mov	r0, r6
 80097c2:	f7f7 f9d1 	bl	8000b68 <__aeabi_fsub>
 80097c6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80097ca:	f7f7 fad7 	bl	8000d7c <__aeabi_fmul>
 80097ce:	2100      	movs	r1, #0
 80097d0:	9005      	str	r0, [sp, #20]
 80097d2:	f7f7 fc67 	bl	80010a4 <__aeabi_fcmpeq>
 80097d6:	b1f0      	cbz	r0, 8009816 <__ieee754_rem_pio2f+0x282>
 80097d8:	2100      	movs	r1, #0
 80097da:	4628      	mov	r0, r5
 80097dc:	f7f7 fc62 	bl	80010a4 <__aeabi_fcmpeq>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	bf14      	ite	ne
 80097e4:	2301      	movne	r3, #1
 80097e6:	2302      	moveq	r3, #2
 80097e8:	4a18      	ldr	r2, [pc, #96]	; (800984c <__ieee754_rem_pio2f+0x2b8>)
 80097ea:	4621      	mov	r1, r4
 80097ec:	9201      	str	r2, [sp, #4]
 80097ee:	2202      	movs	r2, #2
 80097f0:	a803      	add	r0, sp, #12
 80097f2:	9200      	str	r2, [sp, #0]
 80097f4:	463a      	mov	r2, r7
 80097f6:	f000 f82f 	bl	8009858 <__kernel_rem_pio2f>
 80097fa:	f1ba 0f00 	cmp.w	sl, #0
 80097fe:	4605      	mov	r5, r0
 8009800:	f6bf aef2 	bge.w	80095e8 <__ieee754_rem_pio2f+0x54>
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800980a:	6023      	str	r3, [r4, #0]
 800980c:	6863      	ldr	r3, [r4, #4]
 800980e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009812:	6063      	str	r3, [r4, #4]
 8009814:	e794      	b.n	8009740 <__ieee754_rem_pio2f+0x1ac>
 8009816:	2303      	movs	r3, #3
 8009818:	e7e6      	b.n	80097e8 <__ieee754_rem_pio2f+0x254>
 800981a:	bf00      	nop
 800981c:	3f490fd8 	.word	0x3f490fd8
 8009820:	4016cbe3 	.word	0x4016cbe3
 8009824:	3fc90f80 	.word	0x3fc90f80
 8009828:	3fc90fd0 	.word	0x3fc90fd0
 800982c:	37354443 	.word	0x37354443
 8009830:	37354400 	.word	0x37354400
 8009834:	2e85a308 	.word	0x2e85a308
 8009838:	43490f80 	.word	0x43490f80
 800983c:	3f22f984 	.word	0x3f22f984
 8009840:	0800ab04 	.word	0x0800ab04
 8009844:	2e85a300 	.word	0x2e85a300
 8009848:	248d3132 	.word	0x248d3132
 800984c:	0800ab84 	.word	0x0800ab84

08009850 <fabsf>:
 8009850:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009854:	4770      	bx	lr
	...

08009858 <__kernel_rem_pio2f>:
 8009858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985c:	b0db      	sub	sp, #364	; 0x16c
 800985e:	9202      	str	r2, [sp, #8]
 8009860:	9304      	str	r3, [sp, #16]
 8009862:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8009864:	4bbb      	ldr	r3, [pc, #748]	; (8009b54 <__kernel_rem_pio2f+0x2fc>)
 8009866:	9005      	str	r0, [sp, #20]
 8009868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986c:	9100      	str	r1, [sp, #0]
 800986e:	9301      	str	r3, [sp, #4]
 8009870:	9b04      	ldr	r3, [sp, #16]
 8009872:	3b01      	subs	r3, #1
 8009874:	9303      	str	r3, [sp, #12]
 8009876:	9b02      	ldr	r3, [sp, #8]
 8009878:	1d1a      	adds	r2, r3, #4
 800987a:	f2c0 809b 	blt.w	80099b4 <__kernel_rem_pio2f+0x15c>
 800987e:	1edc      	subs	r4, r3, #3
 8009880:	bf48      	it	mi
 8009882:	1d1c      	addmi	r4, r3, #4
 8009884:	10e4      	asrs	r4, r4, #3
 8009886:	2500      	movs	r5, #0
 8009888:	f04f 0b00 	mov.w	fp, #0
 800988c:	1c67      	adds	r7, r4, #1
 800988e:	00fb      	lsls	r3, r7, #3
 8009890:	9306      	str	r3, [sp, #24]
 8009892:	9b02      	ldr	r3, [sp, #8]
 8009894:	9a03      	ldr	r2, [sp, #12]
 8009896:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800989a:	9b01      	ldr	r3, [sp, #4]
 800989c:	eba4 0802 	sub.w	r8, r4, r2
 80098a0:	eb03 0902 	add.w	r9, r3, r2
 80098a4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80098a6:	ae1e      	add	r6, sp, #120	; 0x78
 80098a8:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 80098ac:	454d      	cmp	r5, r9
 80098ae:	f340 8083 	ble.w	80099b8 <__kernel_rem_pio2f+0x160>
 80098b2:	9a04      	ldr	r2, [sp, #16]
 80098b4:	ab1e      	add	r3, sp, #120	; 0x78
 80098b6:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 80098ba:	f04f 0900 	mov.w	r9, #0
 80098be:	2300      	movs	r3, #0
 80098c0:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 80098c4:	9a01      	ldr	r2, [sp, #4]
 80098c6:	4591      	cmp	r9, r2
 80098c8:	f340 809e 	ble.w	8009a08 <__kernel_rem_pio2f+0x1b0>
 80098cc:	4613      	mov	r3, r2
 80098ce:	aa0a      	add	r2, sp, #40	; 0x28
 80098d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80098d4:	9308      	str	r3, [sp, #32]
 80098d6:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80098d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80098dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80098e0:	9307      	str	r3, [sp, #28]
 80098e2:	ac0a      	add	r4, sp, #40	; 0x28
 80098e4:	4626      	mov	r6, r4
 80098e6:	46c3      	mov	fp, r8
 80098e8:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 80098ec:	ab5a      	add	r3, sp, #360	; 0x168
 80098ee:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80098f2:	f853 5c50 	ldr.w	r5, [r3, #-80]
 80098f6:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 80098fa:	f1bb 0f00 	cmp.w	fp, #0
 80098fe:	f300 8088 	bgt.w	8009a12 <__kernel_rem_pio2f+0x1ba>
 8009902:	4639      	mov	r1, r7
 8009904:	4628      	mov	r0, r5
 8009906:	f000 fa5b 	bl	8009dc0 <scalbnf>
 800990a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800990e:	4605      	mov	r5, r0
 8009910:	f7f7 fa34 	bl	8000d7c <__aeabi_fmul>
 8009914:	f000 faa0 	bl	8009e58 <floorf>
 8009918:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800991c:	f7f7 fa2e 	bl	8000d7c <__aeabi_fmul>
 8009920:	4601      	mov	r1, r0
 8009922:	4628      	mov	r0, r5
 8009924:	f7f7 f920 	bl	8000b68 <__aeabi_fsub>
 8009928:	4605      	mov	r5, r0
 800992a:	f7f7 fc03 	bl	8001134 <__aeabi_f2iz>
 800992e:	4606      	mov	r6, r0
 8009930:	f7f7 f9d0 	bl	8000cd4 <__aeabi_i2f>
 8009934:	4601      	mov	r1, r0
 8009936:	4628      	mov	r0, r5
 8009938:	f7f7 f916 	bl	8000b68 <__aeabi_fsub>
 800993c:	2f00      	cmp	r7, #0
 800993e:	4681      	mov	r9, r0
 8009940:	f340 8086 	ble.w	8009a50 <__kernel_rem_pio2f+0x1f8>
 8009944:	f108 32ff 	add.w	r2, r8, #4294967295
 8009948:	ab0a      	add	r3, sp, #40	; 0x28
 800994a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800994e:	f1c7 0108 	rsb	r1, r7, #8
 8009952:	fa45 f301 	asr.w	r3, r5, r1
 8009956:	441e      	add	r6, r3
 8009958:	408b      	lsls	r3, r1
 800995a:	1aed      	subs	r5, r5, r3
 800995c:	ab0a      	add	r3, sp, #40	; 0x28
 800995e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009962:	f1c7 0307 	rsb	r3, r7, #7
 8009966:	411d      	asrs	r5, r3
 8009968:	2d00      	cmp	r5, #0
 800996a:	dd7f      	ble.n	8009a6c <__kernel_rem_pio2f+0x214>
 800996c:	2200      	movs	r2, #0
 800996e:	4692      	mov	sl, r2
 8009970:	3601      	adds	r6, #1
 8009972:	4590      	cmp	r8, r2
 8009974:	f300 80b0 	bgt.w	8009ad8 <__kernel_rem_pio2f+0x280>
 8009978:	2f00      	cmp	r7, #0
 800997a:	dd05      	ble.n	8009988 <__kernel_rem_pio2f+0x130>
 800997c:	2f01      	cmp	r7, #1
 800997e:	f000 80bd 	beq.w	8009afc <__kernel_rem_pio2f+0x2a4>
 8009982:	2f02      	cmp	r7, #2
 8009984:	f000 80c5 	beq.w	8009b12 <__kernel_rem_pio2f+0x2ba>
 8009988:	2d02      	cmp	r5, #2
 800998a:	d16f      	bne.n	8009a6c <__kernel_rem_pio2f+0x214>
 800998c:	4649      	mov	r1, r9
 800998e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009992:	f7f7 f8e9 	bl	8000b68 <__aeabi_fsub>
 8009996:	4681      	mov	r9, r0
 8009998:	f1ba 0f00 	cmp.w	sl, #0
 800999c:	d066      	beq.n	8009a6c <__kernel_rem_pio2f+0x214>
 800999e:	4639      	mov	r1, r7
 80099a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80099a4:	f000 fa0c 	bl	8009dc0 <scalbnf>
 80099a8:	4601      	mov	r1, r0
 80099aa:	4648      	mov	r0, r9
 80099ac:	f7f7 f8dc 	bl	8000b68 <__aeabi_fsub>
 80099b0:	4681      	mov	r9, r0
 80099b2:	e05b      	b.n	8009a6c <__kernel_rem_pio2f+0x214>
 80099b4:	2400      	movs	r4, #0
 80099b6:	e766      	b.n	8009886 <__kernel_rem_pio2f+0x2e>
 80099b8:	eb18 0f05 	cmn.w	r8, r5
 80099bc:	d407      	bmi.n	80099ce <__kernel_rem_pio2f+0x176>
 80099be:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 80099c2:	f7f7 f987 	bl	8000cd4 <__aeabi_i2f>
 80099c6:	f846 0b04 	str.w	r0, [r6], #4
 80099ca:	3501      	adds	r5, #1
 80099cc:	e76e      	b.n	80098ac <__kernel_rem_pio2f+0x54>
 80099ce:	4658      	mov	r0, fp
 80099d0:	e7f9      	b.n	80099c6 <__kernel_rem_pio2f+0x16e>
 80099d2:	9307      	str	r3, [sp, #28]
 80099d4:	9b05      	ldr	r3, [sp, #20]
 80099d6:	f8da 1000 	ldr.w	r1, [sl]
 80099da:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80099de:	f7f7 f9cd 	bl	8000d7c <__aeabi_fmul>
 80099e2:	4601      	mov	r1, r0
 80099e4:	4630      	mov	r0, r6
 80099e6:	f7f7 f8c1 	bl	8000b6c <__addsf3>
 80099ea:	4606      	mov	r6, r0
 80099ec:	9b07      	ldr	r3, [sp, #28]
 80099ee:	f108 0801 	add.w	r8, r8, #1
 80099f2:	9a03      	ldr	r2, [sp, #12]
 80099f4:	f1aa 0a04 	sub.w	sl, sl, #4
 80099f8:	4590      	cmp	r8, r2
 80099fa:	ddea      	ble.n	80099d2 <__kernel_rem_pio2f+0x17a>
 80099fc:	f84b 6b04 	str.w	r6, [fp], #4
 8009a00:	f109 0901 	add.w	r9, r9, #1
 8009a04:	3504      	adds	r5, #4
 8009a06:	e75d      	b.n	80098c4 <__kernel_rem_pio2f+0x6c>
 8009a08:	46aa      	mov	sl, r5
 8009a0a:	461e      	mov	r6, r3
 8009a0c:	f04f 0800 	mov.w	r8, #0
 8009a10:	e7ef      	b.n	80099f2 <__kernel_rem_pio2f+0x19a>
 8009a12:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8009a16:	4628      	mov	r0, r5
 8009a18:	f7f7 f9b0 	bl	8000d7c <__aeabi_fmul>
 8009a1c:	f7f7 fb8a 	bl	8001134 <__aeabi_f2iz>
 8009a20:	f7f7 f958 	bl	8000cd4 <__aeabi_i2f>
 8009a24:	4649      	mov	r1, r9
 8009a26:	9009      	str	r0, [sp, #36]	; 0x24
 8009a28:	f7f7 f9a8 	bl	8000d7c <__aeabi_fmul>
 8009a2c:	4601      	mov	r1, r0
 8009a2e:	4628      	mov	r0, r5
 8009a30:	f7f7 f89a 	bl	8000b68 <__aeabi_fsub>
 8009a34:	f7f7 fb7e 	bl	8001134 <__aeabi_f2iz>
 8009a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a3e:	f846 0b04 	str.w	r0, [r6], #4
 8009a42:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7f7 f890 	bl	8000b6c <__addsf3>
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	e754      	b.n	80098fa <__kernel_rem_pio2f+0xa2>
 8009a50:	d106      	bne.n	8009a60 <__kernel_rem_pio2f+0x208>
 8009a52:	f108 33ff 	add.w	r3, r8, #4294967295
 8009a56:	aa0a      	add	r2, sp, #40	; 0x28
 8009a58:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8009a5c:	11ed      	asrs	r5, r5, #7
 8009a5e:	e783      	b.n	8009968 <__kernel_rem_pio2f+0x110>
 8009a60:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009a64:	f7f7 fb3c 	bl	80010e0 <__aeabi_fcmpge>
 8009a68:	4605      	mov	r5, r0
 8009a6a:	bb98      	cbnz	r0, 8009ad4 <__kernel_rem_pio2f+0x27c>
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	4648      	mov	r0, r9
 8009a70:	f7f7 fb18 	bl	80010a4 <__aeabi_fcmpeq>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	f000 8098 	beq.w	8009baa <__kernel_rem_pio2f+0x352>
 8009a7a:	f108 34ff 	add.w	r4, r8, #4294967295
 8009a7e:	4623      	mov	r3, r4
 8009a80:	2200      	movs	r2, #0
 8009a82:	9901      	ldr	r1, [sp, #4]
 8009a84:	428b      	cmp	r3, r1
 8009a86:	da4c      	bge.n	8009b22 <__kernel_rem_pio2f+0x2ca>
 8009a88:	2a00      	cmp	r2, #0
 8009a8a:	d067      	beq.n	8009b5c <__kernel_rem_pio2f+0x304>
 8009a8c:	ab0a      	add	r3, sp, #40	; 0x28
 8009a8e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009a92:	3f08      	subs	r7, #8
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f000 8086 	beq.w	8009ba6 <__kernel_rem_pio2f+0x34e>
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009aa0:	f000 f98e 	bl	8009dc0 <scalbnf>
 8009aa4:	46a2      	mov	sl, r4
 8009aa6:	4681      	mov	r9, r0
 8009aa8:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8009aac:	af46      	add	r7, sp, #280	; 0x118
 8009aae:	f1ba 0f00 	cmp.w	sl, #0
 8009ab2:	f280 80af 	bge.w	8009c14 <__kernel_rem_pio2f+0x3bc>
 8009ab6:	4627      	mov	r7, r4
 8009ab8:	2200      	movs	r2, #0
 8009aba:	2f00      	cmp	r7, #0
 8009abc:	f2c0 80d9 	blt.w	8009c72 <__kernel_rem_pio2f+0x41a>
 8009ac0:	a946      	add	r1, sp, #280	; 0x118
 8009ac2:	4690      	mov	r8, r2
 8009ac4:	f04f 0a00 	mov.w	sl, #0
 8009ac8:	4b23      	ldr	r3, [pc, #140]	; (8009b58 <__kernel_rem_pio2f+0x300>)
 8009aca:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8009ace:	eba4 0907 	sub.w	r9, r4, r7
 8009ad2:	e0c2      	b.n	8009c5a <__kernel_rem_pio2f+0x402>
 8009ad4:	2502      	movs	r5, #2
 8009ad6:	e749      	b.n	800996c <__kernel_rem_pio2f+0x114>
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	f1ba 0f00 	cmp.w	sl, #0
 8009ade:	d108      	bne.n	8009af2 <__kernel_rem_pio2f+0x29a>
 8009ae0:	b11b      	cbz	r3, 8009aea <__kernel_rem_pio2f+0x292>
 8009ae2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009ae6:	6023      	str	r3, [r4, #0]
 8009ae8:	2301      	movs	r3, #1
 8009aea:	469a      	mov	sl, r3
 8009aec:	3201      	adds	r2, #1
 8009aee:	3404      	adds	r4, #4
 8009af0:	e73f      	b.n	8009972 <__kernel_rem_pio2f+0x11a>
 8009af2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8009af6:	6023      	str	r3, [r4, #0]
 8009af8:	4653      	mov	r3, sl
 8009afa:	e7f6      	b.n	8009aea <__kernel_rem_pio2f+0x292>
 8009afc:	f108 32ff 	add.w	r2, r8, #4294967295
 8009b00:	ab0a      	add	r3, sp, #40	; 0x28
 8009b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b0a:	a90a      	add	r1, sp, #40	; 0x28
 8009b0c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009b10:	e73a      	b.n	8009988 <__kernel_rem_pio2f+0x130>
 8009b12:	f108 32ff 	add.w	r2, r8, #4294967295
 8009b16:	ab0a      	add	r3, sp, #40	; 0x28
 8009b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b20:	e7f3      	b.n	8009b0a <__kernel_rem_pio2f+0x2b2>
 8009b22:	a90a      	add	r1, sp, #40	; 0x28
 8009b24:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	e7a9      	b.n	8009a82 <__kernel_rem_pio2f+0x22a>
 8009b2e:	3401      	adds	r4, #1
 8009b30:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009b34:	2a00      	cmp	r2, #0
 8009b36:	d0fa      	beq.n	8009b2e <__kernel_rem_pio2f+0x2d6>
 8009b38:	9b04      	ldr	r3, [sp, #16]
 8009b3a:	aa1e      	add	r2, sp, #120	; 0x78
 8009b3c:	4443      	add	r3, r8
 8009b3e:	f108 0601 	add.w	r6, r8, #1
 8009b42:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8009b46:	4444      	add	r4, r8
 8009b48:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8009b4c:	42b4      	cmp	r4, r6
 8009b4e:	da08      	bge.n	8009b62 <__kernel_rem_pio2f+0x30a>
 8009b50:	46a0      	mov	r8, r4
 8009b52:	e6c6      	b.n	80098e2 <__kernel_rem_pio2f+0x8a>
 8009b54:	0800aec8 	.word	0x0800aec8
 8009b58:	0800ae9c 	.word	0x0800ae9c
 8009b5c:	2401      	movs	r4, #1
 8009b5e:	9b08      	ldr	r3, [sp, #32]
 8009b60:	e7e6      	b.n	8009b30 <__kernel_rem_pio2f+0x2d8>
 8009b62:	9b07      	ldr	r3, [sp, #28]
 8009b64:	46ab      	mov	fp, r5
 8009b66:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009b6a:	f7f7 f8b3 	bl	8000cd4 <__aeabi_i2f>
 8009b6e:	f04f 0a00 	mov.w	sl, #0
 8009b72:	f04f 0800 	mov.w	r8, #0
 8009b76:	6028      	str	r0, [r5, #0]
 8009b78:	9b03      	ldr	r3, [sp, #12]
 8009b7a:	459a      	cmp	sl, r3
 8009b7c:	dd04      	ble.n	8009b88 <__kernel_rem_pio2f+0x330>
 8009b7e:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 8009b82:	3504      	adds	r5, #4
 8009b84:	3601      	adds	r6, #1
 8009b86:	e7e1      	b.n	8009b4c <__kernel_rem_pio2f+0x2f4>
 8009b88:	9b05      	ldr	r3, [sp, #20]
 8009b8a:	f85b 0904 	ldr.w	r0, [fp], #-4
 8009b8e:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8009b92:	f7f7 f8f3 	bl	8000d7c <__aeabi_fmul>
 8009b96:	4601      	mov	r1, r0
 8009b98:	4640      	mov	r0, r8
 8009b9a:	f7f6 ffe7 	bl	8000b6c <__addsf3>
 8009b9e:	f10a 0a01 	add.w	sl, sl, #1
 8009ba2:	4680      	mov	r8, r0
 8009ba4:	e7e8      	b.n	8009b78 <__kernel_rem_pio2f+0x320>
 8009ba6:	3c01      	subs	r4, #1
 8009ba8:	e770      	b.n	8009a8c <__kernel_rem_pio2f+0x234>
 8009baa:	9b06      	ldr	r3, [sp, #24]
 8009bac:	9a02      	ldr	r2, [sp, #8]
 8009bae:	4648      	mov	r0, r9
 8009bb0:	1a99      	subs	r1, r3, r2
 8009bb2:	f000 f905 	bl	8009dc0 <scalbnf>
 8009bb6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009bba:	4604      	mov	r4, r0
 8009bbc:	f7f7 fa90 	bl	80010e0 <__aeabi_fcmpge>
 8009bc0:	b300      	cbz	r0, 8009c04 <__kernel_rem_pio2f+0x3ac>
 8009bc2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f7f7 f8d8 	bl	8000d7c <__aeabi_fmul>
 8009bcc:	f7f7 fab2 	bl	8001134 <__aeabi_f2iz>
 8009bd0:	f7f7 f880 	bl	8000cd4 <__aeabi_i2f>
 8009bd4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009bd8:	4681      	mov	r9, r0
 8009bda:	f7f7 f8cf 	bl	8000d7c <__aeabi_fmul>
 8009bde:	4601      	mov	r1, r0
 8009be0:	4620      	mov	r0, r4
 8009be2:	f7f6 ffc1 	bl	8000b68 <__aeabi_fsub>
 8009be6:	f7f7 faa5 	bl	8001134 <__aeabi_f2iz>
 8009bea:	ab0a      	add	r3, sp, #40	; 0x28
 8009bec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009bf0:	4648      	mov	r0, r9
 8009bf2:	f7f7 fa9f 	bl	8001134 <__aeabi_f2iz>
 8009bf6:	f108 0401 	add.w	r4, r8, #1
 8009bfa:	ab0a      	add	r3, sp, #40	; 0x28
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009c02:	e74a      	b.n	8009a9a <__kernel_rem_pio2f+0x242>
 8009c04:	4620      	mov	r0, r4
 8009c06:	f7f7 fa95 	bl	8001134 <__aeabi_f2iz>
 8009c0a:	ab0a      	add	r3, sp, #40	; 0x28
 8009c0c:	4644      	mov	r4, r8
 8009c0e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009c12:	e742      	b.n	8009a9a <__kernel_rem_pio2f+0x242>
 8009c14:	ab0a      	add	r3, sp, #40	; 0x28
 8009c16:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009c1a:	f7f7 f85b 	bl	8000cd4 <__aeabi_i2f>
 8009c1e:	4649      	mov	r1, r9
 8009c20:	f7f7 f8ac 	bl	8000d7c <__aeabi_fmul>
 8009c24:	4641      	mov	r1, r8
 8009c26:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8009c2a:	4648      	mov	r0, r9
 8009c2c:	f7f7 f8a6 	bl	8000d7c <__aeabi_fmul>
 8009c30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c34:	4681      	mov	r9, r0
 8009c36:	e73a      	b.n	8009aae <__kernel_rem_pio2f+0x256>
 8009c38:	f853 0b04 	ldr.w	r0, [r3], #4
 8009c3c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8009c40:	9203      	str	r2, [sp, #12]
 8009c42:	9302      	str	r3, [sp, #8]
 8009c44:	f7f7 f89a 	bl	8000d7c <__aeabi_fmul>
 8009c48:	4601      	mov	r1, r0
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	f7f6 ff8e 	bl	8000b6c <__addsf3>
 8009c50:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009c54:	4680      	mov	r8, r0
 8009c56:	f10a 0a01 	add.w	sl, sl, #1
 8009c5a:	9901      	ldr	r1, [sp, #4]
 8009c5c:	458a      	cmp	sl, r1
 8009c5e:	dc01      	bgt.n	8009c64 <__kernel_rem_pio2f+0x40c>
 8009c60:	45ca      	cmp	sl, r9
 8009c62:	dde9      	ble.n	8009c38 <__kernel_rem_pio2f+0x3e0>
 8009c64:	ab5a      	add	r3, sp, #360	; 0x168
 8009c66:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8009c6a:	f849 8ca0 	str.w	r8, [r9, #-160]
 8009c6e:	3f01      	subs	r7, #1
 8009c70:	e723      	b.n	8009aba <__kernel_rem_pio2f+0x262>
 8009c72:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	dc07      	bgt.n	8009c88 <__kernel_rem_pio2f+0x430>
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	dc4e      	bgt.n	8009d1a <__kernel_rem_pio2f+0x4c2>
 8009c7c:	d02e      	beq.n	8009cdc <__kernel_rem_pio2f+0x484>
 8009c7e:	f006 0007 	and.w	r0, r6, #7
 8009c82:	b05b      	add	sp, #364	; 0x16c
 8009c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c88:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	d1f7      	bne.n	8009c7e <__kernel_rem_pio2f+0x426>
 8009c8e:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8009c92:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8009c96:	46b8      	mov	r8, r7
 8009c98:	46a2      	mov	sl, r4
 8009c9a:	f1ba 0f00 	cmp.w	sl, #0
 8009c9e:	dc49      	bgt.n	8009d34 <__kernel_rem_pio2f+0x4dc>
 8009ca0:	46a1      	mov	r9, r4
 8009ca2:	f1b9 0f01 	cmp.w	r9, #1
 8009ca6:	dc60      	bgt.n	8009d6a <__kernel_rem_pio2f+0x512>
 8009ca8:	2000      	movs	r0, #0
 8009caa:	2c01      	cmp	r4, #1
 8009cac:	dc76      	bgt.n	8009d9c <__kernel_rem_pio2f+0x544>
 8009cae:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8009cb0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8009cb2:	2d00      	cmp	r5, #0
 8009cb4:	d178      	bne.n	8009da8 <__kernel_rem_pio2f+0x550>
 8009cb6:	9900      	ldr	r1, [sp, #0]
 8009cb8:	600a      	str	r2, [r1, #0]
 8009cba:	460a      	mov	r2, r1
 8009cbc:	604b      	str	r3, [r1, #4]
 8009cbe:	6090      	str	r0, [r2, #8]
 8009cc0:	e7dd      	b.n	8009c7e <__kernel_rem_pio2f+0x426>
 8009cc2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8009cc6:	f7f6 ff51 	bl	8000b6c <__addsf3>
 8009cca:	3c01      	subs	r4, #1
 8009ccc:	2c00      	cmp	r4, #0
 8009cce:	daf8      	bge.n	8009cc2 <__kernel_rem_pio2f+0x46a>
 8009cd0:	b10d      	cbz	r5, 8009cd6 <__kernel_rem_pio2f+0x47e>
 8009cd2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009cd6:	9b00      	ldr	r3, [sp, #0]
 8009cd8:	6018      	str	r0, [r3, #0]
 8009cda:	e7d0      	b.n	8009c7e <__kernel_rem_pio2f+0x426>
 8009cdc:	2000      	movs	r0, #0
 8009cde:	af32      	add	r7, sp, #200	; 0xc8
 8009ce0:	e7f4      	b.n	8009ccc <__kernel_rem_pio2f+0x474>
 8009ce2:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8009ce6:	f7f6 ff41 	bl	8000b6c <__addsf3>
 8009cea:	f108 38ff 	add.w	r8, r8, #4294967295
 8009cee:	f1b8 0f00 	cmp.w	r8, #0
 8009cf2:	daf6      	bge.n	8009ce2 <__kernel_rem_pio2f+0x48a>
 8009cf4:	b1ad      	cbz	r5, 8009d22 <__kernel_rem_pio2f+0x4ca>
 8009cf6:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8009cfa:	9a00      	ldr	r2, [sp, #0]
 8009cfc:	4601      	mov	r1, r0
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8009d02:	f7f6 ff31 	bl	8000b68 <__aeabi_fsub>
 8009d06:	f04f 0801 	mov.w	r8, #1
 8009d0a:	4544      	cmp	r4, r8
 8009d0c:	da0b      	bge.n	8009d26 <__kernel_rem_pio2f+0x4ce>
 8009d0e:	b10d      	cbz	r5, 8009d14 <__kernel_rem_pio2f+0x4bc>
 8009d10:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009d14:	9b00      	ldr	r3, [sp, #0]
 8009d16:	6058      	str	r0, [r3, #4]
 8009d18:	e7b1      	b.n	8009c7e <__kernel_rem_pio2f+0x426>
 8009d1a:	46a0      	mov	r8, r4
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	af32      	add	r7, sp, #200	; 0xc8
 8009d20:	e7e5      	b.n	8009cee <__kernel_rem_pio2f+0x496>
 8009d22:	4603      	mov	r3, r0
 8009d24:	e7e9      	b.n	8009cfa <__kernel_rem_pio2f+0x4a2>
 8009d26:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8009d2a:	f7f6 ff1f 	bl	8000b6c <__addsf3>
 8009d2e:	f108 0801 	add.w	r8, r8, #1
 8009d32:	e7ea      	b.n	8009d0a <__kernel_rem_pio2f+0x4b2>
 8009d34:	f8d8 3000 	ldr.w	r3, [r8]
 8009d38:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	4610      	mov	r0, r2
 8009d40:	9302      	str	r3, [sp, #8]
 8009d42:	9201      	str	r2, [sp, #4]
 8009d44:	f7f6 ff12 	bl	8000b6c <__addsf3>
 8009d48:	9a01      	ldr	r2, [sp, #4]
 8009d4a:	4601      	mov	r1, r0
 8009d4c:	4681      	mov	r9, r0
 8009d4e:	4610      	mov	r0, r2
 8009d50:	f7f6 ff0a 	bl	8000b68 <__aeabi_fsub>
 8009d54:	9b02      	ldr	r3, [sp, #8]
 8009d56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	f7f6 ff06 	bl	8000b6c <__addsf3>
 8009d60:	f848 0904 	str.w	r0, [r8], #-4
 8009d64:	f8c8 9000 	str.w	r9, [r8]
 8009d68:	e797      	b.n	8009c9a <__kernel_rem_pio2f+0x442>
 8009d6a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8009d6e:	f8d7 a000 	ldr.w	sl, [r7]
 8009d72:	4618      	mov	r0, r3
 8009d74:	4651      	mov	r1, sl
 8009d76:	9301      	str	r3, [sp, #4]
 8009d78:	f7f6 fef8 	bl	8000b6c <__addsf3>
 8009d7c:	9b01      	ldr	r3, [sp, #4]
 8009d7e:	4601      	mov	r1, r0
 8009d80:	4680      	mov	r8, r0
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7f6 fef0 	bl	8000b68 <__aeabi_fsub>
 8009d88:	4651      	mov	r1, sl
 8009d8a:	f7f6 feef 	bl	8000b6c <__addsf3>
 8009d8e:	f847 0904 	str.w	r0, [r7], #-4
 8009d92:	f109 39ff 	add.w	r9, r9, #4294967295
 8009d96:	f8c7 8000 	str.w	r8, [r7]
 8009d9a:	e782      	b.n	8009ca2 <__kernel_rem_pio2f+0x44a>
 8009d9c:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8009da0:	f7f6 fee4 	bl	8000b6c <__addsf3>
 8009da4:	3c01      	subs	r4, #1
 8009da6:	e780      	b.n	8009caa <__kernel_rem_pio2f+0x452>
 8009da8:	9900      	ldr	r1, [sp, #0]
 8009daa:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8009dae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009db2:	600a      	str	r2, [r1, #0]
 8009db4:	604b      	str	r3, [r1, #4]
 8009db6:	460a      	mov	r2, r1
 8009db8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009dbc:	e77f      	b.n	8009cbe <__kernel_rem_pio2f+0x466>
 8009dbe:	bf00      	nop

08009dc0 <scalbnf>:
 8009dc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8009dc4:	b538      	push	{r3, r4, r5, lr}
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	460d      	mov	r5, r1
 8009dca:	4604      	mov	r4, r0
 8009dcc:	d02e      	beq.n	8009e2c <scalbnf+0x6c>
 8009dce:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009dd2:	d304      	bcc.n	8009dde <scalbnf+0x1e>
 8009dd4:	4601      	mov	r1, r0
 8009dd6:	f7f6 fec9 	bl	8000b6c <__addsf3>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	e026      	b.n	8009e2c <scalbnf+0x6c>
 8009dde:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8009de2:	d118      	bne.n	8009e16 <scalbnf+0x56>
 8009de4:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8009de8:	f7f6 ffc8 	bl	8000d7c <__aeabi_fmul>
 8009dec:	4a17      	ldr	r2, [pc, #92]	; (8009e4c <scalbnf+0x8c>)
 8009dee:	4603      	mov	r3, r0
 8009df0:	4295      	cmp	r5, r2
 8009df2:	db0c      	blt.n	8009e0e <scalbnf+0x4e>
 8009df4:	4604      	mov	r4, r0
 8009df6:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009dfa:	3a19      	subs	r2, #25
 8009dfc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8009e00:	428d      	cmp	r5, r1
 8009e02:	dd0a      	ble.n	8009e1a <scalbnf+0x5a>
 8009e04:	4912      	ldr	r1, [pc, #72]	; (8009e50 <scalbnf+0x90>)
 8009e06:	4618      	mov	r0, r3
 8009e08:	f361 001e 	bfi	r0, r1, #0, #31
 8009e0c:	e000      	b.n	8009e10 <scalbnf+0x50>
 8009e0e:	4911      	ldr	r1, [pc, #68]	; (8009e54 <scalbnf+0x94>)
 8009e10:	f7f6 ffb4 	bl	8000d7c <__aeabi_fmul>
 8009e14:	e7e1      	b.n	8009dda <scalbnf+0x1a>
 8009e16:	0dd2      	lsrs	r2, r2, #23
 8009e18:	e7f0      	b.n	8009dfc <scalbnf+0x3c>
 8009e1a:	1951      	adds	r1, r2, r5
 8009e1c:	29fe      	cmp	r1, #254	; 0xfe
 8009e1e:	dcf1      	bgt.n	8009e04 <scalbnf+0x44>
 8009e20:	2900      	cmp	r1, #0
 8009e22:	dd05      	ble.n	8009e30 <scalbnf+0x70>
 8009e24:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8009e28:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	f111 0f16 	cmn.w	r1, #22
 8009e34:	da01      	bge.n	8009e3a <scalbnf+0x7a>
 8009e36:	4907      	ldr	r1, [pc, #28]	; (8009e54 <scalbnf+0x94>)
 8009e38:	e7e5      	b.n	8009e06 <scalbnf+0x46>
 8009e3a:	f101 0019 	add.w	r0, r1, #25
 8009e3e:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8009e42:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8009e46:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8009e4a:	e7e1      	b.n	8009e10 <scalbnf+0x50>
 8009e4c:	ffff3cb0 	.word	0xffff3cb0
 8009e50:	7149f2ca 	.word	0x7149f2ca
 8009e54:	0da24260 	.word	0x0da24260

08009e58 <floorf>:
 8009e58:	b570      	push	{r4, r5, r6, lr}
 8009e5a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8009e5e:	3d7f      	subs	r5, #127	; 0x7f
 8009e60:	2d16      	cmp	r5, #22
 8009e62:	4601      	mov	r1, r0
 8009e64:	4604      	mov	r4, r0
 8009e66:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009e6a:	dc25      	bgt.n	8009eb8 <floorf+0x60>
 8009e6c:	2d00      	cmp	r5, #0
 8009e6e:	da0e      	bge.n	8009e8e <floorf+0x36>
 8009e70:	4916      	ldr	r1, [pc, #88]	; (8009ecc <floorf+0x74>)
 8009e72:	f7f6 fe7b 	bl	8000b6c <__addsf3>
 8009e76:	2100      	movs	r1, #0
 8009e78:	f7f7 f93c 	bl	80010f4 <__aeabi_fcmpgt>
 8009e7c:	b128      	cbz	r0, 8009e8a <floorf+0x32>
 8009e7e:	2c00      	cmp	r4, #0
 8009e80:	da22      	bge.n	8009ec8 <floorf+0x70>
 8009e82:	4b13      	ldr	r3, [pc, #76]	; (8009ed0 <floorf+0x78>)
 8009e84:	2e00      	cmp	r6, #0
 8009e86:	bf18      	it	ne
 8009e88:	461c      	movne	r4, r3
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	e01a      	b.n	8009ec4 <floorf+0x6c>
 8009e8e:	4e11      	ldr	r6, [pc, #68]	; (8009ed4 <floorf+0x7c>)
 8009e90:	412e      	asrs	r6, r5
 8009e92:	4230      	tst	r0, r6
 8009e94:	d016      	beq.n	8009ec4 <floorf+0x6c>
 8009e96:	490d      	ldr	r1, [pc, #52]	; (8009ecc <floorf+0x74>)
 8009e98:	f7f6 fe68 	bl	8000b6c <__addsf3>
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	f7f7 f929 	bl	80010f4 <__aeabi_fcmpgt>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d0f1      	beq.n	8009e8a <floorf+0x32>
 8009ea6:	2c00      	cmp	r4, #0
 8009ea8:	bfbe      	ittt	lt
 8009eaa:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8009eae:	412b      	asrlt	r3, r5
 8009eb0:	18e4      	addlt	r4, r4, r3
 8009eb2:	ea24 0406 	bic.w	r4, r4, r6
 8009eb6:	e7e8      	b.n	8009e8a <floorf+0x32>
 8009eb8:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009ebc:	d302      	bcc.n	8009ec4 <floorf+0x6c>
 8009ebe:	f7f6 fe55 	bl	8000b6c <__addsf3>
 8009ec2:	4601      	mov	r1, r0
 8009ec4:	4608      	mov	r0, r1
 8009ec6:	bd70      	pop	{r4, r5, r6, pc}
 8009ec8:	2400      	movs	r4, #0
 8009eca:	e7de      	b.n	8009e8a <floorf+0x32>
 8009ecc:	7149f2ca 	.word	0x7149f2ca
 8009ed0:	bf800000 	.word	0xbf800000
 8009ed4:	007fffff 	.word	0x007fffff

08009ed8 <_init>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	bf00      	nop
 8009edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ede:	bc08      	pop	{r3}
 8009ee0:	469e      	mov	lr, r3
 8009ee2:	4770      	bx	lr

08009ee4 <_fini>:
 8009ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee6:	bf00      	nop
 8009ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eea:	bc08      	pop	{r3}
 8009eec:	469e      	mov	lr, r3
 8009eee:	4770      	bx	lr
